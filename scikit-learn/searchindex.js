Search.setIndex({"alltitles": {"(Generalized) linear models": [[212, "generalized-linear-models"]], "1-way partial dependence with different models": [[188, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[103, "newsgroups-dataset"]], "2D interaction plots": [[188, "d-interaction-plots"]], "3D representation": [[188, "d-representation"]], "A constant prediction baseline": [[212, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[92, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[82, null]], "A demo of the Spectral Biclustering algorithm": [[59, null]], "A demo of the Spectral Co-Clustering algorithm": [[60, null]], "A demo of the mean-shift clustering algorithm": [[97, null]], "A more flexible plotting API": [[322, "a-more-flexible-plotting-api"]], "A note on shuffling": [[412, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[53, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[382, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[375, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[1001, "aic-and-bic-criteria"]], "API Interface": [[399, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1042, "api-changes"]], "API changes summary": [[1035, "api-changes-summary"], [1035, "id4"], [1035, "id7"], [1035, "id10"], [1036, "api-changes-summary"], [1037, "api-changes-summary"], [1038, "api-changes-summary"], [1039, "api-changes-summary"], [1040, "api-changes-summary"], [1041, "api-changes-summary"], [1041, "id6"], [1042, "api-changes-summary"]], "API compatibility checkers": [[42, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[378, "apis-of-scikit-learn-objects"]], "ARDRegression": [[648, null]], "ARFF parser": [[370, "arff-parser"]], "AWeber": [[1029, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[177, null]], "Ablation study": [[249, "ablation-study"]], "About the project": [[388, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[409, "access-pipeline-steps"]], "Access to nested parameters": [[409, "access-to-nested-parameters"]], "Accuracy of the Model": [[189, "accuracy-of-the-model"]], "Accuracy score": [[1005, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[355, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[415, "adaboost"]], "AdaBoostClassifier": [[555, null]], "AdaBoostRegressor": [[556, null]], "Add support for monotonic constraints in tree-based models": [[326, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[408, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[997, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[642, null]], "Addressing the problem with a business metric": [[264, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[73, null]], "Advanced Plotting With Partial Dependence": [[250, null]], "Advantages:": [[408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null]], "Affinity Propagation": [[408, "affinity-propagation"]], "AffinityPropagation": [[441, null]], "Agglomerative clustering with and without structure": [[75, null]], "Agglomerative clustering with different metrics": [[76, null]], "AgglomerativeClustering": [[442, null]], "Aggressive elimination of candidates": [[994, "aggressive-elimination-of-candidates"]], "Algorithms": [[1009, "algorithms"]], "Alpine Linux": [[394, "alpine-linux"]], "Alternatives to brute force parameter search": [[994, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[249, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[133, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[93, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[394, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[135, "analysis"]], "Analysis of a bag-of-words document classifier": [[351, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[147, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[188, "analysis-of-the-plots"]], "Analysis of the results": [[65, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[994, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[53, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[416, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[290, null]], "Arch Linux": [[394, "arch-linux"]], "Architectural / general goals": [[1025, "architectural-general-goals"]], "Array API support (experimental)": [[404, null]], "Artwork": [[0, "artwork"]], "Attributes": [[390, "attributes"]], "Authors": [[1035, "authors"], [1035, "id20"]], "Automated Contributions Policy": [[376, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[198, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[1001, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[389, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[42, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1032, "available-plotting-utilities"]], "BIRCH": [[408, "birch"]], "BNP Paribas Cardif": [[1029, "id29"]], "Bagging meta-estimator": [[415, "bagging-meta-estimator"]], "BaggingClassifier": [[557, null]], "BaggingRegressor": [[558, null]], "Balance model complexity and cross-validated score": [[269, null]], "Balanced accuracy score": [[1005, "balanced-accuracy-score"]], "Ball Tree": [[1008, "ball-tree"]], "BallTree": [[848, null]], "BaseEstimator": [[422, null]], "Basic kernels": [[418, "basic-kernels"]], "Basic shrinkage": [[410, "basic-shrinkage"]], "Bayesian Regression": [[1001, "bayesian-regression"]], "Bayesian Ridge Regression": [[1001, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[194, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[26, "bayesian-regressors"]], "BayesianGaussianMixture": [[801, null]], "BayesianRidge": [[649, null]], "Benchmark and plot helper functions": [[50, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[50, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[47, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[50, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[50, "benchmark-throughput"]], "Benchmarking classifiers": [[351, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1007, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1010, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[843, null]], "BernoulliRBM": [[864, null]], "Bestofmedia Group": [[1029, "id13"]], "BiclusterMixin": [[423, null]], "Biclustering": [[57, null], [184, "biclustering"], [372, "biclustering"], [405, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[58, null]], "Biclustering evaluation": [[405, "biclustering-evaluation"]], "Biclustering metrics": [[28, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[188, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[871, null]], "Binary Case": [[1001, "binary-case"]], "Binary case": [[1005, "binary-case"]], "Binary classification": [[1005, "binary-classification"]], "Birch": [[443, null]], "Birchbox": [[1029, "id12"]], "Bisecting K-Means": [[408, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[79, null]], "BisectingKMeans": [[444, null]], "BisectingKMeans: divide and cluster": [[323, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[122, null]], "Boil down your script to something as small as possible": [[381, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[160, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1029, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[373, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1005, "brier-score-loss"]], "Brute Force": [[1008, "brute-force"]], "Bug Tracker": [[1028, "bug-tracker"]], "Bug fixes": [[1038, "bug-fixes"], [1038, "id1"], [1038, "id3"], [1039, "bug-fixes"], [1039, "id3"], [1040, "bug-fixes"], [1040, "id3"], [1041, "bug-fixes"], [1041, "id5"], [1042, "bug-fixes"], [1042, "id4"]], "Bug triaging and issue curation": [[375, null]], "Build a pipeline": [[409, "build-a-pipeline"]], "Build dependencies": [[374, "build-dependencies"]], "Build lock files": [[376, "build-lock-files"]], "Build the dataset": [[176, "build-the-dataset"]], "Building a specific version from a tag": [[374, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[384, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[374, "building-from-source"]], "Building the documentation": [[376, "building-the-documentation"]], "Bulk versus Atomic mode": [[363, "bulk-versus-atomic-mode"]], "Bunch": [[923, null]], "CCA": [[483, null]], "CCA (PLS mode B with symmetric deflation)": [[116, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[359, "cv-splitters"], [359, "id3"]], "Caching nearest neighbors": [[292, null]], "Caching transformers within a Pipeline": [[105, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[409, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[438, null]], "Calibrating a classifier": [[406, "calibrating-a-classifier"]], "Calibration": [[61, null], [184, "calibration"]], "Calibration curves": [[63, "calibration-curves"], [65, "calibration-curves"], [406, "calibration-curves"]], "Calibration of the confidence interval": [[147, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[439, null]], "California Housing dataset": [[371, "california-housing-dataset"]], "Calinski-Harabasz Index": [[408, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[116, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[411, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[249, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[144, null]], "Categorical Features Support": [[415, "categorical-features-support"]], "Categorical Naive Bayes": [[1007, "categorical-naive-bayes"]], "CategoricalNB": [[844, null]], "Centering kernel matrices": [[1015, "centering-kernel-matrices"]], "Chain of binary classifiers": [[289, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[376, "change-the-default-value-of-a-parameter"]], "Change.org": [[1029, "id14"]], "Changed displays": [[1051, "changed-displays"]], "Changed models": [[1042, "changed-models"], [1043, "changed-models"], [1043, "id9"], [1043, "id22"], [1044, "changed-models"], [1044, "id6"], [1045, "changed-models"], [1046, "changed-models"], [1046, "id3"], [1047, "changed-models"], [1048, "changed-models"], [1049, "changed-models"], [1049, "id6"], [1050, "changed-models"], [1050, "id7"], [1051, "changed-models"], [1051, "id4"], [1052, "changed-models"], [1052, "id1"], [1053, "changed-models"]], "Changelog": [[1035, "changelog"], [1035, "id1"], [1035, "id3"], [1035, "id6"], [1035, "id9"], [1035, "id12"], [1035, "id14"], [1035, "id16"], [1035, "id18"], [1035, "id19"], [1036, "changelog"], [1036, "id2"], [1037, "changelog"], [1038, "changelog"], [1039, "changelog"], [1039, "id2"], [1040, "changelog"], [1040, "id2"], [1041, "changelog"], [1041, "id1"], [1041, "id3"], [1042, "changelog"], [1042, "id2"], [1043, "changelog"], [1043, "id1"], [1043, "id5"], [1043, "id10"], [1043, "id23"], [1044, "changelog"], [1044, "id1"], [1044, "id2"], [1044, "id7"], [1045, "changelog"], [1045, "id1"], [1045, "id4"], [1046, "changelog"], [1046, "id1"], [1046, "id4"], [1047, "changelog"], [1047, "id1"], [1047, "id4"], [1048, "changelog"], [1048, "id6"], [1049, "changelog"], [1049, "id1"], [1049, "id7"], [1050, "changelog"], [1050, "id1"], [1050, "id9"], [1051, "changelog"], [1051, "id1"], [1051, "id6"], [1052, "changelog"], [1052, "id3"], [1053, "changelog"], [1053, "id2"], [1053, "id6"]], "Changes impacting all modules": [[1050, "changes-impacting-all-modules"], [1050, "id8"], [1051, "changes-impacting-all-modules"], [1051, "id5"], [1052, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1052, "changes-impacting-many-modules"], [1053, "changes-impacting-many-modules"], [1053, "id1"], [1053, "id5"]], "Changes to estimator checks": [[1043, "changes-to-estimator-checks"], [1044, "changes-to-estimator-checks"], [1045, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[384, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[319, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[187, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[1003, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[413, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[47, "choose-parameters"]], "Choosing the right estimator": [[396, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[390, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[273, null]], "Class likelihood ratios": [[1005, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[424, null]], "Classical linear regressors": [[26, "classical-linear-regressors"]], "Classification": [[66, null], [69, "classification"], [179, "classification"], [184, "classification"], [1001, "classification"], [1008, "id4"], [1009, "classification"], [1019, "classification"], [1020, "classification"], [1021, "classification"]], "Classification and ROC analysis": [[280, "classification-and-roc-analysis"]], "Classification criteria": [[1021, "classification-criteria"]], "Classification metrics": [[28, "classification-metrics"], [1005, "classification-metrics"]], "Classification of text documents using sparse features": [[351, null]], "Classification pipeline": [[103, "classification-pipeline"]], "Classification report": [[1005, "classification-report"]], "Classifier Training": [[205, "classifier-training"]], "Classifier comparison": [[68, null]], "ClassifierChain": [[839, null], [1006, "classifierchain"]], "ClassifierMixin": [[425, null]], "ClassifierTags": [[924, null]], "Clear definition of the public API": [[1045, "clear-definition-of-the-public-api"]], "Cloning": [[378, "cloning"]], "Closing issues: a tough call": [[375, null]], "Cluster centers - MiniBatchKMeans": [[121, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[426, null]], "Clustering": [[72, null], [184, "clustering"], [408, null]], "Clustering evaluation summary": [[352, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[413, null]], "Clustering metrics": [[28, "module-sklearn.metrics.cluster"], [1005, "clustering-metrics"]], "Clustering performance evaluation": [[408, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[352, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[352, null]], "Clustering using affinity propagation": [[52, "clustering-using-affinity-propagation"]], "Code Contributors": [[1039, "code-contributors"], [1040, "code-contributors"], [1041, "code-contributors"], [1041, "id7"]], "Code Review Guidelines": [[376, "code-review-guidelines"]], "Code and Documentation Contributors": [[1042, "code-and-documentation-contributors"], [1042, "id10"], [1043, "code-and-documentation-contributors"], [1043, "id8"], [1043, "id21"], [1043, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[378, "coding-guidelines"]], "Coefficients comparison": [[283, "coefficients-comparison"]], "Cohen\u2019s kappa": [[1005, "cohen-s-kappa"]], "Column Transformer with Heterogeneous Data Sources": [[103, null]], "Column Transformer with Mixed Types": [[104, null]], "ColumnTransformer": [[465, null]], "ColumnTransformer for heterogeneous data": [[409, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[327, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[155, null]], "Combining the display objects into a single plot": [[240, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[376, "commit-message-markers"]], "Common Vectorizer usage": [[416, "common-vectorizer-usage"]], "Common cases: predefined values": [[1005, "common-cases-predefined-values"]], "Common estimator checks": [[404, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[359, null]], "Common pitfalls and subtleties": [[359, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[187, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[241, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[78, null]], "Compare Stochastic learning strategies for MLPClassifier": [[306, null]], "Compare cross decomposition methods": [[116, null]], "Compare different approaches to setting the regularization parameter": [[110, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[64, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[310, null]], "Compare times of SVR and Kernel Ridge Regression": [[245, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[165, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[194, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[298, null]], "Comparing QuantileRegressor and LinearRegression": [[214, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[141, null]], "Comparing Target Encoder with Other Encoders": [[316, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[239, null]], "Comparing different clustering algorithms on toy datasets": [[80, null]], "Comparing different hierarchical linkage methods on toy datasets": [[96, null]], "Comparing random forests and the multi-output meta estimator": [[154, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[278, null]], "Comparing the results": [[192, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[199, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[199, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[270, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[270, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[219, null]], "Comparison between grid search and successive halving": [[281, null]], "Comparison of Calibration of Classifiers": [[65, null]], "Comparison of F-test and mutual information": [[164, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[129, null]], "Comparison of LDA and QDA": [[71, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[232, null]], "Comparison of kernel ridge and Gaussian process regression": [[171, null]], "Comparison of kernel ridge regression and SVR": [[245, null]], "Comparison of results": [[112, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[98, null]], "Comparison with special purpose text vectorizers": [[353, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[1001, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1007, "complement-naive-bayes"]], "ComplementNB": [[845, null]], "Complexity": [[1008, "complexity"], [1009, "complexity"], [1019, "complexity"], [1020, "complexity"], [1021, "complexity"]], "Complexity analysis": [[272, "complexity-analysis"]], "Composite estimators and parameter spaces": [[994, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[616, null]], "Compression via vector quantization": [[87, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[54, null]], "Computation methods": [[1012, "computation-methods"]], "Computation times": [[1026, null]], "Computational Performance": [[363, null]], "Compute Affinity Propagation": [[74, "compute-affinity-propagation"]], "Compute DBSCAN": [[83, "compute-dbscan"]], "Compute clustering": [[82, "compute-clustering"], [101, "compute-clustering"], [101, "id1"]], "Compute clustering with KMeans": [[98, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[97, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[98, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[217, "compute-paths"]], "Compute regularization path": [[206, "compute-regularization-path"]], "Compute score and computation times": [[141, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[110, "compute-the-likelihood-on-test-data"]], "Computing Centrality scores": [[56, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[56, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[412, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[56, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[362, null]], "Concatenating multiple feature extraction methods": [[107, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[255, null]], "Concluding remarks": [[44, "concluding-remarks"], [236, "concluding-remarks"]], "Conclusion": [[47, "conclusion"], [53, "conclusion"], [202, "conclusion"], [209, "conclusion"], [287, "conclusion"], [293, "conclusion"], [317, "conclusion"], [344, "conclusion"]], "Conclusions": [[198, "conclusions"]], "Configuration switches": [[364, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[363, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[263, null], [1005, "confusion-matrix"]], "ConfusionMatrixDisplay": [[701, null]], "Connectivity graph of an image": [[416, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[264, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[617, null]], "Construct the kernel-based regression models": [[245, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[246, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[246, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[408, "contingency-matrix"]], "Continuous Integration (CI)": [[376, "continuous-integration-ci"]], "Contributing": [[376, null], [388, "contributing"]], "Contributing code": [[376, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[391, "contributors"]], "Controlling randomness": [[359, "controlling-randomness"]], "Controlling the tree size": [[415, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[135, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[573, null]], "Core Contributors": [[391, "core-contributors"]], "Cosine similarity": [[1003, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[264, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[264, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[591, null]], "Covariance estimation": [[109, null], [184, "covariance-estimation"], [410, null]], "Coverage error": [[1005, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[381, null]], "Create ConfusionMatrixDisplay": [[240, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[240, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[240, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[317, "create-synthetic-dataset"]], "Create a random 1D dataset": [[357, "create-a-random-1d-dataset"]], "Create a random dataset": [[357, "create-a-random-dataset"]], "Create multi-label data, fit, and predict": [[277, "create-multi-label-data-fit-and-predict"]], "Create the data": [[128, "create-the-data"]], "Create the pipeline": [[343, "create-the-pipeline"]], "Creating a dataset": [[344, "creating-a-dataset"]], "Creating a non-noisy data set": [[216, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[135, "creating-the-dataset"]], "Creating transformers": [[103, "creating-transformers"]], "Cross decomposition": [[115, null], [184, "cross-decomposition"], [411, null]], "Cross validation and model selection": [[412, "cross-validation-and-model-selection"]], "Cross validation iterators": [[412, "cross-validation-iterators"]], "Cross validation of time series data": [[412, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[412, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[412, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[412, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[273, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[160, null]], "Cross-validation: evaluating estimator performance": [[412, null]], "Curve Fitting with Bayesian Ridge Regression": [[195, null]], "Custom Inspection Points": [[188, "custom-inspection-points"]], "Custom Kernels": [[1020, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[327, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[268, null]], "Custom transformers": [[1015, "custom-transformers"]], "Customizing the vectorizer classes": [[416, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[377, null]], "DBSCAN": [[408, "dbscan"], [445, null]], "DO NOT report your data unless it is extremely necessary": [[381, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[64, "data"]], "Data Loading and Feature Engineering": [[189, "data-loading-and-feature-engineering"]], "Data Loading and Preparation": [[209, "data-loading-and-preparation"]], "Data Preparation": [[145, "data-preparation"]], "Data Publica": [[1029, "id21"]], "Data and sample properties": [[390, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[44, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[71, "data-generation"], [83, "data-generation"], [91, "data-generation"], [151, "data-generation"], [168, "data-generation"], [177, "data-generation"], [260, "data-generation"], [329, "data-generation"], [347, "data-generation"]], "Data generation and model fitting": [[142, "data-generation-and-model-fitting"]], "Data leakage": [[359, "data-leakage"]], "Data leakage during pre-processing": [[359, "data-leakage-during-pre-processing"]], "Data loading": [[271, "data-loading"]], "Data preprocessing": [[148, "data-preprocessing"]], "DataConversionWarning": [[574, null]], "DataDimensionalityWarning": [[575, null]], "DataFrame Support": [[1052, "dataframe-support"]], "DataRobot": [[1029, "id18"]], "Dataiku": [[1029, "id25"]], "Dataset": [[63, "dataset"], [202, "dataset"], [276, "dataset"]], "Dataset Generation": [[205, "dataset-generation"]], "Dataset Versions": [[370, "dataset-versions"]], "Dataset and Gaussian process generation": [[180, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[277, "dataset-and-model"]], "Dataset based latent variables model": [[116, "dataset-based-latent-variables-model"]], "Dataset examples": [[118, null], [184, "dataset-examples"]], "Dataset generation": [[178, "dataset-generation"], [214, "dataset-generation"]], "Dataset loading utilities": [[369, null], [381, "dataset-loading-utilities"]], "Dataset preparation": [[121, "dataset-preparation"], [232, "dataset-preparation"]], "Dataset preprocessing and model training": [[249, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[368, null]], "Datasets in svmlight / libsvm format": [[370, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[408, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[42, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[394, "debian-ubuntu"]], "Debugging CI issues": [[384, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[384, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Boundaries Visualization": [[205, "decision-boundaries-visualization"]], "Decision Boundaries of Multinomial and One-vs-Rest Logistic Regression": [[205, null]], "Decision Making Process": [[391, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[244, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[357, null]], "Decision Tree Regression with AdaBoost": [[136, null]], "Decision Tree Regression with Multi-Output Targets": [[357, "decision-tree-regression-with-multi-output-targets"]], "Decision Tree on a 1D Regression Task": [[357, "decision-tree-on-a-1d-regression-task"]], "Decision Trees": [[184, "decision-trees"], [354, null], [1021, null]], "Decision boundary": [[293, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[334, null]], "Decision path": [[358, "decision-path"]], "DecisionBoundaryDisplay": [[635, null]], "DecisionTreeClassifier": [[916, null]], "DecisionTreeRegressor": [[917, null]], "Decoding text files": [[416, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[413, null]], "Decomposition": [[120, null], [121, "decomposition"], [184, "decomposition"]], "Decomposition: Dictionary learning": [[121, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[265, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[232, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[92, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[268, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[353, "define-preprocessing-functions"]], "Define structure of the data": [[82, "define-structure-of-the-data"]], "Define the classifiers": [[267, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[73, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[1005, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[83, null]], "Demo of HDBSCAN clustering algorithm": [[89, null]], "Demo of OPTICS clustering algorithm": [[99, null]], "Demo of affinity propagation clustering algorithm": [[74, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[313, null]], "Demonstration of k-means assumptions": [[91, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[274, null]], "Density Estimation": [[414, null]], "Density Estimation for a Gaussian mixture": [[259, null]], "Density Estimation: Histograms": [[414, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1020, "density-estimation-novelty-detection"]], "DensityMixin": [[427, null]], "Dependencies": [[374, "dependencies"]], "Deprecation": [[376, "deprecation"]], "Deprecation / Default Value Change": [[246, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1045, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[186, "description-of-the-simulated-data"]], "Design the proper kernel": [[176, "design-the-proper-kernel"]], "DetCurveDisplay": [[702, null]], "Detection error tradeoff (DET)": [[1005, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[267, null]], "Developer API for HTML representation": [[378, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[378, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[378, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[384, null]], "Developer\u2019s Guide": [[379, null]], "Developing Estimators": [[132, null], [184, "developing-estimators"]], "Developing scikit-learn estimators": [[378, null]], "Developing with the Plotting API": [[383, null]], "Diabetes dataset": [[373, "diabetes-dataset"]], "DictVectorizer": [[353, "dictvectorizer"], [584, null]], "Dictionary Learning": [[413, "dictionary-learning"]], "Dictionary learning": [[121, "dictionary-learning"]], "Dictionary learning - positive code": [[121, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[121, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[121, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[533, null]], "Differences between solvers": [[1001, "differences-between-solvers"]], "Different label assignment strategies": [[408, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[408, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[378, "different-objects"]], "Different scenario and useful concepts": [[1001, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[399, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[161, null]], "Digits dataset": [[69, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[299, null]], "Dimensionality reduction": [[1008, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[999, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[42, "module-sklearn.utils.discovery"]], "Discretization": [[1015, "discretization"]], "Dispatching": [[386, null]], "Display Objects": [[1032, "display-objects"]], "Display code coverage in pull requests": [[384, "display-code-coverage-in-pull-requests"]], "Display results": [[217, "display-results"]], "Display the distorted image": [[124, "display-the-distorted-image"]], "Displaying Pipelines": [[251, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[251, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[251, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[251, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[251, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[251, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[241, null]], "Distance metrics": [[28, "distance-metrics"]], "DistanceMetric": [[703, null]], "Do you plan to implement transform for target y in a pipeline?": [[388, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[388, "do-you-support-pypy"]], "Documentation": [[376, "documentation"], [1035, "documentation"]], "Documentation Resources": [[1028, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1038, "documentation-improvements"], [1039, "documentation-improvements"]], "Does scikit-learn work natively with various types of dataframes?": [[388, "does-scikit-learn-work-natively-with-various-types-of-dataframes"]], "Domain specific packages": [[1024, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[418, "dot-product-kernel"]], "Dot-product kernel": [[180, "dot-product-kernel"]], "DotProduct": [[618, null]], "Download data, if not already on disk": [[56, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[183, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[155, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[370, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null]], "Dummy estimators": [[1005, "dummy-estimators"]], "DummyClassifier": [[553, null]], "DummyRegressor": [[554, null]], "D\u00b2 score": [[1005, "d2-score"]], "D\u00b2 score for classification": [[1005, "d2-score-for-classification"]], "Earlier versions": [[1035, "earlier-versions"]], "Early stopping in Gradient Boosting": [[145, null]], "Early stopping of Stochastic Gradient Descent": [[220, null]], "Effect of model regularization on training and test error": [[283, null]], "Effect of number of trees and early stopping": [[150, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[315, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[315, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[315, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[108, null]], "Effect of varying threshold for self-training": [[332, null]], "EfficiencyWarning": [[576, null]], "Efficient Linear Algebra & Array Operations": [[385, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[385, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[385, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[121, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[1001, "elastic-net"]], "ElasticNet": [[198, "elasticnet"], [650, null]], "ElasticNetCV": [[651, null]], "EllipticEnvelope": [[470, null]], "Embedding in 2D space": [[52, "embedding-in-2d-space"]], "Embedding techniques comparison": [[233, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[410, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[95, null]], "Empirical validation": [[243, "empirical-validation"]], "EmpiricalCovariance": [[471, null]], "Encoding categorical features": [[1015, "encoding-categorical-features"]], "Encoding strategy": [[87, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1046, "enforcing-keyword-only-arguments"], [1048, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[391, "enhancement-proposals-sleps"]], "Enhancements": [[1038, "enhancements"], [1039, "enhancements"], [1040, "enhancements"], [1041, "enhancements"], [1041, "id4"], [1042, "enhancements"], [1042, "id3"]], "Enriched estimator displays": [[326, "enriched-estimator-displays"]], "Ensemble methods": [[134, null], [184, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[415, null]], "Environment variables": [[364, "environment-variables"]], "Error Calculation": [[145, "error-calculation"]], "Error caused by file path length limit on Windows": [[394, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[135, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[192, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[98, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[192, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[192, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[114, "estimate-the-covariance"]], "Estimate the score": [[183, "estimate-the-score"]], "Estimated Attributes": [[378, "estimated-attributes"]], "Estimation algorithms": [[999, "estimation-algorithms"]], "Estimator Tags": [[378, "estimator-tags"]], "Estimator types": [[378, "estimator-types"]], "EstimatorCheckFailedWarning": [[577, null]], "Estimators": [[359, "estimators"], [359, "id2"], [378, "estimators"], [404, "estimators"]], "Estimators that handle NaN values": [[995, "estimators-that-handle-nan-values"]], "Evaluate the impact of the regularization parameter": [[283, "evaluate-the-impact-of-the-regularization-parameter"]], "Evaluation": [[113, "evaluation"], [308, "evaluation"]], "Evaluation metrics": [[264, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[249, null]], "Evaluation of the calibration of predictions": [[212, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[212, "evaluation-of-the-ranking-power"]], "Evernote": [[1029, "id6"]], "Exact Kernel PCA": [[413, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[413, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[404, "example-usage"]], "Example with noise-free target": [[178, "example-with-noise-free-target"]], "Example with noisy targets": [[178, "example-with-noisy-targets"]], "Examples": [[184, null], [365, "examples"], [407, "examples"], [1035, "examples"]], "Examples based on real world datasets": [[43, null], [184, "examples-based-on-real-world-datasets"]], "Exhaustive Grid Search": [[994, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[180, "exp-sine-squared-kernel"], [418, "exp-sine-squared-kernel"]], "ExpSineSquared": [[619, null]], "Experimental / Under Development": [[1051, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[324, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[380, "experimental-features"]], "Explained variance score": [[1005, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[244, null]], "Exponentiation": [[620, null]], "Exporting": [[41, "exporting"]], "External Resources, Videos and Talks": [[1023, null]], "External Tutorials": [[1023, "external-tutorials"]], "External dependencies": [[1035, "external-dependencies"]], "ExtraTreeClassifier": [[918, null]], "ExtraTreeRegressor": [[919, null]], "ExtraTreesClassifier": [[559, null]], "ExtraTreesRegressor": [[560, null]], "Extract noisy patches and reconstruct them using the dictionary": [[124, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[124, "extract-reference-patches"]], "Extracting features": [[365, "extracting-features"]], "Extremely Randomized Trees": [[415, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[248, null]], "Faces dataset decompositions": [[121, null]], "Faces recognition example using eigenfaces and SVMs": [[46, null]], "Factor Analysis": [[413, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[131, null]], "Factor Analysis components - FA": [[121, "factor-analysis-components-fa"]], "FactorAnalysis": [[534, null]], "Failure of Machine Learning to infer causal effects": [[186, null]], "FastICA": [[535, null]], "FastICA on 2D point clouds": [[123, null]], "Faster parser in fetch_openml": [[324, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[363, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[352, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[322, "feature-names-support"]], "Feature Selection": [[163, null], [184, "feature-selection"]], "Feature agglomeration": [[85, null], [1022, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[88, null]], "Feature binarization": [[1015, "feature-binarization"]], "Feature discretization": [[312, null]], "Feature extraction": [[416, null]], "Feature hashing": [[416, "feature-hashing"]], "Feature importance based on feature permutation": [[142, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[142, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance evaluation": [[415, "feature-importance-evaluation"]], "Feature importance from coefficients": [[169, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[142, null]], "Feature normalization": [[192, "feature-normalization"]], "Feature scaling": [[1022, null]], "Feature selection": [[417, null]], "Feature selection as part of a pipeline": [[417, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[417, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[417, null]], "Feature transformations with ensembles of trees": [[140, null]], "FeatureAgglomeration": [[408, null], [446, null]], "FeatureHasher": [[353, "featurehasher"], [585, null]], "FeatureHasher and DictVectorizer Comparison": [[353, null]], "FeatureUnion": [[867, null]], "FeatureUnion: composite feature spaces": [[409, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[150, null]], "Fedora": [[394, "fedora"]], "Final conclusion": [[171, "final-conclusion"]], "Final remarks": [[91, "final-remarks"]], "Finding the Nearest Neighbors": [[1008, "finding-the-nearest-neighbors"]], "First example": [[49, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[73, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[122, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[195, "fit-by-cubic-polynomial"]], "Fit models": [[207, "fit-models"], [289, "fit-models"]], "Fit models and plot results": [[91, "fit-models-and-plot-results"]], "Fit regression model": [[148, "fit-regression-model"], [302, "fit-regression-model"], [346, "fit-regression-model"], [357, "fit-regression-model"], [357, "id1"]], "Fit the model for outlier detection (default)": [[297, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[128, "fit-the-models"]], "Fit the regressors": [[194, "fit-the-regressors"], [194, "id2"]], "FitFailedWarning": [[578, null]], "Fitting": [[378, "fitting"]], "Fitting SpectralBiclustering": [[59, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[214, "fitting-a-quantileregressor"]], "Fitting additional trees": [[415, "fitting-additional-trees"]], "Fitting additional weak-learners": [[415, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[196, null]], "Fitting an elliptic envelope": [[1011, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[64, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[389, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[147, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1048, "fixed-models"]], "FixedThresholdClassifier": [[803, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[327, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1035, "fixes"]], "Flexibility of IterativeImputer": [[995, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[384, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[176, null]], "Forest covertypes": [[371, "forest-covertypes"]], "Forest covertypes dataset": [[249, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[408, "fowlkes-mallows-scores"]], "FreeBSD": [[374, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[230, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[388, null]], "From binary to multiclass and multilabel": [[1005, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "FrozenEstimator": [[613, null]], "Fruitful discussions": [[375, null]], "FunctionTransformer": [[872, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[258, null]], "GMM covariances": [[257, null]], "GPC examples": [[418, "gpc-examples"]], "Gallery examples": [[419, "gallery-examples"], [420, "gallery-examples"], [421, "gallery-examples"], [422, "gallery-examples"], [425, "gallery-examples"], [428, "gallery-examples"], [431, "gallery-examples"], [432, "gallery-examples"], [438, "gallery-examples"], [439, "gallery-examples"], [441, "gallery-examples"], [442, "gallery-examples"], [443, "gallery-examples"], [444, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [456, "gallery-examples"], [459, "gallery-examples"], [461, "gallery-examples"], [463, "gallery-examples"], [465, "gallery-examples"], [466, "gallery-examples"], [467, "gallery-examples"], [468, "gallery-examples"], [469, "gallery-examples"], [470, "gallery-examples"], [471, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [477, "gallery-examples"], [478, "gallery-examples"], [480, "gallery-examples"], [483, "gallery-examples"], [484, "gallery-examples"], [485, "gallery-examples"], [489, "gallery-examples"], [490, "gallery-examples"], [491, "gallery-examples"], [492, "gallery-examples"], [493, "gallery-examples"], [494, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [498, "gallery-examples"], [500, "gallery-examples"], [501, "gallery-examples"], [502, "gallery-examples"], [503, "gallery-examples"], [504, "gallery-examples"], [506, "gallery-examples"], [512, "gallery-examples"], [513, "gallery-examples"], [514, "gallery-examples"], [515, "gallery-examples"], [516, "gallery-examples"], [517, "gallery-examples"], [521, "gallery-examples"], [522, "gallery-examples"], [523, "gallery-examples"], [524, "gallery-examples"], [525, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [529, "gallery-examples"], [532, "gallery-examples"], [534, "gallery-examples"], [535, "gallery-examples"], [536, "gallery-examples"], [537, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [546, "gallery-examples"], [551, "gallery-examples"], [552, "gallery-examples"], [553, "gallery-examples"], [554, "gallery-examples"], [555, "gallery-examples"], [556, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [572, "gallery-examples"], [584, "gallery-examples"], [585, "gallery-examples"], [587, "gallery-examples"], [590, "gallery-examples"], [591, "gallery-examples"], [592, "gallery-examples"], [593, "gallery-examples"], [594, "gallery-examples"], [596, "gallery-examples"], [597, "gallery-examples"], [600, "gallery-examples"], [602, "gallery-examples"], [603, "gallery-examples"], [605, "gallery-examples"], [607, "gallery-examples"], [608, "gallery-examples"], [609, "gallery-examples"], [610, "gallery-examples"], [611, "gallery-examples"], [613, "gallery-examples"], [614, "gallery-examples"], [615, "gallery-examples"], [617, "gallery-examples"], [618, "gallery-examples"], [619, "gallery-examples"], [621, "gallery-examples"], [622, "gallery-examples"], [623, "gallery-examples"], [626, "gallery-examples"], [627, "gallery-examples"], [629, "gallery-examples"], [631, "gallery-examples"], [632, "gallery-examples"], [634, "gallery-examples"], [635, "gallery-examples"], [636, "gallery-examples"], [637, "gallery-examples"], [638, "gallery-examples"], [639, "gallery-examples"], [643, "gallery-examples"], [644, "gallery-examples"], [645, "gallery-examples"], [647, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [650, "gallery-examples"], [651, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [656, "gallery-examples"], [657, "gallery-examples"], [659, "gallery-examples"], [660, "gallery-examples"], [661, "gallery-examples"], [662, "gallery-examples"], [663, "gallery-examples"], [666, "gallery-examples"], [668, "gallery-examples"], [669, "gallery-examples"], [670, "gallery-examples"], [672, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [675, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [683, "gallery-examples"], [684, "gallery-examples"], [685, "gallery-examples"], [686, "gallery-examples"], [688, "gallery-examples"], [692, "gallery-examples"], [693, "gallery-examples"], [694, "gallery-examples"], [695, "gallery-examples"], [696, "gallery-examples"], [697, "gallery-examples"], [701, "gallery-examples"], [702, "gallery-examples"], [704, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [708, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [711, "gallery-examples"], [713, "gallery-examples"], [716, "gallery-examples"], [717, "gallery-examples"], [721, "gallery-examples"], [722, "gallery-examples"], [723, "gallery-examples"], [731, "gallery-examples"], [733, "gallery-examples"], [736, "gallery-examples"], [738, "gallery-examples"], [739, "gallery-examples"], [741, "gallery-examples"], [742, "gallery-examples"], [745, "gallery-examples"], [746, "gallery-examples"], [749, "gallery-examples"], [750, "gallery-examples"], [752, "gallery-examples"], [753, "gallery-examples"], [754, "gallery-examples"], [756, "gallery-examples"], [757, "gallery-examples"], [759, "gallery-examples"], [761, "gallery-examples"], [765, "gallery-examples"], [782, "gallery-examples"], [783, "gallery-examples"], [786, "gallery-examples"], [788, "gallery-examples"], [789, "gallery-examples"], [790, "gallery-examples"], [791, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [794, "gallery-examples"], [796, "gallery-examples"], [797, "gallery-examples"], [799, "gallery-examples"], [801, "gallery-examples"], [802, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [810, "gallery-examples"], [818, "gallery-examples"], [819, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [838, "gallery-examples"], [839, "gallery-examples"], [841, "gallery-examples"], [843, "gallery-examples"], [845, "gallery-examples"], [846, "gallery-examples"], [847, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [854, "gallery-examples"], [855, "gallery-examples"], [856, "gallery-examples"], [857, "gallery-examples"], [861, "gallery-examples"], [864, "gallery-examples"], [865, "gallery-examples"], [866, "gallery-examples"], [867, "gallery-examples"], [868, "gallery-examples"], [869, "gallery-examples"], [872, "gallery-examples"], [873, "gallery-examples"], [875, "gallery-examples"], [877, "gallery-examples"], [878, "gallery-examples"], [880, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [888, "gallery-examples"], [889, "gallery-examples"], [892, "gallery-examples"], [894, "gallery-examples"], [897, "gallery-examples"], [901, "gallery-examples"], [902, "gallery-examples"], [904, "gallery-examples"], [905, "gallery-examples"], [906, "gallery-examples"], [908, "gallery-examples"], [911, "gallery-examples"], [912, "gallery-examples"], [913, "gallery-examples"], [914, "gallery-examples"], [915, "gallery-examples"], [916, "gallery-examples"], [917, "gallery-examples"], [922, "gallery-examples"], [923, "gallery-examples"], [937, "gallery-examples"], [947, "gallery-examples"], [949, "gallery-examples"], [956, "gallery-examples"], [961, "gallery-examples"], [962, "gallery-examples"], [963, "gallery-examples"], [964, "gallery-examples"], [965, "gallery-examples"], [978, "gallery-examples"], [988, "gallery-examples"]], "Gamma loss for gradient boosting": [[325, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[652, null]], "Gaussian Mixture": [[1004, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[256, null]], "Gaussian Mixture Model Selection": [[260, null]], "Gaussian Mixture Model Sine Curve": [[261, null]], "Gaussian Mixture Models": [[184, "gaussian-mixture-models"], [254, null]], "Gaussian Naive Bayes": [[63, "gaussian-naive-bayes"], [1007, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[62, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[418, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[418, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[170, null], [184, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[418, null]], "Gaussian Processes regression: basic introductory example": [[178, null]], "Gaussian mixture models": [[1004, null]], "Gaussian process classification (GPC) on iris dataset": [[173, null], [418, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[171, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[179, null]], "Gaussian random projection": [[1017, "gaussian-random-projection"]], "GaussianMixture": [[802, null]], "GaussianNB": [[846, null]], "GaussianProcessClassifier": [[614, null]], "GaussianProcessRegressor": [[615, null]], "GaussianRandomProjection": [[900, null]], "General Concepts": [[390, "general-concepts"]], "General recommendations": [[359, "general-recommendations"]], "Generalized Linear Models": [[184, "generalized-linear-models"], [193, null], [1001, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[320, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[26, "generalized-linear-models-glm-for-regression"]], "Generate data": [[82, "generate-data"], [101, "generate-data"], [112, "generate-data"], [207, "generate-data"], [308, "generate-data"]], "Generate data with outliers": [[297, "generate-data-with-outliers"]], "Generate distorted image": [[124, "generate-distorted-image"]], "Generate sample data": [[59, "generate-sample-data"], [74, "generate-sample-data"], [89, "generate-sample-data"], [97, "generate-sample-data"], [110, "generate-sample-data"], [122, "generate-sample-data"], [123, "generate-sample-data"], [165, "generate-sample-data"], [245, "generate-sample-data"], [283, "generate-sample-data"], [302, "generate-sample-data"], [346, "generate-sample-data"]], "Generate sinusoidal data with noise": [[195, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[267, "generate-synthetic-data"]], "Generate synthetic dataset": [[62, "generate-synthetic-dataset"], [194, "generate-synthetic-dataset"], [194, "id1"], [198, "generate-synthetic-dataset"]], "Generate the data": [[98, "generate-the-data"], [100, "generate-the-data"], [114, "generate-the-data"]], "Generated datasets": [[372, null]], "Generated documentation on GitHub Actions": [[376, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[53, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[171, "generating-a-dataset"]], "Generating polynomial features": [[1015, "generating-polynomial-features"]], "Generators for classification and clustering": [[372, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[372, "generators-for-decomposition"]], "Generators for manifold learning": [[372, "generators-for-manifold-learning"]], "Generators for regression": [[372, "generators-for-regression"]], "Generic dictionary learning": [[413, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[595, null]], "Getting Started": [[389, null]], "Getting reproducible results across multiple executions": [[359, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1028, "gitter"]], "Glossary of Common Terms and API Elements": [[390, null]], "Good practices": [[381, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[391, "governance-model-changes"]], "Gradient Boosting": [[44, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[146, null]], "Gradient Boosting Regression Trees for Poisson regression": [[212, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[148, null]], "Gradient Boosting regularization": [[149, null]], "Gradient boosting": [[188, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[144, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[144, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[144, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[144, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[415, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[561, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[415, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[415, null]], "GradientBoostingRegressor": [[562, null]], "Graph Routines": [[385, "graph-routines"]], "Graphical model and parametrization": [[1010, "graphical-model-and-parametrization"]], "GraphicalLasso": [[472, null]], "GraphicalLassoCV": [[473, null]], "GridSearchCV": [[804, null]], "Group Shuffle Split": [[412, "group-shuffle-split"]], "Group k-fold": [[412, "group-k-fold"]], "GroupKFold": [[805, null]], "GroupShuffleSplit": [[806, null]], "Grouping infrequent categories in OneHotEncoder": [[323, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[325, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[408, "hdbscan"], [447, null]], "HDBSCAN: hierarchical density-based clustering": [[325, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[807, null]], "HalvingRandomSearchCV": [[808, null]], "Hamming loss": [[1005, "hamming-loss"]], "Handling Multicollinear Features": [[190, "handling-multicollinear-features"]], "Hash Functions": [[385, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[153, null]], "HashingVectorizer": [[352, "hashingvectorizer"], [592, null]], "Helper Functions": [[385, "helper-functions"]], "Helper function": [[180, "helper-function"]], "Helper function to plot embedding": [[233, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[1002, "hessian-eigenmapping"]], "Hierarchical Clustering": [[408, "id11"]], "Hierarchical clustering": [[408, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[101, null]], "Higher-level parallelism with joblib": [[364, "higher-level-parallelism-with-joblib"]], "Highlights": [[1035, "highlights"], [1038, "highlights"], [1039, "highlights"], [1042, "highlights"], [1043, "highlights"]], "Hinge loss": [[1005, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[326, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[563, null]], "HistGradientBoostingRegressor": [[564, null]], "Histogram-Based Gradient Boosting": [[415, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[322, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[408, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[388, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[388, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[388, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[388, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[388, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[388, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[388, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[388, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[359, "how-to-avoid-data-leakage"]], "How to contribute": [[376, "how-to-contribute"]], "How to make a good bug report": [[376, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[382, null]], "HowAboutWe": [[1029, "id16"]], "Huber Regression": [[1001, "huber-regression"]], "HuberRegressor": [[653, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[197, null]], "Hugging Face": [[1029, "id5"]], "Hyper-parameter optimizers": [[30, "hyper-parameter-optimizers"]], "Hyperparameter": [[621, null]], "Hyperparameter Robustness": [[89, "hyperparameter-robustness"]], "Hyperplanes Visualization": [[205, "hyperplanes-visualization"]], "ICE vs. PDP": [[188, "ice-vs-pdp"]], "INFONEA": [[1029, "id24"]], "Illustration of GPC on the XOR dataset": [[418, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[175, null]], "Illustration of Pipeline and GridSearchCV": [[105, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[180, null]], "Image denoising using dictionary learning": [[124, null]], "Image denoising using kernel PCA": [[45, null]], "Image feature extraction": [[416, "image-feature-extraction"]], "Implementation": [[1008, "implementation"]], "Implementation decisions": [[388, "implementation-decisions"]], "Implementation details": [[1019, "implementation-details"], [1020, "implementation-details"]], "Implementing your own scoring object": [[1005, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[315, null]], "Important notes regarding the internal cross-validation": [[407, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[324, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[326, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[321, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[320, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[995, null], [1015, "imputation-of-missing-values"]], "Impute missing values with mean": [[183, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[183, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[183, null]], "Imputing missing values with variants of IterativeImputer": [[182, null]], "In binary classification settings": [[277, "in-binary-classification-settings"]], "In multi-label settings": [[277, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[186, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[186, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[359, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[579, null]], "Incremental PCA": [[125, null], [413, "incremental-pca"]], "Incremental learning": [[365, "incremental-learning"]], "IncrementalPCA": [[536, null]], "Independent component analysis (ICA)": [[413, "independent-component-analysis-ica"]], "Independent components - FastICA": [[121, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[321, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1012, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[90, null]], "Influence of the Input Data Representation": [[363, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[363, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[363, "influence-of-the-number-of-features"]], "Information Criterion": [[994, "information-criterion"]], "Information-criteria based model selection": [[1001, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1015, "infrequent-categories"]], "Input and parameter validation": [[42, "module-sklearn.utils.validation"]], "Input data": [[408, null]], "Input validation": [[378, "input-validation"]], "InputTags": [[925, null]], "Inria": [[1029, "id3"]], "Inspection": [[184, "inspection"], [185, null], [393, null]], "Installing nightly builds": [[374, "installing-nightly-builds"]], "Installing scikit-learn": [[394, null]], "Installing the development version of scikit-learn": [[374, null]], "Installing the latest release": [[394, "installing-the-latest-release"]], "Instantiation": [[378, "instantiation"]], "Intel Extension for Scikit-learn": [[394, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[415, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[324, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1024, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[176, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[415, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[187, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[187, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[216, "interpreting-the-plots"]], "Introducing the set_output API": [[253, null]], "Introduction": [[1002, "introduction"]], "Invariance with respect to prevalence": [[273, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1017, "inverse-transform"]], "Iris plants dataset": [[373, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[174, null]], "Isolation Forest": [[1011, "isolation-forest"]], "IsolationForest": [[565, null]], "IsolationForest example": [[151, null]], "Isomap": [[692, null], [1002, "isomap"]], "Isomap Embedding": [[232, "isomap-embedding"]], "Isotonic": [[406, "isotonic"]], "Isotonic Regression": [[242, null]], "Isotonic regression": [[996, null]], "IsotonicRegression": [[639, null]], "Issue Tracker Tags": [[376, "issue-tracker-tags"]], "Issues for New Contributors": [[376, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[183, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[631, null]], "J.P.Morgan": [[1029, "id1"]], "Jaccard similarity coefficient score": [[1005, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[207, null]], "K-D Tree": [[1008, "k-d-tree"]], "K-bins discretization": [[1015, "k-bins-discretization"]], "K-fold": [[412, "k-fold"]], "K-means": [[408, "k-means"]], "K-means clustering on text features": [[352, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[293, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[873, null]], "KDDCup99 - SA dataset": [[249, "kddcup99-sa-dataset"]], "KDTree": [[849, null]], "KDTree and BallTree Classes": [[1008, "kdtree-and-balltree-classes"]], "KFold": [[809, null]], "KMeans": [[448, null]], "KNN Based Imputation": [[319, "knn-based-imputation"]], "KNNImputer": [[632, null]], "KNeighborsClassifier": [[850, null]], "KNeighborsRegressor": [[851, null]], "KNeighborsTransformer": [[852, null]], "Kddcup 99 dataset": [[371, "kddcup-99-dataset"]], "Keeping the number of features constant": [[995, "keeping-the-number-of-features-constant"]], "Kernel": [[622, null]], "Kernel Approximation": [[184, "kernel-approximation"], [191, null], [997, null]], "Kernel Density Estimate of Species Distributions": [[303, null]], "Kernel Density Estimation": [[294, null], [414, "kernel-density-estimation"]], "Kernel PCA": [[126, null]], "Kernel Principal Component Analysis (kPCA)": [[413, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[180, "kernel-cookbook"]], "Kernel functions": [[1020, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[171, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[418, "kernel-operators"]], "Kernel ridge": [[171, "kernel-ridge"]], "Kernel ridge regression": [[998, null]], "KernelCenterer": [[874, null]], "KernelDensity": [[853, null]], "KernelPCA": [[537, null]], "KernelRidge": [[647, null]], "Kernels": [[20, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[418, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[322, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1043, "known-major-bugs"], [1044, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[204, null]], "L1-based feature selection": [[417, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[198, null]], "L1-penalty case": [[347, "l1-penalty-case"]], "L2-penalty case": [[347, "l2-penalty-case"]], "LARS Lasso": [[1001, "lars-lasso"]], "LDA": [[999, "lda"]], "Label Propagation": [[1018, "label-propagation"]], "Label Propagation digits active learning": [[330, null]], "Label Propagation digits: Demonstrating performance": [[329, null]], "Label Propagation learning a complex structure": [[331, null]], "Label binarization": [[1016, "label-binarization"]], "Label encoding": [[1016, "label-encoding"]], "Label ranking average precision": [[1005, "label-ranking-average-precision"]], "LabelBinarizer": [[875, null], [1016, "labelbinarizer"]], "LabelEncoder": [[876, null]], "LabelPropagation": [[903, null]], "LabelSpreading": [[904, null]], "Lagged features for time series forecasting": [[53, null]], "Laplacian kernel": [[1003, "laplacian-kernel"]], "Lars": [[654, null]], "LarsCV": [[655, null]], "Lasso": [[198, "lasso"], [656, null], [1001, "lasso"]], "Lasso model selection via information criteria": [[200, null]], "Lasso model selection: AIC-BIC / cross-validation": [[202, null]], "Lasso on dense and sparse data": [[199, null]], "Lasso via coordinate descent": [[202, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[202, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[201, null]], "LassoCV": [[657, null]], "LassoLars": [[658, null]], "LassoLarsCV": [[659, null]], "LassoLarsIC": [[660, null]], "Latent Dirichlet Allocation (LDA)": [[413, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[538, null]], "Learn the PCA basis": [[45, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[124, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[84, "learn-the-dictionary-of-images"]], "Learning Curve": [[272, "learning-curve"]], "Learning Git": [[376, null]], "Learning a graph structure": [[52, "learning-a-graph-structure"]], "Learning an embedding": [[300, "learning-an-embedding"]], "Learning curve": [[1000, "learning-curve"]], "LearningCurveDisplay": [[810, null]], "Least Angle Regression": [[1001, "least-angle-regression"]], "Leave One Group Out": [[412, "leave-one-group-out"]], "Leave One Out (LOO)": [[412, "leave-one-out-loo"]], "Leave P Groups Out": [[412, "leave-p-groups-out"]], "Leave P Out (LPO)": [[412, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[811, null]], "LeaveOneOut": [[812, null]], "LeavePGroupsOut": [[813, null]], "LeavePOut": [[814, null]], "Ledoit-Wolf shrinkage": [[410, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[111, null]], "LedoitWolf": [[474, null]], "Lessons learned": [[186, "lessons-learned"], [187, "lessons-learned"]], "Limitations of a simple linear model": [[171, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[416, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[363, "limiting-working-memory"]], "Limiting the number of splits": [[144, "limiting-the-number-of-splits"]], "Linear Models": [[1001, null]], "Linear algebra libraries": [[363, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[999, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[71, null]], "Linear classifiers": [[26, "linear-classifiers"]], "Linear kernel": [[344, "linear-kernel"], [1003, "linear-kernel"]], "Linear models with regularization": [[187, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[187, "linear-models-with-sparse-coefficients"]], "Linear regression model": [[209, "linear-regression-model"]], "Linear support vector classifier": [[63, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[551, null]], "LinearRegression": [[661, null]], "LinearSVC": [[908, null]], "LinearSVR": [[909, null]], "Link to R\u00b2 score, the coefficient of determination": [[1005, null]], "Links": [[363, "links"]], "Linnerrud dataset": [[373, "linnerrud-dataset"]], "Linux": [[374, "linux"]], "Linux compilers from conda-forge": [[374, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[374, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[144, "load-ames-housing-dataset"]], "Load Data": [[353, "load-data"]], "Load Data and Train a SVC": [[252, "load-data-and-train-a-svc"]], "Load Data and train model": [[240, "load-data-and-train-model"]], "Load and prepare data": [[279, "load-and-prepare-data"], [280, "load-and-prepare-data"], [315, "load-and-prepare-data"]], "Load and prepare data set": [[340, "load-and-prepare-data-set"]], "Load data": [[206, "load-data"]], "Load dataset": [[141, "load-dataset"]], "Load dataset and apply GridSearchCV": [[160, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[233, "load-digits-dataset"]], "Load some data to play with": [[343, "load-some-data-to-play-with"]], "Load the data": [[47, "load-the-data"], [84, "load-the-data"], [148, "load-the-data"], [293, "load-the-data"]], "Load the dataset": [[92, "load-the-dataset"]], "Load the dataset via OpenML": [[45, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[316, "loading-data-from-openml"]], "Loading a dataset": [[289, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[351, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[230, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[416, "loading-features-from-dicts"]], "Loading from external datasets": [[370, "loading-from-external-datasets"]], "Loading other datasets": [[370, null]], "Loading text data": [[352, "loading-text-data"]], "Loading the Iris dataset": [[127, "loading-the-iris-dataset"]], "Loading the data": [[169, "loading-the-data"]], "Loading the redirect files": [[56, "loading-the-redirect-files"]], "Local Outlier Factor": [[1011, "local-outlier-factor"]], "Local Tangent Space Alignment": [[1002, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[854, null]], "Locally Linear Embedding": [[1002, "locally-linear-embedding"]], "Locally Linear Embeddings": [[232, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[693, null]], "Log loss": [[1005, "log-loss"]], "Logistic function": [[203, null]], "Logistic regression": [[1001, "logistic-regression"]], "LogisticRegression": [[662, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[289, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[663, null]], "Look at the results": [[245, "look-at-the-results"], [346, "look-at-the-results"]], "Loss Functions": [[415, "loss-functions"]], "Lovely": [[1029, "id20"]], "Low-level parallelism": [[408, "low-level-parallelism"], [415, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[364, "lower-level-parallelism-with-openmp"]], "MARS": [[1029, "id28"]], "MDS": [[694, null]], "MLPClassifier": [[865, null]], "MLPRegressor": [[866, null]], "MNIST classification using multinomial logistic + L1": [[228, null]], "MacPorts for Mac OSX": [[394, "macports-for-mac-osx"]], "Machinalis": [[1029, "id22"]], "Mailing Lists": [[1028, "mailing-lists"]], "Main": [[48, "main"]], "Main takeaways": [[212, "main-takeaways"]], "Maintainer Information": [[380, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[376, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[415, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[155, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[158, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[234, null]], "Manifold learning": [[184, "manifold-learning"], [231, null], [1002, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[233, null]], "Manually setting the decision threshold": [[407, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[264, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[314, null]], "Mapping to a Gaussian distribution": [[1015, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1015, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[995, "marking-imputed-values"]], "Matern": [[623, null]], "Mathematical Definition": [[1012, "mathematical-definition"]], "Mathematical Details": [[997, "mathematical-details"]], "Mathematical formulation": [[405, "mathematical-formulation"], [405, "id3"], [415, "mathematical-formulation"], [1008, "mathematical-formulation"], [1019, "mathematical-formulation"], [1020, "mathematical-formulation"], [1021, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[999, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[999, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1005, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[180, "matern-kernel"], [418, "matern-kernel"]], "Max error": [[1005, "max-error"]], "MaxAbsScaler": [[310, "maxabsscaler"], [877, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1005, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[408, "mean-shift"]], "Mean absolute error": [[1005, "mean-absolute-error"]], "Mean absolute percentage error": [[1005, "mean-absolute-percentage-error"]], "Mean squared error": [[1005, "mean-squared-error"]], "Mean squared logarithmic error": [[1005, "mean-squared-logarithmic-error"]], "MeanShift": [[449, null]], "Measure and plot the results": [[155, "measure-and-plot-the-results"]], "Median absolute error": [[1005, "median-absolute-error"]], "Memory footprint": [[87, "memory-footprint"]], "Memory usage profiling": [[382, "memory-usage-profiling"]], "Merging Pull Requests": [[380, "merging-pull-requests"]], "Meta-estimators": [[42, "module-sklearn.utils.metaestimators"], [404, "meta-estimators"]], "MetaEstimatorMixin": [[428, null]], "Metadata Routing": [[246, null], [325, "metadata-routing"], [390, "metadata-routing"], [399, null], [1052, "metadata-routing"], [1052, "id2"], [1053, "metadata-routing"]], "Metadata Routing Support": [[326, "metadata-routing-support"]], "Metadata Routing Support Status": [[399, "metadata-routing-support-status"]], "Metadata routing": [[42, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[960, null]], "MetadataRouter": [[961, null]], "MethodMapping": [[962, null]], "Methods": [[390, "methods"]], "Metrics": [[404, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1005, null]], "MinCovDet": [[475, null]], "MinMaxScaler": [[310, "minmaxscaler"], [878, null]], "Mini Batch K-Means": [[408, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[413, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[413, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[539, null]], "MiniBatchKMeans": [[450, null]], "MiniBatchNMF": [[540, null]], "MiniBatchNMF: an online version of NMF": [[323, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[541, null]], "Minimal Cost-Complexity Pruning": [[1021, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1048, "minimal-dependencies"], [1049, "minimal-dependencies"]], "Minimum Covariance Determinant": [[410, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[113, "minimum-covariance-determinant-estimator"]], "Misc": [[1035, "misc"]], "Miscellaneous": [[26, "miscellaneous"], [184, "miscellaneous"], [238, null], [1043, "miscellaneous"], [1043, "id40"], [1044, "miscellaneous"], [1045, "miscellaneous"], [1046, "miscellaneous"], [1046, "id13"], [1047, "miscellaneous"], [1048, "miscellaneous"], [1051, "miscellaneous"]], "Misleading values on strongly correlated features": [[1013, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[181, null], [184, "missing-value-imputation"]], "Missing Values Support": [[1021, "missing-values-support"]], "Missing information": [[183, "missing-information"]], "Missing value support for Random Forest": [[326, "missing-value-support-for-random-forest"]], "Missing values support": [[415, "missing-values-support"]], "Missing values support in decision trees": [[325, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[633, null]], "Model Complexity Influence": [[47, null]], "Model Compression": [[363, "model-compression"]], "Model Reshaping": [[363, "model-reshaping"]], "Model Selection": [[184, "model-selection"], [262, null]], "Model Selection Enhancements and API Changes": [[1041, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[145, "model-training-and-comparison"]], "Model comparison": [[144, "model-comparison"]], "Model definition": [[283, "model-definition"]], "Model evaluation": [[209, "model-evaluation"], [389, "model-evaluation"]], "Model fitting and extrapolation": [[176, "model-fitting-and-extrapolation"]], "Model persistence": [[402, null]], "Model selection and evaluation": [[403, null]], "Model selection interface": [[28, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[128, null]], "Model selection: development and evaluation": [[994, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[994, "model-specific-cross-validation"]], "Model training and selection": [[168, "model-training-and-selection"], [260, "model-training-and-selection"]], "Model validation": [[30, "model-validation"]], "Model with metadata stripping": [[351, "model-with-metadata-stripping"]], "Model without metadata stripping": [[351, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[169, null]], "Modeling non-linear feature interactions with kernels": [[44, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[44, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[53, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[308, "models-definition"]], "Models robustness to recover the ground truth weights": [[194, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[1002, "modified-locally-linear-embedding"]], "Monitoring performance": [[376, "monitoring-performance"]], "Monotonic Constraints": [[152, null], [415, "monotonic-constraints"]], "Monotonic constraints": [[150, "monotonic-constraints"]], "More control with warm_start": [[1009, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[89, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[135, null]], "Multi-class case": [[1005, "multi-class-case"]], "Multi-class classification": [[1020, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[382, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[1002, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[235, null]], "Multi-label case": [[1005, "multi-label-case"]], "Multi-label confusion matrix": [[1005, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1009, "multi-layer-perceptron"]], "Multi-layer perceptron": [[188, "multi-layer-perceptron"]], "Multi-output problems": [[1021, "multi-output-problems"]], "Multi-task Elastic-Net": [[1001, "multi-task-elastic-net"]], "Multi-task Lasso": [[1001, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[26, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[879, null], [1016, "multilabelbinarizer"]], "MultiOutputClassifier": [[840, null], [1006, "multioutputclassifier"]], "MultiOutputRegressor": [[841, null], [1006, "multioutputregressor"]], "MultiTaskElasticNet": [[664, null]], "MultiTaskElasticNetCV": [[665, null]], "MultiTaskLasso": [[666, null]], "MultiTaskLassoCV": [[667, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[279, null]], "Multiclass and multilabel classification": [[1005, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[385, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1006, null]], "Multiclass classification": [[1006, "multiclass-classification"]], "Multiclass methods": [[184, "multiclass-methods"], [286, null]], "Multiclass sparse logistic regression on 20newgroups": [[227, null]], "Multiclass support": [[406, "multiclass-support"]], "Multiclass-multioutput classification": [[1006, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[232, "multidimensional-scaling"]], "Multilabel": [[372, "multilabel"]], "Multilabel classification": [[247, null], [1006, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[289, null]], "Multilabel ranking metrics": [[28, "multilabel-ranking-metrics"], [1005, "multilabel-ranking-metrics"]], "Multinomial Case": [[1001, "multinomial-case"]], "Multinomial Naive Bayes": [[1007, "multinomial-naive-bayes"]], "MultinomialNB": [[847, null]], "Multioutput methods": [[184, "multioutput-methods"], [288, null]], "Multioutput regression": [[1006, "multioutput-regression"]], "Multiple modules": [[1043, "multiple-modules"], [1044, "multiple-modules"]], "Multiple vs. Single Imputation": [[995, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[995, "multivariate-feature-imputation"]], "Mutual Information based scores": [[408, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[408, "mutual-reachability-graph"]], "NMF": [[542, null]], "NMF with a beta-divergence": [[413, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[413, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1007, null]], "Naive evaluation of the next hour bike demand regression": [[53, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[44, "naive-linear-regression"]], "Native Categorical Feature Support": [[316, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[321, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[319, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[301, null]], "Nearest Centroid Classifier": [[1008, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1008, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[184, "nearest-neighbors"], [291, null], [1008, null]], "Nearest Neighbors Classification": [[293, null], [1008, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1008, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1008, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[302, null]], "Nearest Shrunken Centroid": [[1008, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[995, "nearest-neighbors-imputation"]], "NearestCentroid": [[855, null]], "NearestNeighbors": [[856, null]], "Neighborhood Components Analysis": [[1008, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[300, null]], "NeighborhoodComponentsAnalysis": [[857, null]], "Nested versus non-nested cross-validation": [[275, null]], "NetBSD": [[394, "netbsd"]], "Neural Networks": [[184, "neural-networks"], [304, null]], "Neural network models (supervised)": [[1009, null]], "Neural network models (unsupervised)": [[1010, null]], "New Estimator Classes": [[1036, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[321, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[321, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[321, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[324, "new-and-enhanced-displays"]], "New classes": [[1035, "new-classes"]], "New display ValidationCurveDisplay": [[325, "new-display-validationcurvedisplay"]], "New documentation improvements": [[321, "new-documentation-improvements"], [322, "new-documentation-improvements"]], "New features": [[1038, "new-features"], [1039, "new-features"], [1040, "new-features"], [1041, "new-features"], [1042, "new-features"]], "New plotting API": [[319, "new-plotting-api"]], "New self-training meta-estimator": [[321, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1023, "new-to-scientific-python"]], "Next steps": [[389, "next-steps"]], "Non-Negative Least Squares": [[1001, "non-negative-least-squares"]], "Non-linear transformation": [[1015, "non-linear-transformation"]], "Non-negative components - NMF": [[121, "non-negative-components-nmf"]], "Non-negative least squares": [[208, null]], "Non-negative matrix factorization (NMF or NNMF)": [[413, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[70, null]], "Normalization": [[1015, "normalization"]], "Normalized Discounted Cumulative Gain": [[1005, "normalized-discounted-cumulative-gain"]], "Normalizer": [[310, "normalizer"], [880, null]], "NotFittedError": [[580, null]], "Note on MPS device support": [[404, "note-on-mps-device-support"]], "Note on device support for float64": [[404, "note-on-device-support-for-float64"]], "Notes": [[365, "notes"]], "Novelty Detection": [[1011, "novelty-detection"]], "Novelty and Outlier Detection": [[1011, null]], "Novelty detection with Local Outlier Factor": [[1011, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[296, null]], "NuSVC": [[910, null]], "NuSVR": [[911, null]], "NumPy": [[381, "numpy"]], "Number of candidates and amount of resource at each iteration": [[282, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[378, "numerical-assertions-in-tests"]], "Nystroem": [[643, null]], "Nystroem Method for Kernel Approximation": [[997, "nystroem-method-for-kernel-approximation"]], "OAS": [[476, null]], "ONNX": [[402, "onnx"]], "OOB Errors for Random Forests": [[139, null]], "OPTICS": [[408, "optics"], [451, null]], "Obtaining predictions by cross-validation": [[412, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1029, "id19"]], "Older Versions": [[1035, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[226, null]], "One-class SVM with non-linear kernel (RBF)": [[339, null]], "One-vs-One multiclass ROC": [[279, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[279, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[912, null]], "OneHotEncoder": [[881, null]], "OneToOneFeatureMixin": [[429, null]], "OneVsOneClassifier": [[836, null], [1006, "onevsoneclassifier"]], "OneVsRestClassifier": [[837, null], [1006, "onevsrestclassifier"]], "Online One-Class SVM": [[322, "online-one-class-svm"], [1019, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[84, null]], "Optical recognition of handwritten digits dataset": [[373, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[42, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[177, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Options to tune the decision threshold": [[407, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[410, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[882, null]], "Ordinary Least Squares": [[1001, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[1001, "ordinary-least-squares-complexity"]], "Ordinary Least Squares Example": [[209, null]], "Ordinary Least Squares and Ridge Regression Variance": [[210, null]], "Original data": [[276, "original-data"], [310, "original-data"]], "Original image": [[87, "original-image"]], "Original points": [[300, "original-points"]], "Orthogonal Matching Pursuit": [[211, null]], "Orthogonal Matching Pursuit (OMP)": [[1001, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[668, null]], "OrthogonalMatchingPursuitCV": [[669, null]], "Other changes": [[1035, "other-changes"]], "Other estimators and tasks": [[1024, "other-estimators-and-tasks"]], "Otto Group": [[1029, "id26"]], "Our community, our values": [[376, null]], "Our vanilla classifier": [[284, "our-vanilla-classifier"]], "Out of Bag Estimates": [[994, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[48, null]], "Out-of-core naive Bayes model fitting": [[1007, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1011, "id1"]], "Outlier detection on a real data set": [[49, null]], "Outlier detection with Local Outlier Factor (LOF)": [[297, null]], "Outlier-robust regressors": [[26, "outlier-robust-regressors"]], "OutlierMixin": [[430, null]], "Outliers in the X direction": [[229, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[229, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1013, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[838, null], [1006, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[364, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[408, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[287, null]], "Overview of outlier detection methods": [[1011, "overview-of-outlier-detection-methods"]], "PCA": [[543, null]], "PCA using randomized SVD": [[413, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1022, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1029, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[116, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[116, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[411, "plscanonical"], [484, null]], "PLSRegression": [[411, "plsregression"], [485, null]], "PLSSVD": [[411, "plssvd"], [486, null]], "Packaging": [[1047, "packaging"]], "Pair Confusion Matrix": [[408, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[270, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[270, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[327, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[28, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[1003, null]], "PairwiseKernel": [[624, null]], "Pandas": [[381, "pandas"]], "Pandas output with set_output API": [[324, "pandas-output-with-set-output-api"]], "Parallel": [[970, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[364, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[42, "module-sklearn.utils.parallel"]], "Parallelism": [[364, "parallelism"], [994, "parallelism"]], "Parallelism, resource management, and configuration": [[364, null]], "Parallelization": [[415, "parallelization"]], "ParameterGrid": [[815, null]], "ParameterSampler": [[816, null]], "Parameters": [[390, "parameters"], [415, "parameters"]], "Parameters of the RBF Kernel": [[1020, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[188, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1012, null]], "Partial dependence plots": [[1012, "partial-dependence-plots"]], "PartialDependenceDisplay": [[636, null]], "Partitioning the data": [[192, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[1001, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[670, null]], "PassiveAggressiveRegressor": [[671, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[416, "patch-extraction"]], "PatchExtractor": [[586, null]], "PeerIndex": [[1029, "id17"]], "People": [[1035, "people"], [1035, "id2"], [1035, "id5"], [1035, "id8"], [1035, "id11"], [1035, "id13"], [1035, "id15"], [1035, "id17"], [1036, "people"], [1036, "id3"], [1037, "people"], [1038, "people"]], "Perceptron": [[672, null], [1001, "perceptron"]], "Performance improvements": [[323, "performance-improvements"]], "Performance improvements in PCA": [[327, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[352, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[213, "periodic-splines"]], "Periodic spline features": [[44, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[189, null]], "Permutation Importance with Multicollinear or Correlated Features": [[190, null]], "Permutation feature importance": [[1013, null]], "Permutation test score": [[276, "permutation-test-score"], [412, "permutation-test-score"]], "Permutation-based feature importance": [[319, "permutation-based-feature-importance"]], "Pinball loss": [[1005, "pinball-loss"]], "Pipeline": [[868, null]], "Pipeline ANOVA SVM": [[166, null]], "Pipeline with hyperparameter tuning": [[271, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[409, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[102, null], [184, "pipelines-and-composite-estimators"], [409, null]], "Pipelines: chaining pre-processors and estimators": [[389, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1022, null]], "Pipelining: chaining a PCA and a logistic regression": [[106, null]], "Platform-specific instructions": [[374, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[77, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[277, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[267, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[217, null]], "Plot a PCA representation": [[127, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[351, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[279, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[279, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[198, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[249, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[157, null]], "Plot classification boundaries with different SVM Kernels": [[344, null]], "Plot classification probability": [[67, null]], "Plot data and the predicted probabilities": [[62, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[337, null]], "Plot discrete decision boundary": [[151, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[160, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[148, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[158, null]], "Plot multi-class SGD on the iris dataset": [[221, null]], "Plot number of features VS. cross-validation scores": [[168, "plot-number-of-features-vs-cross-validation-scores"]], "Plot of pairs of features of the Iris dataset": [[127, "plot-of-pairs-of-features-of-the-iris-dataset"]], "Plot path length decision boundary": [[151, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[119, null]], "Plot regularization path": [[206, "plot-regularization-path"]], "Plot result": [[74, "plot-result"], [97, "plot-result"], [101, "plot-result"], [101, "id2"]], "Plot results": [[48, "plot-results"], [83, "plot-results"], [110, "plot-results"], [122, "plot-results"], [123, "plot-results"], [141, "plot-results"], [289, "plot-results"], [297, "plot-results"]], "Plot support and time series": [[207, "plot-support-and-time-series"]], "Plot the BIC scores": [[260, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[277, "plot-the-precision-recall-curve"]], "Plot the best model": [[260, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[343, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[156, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[356, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[143, null]], "Plot the marginal log-likelihood": [[194, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[277, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[329, "plot-the-most-uncertain-predictions"]], "Plot the results": [[84, "plot-the-results"], [114, "plot-the-results"], [158, "plot-the-results"], [183, "plot-the-results"], [357, "plot-the-results"], [357, "id3"]], "Plot the results on an image": [[82, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[338, null]], "Plot the true and estimated coefficients": [[194, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[195, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[148, "plot-training-deviance"]], "Plotting": [[22, "plotting"], [28, "plotting"], [41, "plotting"], [308, "plotting"]], "Plotting API Overview": [[383, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[266, null]], "Plotting Functions": [[71, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[272, null]], "Plotting four circles": [[100, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[250, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[250, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[250, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[194, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[59, "plotting-results"]], "Plotting the ROC Curve": [[252, "plotting-the-roc-curve"]], "Plotting the Results": [[316, "plotting-the-results"]], "Plotting the result": [[274, "plotting-the-result"]], "Plotting the results": [[98, "plotting-the-results"], [136, "plotting-the-results"], [209, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[216, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[100, "plotting-two-circles"]], "Plotting with Multiple Axes": [[383, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[212, null]], "PoissonRegressor": [[673, null]], "Polars output in set_output": [[326, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[997, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[213, null]], "Polynomial features": [[1015, "polynomial-features"]], "Polynomial kernel": [[344, "polynomial-kernel"], [1003, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[1001, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[644, null]], "PolynomialFeatures": [[883, null]], "Possible solutions": [[91, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[355, null]], "Post-fit model tuning": [[30, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[284, null]], "Post-tuning the decision threshold": [[407, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[264, null]], "PowerTransformer": [[310, "powertransformer"], [884, null]], "Pre-test vs. post-test analysis": [[273, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1005, "precision-recall-and-f-measures"]], "Precision-Recall": [[277, null]], "PrecisionRecallDisplay": [[704, null]], "Precomputed sparse nearest neighbors graph": [[319, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[412, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[817, null]], "Predict": [[357, "predict"], [357, "id2"]], "Prediction Intervals for Gradient Boosting Regression": [[147, null]], "Prediction Latency": [[50, null], [363, "prediction-latency"]], "Prediction Throughput": [[363, "prediction-throughput"]], "PredictionErrorDisplay": [[705, null]], "Preparing the data": [[136, "preparing-the-data"], [150, "preparing-the-data"], [192, "preparing-the-data"]], "Preprocessing": [[184, "preprocessing"], [309, null]], "Preprocessing data": [[1015, null]], "Preprocessing numerical variables": [[187, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[188, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[188, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[188, "preprocessor-for-the-neural-network-model"]], "Principal Component Analysis (PCA) on Iris Dataset": [[127, null]], "Principal Component Regression vs Partial Least Squares Regression": [[117, null]], "Principal component analysis (PCA)": [[413, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1052, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[418, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[172, null]], "Probability Calibration curves": [[63, null]], "Probability Calibration for 3-class classification": [[64, null]], "Probability calibration": [[406, null]], "Probability calibration of classifiers": [[62, null]], "Processing the dataset": [[187, "processing-the-dataset"]], "Product": [[625, null]], "Productivity and sanity-preserving tips": [[384, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[382, "profiling-python-code"]], "Profiling compiled extensions": [[382, "profiling-compiled-extensions"]], "Project template:": [[378, null]], "Projecting data: PCA vs. KernelPCA": [[126, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[126, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[117, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[53, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[381, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[376, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[230, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1025, "purpose-of-this-document"]], "Purpose of this example": [[216, "purpose-of-this-example"]], "PyTorch Support": [[404, "pytorch-support"]], "Python API": [[364, "python-api"]], "Python package and dataset imports, load dataset": [[244, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[382, "python-cython-or-c-c"]], "QDA": [[999, "qda"]], "QuadraticDiscriminantAnalysis": [[552, null]], "Qualitative analysis of the impact of features on linear model predictions": [[44, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[352, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[1001, "quantile-regression"]], "Quantile Regressor": [[322, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[323, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[214, null]], "QuantileRegressor": [[674, null]], "QuantileTransformer": [[885, null]], "QuantileTransformer (Gaussian output)": [[310, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[310, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[1001, "ransac-random-sample-consensus"]], "RANSACRegressor": [[675, null]], "RBF": [[626, null]], "RBF SVM parameters": [[340, null]], "RBF kernel": [[344, "rbf-kernel"], [1003, "rbf-kernel"]], "RBFSampler": [[645, null]], "RCV1 dataset": [[371, "rcv1-dataset"]], "RFE": [[596, null]], "RFECV": [[597, null]], "ROC AUC now supports multiclass classification": [[319, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[252, null]], "ROC curve showing a specific class": [[279, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[279, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[279, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[279, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[997, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[180, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[418, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[858, null]], "RadiusNeighborsRegressor": [[859, null]], "RadiusNeighborsTransformer": [[860, null]], "Rand index": [[408, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[190, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[415, "random-forests"]], "Random Numbers": [[378, "random-numbers"]], "Random Projection": [[1017, null]], "Random data": [[276, "random-data"]], "Random forests and other randomized tree ensembles": [[415, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[412, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1022, "random-projections"]], "Random sampling": [[42, "module-sklearn.utils.random"]], "RandomForestClassifier": [[566, null]], "RandomForestRegressor": [[567, null]], "RandomTreesEmbedding": [[568, null]], "Randomized Parameter Optimization": [[994, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[818, null]], "Rangespan": [[1029, "id11"]], "Ranking loss": [[1005, "ranking-loss"]], "Rational Quadratic kernel": [[180, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[418, "rational-quadratic-kernel"]], "RationalQuadratic": [[627, null]], "Reading the existing code base": [[376, "reading-the-existing-code-base"]], "Real world datasets": [[371, null]], "Real-world data set": [[108, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[280, null]], "Receiver operating characteristic (ROC)": [[1005, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[69, null]], "Recommendation Engine packages": [[1024, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[45, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[167, null], [417, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[168, null]], "Reference Steps": [[380, "reference-steps"]], "References": [[51, "references"], [63, "references"], [65, "references"], [113, "references"], [138, "references"], [192, "references"], [198, "references"], [287, "references"], [303, "references"], [418, "references"], [995, "references"]], "Region of Practical Equivalence": [[270, "region-of-practical-equivalence"]], "Regression": [[179, "regression"], [1001, "regression"], [1009, "regression"], [1019, "regression"], [1020, "regression"], [1021, "regression"]], "Regression criteria": [[1021, "regression-criteria"]], "Regression metrics": [[28, "regression-metrics"], [1005, "regression-metrics"]], "RegressorChain": [[842, null], [1006, "regressorchain"]], "RegressorMixin": [[431, null]], "RegressorTags": [[926, null]], "Regressors with variable selection": [[26, "regressors-with-variable-selection"]], "Regularization": [[1009, "regularization"]], "Regularization path of L1- Logistic Regression": [[206, null]], "Related Projects": [[1024, null]], "Related changes": [[1042, "related-changes"]], "Relation to impurity-based importance in trees": [[1013, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[184, "release-highlights"], [318, null]], "Release Highlights for scikit-learn 0.22": [[319, null]], "Release Highlights for scikit-learn 0.23": [[320, null]], "Release Highlights for scikit-learn 0.24": [[321, null]], "Release Highlights for scikit-learn 1.0": [[322, null]], "Release Highlights for scikit-learn 1.1": [[323, null]], "Release Highlights for scikit-learn 1.2": [[324, null]], "Release Highlights for scikit-learn 1.3": [[325, null]], "Release Highlights for scikit-learn 1.4": [[326, null]], "Release Highlights for scikit-learn 1.5": [[327, null]], "Release History": [[1033, null]], "Releasing": [[380, "releasing"]], "Remarks": [[243, "remarks"]], "Removed modules": [[1035, "removed-modules"]], "Removing features with low variance": [[417, "removing-features-with-low-variance"]], "Repeated K-Fold": [[412, "repeated-k-fold"]], "RepeatedKFold": [[819, null]], "RepeatedStratifiedKFold": [[820, null]], "Replace missing values by 0": [[183, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[402, "replicating-the-training-environment-in-production"]], "Resolve conflicts in lock files": [[376, "resolve-conflicts-in-lock-files"]], "Restricted Boltzmann Machine features for digit classification": [[308, null]], "Restricted Boltzmann machines": [[1010, "restricted-boltzmann-machines"]], "Results interpretation": [[289, "results-interpretation"]], "Retrieve dataframes from OpenML": [[319, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[52, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[48, "reuters-dataset-related-routines"]], "Rich HTML representation": [[241, "rich-html-representation"]], "Rich visual representation of estimators": [[320, "rich-visual-representation-of-estimators"]], "Ridge": [[676, null]], "Ridge Complexity": [[1001, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[216, null]], "Ridge regression and classification": [[1001, "ridge-regression-and-classification"]], "RidgeCV": [[677, null]], "RidgeClassifier": [[678, null]], "RidgeClassifierCV": [[679, null]], "Roadmap": [[1025, null]], "Robust Covariance Estimation": [[410, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[112, null]], "Robust linear estimator fitting": [[218, null]], "Robust linear model estimation using RANSAC": [[215, null]], "Robust vs Empirical covariance estimate": [[113, null]], "RobustScaler": [[310, "robustscaler"], [886, null]], "Robustness of cross-validation results": [[359, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[1001, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[994, "robustness-to-failure"]], "RocCurveDisplay": [[706, null]], "Roles And Responsibilities": [[391, "roles-and-responsibilities"]], "Rolling your own estimator": [[378, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[246, "routing-meta-estimator"]], "Run the benchmark": [[92, "run-the-benchmark"]], "Run the code and plot the results": [[47, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[274, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[374, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1005, "r2-score-the-coefficient-of-determination"]], "SGD": [[1019, "id5"]], "SGD: Maximum margin separating hyperplane": [[224, null]], "SGD: Penalties": [[223, null]], "SGD: Weighted samples": [[225, null]], "SGD: convex loss functions": [[222, null]], "SGDClassifier": [[680, null]], "SGDOneClassSVM": [[681, null]], "SGDRegressor": [[682, null]], "SKLEARN_ASSUME_FINITE": [[364, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[364, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[364, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[364, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[364, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[364, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[364, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[364, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[364, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[364, "sklearn-working-memory"]], "SVC": [[913, null], [1020, "svc"]], "SVM Exercise": [[162, null]], "SVM Margins Example": [[345, null]], "SVM Tie Breaking Example": [[348, null]], "SVM with custom kernel": [[336, null]], "SVM-Anova: SVM with univariate feature selection": [[343, null]], "SVM: Maximum margin separating hyperplane": [[341, null]], "SVM: Separating hyperplane for unbalanced classes": [[342, null]], "SVM: Weighted samples": [[349, null]], "SVR": [[914, null], [1020, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[370, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[271, null]], "Sample weight support": [[415, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[320, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[320, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[192, null]], "Scale Invariance": [[89, "scale-invariance"]], "Scaling data with outliers": [[1015, "scaling-data-with-outliers"]], "Scaling features to a range": [[1015, "scaling-features-to-a-range"]], "Scaling sparse data": [[1015, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[347, null]], "Scaling up the One-Class SVM": [[1011, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[365, "scaling-with-instances-using-out-of-core-learning"]], "Scatter plot of scores": [[116, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[391, null]], "Scores and probabilities": [[1020, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[994, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[49, "second-example"]], "Second experiment: varying number of classes and clusters": [[73, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1053, "security"]], "Security & Maintainability Limitations": [[402, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[81, null]], "SelectFdr": [[598, null]], "SelectFpr": [[599, null]], "SelectFromModel": [[600, null]], "SelectFwe": [[601, null]], "SelectKBest": [[602, null]], "SelectPercentile": [[603, null]], "Selecting Lasso via an information criterion": [[202, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[202, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[105, null]], "Selecting features based on importance": [[169, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[169, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[94, null]], "SelectorMixin": [[604, null]], "Self Training": [[1018, "self-training"]], "SelfTrainingClassifier": [[905, null]], "Semi Supervised Classification": [[184, "semi-supervised-classification"], [328, null]], "Semi-supervised Classification on a Text Dataset": [[333, null]], "Semi-supervised learning": [[329, "semi-supervised-learning"], [1018, null]], "Sequence similarity matrix under the kernel": [[179, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[417, "sequential-feature-selection"]], "SequentialFeatureSelector": [[605, null]], "Serving the model artifact": [[402, "serving-the-model-artifact"]], "Setting regularization parameter": [[1001, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[1001, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[230, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[999, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[110, null]], "Shrinkage via learning rate": [[415, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[410, "shrunk-covariance"]], "ShrunkCovariance": [[477, null]], "ShuffleSplit": [[821, null]], "Sigmoid": [[406, "sigmoid"]], "Sigmoid kernel": [[344, "sigmoid-kernel"], [1003, "sigmoid-kernel"]], "Silhouette Coefficient": [[408, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[295, null]], "Simple Pipeline": [[246, "simple-pipeline"]], "SimpleImputer": [[634, null]], "Single estimator versus bagging: bias-variance decomposition": [[138, null]], "Single label": [[372, "single-label"]], "Skewed Chi Squared Kernel": [[997, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[646, null]], "Social Media": [[1028, "social-media"]], "Solvers": [[1001, "solvers"]], "Sparse coding with a precomputed dictionary": [[130, null], [413, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[121, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1015, null]], "Sparse inverse covariance": [[410, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[114, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[413, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1017, "sparse-random-projection"]], "SparseCoder": [[544, null]], "SparsePCA": [[545, null]], "SparseRandomProjection": [[901, null]], "Sparsity": [[416, "sparsity"]], "Species distribution dataset": [[371, "species-distribution-dataset"]], "Species distribution modeling": [[51, null]], "Specifying an objective metric": [[994, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[994, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[405, "spectral-biclustering"]], "Spectral Clustering Graphs": [[408, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[405, "spectral-co-clustering"]], "Spectral Embedding": [[1002, "spectral-embedding"]], "Spectral clustering": [[408, "spectral-clustering"]], "Spectral clustering for image segmentation": [[100, null]], "Spectral embedding for non-linear dimensionality reduction": [[232, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[452, null]], "SpectralClustering": [[453, null]], "SpectralCoclustering": [[454, null]], "SpectralEmbedding": [[695, null]], "Sphinx version": [[376, null]], "Spline Transformers": [[322, "spline-transformers"]], "Spline transformer": [[1015, "spline-transformer"]], "SplineTransformer": [[887, null]], "Splitters": [[30, "splitters"]], "Spotify": [[1029, "id2"]], "Stack of predictors on a single data set": [[155, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[415, "stacked-generalization"]], "Stacking Classifier and Regressor": [[319, "stacking-classifier-and-regressor"]], "StackingClassifier": [[569, null]], "StackingRegressor": [[570, null]], "Stalled and Unclaimed Issues": [[376, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[376, "stalled-pull-requests"]], "Standard replies for reviewing": [[384, "standard-replies-for-reviewing"]], "StandardScaler": [[310, "standardscaler"], [888, null]], "Standardization, or mean removal and variance scaling": [[1015, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1025, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[270, null]], "Statistical learning with Python": [[1024, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1019, null]], "Stochastic Gradient Descent - SGD": [[1001, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1019, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1010, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1019, "stopping-criterion"]], "Strategies comparison": [[287, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[365, null]], "Stratified Shuffle Split": [[412, "stratified-shuffle-split"]], "Stratified k-fold": [[412, "stratified-k-fold"]], "StratifiedGroupKFold": [[412, "stratifiedgroupkfold"], [822, null]], "StratifiedKFold": [[823, null]], "StratifiedShuffleSplit": [[824, null]], "Streaming instances": [[365, "streaming-instances"]], "Submitting a bug report or a feature request": [[376, "submitting-a-bug-report-or-a-feature-request"]], "Subsampling": [[415, "subsampling"]], "Successive Halving Iterations": [[282, null]], "Successive Halving estimators for tuning hyper-parameters": [[321, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[628, null]], "Summarizing the key points": [[402, "summarizing-the-key-points"]], "Summary": [[63, "summary"], [145, "summary"], [353, "summary"]], "Summary of cross-validation approach": [[202, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[402, "id2"]], "Supervised learning": [[1027, null]], "Support": [[1028, null]], "Support Vector Machines": [[184, "support-vector-machines"], [335, null], [1020, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[346, null]], "Support for Array API": [[1052, "support-for-array-api"], [1053, "support-for-array-api"]], "Support for Array API-compatible inputs": [[404, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1052, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1053, "support-for-building-with-meson"]], "Support for missing values": [[150, "support-for-missing-values"]], "Support for quantile loss": [[150, "support-for-quantile-loss"]], "Swiss Roll": [[236, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[236, null]], "Swiss-Hole": [[236, "swiss-hole"]], "Synthetic dataset": [[381, "synthetic-dataset"]], "Synthetic example": [[108, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[232, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[696, null]], "Table of Contents": [[388, "table-of-contents"]], "Tags": [[927, null]], "Take-home messages": [[270, "take-home-messages"]], "Target Encoder": [[1015, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[317, null]], "Target Types": [[390, "target-types"]], "Target format": [[1006, "target-format"], [1006, "id5"], [1006, "id8"], [1006, "id10"]], "TargetEncoder": [[889, null]], "TargetEncoder: a new category encoding strategy": [[325, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[928, null]], "Technical Committee": [[391, "technical-committee"]], "Test dependencies": [[374, "test-dependencies"]], "Test with permutations the significance of a classification score": [[276, null]], "Testing Functions": [[385, "testing-functions"]], "Testing and improving test coverage": [[376, "testing-and-improving-test-coverage"]], "Text feature extraction": [[416, "text-feature-extraction"]], "TfidfTransformer": [[593, null]], "TfidfVectorizer": [[353, "tfidfvectorizer"], [594, null]], "Tf\u2013idf term weighting": [[416, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[371, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[416, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1004, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[212, "the-french-motor-third-party-liability-claims-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[243, null]], "The Johnson-Lindenstrauss lemma": [[1017, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[371, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[384, "the-meson-build-backend"]], "The Olivetti faces dataset": [[371, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[287, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[277, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[264, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[412, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[117, "the-data"]], "The dataset": [[268, "the-dataset"]], "The dataset: simulated hourly wages": [[186, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[187, "the-dataset-wages"]], "The diabetes dataset": [[284, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[287, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[187, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[187, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[380, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1005, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[229, null]], "Theil-Sen estimator: generalized-median-based estimator": [[1001, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[683, null]], "Theoretical bounds": [[243, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[246, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[394, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[412, "time-series-split"]], "Time-based cross-validation": [[44, "time-based-cross-validation"]], "Time-related feature engineering": [[44, null]], "Time-steps as categories": [[44, "time-steps-as-categories"]], "TimeSeriesSplit": [[825, null]], "Timing and accuracy plots": [[244, "timing-and-accuracy-plots"]], "Tips and Tricks": [[363, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[377, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[994, "tips-for-parameter-search"]], "Tips for performance": [[377, "tips-for-performance"]], "Tips on Practical Use": [[1009, "tips-on-practical-use"], [1019, "tips-on-practical-use"], [1020, "tips-on-practical-use"]], "Tips on practical use": [[1002, "tips-on-practical-use"], [1021, "tips-on-practical-use"]], "Tips to ease development": [[377, "tips-to-ease-development"]], "Tools": [[404, "tools"]], "Top terms per cluster": [[352, "top-terms-per-cluster"]], "Top-k accuracy score": [[1005, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[55, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[355, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[415, "totally-random-trees-embedding"]], "Toy datasets": [[373, null]], "Tracking feature names in a pipeline": [[409, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[1001, null]], "Train and Persist the Model": [[402, "train-and-persist-the-model"]], "Train classifiers": [[340, "train-classifiers"]], "Train models on the diabetes dataset": [[250, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[358, "train-tree-classifier"]], "Training": [[308, "training"], [1008, "training"]], "Training SVC model and plotting decision boundaries": [[344, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[252, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[317, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[316, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[136, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[158, "training-classifiers"]], "Training of the model": [[151, "training-of-the-model"]], "Training the AdaBoostClassifier": [[135, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[216, "training-the-ridge-regressor"]], "Transform": [[1008, "transform"]], "Transform data": [[116, "transform-data"]], "TransformedTargetRegressor": [[466, null]], "TransformerMixin": [[432, null]], "TransformerTags": [[929, null]], "Transformers and pre-processors": [[389, "transformers-and-pre-processors"]], "Transforming target in regression": [[409, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1016, null]], "Translations of scikit-learn documentation": [[1024, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1021, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[319, "tree-pruning"]], "Tree structure": [[358, "tree-structure"]], "Tree-based feature selection": [[417, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[189, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[375, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[44, "trigonometric-features"]], "Troubleshooting": [[394, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[413, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[546, null]], "TunedThresholdClassifierCV": [[826, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[327, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[268, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[264, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[264, "tuning-the-decision-threshold"], [284, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[407, null]], "Tuning the hyper-parameters of an estimator": [[994, null]], "Tuning the hyper-parameters of the quantile regressors": [[147, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[159, null], [184, "tutorial-exercises"]], "Tweedie regression on insurance claims": [[230, null]], "TweedieRegressor": [[684, null]], "Two-class AdaBoost": [[137, null]], "Type of return values and fitted attributes": [[404, "type-of-return-values-and-fitted-attributes"]], "Types": [[377, "types"]], "T\u00e9l\u00e9com ParisTech": [[1029, "id7"]], "Unbalanced problems": [[1020, "unbalanced-problems"]], "UndefinedMetricWarning": [[581, null]], "Under Development": [[1031, "under-development"]], "Underfitting vs. Overfitting": [[285, null]], "Understanding the decision tree structure": [[358, null]], "Univariate Feature Selection": [[165, null]], "Univariate feature imputation": [[995, "univariate-feature-imputation"]], "Univariate feature selection": [[165, "id1"], [417, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[995, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[378, "universal-attributes"]], "Unlabeled entries in y": [[1018, null]], "Unsupervised Nearest Neighbors": [[1008, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1022, null]], "Unsupervised learning": [[1030, null]], "Unweighted feature selection": [[399, "unweighted-feature-selection"]], "Updating Authors List": [[380, "updating-authors-list"]], "Usage": [[406, "usage"], [409, "usage"], [409, "id1"], [415, "usage"], [415, "id24"], [415, "id25"], [415, "id27"], [415, "id35"], [1001, "usage"]], "Usage Examples": [[399, "usage-examples"]], "Use markdown formatting": [[381, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[384, "useful-pytest-aliases-and-flags"]], "User Guide": [[1031, null]], "User Questions": [[1028, "user-questions"]], "Using Cython": [[382, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[311, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[359, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[377, "using-openmp"]], "Using a debugger, gdb": [[382, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[384, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[1001, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[412, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[152, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[382, "using-gprof"]], "Using multiple metric evaluation": [[1005, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[169, "using-negative-tolerance-values"]], "Using scikit-learn": [[388, "using-scikit-learn"]], "Using stop words": [[416, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[382, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[382, "using-yep-and-gperftools"]], "Utilities for Developers": [[385, null]], "Validation Tools": [[385, "validation-tools"]], "Validation curve": [[1000, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[1000, null]], "ValidationCurveDisplay": [[827, null]], "Vanilla predictive model": [[264, "vanilla-predictive-model"]], "VarianceThreshold": [[606, null]], "Variational Bayesian Gaussian Mixture": [[1004, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[86, null]], "Varying regularization in Multi-layer Perceptron": [[305, null]], "Varying the metric": [[408, "varying-the-metric"]], "Vector Quantization Example": [[87, null]], "Vectorizing a large text corpus with the hashing trick": [[416, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1035, "version-0-10"]], "Version 0.11": [[1035, "version-0-11"]], "Version 0.12": [[1035, "version-0-12"]], "Version 0.12.1": [[1035, "version-0-12-1"]], "Version 0.13": [[1036, null], [1036, "changes-0-13"]], "Version 0.13.1": [[1036, "version-0-13-1"]], "Version 0.14": [[1037, null], [1037, "changes-0-14"]], "Version 0.15": [[1038, null], [1038, "changes-0-15"]], "Version 0.15.1": [[1038, "version-0-15-1"]], "Version 0.15.2": [[1038, "version-0-15-2"]], "Version 0.16": [[1039, null], [1039, "changes-0-16"]], "Version 0.16.1": [[1039, "version-0-16-1"]], "Version 0.17": [[1040, null], [1040, "changes-0-17"]], "Version 0.17.1": [[1040, "version-0-17-1"]], "Version 0.18": [[1041, null], [1041, "changes-0-18"]], "Version 0.18.1": [[1041, "version-0-18-1"]], "Version 0.18.2": [[1041, "version-0-18-2"]], "Version 0.19": [[1042, null], [1042, "id1"]], "Version 0.19.1": [[1042, "version-0-19-1"]], "Version 0.19.2": [[1042, "version-0-19-2"]], "Version 0.20": [[1043, null]], "Version 0.20.0": [[1043, "version-0-20-0"]], "Version 0.20.1": [[1043, "version-0-20-1"]], "Version 0.20.2": [[1043, "version-0-20-2"]], "Version 0.20.3": [[1043, "version-0-20-3"]], "Version 0.20.4": [[1043, "version-0-20-4"]], "Version 0.21": [[1044, null]], "Version 0.21.0": [[1044, "version-0-21-0"]], "Version 0.21.1": [[1044, "version-0-21-1"]], "Version 0.21.2": [[1044, "version-0-21-2"]], "Version 0.21.3": [[1044, "version-0-21-3"]], "Version 0.22": [[1045, null]], "Version 0.22.0": [[1045, "version-0-22-0"]], "Version 0.22.1": [[1045, "version-0-22-1"]], "Version 0.22.2.post1": [[1045, "version-0-22-2-post1"]], "Version 0.23": [[1046, null]], "Version 0.23.0": [[1046, "version-0-23-0"]], "Version 0.23.1": [[1046, "version-0-23-1"]], "Version 0.23.2": [[1046, "version-0-23-2"]], "Version 0.24": [[1047, null]], "Version 0.24.0": [[1047, "version-0-24-0"]], "Version 0.24.1": [[1047, "version-0-24-1"]], "Version 0.24.2": [[1047, "version-0-24-2"]], "Version 0.4": [[1035, "version-0-4"]], "Version 0.5": [[1035, "version-0-5"]], "Version 0.6": [[1035, "version-0-6"]], "Version 0.7": [[1035, "version-0-7"]], "Version 0.8": [[1035, "version-0-8"]], "Version 0.9": [[1035, "version-0-9"]], "Version 1.0": [[1048, null]], "Version 1.0.0": [[1048, "version-1-0-0"]], "Version 1.0.1": [[1048, "version-1-0-1"]], "Version 1.0.2": [[1048, "version-1-0-2"]], "Version 1.1": [[1049, null]], "Version 1.1.0": [[1049, "version-1-1-0"]], "Version 1.1.1": [[1049, "version-1-1-1"]], "Version 1.1.2": [[1049, "version-1-1-2"]], "Version 1.1.3": [[1049, "version-1-1-3"]], "Version 1.2": [[1050, null]], "Version 1.2.0": [[1050, "version-1-2-0"]], "Version 1.2.1": [[1050, "version-1-2-1"]], "Version 1.2.2": [[1050, "version-1-2-2"]], "Version 1.3": [[1051, null]], "Version 1.3.0": [[1051, "version-1-3-0"]], "Version 1.3.1": [[1051, "version-1-3-1"]], "Version 1.3.2": [[1051, "version-1-3-2"]], "Version 1.4": [[1052, null]], "Version 1.4.0": [[1052, "version-1-4-0"]], "Version 1.4.1": [[1052, "version-1-4-1"]], "Version 1.4.2": [[1052, "version-1-4-2"]], "Version 1.5": [[1053, null]], "Version 1.5.0": [[1053, "version-1-5-0"]], "Version 1.5.1": [[1053, "version-1-5-1"]], "Version 1.5.2": [[1053, "version-1-5-2"]], "Version 1.6": [[1054, null]], "Version 1.7": [[1055, null]], "Video resources": [[376, "video-resources"]], "Videos": [[1023, "videos"]], "Visual evaluation of regression models": [[1005, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [30, "visualization"], [52, "visualization"], [340, "visualization"]], "Visualization of MLP weights on MNIST": [[307, null]], "Visualization of cluster hierarchy": [[408, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1032, null]], "Visualizations with Display Objects": [[240, null]], "Visualize Comparison": [[145, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[265, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[265, "visualize-our-data"]], "Visualize the learning curves": [[245, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[92, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[245, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[409, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[265, null]], "Visualizing the stock market structure": [[52, null]], "Voting Classifier": [[415, "voting-classifier"]], "Voting Regressor": [[415, "voting-regressor"]], "VotingClassifier": [[571, null]], "VotingRegressor": [[572, null]], "Warnings and Exceptions": [[385, "warnings-and-exceptions"]], "Ways to contribute": [[376, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[101, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1045, "website-update"]], "Weight handling based on class labels": [[42, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[415, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[399, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[399, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[388, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[388, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[358, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[388, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "WhiteKernel": [[629, null]], "Who is using scikit-learn?": [[1029, null]], "Why are there so many different estimators for linear models?": [[388, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[388, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[388, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[388, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[388, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[388, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why is my pull request not getting any attention?": [[388, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[388, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[415, "why-it-s-faster"]], "Why scikit?": [[388, "why-scikit"]], "Wikipedia principal eigenvector": [[56, null]], "Will you add GPU support?": [[388, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[388, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[394, "winpython-for-windows"]], "Windows": [[374, "windows"]], "Wine recognition dataset": [[373, "wine-recognition-dataset"]], "Workflow Overview": [[402, "workflow-overview"]], "Working on PRs to help review": [[375, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[375, "working-on-issues-to-improve-them"]], "Working with graphs": [[42, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[42, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[184, "working-with-text-documents"], [350, null]], "Wrong causal interpretation": [[187, "wrong-causal-interpretation"]], "XOR dataset": [[344, "xor-dataset"]], "Yhat": [[1029, "id10"]], "Zero one loss": [[1005, "zero-one-loss"]], "Zopa": [[1029, "id27"]], "__sklearn_is_fitted__ as Developer API": [[133, null]], "_safe_indexing": [[930, null]], "accuracy_score": [[707, null]], "add_dummy_feature": [[890, null]], "additive_chi2_kernel": [[762, null]], "adjusted_mutual_info_score": [[708, null]], "adjusted_rand_score": [[709, null]], "affinity_propagation": [[455, null]], "all_displays": [[942, null]], "all_estimators": [[943, null]], "all_functions": [[944, null]], "as_float_array": [[932, null]], "assert_all_finite": [[933, null]], "auc": [[710, null]], "available_if": [[965, null]], "average_precision_score": [[711, null]], "balanced_accuracy_score": [[712, null]], "base.BaseEstimator and mixins:": [[378, null]], "betaworks": [[1029, "id4"]], "binarize": [[891, null]], "brier_score_loss": [[713, null]], "calibration_curve": [[440, null]], "calinski_harabasz_score": [[714, null]], "check_X_y": [[934, null]], "check_array": [[935, null]], "check_consistent_length": [[936, null]], "check_cv": [[828, null]], "check_estimator": [[945, null]], "check_increasing": [[640, null]], "check_is_fitted": [[988, null]], "check_memory": [[989, null]], "check_random_state": [[937, null]], "check_scalar": [[938, null]], "check_scoring": [[715, null]], "check_symmetric": [[990, null]], "chi2": [[607, null]], "chi2_kernel": [[763, null]], "class_likelihood_ratios": [[716, null]], "classification_report": [[717, null]], "clear_data_home": [[487, null]], "clone": [[433, null]], "cluster_optics_dbscan": [[456, null]], "cluster_optics_xi": [[457, null]], "cohen_kappa_score": [[720, null]], "column_or_1d": [[991, null]], "completeness_score": [[721, null]], "compute_class_weight": [[939, null]], "compute_optics_graph": [[458, null]], "compute_sample_weight": [[940, null]], "config_context": [[469, null]], "confusion_matrix": [[722, null]], "consensus_score": [[723, null]], "contingency_matrix": [[718, null]], "cosine_distances": [[764, null]], "cosine_similarity": [[765, null]], "coverage_error": [[724, null]], "cross_val_predict": [[829, null]], "cross_val_score": [[830, null]], "cross_validate": [[831, null]], "d2_absolute_error_score": [[725, null]], "d2_log_loss_score": [[726, null]], "d2_pinball_score": [[727, null]], "d2_tweedie_score": [[728, null]], "davies_bouldin_score": [[729, null]], "dbscan": [[419, null]], "dbscan_clustering": [[89, "dbscan-clustering"]], "dcg_score": [[730, null]], "delayed": [[971, null]], "density": [[949, null]], "deprecated": [[941, null]], "det_curve": [[731, null]], "dict_learning": [[547, null]], "dict_learning_online": [[548, null]], "distance_metrics": [[766, null]], "dump_svmlight_file": [[488, null]], "empirical_covariance": [[478, null]], "enable_halving_search_cv": [[582, null]], "enable_iterative_imputer": [[583, null]], "enet_path": [[685, null]], "estimate_bandwidth": [[459, null]], "estimator_checks_generator": [[946, null]], "estimator_html_repr": [[948, null]], "euclidean_distances": [[767, null]], "explained_variance_score": [[732, null]], "export_graphviz": [[920, null]], "export_text": [[921, null]], "extract_patches_2d": [[587, null]], "f1_score": [[733, null]], "f_classif": [[608, null]], "f_regression": [[609, null]], "fast_logdet": [[950, null]], "fastica": [[420, null]], "fbeta_score": [[734, null]], "fetch_20newsgroups": [[489, null]], "fetch_20newsgroups_vectorized": [[490, null]], "fetch_california_housing": [[491, null]], "fetch_covtype": [[492, null]], "fetch_file": [[493, null]], "fetch_kddcup99": [[494, null]], "fetch_lfw_pairs": [[495, null]], "fetch_lfw_people": [[496, null]], "fetch_olivetti_faces": [[497, null]], "fetch_openml": [[498, null]], "fetch_rcv1": [[499, null]], "fetch_species_distributions": [[500, null]], "fowlkes_mallows_score": [[735, null]], "gen_batches": [[955, null]], "gen_even_slices": [[956, null]], "get_config": [[630, null]], "get_data_home": [[501, null]], "get_feature_names_out Available in all Transformers": [[323, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[378, "get-params-and-set-params"]], "get_routing_for_object": [[963, null]], "get_scorer": [[736, null]], "get_scorer_names": [[737, null]], "get_tags": [[957, null]], "graphical_lasso": [[479, null]], "grid_to_graph": [[588, null]], "hamming_loss": [[738, null]], "has_fit_parameter": [[992, null]], "haversine_distances": [[768, null]], "hinge_loss": [[739, null]], "homogeneity_completeness_v_measure": [[740, null]], "homogeneity_score": [[741, null]], "img_to_graph": [[589, null]], "incr_mean_variance_axis": [[979, null]], "indexable": [[959, null]], "inplace_column_scale": [[980, null]], "inplace_csr_column_scale": [[981, null]], "inplace_csr_row_normalize_l1": [[986, null]], "inplace_csr_row_normalize_l2": [[987, null]], "inplace_row_scale": [[982, null]], "inplace_swap_column": [[983, null]], "inplace_swap_row": [[984, null]], "is_classifier": [[434, null]], "is_clusterer": [[435, null]], "is_multilabel": [[966, null]], "is_outlier_detector": [[436, null]], "is_regressor": [[437, null]], "isotonic_regression": [[641, null]], "jaccard_score": [[742, null]], "johnson_lindenstrauss_min_dim": [[902, null]], "kNN-imputation of the missing values": [[183, "knn-imputation-of-the-missing-values"]], "k_means": [[460, null]], "kcachegrind": [[382, "kcachegrind"]], "kernel_metrics": [[769, null]], "kmeans_plusplus": [[461, null]], "kneighbors_graph": [[861, null]], "l1_min_c": [[915, null]], "label_binarize": [[892, null]], "label_ranking_average_precision_score": [[743, null]], "label_ranking_loss": [[744, null]], "laplacian_kernel": [[770, null]], "lars_path": [[686, null]], "lars_path_gram": [[687, null]], "lasso_path": [[688, null]], "learning_curve": [[832, null]], "ledoit_wolf": [[480, null]], "ledoit_wolf_shrinkage": [[481, null]], "linear_kernel": [[771, null]], "load_breast_cancer": [[502, null]], "load_diabetes": [[503, null]], "load_digits": [[504, null]], "load_files": [[505, null]], "load_iris": [[506, null]], "load_linnerud": [[507, null]], "load_sample_image": [[508, null]], "load_sample_images": [[509, null]], "load_svmlight_file": [[510, null]], "load_svmlight_files": [[511, null]], "load_wine": [[512, null]], "locally_linear_embedding": [[697, null]], "log_loss": [[745, null]], "macOS": [[374, "macos"]], "macOS compilers from Homebrew": [[374, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[374, "macos-compilers-from-conda-forge"]], "make_biclusters": [[513, null]], "make_blobs": [[381, "make-blobs"], [514, null]], "make_checkerboard": [[515, null]], "make_circles": [[516, null]], "make_classification": [[381, "make-classification"], [517, null]], "make_column_selector": [[467, null]], "make_column_transformer": [[468, null]], "make_friedman1": [[518, null]], "make_friedman2": [[519, null]], "make_friedman3": [[520, null]], "make_gaussian_quantiles": [[521, null]], "make_hastie_10_2": [[522, null]], "make_low_rank_matrix": [[523, null]], "make_moons": [[524, null]], "make_multilabel_classification": [[525, null]], "make_pipeline": [[869, null]], "make_regression": [[381, "make-regression"], [526, null]], "make_s_curve": [[527, null]], "make_scorer": [[746, null]], "make_sparse_coded_signal": [[528, null]], "make_sparse_spd_matrix": [[529, null]], "make_sparse_uncorrelated": [[530, null]], "make_spd_matrix": [[531, null]], "make_swiss_roll": [[532, null]], "make_union": [[870, null]], "manhattan_distances": [[772, null]], "matthews_corrcoef": [[747, null]], "max_error": [[748, null]], "maxabs_scale": [[893, null]], "mean_absolute_error": [[749, null]], "mean_absolute_percentage_error": [[750, null]], "mean_gamma_deviance": [[751, null]], "mean_pinball_loss": [[752, null]], "mean_poisson_deviance": [[753, null]], "mean_shift": [[462, null]], "mean_squared_error": [[754, null]], "mean_squared_log_error": [[755, null]], "mean_tweedie_deviance": [[756, null]], "mean_variance_axis": [[985, null]], "median_absolute_error": [[757, null]], "min_cluster_size": [[89, "min-cluster-size"]], "min_pos": [[931, null]], "min_samples": [[89, "min-samples"]], "minmax_scale": [[894, null]], "multilabel_confusion_matrix": [[758, null]], "murmurhash3_32": [[969, null]], "mutual_info_classif": [[610, null]], "mutual_info_regression": [[611, null]], "mutual_info_score": [[759, null]], "nan_euclidean_distances": [[773, null]], "ndcg_score": [[760, null]], "non_negative_factorization": [[549, null]], "normalize": [[895, null]], "normalized_mutual_info_score": [[761, null]], "oas": [[421, null]], "orthogonal_mp": [[689, null]], "orthogonal_mp_gram": [[690, null]], "pair_confusion_matrix": [[719, null]], "paired_cosine_distances": [[774, null]], "paired_distances": [[775, null]], "paired_euclidean_distances": [[776, null]], "paired_manhattan_distances": [[777, null]], "pairwise_distances": [[782, null]], "pairwise_distances_argmin": [[783, null]], "pairwise_distances_argmin_min": [[784, null]], "pairwise_distances_chunked": [[785, null]], "pairwise_kernels": [[778, null]], "parallel_backend": [[972, null]], "parametrize_with_checks": [[947, null]], "partial_dependence": [[637, null]], "permutation_importance": [[638, null]], "permutation_test_score": [[833, null]], "pickle, joblib, and cloudpickle": [[402, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[922, null]], "polynomial_kernel": [[779, null]], "power_transform": [[896, null]], "precision_recall_curve": [[786, null]], "precision_recall_fscore_support": [[787, null]], "precision_score": [[788, null]], "process_routing": [[964, null]], "quantile_transform": [[897, null]], "r2_score": [[789, null]], "r_regression": [[612, null]], "radius_neighbors_graph": [[862, null]], "rand_score": [[790, null]], "randomized_range_finder": [[951, null]], "randomized_svd": [[952, null]], "rbf_kernel": [[780, null]], "recall_score": [[791, null]], "reconstruct_from_patches_2d": [[590, null]], "register_parallel_backend": [[974, null]], "resample": [[975, null]], "ridge_regression": [[691, null]], "robust_scale": [[898, null]], "roc_auc_score": [[792, null]], "roc_curve": [[793, null]], "root_mean_squared_error": [[794, null]], "root_mean_squared_log_error": [[795, null]], "safe_mask": [[976, null]], "safe_sparse_dot": [[953, null]], "safe_sqr": [[977, null]], "sample_without_replacement": [[973, null]], "scale": [[899, null]], "set_config": [[906, null]], "show_versions": [[907, null]], "shrunk_covariance": [[482, null]], "shuffle": [[978, null]], "sigmoid_kernel": [[781, null]], "silhouette_samples": [[796, null]], "silhouette_score": [[797, null]], "single_source_shortest_path_length": [[958, null]], "sklearn": [[3, null], [1051, "sklearn"]], "sklearn.base": [[4, null], [1044, "sklearn-base"], [1045, "sklearn-base"], [1047, "sklearn-base"], [1048, "sklearn-base"], [1049, "sklearn-base"], [1050, "sklearn-base"], [1050, "id2"], [1050, "id10"], [1051, "sklearn-base"], [1052, "sklearn-base"]], "sklearn.calibration": [[5, null], [1044, "sklearn-calibration"], [1045, "sklearn-calibration"], [1047, "sklearn-calibration"], [1048, "sklearn-calibration"], [1048, "id7"], [1049, "sklearn-calibration"], [1050, "sklearn-calibration"], [1050, "id11"], [1051, "sklearn-calibration"], [1051, "id7"], [1052, "sklearn-calibration"], [1052, "id4"], [1053, "sklearn-calibration"], [1053, "id7"]], "sklearn.cluster": [[6, null], [1043, "sklearn-cluster"], [1043, "id2"], [1043, "id11"], [1043, "id24"], [1044, "sklearn-cluster"], [1044, "id8"], [1045, "sklearn-cluster"], [1045, "id5"], [1046, "sklearn-cluster"], [1046, "id2"], [1046, "id5"], [1047, "sklearn-cluster"], [1048, "sklearn-cluster"], [1048, "id1"], [1048, "id8"], [1049, "sklearn-cluster"], [1049, "id8"], [1050, "sklearn-cluster"], [1050, "id12"], [1051, "sklearn-cluster"], [1051, "id8"], [1052, "sklearn-cluster"], [1052, "id5"], [1053, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1043, "sklearn-compose"], [1043, "id3"], [1043, "id6"], [1043, "id12"], [1043, "id25"], [1044, "sklearn-compose"], [1044, "id9"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1047, "id5"], [1048, "sklearn-compose"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1052, "sklearn-compose"], [1052, "id6"], [1053, "sklearn-compose"], [1053, "id3"], [1053, "id8"]], "sklearn.covariance": [[8, null], [1043, "sklearn-covariance"], [1043, "id26"], [1047, "sklearn-covariance"], [1048, "sklearn-covariance"], [1049, "sklearn-covariance"], [1051, "sklearn-covariance"], [1052, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1045, "sklearn-cross-decomposition"], [1047, "sklearn-cross-decomposition"], [1047, "id6"], [1049, "sklearn-cross-decomposition"], [1051, "sklearn-cross-decomposition"], [1053, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1043, "sklearn-datasets"], [1043, "id13"], [1043, "id27"], [1044, "sklearn-datasets"], [1044, "id10"], [1045, "sklearn-datasets"], [1046, "sklearn-datasets"], [1047, "sklearn-datasets"], [1048, "sklearn-datasets"], [1048, "id9"], [1049, "sklearn-datasets"], [1049, "id9"], [1050, "sklearn-datasets"], [1050, "id13"], [1051, "sklearn-datasets"], [1051, "id9"], [1052, "sklearn-datasets"], [1053, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1043, "sklearn-decomposition"], [1043, "id4"], [1043, "id14"], [1043, "id28"], [1044, "sklearn-decomposition"], [1044, "id11"], [1045, "sklearn-decomposition"], [1046, "sklearn-decomposition"], [1046, "id6"], [1047, "sklearn-decomposition"], [1047, "id7"], [1048, "sklearn-decomposition"], [1048, "id10"], [1049, "sklearn-decomposition"], [1049, "id10"], [1050, "sklearn-decomposition"], [1050, "id14"], [1051, "sklearn-decomposition"], [1051, "id10"], [1052, "sklearn-decomposition"], [1053, "sklearn-decomposition"], [1053, "id9"]], "sklearn.discriminant_analysis": [[12, null], [1043, "sklearn-discriminant-analysis"], [1044, "sklearn-discriminant-analysis"], [1047, "sklearn-discriminant-analysis"], [1049, "sklearn-discriminant-analysis"], [1050, "sklearn-discriminant-analysis"], [1051, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1043, "sklearn-dummy"], [1044, "sklearn-dummy"], [1045, "sklearn-dummy"], [1048, "sklearn-dummy"], [1049, "sklearn-dummy"], [1053, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1043, "sklearn-ensemble"], [1043, "id29"], [1044, "sklearn-ensemble"], [1044, "id12"], [1045, "sklearn-ensemble"], [1046, "sklearn-ensemble"], [1046, "id7"], [1047, "sklearn-ensemble"], [1047, "id8"], [1048, "sklearn-ensemble"], [1048, "id2"], [1048, "id11"], [1049, "sklearn-ensemble"], [1050, "sklearn-ensemble"], [1050, "id3"], [1050, "id15"], [1051, "sklearn-ensemble"], [1051, "id11"], [1052, "sklearn-ensemble"], [1052, "id7"], [1053, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1047, "sklearn-exceptions"], [1051, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1044, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1043, "sklearn-feature-extraction"], [1043, "id15"], [1043, "id30"], [1044, "sklearn-feature-extraction"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1046, "id8"], [1047, "sklearn-feature-extraction"], [1047, "id9"], [1048, "sklearn-feature-extraction"], [1048, "id12"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"], [1052, "sklearn-feature-extraction"], [1053, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[18, null], [1043, "sklearn-feature-selection"], [1045, "sklearn-feature-selection"], [1046, "sklearn-feature-selection"], [1047, "sklearn-feature-selection"], [1048, "sklearn-feature-selection"], [1048, "id13"], [1049, "sklearn-feature-selection"], [1049, "id2"], [1049, "id11"], [1050, "sklearn-feature-selection"], [1050, "id16"], [1051, "sklearn-feature-selection"], [1051, "id12"], [1052, "sklearn-feature-selection"], [1053, "sklearn-feature-selection"]], "sklearn.frozen": [[19, null]], "sklearn.gaussian_process": [[20, null], [1043, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"], [1047, "id10"], [1048, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"]], "sklearn.impute": [[21, null], [1043, "sklearn-impute"], [1043, "id31"], [1044, "sklearn-impute"], [1044, "id13"], [1045, "sklearn-impute"], [1045, "id6"], [1046, "sklearn-impute"], [1047, "sklearn-impute"], [1048, "sklearn-impute"], [1049, "sklearn-impute"], [1049, "id12"], [1050, "sklearn-impute"], [1051, "sklearn-impute"], [1051, "id13"], [1052, "sklearn-impute"], [1053, "sklearn-impute"]], "sklearn.inspection": [[22, null], [1044, "sklearn-inspection"], [1044, "id3"], [1044, "id14"], [1045, "sklearn-inspection"], [1045, "id7"], [1046, "sklearn-inspection"], [1046, "id11"], [1047, "sklearn-inspection"], [1048, "sklearn-inspection"], [1049, "sklearn-inspection"], [1050, "sklearn-inspection"], [1050, "id17"], [1051, "sklearn-inspection"], [1052, "sklearn-inspection"], [1052, "id8"], [1053, "sklearn-inspection"]], "sklearn.isotonic": [[23, null], [1043, "sklearn-isotonic"], [1044, "sklearn-isotonic"], [1045, "sklearn-isotonic"], [1047, "sklearn-isotonic"], [1049, "sklearn-isotonic"], [1050, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[24, null], [1045, "sklearn-kernel-approximation"], [1047, "sklearn-kernel-approximation"], [1048, "sklearn-kernel-approximation"], [1049, "sklearn-kernel-approximation"], [1050, "sklearn-kernel-approximation"], [1051, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[25, null], [1052, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[26, null], [1043, "sklearn-linear-model"], [1043, "id16"], [1043, "id32"], [1044, "sklearn-linear-model"], [1044, "id15"], [1045, "sklearn-linear-model"], [1046, "sklearn-linear-model"], [1046, "id9"], [1047, "sklearn-linear-model"], [1047, "id11"], [1048, "sklearn-linear-model"], [1048, "id3"], [1048, "id14"], [1049, "sklearn-linear-model"], [1049, "id13"], [1050, "sklearn-linear-model"], [1050, "id18"], [1051, "sklearn-linear-model"], [1052, "sklearn-linear-model"], [1052, "id9"], [1053, "sklearn-linear-model"]], "sklearn.manifold": [[27, null], [1043, "sklearn-manifold"], [1044, "sklearn-manifold"], [1045, "sklearn-manifold"], [1046, "sklearn-manifold"], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1048, "id15"], [1049, "sklearn-manifold"], [1049, "id14"], [1050, "sklearn-manifold"], [1050, "id19"], [1051, "sklearn-manifold"], [1053, "sklearn-manifold"]], "sklearn.metrics": [[28, null], [1043, "sklearn-metrics"], [1043, "id17"], [1043, "id33"], [1044, "sklearn-metrics"], [1044, "id4"], [1044, "id16"], [1045, "sklearn-metrics"], [1045, "id2"], [1045, "id8"], [1046, "sklearn-metrics"], [1046, "id10"], [1047, "sklearn-metrics"], [1047, "id2"], [1047, "id12"], [1048, "sklearn-metrics"], [1048, "id16"], [1049, "sklearn-metrics"], [1049, "id3"], [1049, "id15"], [1050, "sklearn-metrics"], [1051, "sklearn-metrics"], [1051, "id2"], [1051, "id14"], [1052, "sklearn-metrics"], [1053, "sklearn-metrics"], [1053, "id4"], [1053, "id10"]], "sklearn.mixture": [[29, null], [1043, "sklearn-mixture"], [1043, "id34"], [1044, "sklearn-mixture"], [1048, "sklearn-mixture"], [1049, "sklearn-mixture"], [1051, "sklearn-mixture"], [1051, "id15"], [1053, "sklearn-mixture"]], "sklearn.model_selection": [[30, null], [1043, "sklearn-model-selection"], [1043, "id35"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"], [1045, "id9"], [1045, "id13"], [1046, "sklearn-model-selection"], [1047, "sklearn-model-selection"], [1047, "id13"], [1048, "sklearn-model-selection"], [1049, "sklearn-model-selection"], [1050, "sklearn-model-selection"], [1050, "id20"], [1051, "sklearn-model-selection"], [1052, "sklearn-model-selection"], [1053, "sklearn-model-selection"], [1053, "id11"]], "sklearn.multiclass": [[31, null], [1044, "sklearn-multiclass"], [1047, "sklearn-multiclass"], [1048, "sklearn-multiclass"], [1049, "sklearn-multiclass"]], "sklearn.multioutput": [[32, null], [1043, "sklearn-multioutput"], [1044, "sklearn-multioutput"], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1047, "id14"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"], [1052, "sklearn-multioutput"], [1053, "sklearn-multioutput"]], "sklearn.naive_bayes": [[33, null], [1043, "sklearn-naive-bayes"], [1045, "sklearn-naive-bayes"], [1045, "id10"], [1046, "sklearn-naive-bayes"], [1047, "sklearn-naive-bayes"], [1048, "sklearn-naive-bayes"], [1050, "sklearn-naive-bayes"], [1051, "sklearn-naive-bayes"]], "sklearn.neighbors": [[34, null], [1043, "sklearn-neighbors"], [1043, "id7"], [1043, "id18"], [1043, "id36"], [1044, "sklearn-neighbors"], [1044, "id5"], [1044, "id17"], [1045, "sklearn-neighbors"], [1045, "id11"], [1047, "sklearn-neighbors"], [1048, "sklearn-neighbors"], [1048, "id4"], [1048, "id17"], [1049, "sklearn-neighbors"], [1050, "sklearn-neighbors"], [1051, "sklearn-neighbors"], [1051, "id16"], [1052, "sklearn-neighbors"], [1053, "sklearn-neighbors"]], "sklearn.neural_network": [[35, null], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1050, "id21"], [1051, "sklearn-neural-network"]], "sklearn.pipeline": [[36, null], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1048, "id18"], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1053, "sklearn-pipeline"]], "sklearn.preprocessing": [[37, null], [1043, "sklearn-preprocessing"], [1043, "id19"], [1043, "id37"], [1044, "sklearn-preprocessing"], [1044, "id18"], [1045, "sklearn-preprocessing"], [1045, "id12"], [1046, "sklearn-preprocessing"], [1047, "sklearn-preprocessing"], [1047, "id15"], [1048, "sklearn-preprocessing"], [1048, "id19"], [1049, "sklearn-preprocessing"], [1049, "id4"], [1049, "id16"], [1050, "sklearn-preprocessing"], [1050, "id4"], [1050, "id22"], [1051, "sklearn-preprocessing"], [1051, "id17"], [1052, "sklearn-preprocessing"], [1052, "id10"], [1053, "sklearn-preprocessing"]], "sklearn.random_projection": [[38, null], [1049, "sklearn-random-projection"]], "sklearn.semi_supervised": [[39, null], [1045, "sklearn-semi-supervised"], [1046, "sklearn-semi-supervised"], [1047, "sklearn-semi-supervised"], [1047, "id3"], [1047, "id16"], [1051, "sklearn-semi-supervised"]], "sklearn.svm": [[40, null], [1043, "sklearn-svm"], [1043, "id38"], [1044, "sklearn-svm"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1047, "sklearn-svm"], [1048, "sklearn-svm"], [1048, "id20"], [1049, "sklearn-svm"], [1050, "sklearn-svm"], [1051, "sklearn-svm"], [1053, "sklearn-svm"]], "sklearn.tree": [[41, null], [1043, "sklearn-tree"], [1044, "sklearn-tree"], [1044, "id19"], [1045, "sklearn-tree"], [1046, "sklearn-tree"], [1047, "sklearn-tree"], [1047, "id17"], [1048, "sklearn-tree"], [1048, "id21"], [1049, "sklearn-tree"], [1049, "id5"], [1049, "id17"], [1050, "sklearn-tree"], [1050, "id5"], [1050, "id23"], [1051, "sklearn-tree"], [1051, "id3"], [1051, "id18"], [1052, "sklearn-tree"], [1052, "id11"], [1053, "sklearn-tree"], [1053, "id12"]], "sklearn.utils": [[42, null], [1043, "sklearn-utils"], [1043, "id20"], [1043, "id39"], [1044, "sklearn-utils"], [1045, "sklearn-utils"], [1045, "id14"], [1046, "sklearn-utils"], [1046, "id12"], [1047, "sklearn-utils"], [1047, "id18"], [1048, "sklearn-utils"], [1048, "id5"], [1048, "id22"], [1049, "sklearn-utils"], [1049, "id18"], [1050, "sklearn-utils"], [1050, "id6"], [1050, "id24"], [1051, "sklearn-utils"], [1052, "sklearn-utils"], [1052, "id12"], [1053, "sklearn-utils"], [1053, "id13"]], "sklearn.utils.sparsefuncs": [[1044, "sklearn-utils-sparsefuncs"]], "skops.io": [[402, "skops-io"]], "smacof": [[698, null]], "solido": [[1029, "id23"]], "sort_graph_by_row_values": [[863, null]], "sparse_encode": [[550, null]], "spectral_clustering": [[463, null]], "spectral_embedding": [[699, null]], "t-SNE: The effect of various perplexity values on the shape": [[237, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[1002, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[798, null]], "train_test_split": [[834, null]], "trustworthiness": [[700, null]], "type_of_target": [[967, null]], "unique_labels": [[968, null]], "v_measure_score": [[799, null]], "validate_data": [[993, null]], "validation_curve": [[835, null]], "ward_tree": [[464, null]], "weighted_mode": [[954, null]], "zero_one_loss": [[800, null]], "\u201cStatlog\u201d German credit dataset": [[264, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.frozen", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_outlier_detector", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.EstimatorCheckFailedWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.frozen.FrozenEstimator", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.estimator_checks_generator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6", "whats_new/v1.7"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.frozen.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_outlier_detector.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.EstimatorCheckFailedWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.frozen.FrozenEstimator.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.estimator_checks_generator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst", "whats_new/v1.7.rst"], "indexentries": {"1d": [[390, "term-1d", true]], "1d array": [[390, "term-1d-array", true]], "2d": [[390, "term-2d", true]], "2d array": [[390, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[467, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[941, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.__call__", false]], "_safe_indexing() (in module sklearn.utils)": [[930, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[962, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[455, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[441, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[442, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[942, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[943, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[944, "sklearn.utils.discovery.all_functions", false]], "api": [[390, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[648, "sklearn.linear_model.ARDRegression", false]], "array-like": [[390, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[932, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[933, "sklearn.utils.assert_all_finite", false]], "attribute": [[390, "term-attribute", true]], "attributes": [[390, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[710, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[965, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[390, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[848, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[422, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[801, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[649, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[864, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[423, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[423, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[452, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[454, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.Binarizer", false]], "binary": [[390, "term-binary", true]], "birch (class in sklearn.cluster)": [[443, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[444, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[713, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[923, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[438, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[440, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[439, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[390, "term-callable", true]], "categorical feature": [[390, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[844, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[935, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[936, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[945, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[640, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[988, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[989, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[937, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[938, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[715, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[990, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[934, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[716, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[390, "term-class_weight", true]], "classes_": [[390, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[596, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[597, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[678, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[679, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[803, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[804, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[807, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[818, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[868, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[717, "sklearn.metrics.classification_report", false]], "classifier": [[390, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[839, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[425, "sklearn.base.ClassifierMixin", false]], "classifiers": [[390, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[924, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[424, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[487, "sklearn.datasets.clear_data_home", false]], "clone": [[390, "term-clone", true]], "clone() (in module sklearn.base)": [[433, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[390, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[456, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[457, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[390, "term-clusterer", true]], "clusterers": [[390, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[426, "sklearn.base.ClusterMixin", false]], "coef_": [[390, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[910, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[911, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[912, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[913, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[914, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[991, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[465, "sklearn.compose.ColumnTransformer", false]], "common tests": [[390, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[845, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.completeness_score", false]], "components_": [[390, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[939, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[458, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[940, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[469, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[722, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[390, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[960, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[718, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[390, "term-continuous", true]], "continuous multi-output": [[390, "term-continuous-multi-output", true]], "continuous multioutput": [[390, "term-continuous-multioutput", true]], "convergencewarning": [[573, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[591, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[724, "sklearn.metrics.coverage_error", false]], "cross fitting": [[390, "term-0", true]], "cross validation": [[390, "term-1", true]], "cross-fitting": [[390, "term-cross-fitting", true]], "cross-validation": [[390, "term-cross-validation", true]], "cross-validation estimator": [[390, "term-cross-validation-estimator", true]], "cross-validation generator": [[390, "term-cross-validation-generator", true]], "cross-validation splitter": [[390, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.cross_validate", false]], "cv": [[390, "term-cv", true]], "cv splitter": [[390, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[390, "term-data-leakage", true]], "data type": [[390, "term-data-type", true]], "dataconversionwarning": [[574, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[575, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[445, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[419, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.dcg_score", false]], "decision_function": [[390, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[565, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[635, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[916, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[917, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "delayed() (in module sklearn.utils.parallel)": [[971, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[390, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[949, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[427, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[941, "sklearn.utils.deprecated", false]], "deprecation": [[390, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[731, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[547, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[548, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[533, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[584, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[390, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[703, "sklearn.metrics.DistanceMetric", false]], "docstring": [[390, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[390, "term-double-underscore", true]], "double underscore notation": [[390, "term-double-underscore-notation", true]], "dtype": [[390, "term-dtype", true]], "duck typing": [[390, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[553, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[554, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[488, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[390, "term-early-stopping", true]], "efficiencywarning": [[576, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[650, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[470, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[390, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[478, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[471, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[459, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[390, "term-estimator", true]], "estimator instance": [[390, "term-estimator-instance", true]], "estimator tags": [[390, "term-estimator-tags", true]], "estimator_checks_generator() (in module sklearn.utils.estimator_checks)": [[946, "sklearn.utils.estimator_checks.estimator_checks_generator", false]], "estimator_html_repr() (in module sklearn.utils)": [[948, "sklearn.utils.estimator_html_repr", false]], "estimatorcheckfailedwarning": [[577, "sklearn.exceptions.EstimatorCheckFailedWarning", false]], "estimators": [[390, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[557, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[558, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[559, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[560, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[565, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[566, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[567, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[568, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[390, "term-evaluation-metric", true]], "evaluation metrics": [[390, "term-evaluation-metrics", true]], "examples": [[390, "term-examples", true]], "experimental": [[390, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[920, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[921, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[587, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[918, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[919, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[559, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[560, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[534, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[950, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[535, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[420, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.fbeta_score", false]], "feature": [[390, "term-feature", true]], "feature extractor": [[390, "term-feature-extractor", true]], "feature extractors": [[390, "term-feature-extractors", true]], "feature vector": [[390, "term-feature-vector", true]], "feature_importances_": [[390, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[555, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[556, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[559, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[560, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[561, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[562, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[566, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[567, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[568, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[916, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[917, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[918, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[919, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[867, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[868, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[446, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[585, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[390, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[867, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[500, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[390, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[533, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[537, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[541, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[542, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[544, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[545, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[546, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[554, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[558, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[565, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.frozen.frozenestimator method)": [[613, "sklearn.frozen.FrozenEstimator.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[390, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[446, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[426, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[430, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[565, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[390, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[432, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[533, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[537, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[541, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[542, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[544, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[545, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[546, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[578, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[390, "term-fitted", true]], "fitting": [[390, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[803, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[439, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[635, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[636, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[701, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[702, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[704, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[705, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[706, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[810, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[827, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[439, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[701, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[702, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[704, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[705, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[706, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.fromkeys", false]], "frozenestimator (class in sklearn.frozen)": [[613, "sklearn.frozen.FrozenEstimator", false]], "function": [[390, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[390, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[652, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[802, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[846, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[900, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[955, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[956, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[630, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[501, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[390, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[424, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[429, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[533, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[537, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[541, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[542, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[544, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[545, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[546, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[423, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[422, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[533, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[537, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[541, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[542, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[544, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[545, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[546, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[554, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[558, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[565, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.frozen.frozenestimator method)": [[613, "sklearn.frozen.FrozenEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[805, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[806, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[809, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[811, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[812, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[813, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[814, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[817, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[819, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[820, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[821, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[822, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[823, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[824, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[825, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[703, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[390, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[805, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[806, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[809, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[811, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[812, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[813, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[814, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[817, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[819, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[820, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[821, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[822, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[823, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[824, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[825, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[390, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[422, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[533, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[537, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[541, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[542, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[544, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[545, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[546, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[554, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[558, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[565, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.frozen.frozenestimator method)": [[613, "sklearn.frozen.FrozenEstimator.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[963, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[736, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[737, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[423, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[423, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[957, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[561, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[562, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[479, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[472, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[473, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[588, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[804, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[805, "sklearn.model_selection.GroupKFold", false]], "groups": [[390, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[806, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[807, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[808, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[738, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[992, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[592, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[447, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[739, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[740, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[741, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[653, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[390, "term-hyper-parameter", true]], "hyperparameter": [[390, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[589, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[390, "term-imputation", true]], "impute": [[390, "term-impute", true]], "inconsistentversionwarning": [[579, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[979, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[536, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[390, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[959, "sklearn.utils.indexable", false]], "induction": [[390, "term-induction", true]], "inductive": [[390, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[881, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[882, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[889, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[980, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[981, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[986, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[987, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[982, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[983, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[984, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[925, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[537, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[541, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[542, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[545, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[546, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[434, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[435, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[966, "sklearn.utils.multiclass.is_multilabel", false]], "is_outlier_detector() (in module sklearn.base)": [[436, "sklearn.base.is_outlier_detector", false]], "is_regressor() (in module sklearn.base)": [[437, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[565, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[692, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[641, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[639, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[631, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[742, "sklearn.metrics.jaccard_score", false]], "joblib": [[390, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[902, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[460, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KDTree", false]], "kernel": [[390, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[853, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[537, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[647, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[809, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[448, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[461, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[861, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[850, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[851, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[852, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[632, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[915, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[390, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[743, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[744, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[903, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[390, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[904, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[654, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[656, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[538, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[390, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[811, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[812, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[813, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[814, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[480, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[481, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[474, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[661, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[908, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[909, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[512, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[697, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[693, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[854, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[745, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[663, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[467, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[468, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[869, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[746, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[532, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[870, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[747, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[748, "sklearn.metrics.max_error", false]], "max_iter": [[390, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[694, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[462, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[756, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[985, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[449, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[757, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[390, "term-memmapping", true]], "memory": [[390, "term-memory", true]], "memory map": [[390, "term-memory-map", true]], "memory mapping": [[390, "term-memory-mapping", true]], "meta-estimator": [[390, "term-meta-estimator", true]], "meta-estimators": [[390, "term-meta-estimators", true]], "metadata": [[390, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[960, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[961, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[390, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[428, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[390, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[962, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[390, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[931, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[475, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[450, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[540, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[541, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[390, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[633, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[865, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[866, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.frozen", false], [20, "module-sklearn.gaussian_process", false], [20, "module-sklearn.gaussian_process.kernels", false], [21, "module-sklearn.impute", false], [22, "module-sklearn.inspection", false], [23, "module-sklearn.isotonic", false], [24, "module-sklearn.kernel_approximation", false], [25, "module-sklearn.kernel_ridge", false], [26, "module-sklearn.linear_model", false], [27, "module-sklearn.manifold", false], [28, "module-sklearn.metrics", false], [28, "module-sklearn.metrics.cluster", false], [28, "module-sklearn.metrics.pairwise", false], [29, "module-sklearn.mixture", false], [30, "module-sklearn.model_selection", false], [31, "module-sklearn.multiclass", false], [32, "module-sklearn.multioutput", false], [33, "module-sklearn.naive_bayes", false], [34, "module-sklearn.neighbors", false], [35, "module-sklearn.neural_network", false], [36, "module-sklearn.pipeline", false], [37, "module-sklearn.preprocessing", false], [38, "module-sklearn.random_projection", false], [39, "module-sklearn.semi_supervised", false], [40, "module-sklearn.svm", false], [41, "module-sklearn.tree", false], [42, "module-sklearn.utils", false], [42, "module-sklearn.utils.arrayfuncs", false], [42, "module-sklearn.utils.class_weight", false], [42, "module-sklearn.utils.discovery", false], [42, "module-sklearn.utils.estimator_checks", false], [42, "module-sklearn.utils.extmath", false], [42, "module-sklearn.utils.graph", false], [42, "module-sklearn.utils.metadata_routing", false], [42, "module-sklearn.utils.metaestimators", false], [42, "module-sklearn.utils.multiclass", false], [42, "module-sklearn.utils.parallel", false], [42, "module-sklearn.utils.random", false], [42, "module-sklearn.utils.sparsefuncs", false], [42, "module-sklearn.utils.sparsefuncs_fast", false], [42, "module-sklearn.utils.validation", false], [582, "module-sklearn.experimental.enable_halving_search_cv", false], [583, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[390, "term-multi-class", true]], "multi-class multi-output": [[390, "term-multi-class-multi-output", true]], "multi-label": [[390, "term-multi-label", true]], "multi-output": [[390, "term-multi-output", true]], "multi-output continuous": [[390, "term-multi-output-continuous", true]], "multi-output multi-class": [[390, "term-multi-output-multi-class", true]], "multiclass": [[390, "term-multiclass", true]], "multiclass multioutput": [[390, "term-multiclass-multioutput", true]], "multilabel": [[390, "term-multilabel", true]], "multilabel indicator matrices": [[390, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[390, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[837, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[758, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[847, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[390, "term-multioutput", true]], "multioutput continuous": [[390, "term-multioutput-continuous", true]], "multioutput multiclass": [[390, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[840, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[841, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[664, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[666, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[667, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[969, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[610, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[611, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[759, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[836, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[837, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[390, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[544, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[390, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[466, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[544, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[569, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[570, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[571, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[572, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[600, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[804, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[807, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[818, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[867, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[868, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[390, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[390, "term-n_iter_no_change", true]], "n_jobs": [[390, "term-n_jobs", true]], "n_outputs": [[390, "term-n_outputs", true]], "n_samples": [[390, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[910, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[911, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[912, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[913, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[914, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[390, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[569, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[570, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[571, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[572, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[868, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[465, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[390, "term-narrative-docs", true]], "narrative documentation": [[390, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[760, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[855, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[856, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[542, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[549, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[761, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[580, "sklearn.exceptions.NotFittedError", false]], "np": [[390, "term-np", true]], "nusvc (class in sklearn.svm)": [[910, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[911, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[643, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[476, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[421, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[912, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[429, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[836, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[837, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[390, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[451, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[689, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[390, "term-out-of-core", true]], "outlier detector": [[390, "term-outlier-detector", true]], "outlier detectors": [[390, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[430, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[838, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[390, "term-outputs", true]], "pair": [[390, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[719, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[390, "term-pairwise-metric", true]], "pairwise metrics": [[390, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[782, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[783, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[784, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[785, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[970, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[972, "sklearn.utils.parallel_backend", false]], "param": [[390, "term-param", true]], "parameter": [[390, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[815, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[390, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[816, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[947, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[390, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[637, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[390, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[636, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[650, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[651, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[656, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[657, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[666, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[543, "sklearn.decomposition.PCA", false]], "pd": [[390, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[672, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[638, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[868, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[439, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[635, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[636, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[701, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[702, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[704, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[705, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[706, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[810, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[827, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[922, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[484, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[485, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[486, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[673, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[390, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[883, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[786, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[787, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[704, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[390, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[817, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[390, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[554, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[558, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[565, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[390, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[390, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[705, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[390, "term-predictor", true]], "predictors": [[390, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[970, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[910, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[913, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[910, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[913, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[964, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[674, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[612, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[862, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.rand_score", false]], "random_state": [[390, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[566, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[567, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[951, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[952, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[818, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[568, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[675, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[645, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[590, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[390, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[974, "sklearn.utils.register_parallel_backend", false]], "regressor": [[390, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[842, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[431, "sklearn.base.RegressorMixin", false]], "regressors": [[390, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[926, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[820, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[975, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[676, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[691, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[678, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[679, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[677, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[898, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[793, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[706, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[794, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[795, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[390, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[976, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[953, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[977, "sklearn.utils.safe_sqr", false]], "sample": [[390, "term-sample", true]], "sample properties": [[390, "term-sample-properties", true]], "sample property": [[390, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[390, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[973, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[390, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[899, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[390, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[390, "term-scikit-learn-contrib", true]], "score": [[390, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[425, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[427, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[431, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[554, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[558, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[390, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[565, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[390, "term-scorer", true]], "scoring": [[390, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[390, "term-semi-supervised", true]], "semi-supervised learning": [[390, "term-semi-supervised-learning", true]], "semisupervised": [[390, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[906, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[554, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[558, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[565, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[432, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[533, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[537, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[541, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[542, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[544, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[545, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[546, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[390, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[422, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[533, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[537, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[541, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[542, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[544, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[545, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[546, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[554, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[558, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[565, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.frozen.frozenestimator method)": [[613, "sklearn.frozen.FrozenEstimator.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[618, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[622, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[623, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[625, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[626, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[628, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[675, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[694, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[695, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[696, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[853, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[854, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[856, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[905, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[912, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[840, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[554, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[553, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[554, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[557, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[558, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[559, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[560, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[566, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[567, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[614, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[615, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[647, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[648, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[649, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[650, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[651, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[652, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[653, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[654, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[655, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[656, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[657, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[658, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[659, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[660, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[661, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[664, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[665, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[666, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[667, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[673, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[674, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[676, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[678, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[679, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[677, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[683, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[684, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[803, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[836, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[837, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[838, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[839, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[841, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[842, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[843, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[844, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[845, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[846, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[847, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[850, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[851, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[855, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[858, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[859, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[865, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[866, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[903, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[904, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[909, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[910, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[911, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[913, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[914, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[916, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[917, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[918, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[919, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[805, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[806, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[811, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[813, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[822, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[680, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[681, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[682, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[907, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[482, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[477, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[978, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[821, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[781, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[796, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[797, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[634, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[958, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[582, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[583, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.frozen": [[19, "module-sklearn.frozen", false]], "sklearn.gaussian_process": [[20, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[20, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[21, "module-sklearn.impute", false]], "sklearn.inspection": [[22, "module-sklearn.inspection", false]], "sklearn.isotonic": [[23, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[24, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[25, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[26, "module-sklearn.linear_model", false]], "sklearn.manifold": [[27, "module-sklearn.manifold", false]], "sklearn.metrics": [[28, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[28, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[28, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[29, "module-sklearn.mixture", false]], "sklearn.model_selection": [[30, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[31, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[32, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[33, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[34, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[35, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[36, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[37, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[38, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[39, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[40, "module-sklearn.svm", false]], "sklearn.tree": [[41, "module-sklearn.tree", false]], "sklearn.utils": [[42, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[42, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[42, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[42, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[42, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[42, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[42, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[42, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[42, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[42, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[42, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[42, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[42, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[42, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[42, "module-sklearn.utils.validation", false]], "slep": [[390, "term-SLEP", true]], "sleps": [[390, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[698, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[863, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[390, "term-sparse-graph", true]], "sparse matrix": [[390, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[650, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[656, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[664, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[666, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[550, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[544, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[545, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[901, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[662, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[663, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[670, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[671, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[672, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[680, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[681, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[682, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[908, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[463, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[699, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[452, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[453, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[454, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[695, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.SplineTransformer", false]], "split": [[390, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[805, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[806, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[809, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[811, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[812, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[813, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[814, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[817, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[819, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[820, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[821, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[822, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[823, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[824, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[825, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[569, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[570, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[562, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[564, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[561, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[563, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[555, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[556, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[888, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[390, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[822, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[823, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[824, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[390, "term-supervised", true]], "supervised learning": [[390, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[913, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[914, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[927, "sklearn.utils.Tags", false]], "target": [[390, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[889, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[390, "term-targets", true]], "targettags (class in sklearn.utils)": [[928, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[593, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[683, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[616, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[617, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[618, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[620, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[619, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[622, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[623, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[624, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[625, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[627, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[626, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[628, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[600, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[825, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[798, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[834, "sklearn.model_selection.train_test_split", false]], "transduction": [[390, "term-transduction", true]], "transductive": [[390, "term-transductive", true]], "transform": [[390, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[533, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[534, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[535, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[536, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[537, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[538, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[539, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[540, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[541, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[542, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[543, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[544, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[545, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[546, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[568, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[569, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[570, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[571, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[572, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[631, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[632, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[633, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[634, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[639, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[642, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[643, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[644, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[645, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[646, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[692, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[693, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[804, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[807, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[808, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[818, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[852, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[857, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[860, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[864, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[867, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[868, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[871, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[872, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[873, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[874, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[875, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[876, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[877, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[878, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[879, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[880, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[881, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[882, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[883, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[884, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[885, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[886, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[887, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[888, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[889, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[900, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[901, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[466, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[390, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[432, "sklearn.base.TransformerMixin", false]], "transformers": [[390, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[929, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[546, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[700, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[696, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[826, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[684, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[848, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[849, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[967, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[581, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[968, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[390, "term-unlabeled", true]], "unlabeled data": [[390, "term-unlabeled-data", true]], "unsupervised": [[390, "term-unsupervised", true]], "unsupervised learning": [[390, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[799, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[993, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[961, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[835, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[827, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[621, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[923, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[606, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[390, "term-vectorizer", true]], "vectorizers": [[390, "term-vectorizers", true]], "verbose": [[390, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[571, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[572, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[464, "sklearn.cluster.ward_tree", false]], "warm_start": [[390, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[954, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[629, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[390, "term-X", true]], "xt": [[390, "term-Xt", true]], "y": [[390, "term-Y", true], [390, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[800, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [469, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "frozen"], [20, 0, 0, "-", "gaussian_process"], [630, 4, 1, "", "get_config"], [21, 0, 0, "-", "impute"], [22, 0, 0, "-", "inspection"], [23, 0, 0, "-", "isotonic"], [24, 0, 0, "-", "kernel_approximation"], [25, 0, 0, "-", "kernel_ridge"], [26, 0, 0, "-", "linear_model"], [27, 0, 0, "-", "manifold"], [28, 0, 0, "-", "metrics"], [29, 0, 0, "-", "mixture"], [30, 0, 0, "-", "model_selection"], [31, 0, 0, "-", "multiclass"], [32, 0, 0, "-", "multioutput"], [33, 0, 0, "-", "naive_bayes"], [34, 0, 0, "-", "neighbors"], [35, 0, 0, "-", "neural_network"], [36, 0, 0, "-", "pipeline"], [37, 0, 0, "-", "preprocessing"], [38, 0, 0, "-", "random_projection"], [39, 0, 0, "-", "semi_supervised"], [906, 4, 1, "", "set_config"], [907, 4, 1, "", "show_versions"], [40, 0, 0, "-", "svm"], [41, 0, 0, "-", "tree"], [42, 0, 0, "-", "utils"]], "sklearn.base": [[422, 1, 1, "", "BaseEstimator"], [423, 1, 1, "", "BiclusterMixin"], [424, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [425, 1, 1, "", "ClassifierMixin"], [426, 1, 1, "", "ClusterMixin"], [427, 1, 1, "", "DensityMixin"], [428, 1, 1, "", "MetaEstimatorMixin"], [429, 1, 1, "", "OneToOneFeatureMixin"], [430, 1, 1, "", "OutlierMixin"], [431, 1, 1, "", "RegressorMixin"], [432, 1, 1, "", "TransformerMixin"], [433, 4, 1, "", "clone"], [434, 4, 1, "", "is_classifier"], [435, 4, 1, "", "is_clusterer"], [436, 4, 1, "", "is_outlier_detector"], [437, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[422, 2, 1, "", "get_metadata_routing"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[423, 3, 1, "", "biclusters_"], [423, 2, 1, "", "get_indices"], [423, 2, 1, "", "get_shape"], [423, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[424, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[425, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[426, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[427, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[429, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[430, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[431, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[432, 2, 1, "", "fit_transform"], [432, 2, 1, "", "set_output"]], "sklearn.calibration": [[438, 1, 1, "", "CalibratedClassifierCV"], [439, 1, 1, "", "CalibrationDisplay"], [440, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "predict"], [438, 2, 1, "", "predict_proba"], [438, 2, 1, "", "score"], [438, 2, 1, "", "set_fit_request"], [438, 2, 1, "", "set_params"], [438, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[439, 2, 1, "", "from_estimator"], [439, 2, 1, "", "from_predictions"], [439, 2, 1, "", "plot"]], "sklearn.cluster": [[441, 1, 1, "", "AffinityPropagation"], [442, 1, 1, "", "AgglomerativeClustering"], [443, 1, 1, "", "Birch"], [444, 1, 1, "", "BisectingKMeans"], [445, 1, 1, "", "DBSCAN"], [446, 1, 1, "", "FeatureAgglomeration"], [447, 1, 1, "", "HDBSCAN"], [448, 1, 1, "", "KMeans"], [449, 1, 1, "", "MeanShift"], [450, 1, 1, "", "MiniBatchKMeans"], [451, 1, 1, "", "OPTICS"], [452, 1, 1, "", "SpectralBiclustering"], [453, 1, 1, "", "SpectralClustering"], [454, 1, 1, "", "SpectralCoclustering"], [455, 4, 1, "", "affinity_propagation"], [456, 4, 1, "", "cluster_optics_dbscan"], [457, 4, 1, "", "cluster_optics_xi"], [458, 4, 1, "", "compute_optics_graph"], [419, 4, 1, "", "dbscan"], [459, 4, 1, "", "estimate_bandwidth"], [460, 4, 1, "", "k_means"], [461, 4, 1, "", "kmeans_plusplus"], [462, 4, 1, "", "mean_shift"], [463, 4, 1, "", "spectral_clustering"], [464, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "predict"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "partial_fit"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "fit_transform"], [444, 2, 1, "", "get_feature_names_out"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "score"], [444, 2, 1, "", "set_fit_request"], [444, 2, 1, "", "set_output"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "set_score_request"], [444, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "set_fit_request"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[446, 2, 1, "", "fit"], [446, 3, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_feature_names_out"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "inverse_transform"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[447, 2, 1, "", "dbscan_clustering"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_fit_request"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "set_score_request"], [448, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "fit_transform"], [450, 2, 1, "", "get_feature_names_out"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "partial_fit"], [450, 2, 1, "", "predict"], [450, 2, 1, "", "score"], [450, 2, 1, "", "set_fit_request"], [450, 2, 1, "", "set_output"], [450, 2, 1, "", "set_params"], [450, 2, 1, "", "set_partial_fit_request"], [450, 2, 1, "", "set_score_request"], [450, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[452, 3, 1, "", "biclusters_"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "get_indices"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "get_shape"], [452, 2, 1, "", "get_submatrix"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[453, 2, 1, "", "fit"], [453, 2, 1, "", "fit_predict"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[454, 3, 1, "", "biclusters_"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "get_indices"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "get_shape"], [454, 2, 1, "", "get_submatrix"], [454, 2, 1, "", "set_params"]], "sklearn.compose": [[465, 1, 1, "", "ColumnTransformer"], [466, 1, 1, "", "TransformedTargetRegressor"], [467, 1, 1, "", "make_column_selector"], [468, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[465, 2, 1, "", "fit"], [465, 2, 1, "", "fit_transform"], [465, 2, 1, "", "get_feature_names_out"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 3, 1, "", "named_transformers_"], [465, 2, 1, "", "set_output"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[466, 2, 1, "", "fit"], [466, 2, 1, "", "get_metadata_routing"], [466, 2, 1, "", "get_params"], [466, 3, 1, "", "n_features_in_"], [466, 2, 1, "", "predict"], [466, 2, 1, "", "score"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[467, 2, 1, "", "__call__"]], "sklearn.covariance": [[470, 1, 1, "", "EllipticEnvelope"], [471, 1, 1, "", "EmpiricalCovariance"], [472, 1, 1, "", "GraphicalLasso"], [473, 1, 1, "", "GraphicalLassoCV"], [474, 1, 1, "", "LedoitWolf"], [475, 1, 1, "", "MinCovDet"], [476, 1, 1, "", "OAS"], [477, 1, 1, "", "ShrunkCovariance"], [478, 4, 1, "", "empirical_covariance"], [479, 4, 1, "", "graphical_lasso"], [480, 4, 1, "", "ledoit_wolf"], [481, 4, 1, "", "ledoit_wolf_shrinkage"], [421, 4, 1, "", "oas"], [482, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[470, 2, 1, "", "correct_covariance"], [470, 2, 1, "", "decision_function"], [470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "fit_predict"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "predict"], [470, 2, 1, "", "reweight_covariance"], [470, 2, 1, "", "score"], [470, 2, 1, "", "score_samples"], [470, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[475, 2, 1, "", "correct_covariance"], [475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "reweight_covariance"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[483, 1, 1, "", "CCA"], [484, 1, 1, "", "PLSCanonical"], [485, 1, 1, "", "PLSRegression"], [486, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "inverse_transform"], [483, 2, 1, "", "predict"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_predict_request"], [483, 2, 1, "", "set_score_request"], [483, 2, 1, "", "set_transform_request"], [483, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "inverse_transform"], [484, 2, 1, "", "predict"], [484, 2, 1, "", "score"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "set_predict_request"], [484, 2, 1, "", "set_score_request"], [484, 2, 1, "", "set_transform_request"], [484, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_metadata_routing"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "inverse_transform"], [485, 2, 1, "", "predict"], [485, 2, 1, "", "score"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "set_predict_request"], [485, 2, 1, "", "set_score_request"], [485, 2, 1, "", "set_transform_request"], [485, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[486, 2, 1, "", "fit"], [486, 2, 1, "", "fit_transform"], [486, 2, 1, "", "get_feature_names_out"], [486, 2, 1, "", "get_metadata_routing"], [486, 2, 1, "", "get_params"], [486, 2, 1, "", "set_output"], [486, 2, 1, "", "set_params"], [486, 2, 1, "", "transform"]], "sklearn.datasets": [[487, 4, 1, "", "clear_data_home"], [488, 4, 1, "", "dump_svmlight_file"], [489, 4, 1, "", "fetch_20newsgroups"], [490, 4, 1, "", "fetch_20newsgroups_vectorized"], [491, 4, 1, "", "fetch_california_housing"], [492, 4, 1, "", "fetch_covtype"], [493, 4, 1, "", "fetch_file"], [494, 4, 1, "", "fetch_kddcup99"], [495, 4, 1, "", "fetch_lfw_pairs"], [496, 4, 1, "", "fetch_lfw_people"], [497, 4, 1, "", "fetch_olivetti_faces"], [498, 4, 1, "", "fetch_openml"], [499, 4, 1, "", "fetch_rcv1"], [500, 4, 1, "", "fetch_species_distributions"], [501, 4, 1, "", "get_data_home"], [502, 4, 1, "", "load_breast_cancer"], [503, 4, 1, "", "load_diabetes"], [504, 4, 1, "", "load_digits"], [505, 4, 1, "", "load_files"], [506, 4, 1, "", "load_iris"], [507, 4, 1, "", "load_linnerud"], [508, 4, 1, "", "load_sample_image"], [509, 4, 1, "", "load_sample_images"], [510, 4, 1, "", "load_svmlight_file"], [511, 4, 1, "", "load_svmlight_files"], [512, 4, 1, "", "load_wine"], [513, 4, 1, "", "make_biclusters"], [514, 4, 1, "", "make_blobs"], [515, 4, 1, "", "make_checkerboard"], [516, 4, 1, "", "make_circles"], [517, 4, 1, "", "make_classification"], [518, 4, 1, "", "make_friedman1"], [519, 4, 1, "", "make_friedman2"], [520, 4, 1, "", "make_friedman3"], [521, 4, 1, "", "make_gaussian_quantiles"], [522, 4, 1, "", "make_hastie_10_2"], [523, 4, 1, "", "make_low_rank_matrix"], [524, 4, 1, "", "make_moons"], [525, 4, 1, "", "make_multilabel_classification"], [526, 4, 1, "", "make_regression"], [527, 4, 1, "", "make_s_curve"], [528, 4, 1, "", "make_sparse_coded_signal"], [529, 4, 1, "", "make_sparse_spd_matrix"], [530, 4, 1, "", "make_sparse_uncorrelated"], [531, 4, 1, "", "make_spd_matrix"], [532, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[533, 1, 1, "", "DictionaryLearning"], [534, 1, 1, "", "FactorAnalysis"], [535, 1, 1, "", "FastICA"], [536, 1, 1, "", "IncrementalPCA"], [537, 1, 1, "", "KernelPCA"], [538, 1, 1, "", "LatentDirichletAllocation"], [539, 1, 1, "", "MiniBatchDictionaryLearning"], [540, 1, 1, "", "MiniBatchNMF"], [541, 1, 1, "", "MiniBatchSparsePCA"], [542, 1, 1, "", "NMF"], [543, 1, 1, "", "PCA"], [544, 1, 1, "", "SparseCoder"], [545, 1, 1, "", "SparsePCA"], [546, 1, 1, "", "TruncatedSVD"], [547, 4, 1, "", "dict_learning"], [548, 4, 1, "", "dict_learning_online"], [420, 4, 1, "", "fastica"], [549, 4, 1, "", "non_negative_factorization"], [550, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_covariance"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "get_precision"], [534, 2, 1, "", "score"], [534, 2, 1, "", "score_samples"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "set_inverse_transform_request"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "set_transform_request"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_covariance"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "get_precision"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "partial_fit"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "partial_fit"], [538, 2, 1, "", "perplexity"], [538, 2, 1, "", "score"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "set_transform_request"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "partial_fit"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "partial_fit"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_covariance"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "get_precision"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "score"], [543, 2, 1, "", "score_samples"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 3, 1, "", "n_components_"], [544, 3, 1, "", "n_features_in_"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[551, 1, 1, "", "LinearDiscriminantAnalysis"], [552, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[551, 2, 1, "", "decision_function"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "fit_transform"], [551, 2, 1, "", "get_feature_names_out"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_output"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"], [551, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[552, 2, 1, "", "decision_function"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_log_proba"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[553, 1, 1, "", "DummyClassifier"], [554, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_predict_request"], [554, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[555, 1, 1, "", "AdaBoostClassifier"], [556, 1, 1, "", "AdaBoostRegressor"], [557, 1, 1, "", "BaggingClassifier"], [558, 1, 1, "", "BaggingRegressor"], [559, 1, 1, "", "ExtraTreesClassifier"], [560, 1, 1, "", "ExtraTreesRegressor"], [561, 1, 1, "", "GradientBoostingClassifier"], [562, 1, 1, "", "GradientBoostingRegressor"], [563, 1, 1, "", "HistGradientBoostingClassifier"], [564, 1, 1, "", "HistGradientBoostingRegressor"], [565, 1, 1, "", "IsolationForest"], [566, 1, 1, "", "RandomForestClassifier"], [567, 1, 1, "", "RandomForestRegressor"], [568, 1, 1, "", "RandomTreesEmbedding"], [569, 1, 1, "", "StackingClassifier"], [570, 1, 1, "", "StackingRegressor"], [571, 1, 1, "", "VotingClassifier"], [572, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[555, 2, 1, "", "decision_function"], [555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"], [555, 2, 1, "", "staged_decision_function"], [555, 2, 1, "", "staged_predict"], [555, 2, 1, "", "staged_predict_proba"], [555, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[556, 3, 1, "", "feature_importances_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"], [556, 2, 1, "", "staged_predict"], [556, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[557, 2, 1, "", "decision_function"], [557, 3, 1, "", "estimators_samples_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[558, 3, 1, "", "estimators_samples_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[559, 2, 1, "", "apply"], [559, 2, 1, "", "decision_path"], [559, 3, 1, "", "estimators_samples_"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_log_proba"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[560, 2, 1, "", "apply"], [560, 2, 1, "", "decision_path"], [560, 3, 1, "", "estimators_samples_"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[561, 2, 1, "", "apply"], [561, 2, 1, "", "decision_function"], [561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_log_proba"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_decision_function"], [561, 2, 1, "", "staged_predict"], [561, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[562, 2, 1, "", "apply"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[563, 2, 1, "", "decision_function"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 3, 1, "", "n_iter_"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "predict_proba"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "staged_decision_function"], [563, 2, 1, "", "staged_predict"], [563, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 3, 1, "", "n_iter_"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"], [564, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[565, 2, 1, "", "decision_function"], [565, 3, 1, "", "estimators_samples_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_predict"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score_samples"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_path"], [566, 3, 1, "", "estimators_samples_"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "predict_log_proba"], [566, 2, 1, "", "predict_proba"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[567, 2, 1, "", "apply"], [567, 2, 1, "", "decision_path"], [567, 3, 1, "", "estimators_samples_"], [567, 3, 1, "", "feature_importances_"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[568, 2, 1, "", "apply"], [568, 2, 1, "", "decision_path"], [568, 3, 1, "", "estimators_samples_"], [568, 3, 1, "", "feature_importances_"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[569, 2, 1, "", "decision_function"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_features_in_"], [569, 3, 1, "", "named_estimators"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "predict_proba"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_features_in_"], [570, 3, 1, "", "named_estimators"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "n_features_in_"], [571, 3, 1, "", "named_estimators"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "predict_proba"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_score_request"], [571, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 3, 1, "", "n_features_in_"], [572, 3, 1, "", "named_estimators"], [572, 2, 1, "", "predict"], [572, 2, 1, "", "score"], [572, 2, 1, "", "set_fit_request"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "set_score_request"], [572, 2, 1, "", "transform"]], "sklearn.exceptions": [[573, 5, 1, "", "ConvergenceWarning"], [574, 5, 1, "", "DataConversionWarning"], [575, 5, 1, "", "DataDimensionalityWarning"], [576, 5, 1, "", "EfficiencyWarning"], [577, 5, 1, "", "EstimatorCheckFailedWarning"], [578, 5, 1, "", "FitFailedWarning"], [579, 5, 1, "", "InconsistentVersionWarning"], [580, 5, 1, "", "NotFittedError"], [581, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[582, 0, 0, "-", "enable_halving_search_cv"], [583, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[584, 1, 1, "", "DictVectorizer"], [585, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "restrict"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[586, 1, 1, "", "PatchExtractor"], [587, 4, 1, "", "extract_patches_2d"], [588, 4, 1, "", "grid_to_graph"], [589, 4, 1, "", "img_to_graph"], [590, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[591, 1, 1, "", "CountVectorizer"], [592, 1, 1, "", "HashingVectorizer"], [593, 1, 1, "", "TfidfTransformer"], [594, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[591, 2, 1, "", "build_analyzer"], [591, 2, 1, "", "build_preprocessor"], [591, 2, 1, "", "build_tokenizer"], [591, 2, 1, "", "decode"], [591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_stop_words"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[592, 2, 1, "", "build_analyzer"], [592, 2, 1, "", "build_preprocessor"], [592, 2, 1, "", "build_tokenizer"], [592, 2, 1, "", "decode"], [592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_stop_words"], [592, 2, 1, "", "partial_fit"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "set_transform_request"], [593, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[594, 2, 1, "", "build_analyzer"], [594, 2, 1, "", "build_preprocessor"], [594, 2, 1, "", "build_tokenizer"], [594, 2, 1, "", "decode"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_stop_words"], [594, 3, 1, "", "idf_"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection": [[595, 1, 1, "", "GenericUnivariateSelect"], [596, 1, 1, "", "RFE"], [597, 1, 1, "", "RFECV"], [598, 1, 1, "", "SelectFdr"], [599, 1, 1, "", "SelectFpr"], [600, 1, 1, "", "SelectFromModel"], [601, 1, 1, "", "SelectFwe"], [602, 1, 1, "", "SelectKBest"], [603, 1, 1, "", "SelectPercentile"], [604, 1, 1, "", "SelectorMixin"], [605, 1, 1, "", "SequentialFeatureSelector"], [606, 1, 1, "", "VarianceThreshold"], [607, 4, 1, "", "chi2"], [608, 4, 1, "", "f_classif"], [609, 4, 1, "", "f_regression"], [610, 4, 1, "", "mutual_info_classif"], [611, 4, 1, "", "mutual_info_regression"], [612, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[596, 3, 1, "", "classes_"], [596, 2, 1, "", "decision_function"], [596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "predict"], [596, 2, 1, "", "predict_log_proba"], [596, 2, 1, "", "predict_proba"], [596, 2, 1, "", "score"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[597, 3, 1, "", "classes_"], [597, 2, 1, "", "decision_function"], [597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "predict"], [597, 2, 1, "", "predict_log_proba"], [597, 2, 1, "", "predict_proba"], [597, 2, 1, "", "score"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 3, 1, "", "n_features_in_"], [600, 2, 1, "", "partial_fit"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 3, 1, "", "threshold_"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "get_support"], [606, 2, 1, "", "inverse_transform"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.frozen": [[613, 1, 1, "", "FrozenEstimator"]], "sklearn.frozen.FrozenEstimator": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "get_metadata_routing"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "set_params"]], "sklearn.gaussian_process": [[614, 1, 1, "", "GaussianProcessClassifier"], [615, 1, 1, "", "GaussianProcessRegressor"], [20, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "get_metadata_routing"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "kernel_"], [614, 2, 1, "", "log_marginal_likelihood"], [614, 2, 1, "", "predict"], [614, 2, 1, "", "predict_proba"], [614, 2, 1, "", "score"], [614, 2, 1, "", "set_params"], [614, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "get_metadata_routing"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "log_marginal_likelihood"], [615, 2, 1, "", "predict"], [615, 2, 1, "", "sample_y"], [615, 2, 1, "", "score"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "set_predict_request"], [615, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[616, 1, 1, "", "CompoundKernel"], [617, 1, 1, "", "ConstantKernel"], [618, 1, 1, "", "DotProduct"], [619, 1, 1, "", "ExpSineSquared"], [620, 1, 1, "", "Exponentiation"], [621, 1, 1, "", "Hyperparameter"], [622, 1, 1, "", "Kernel"], [623, 1, 1, "", "Matern"], [624, 1, 1, "", "PairwiseKernel"], [625, 1, 1, "", "Product"], [626, 1, 1, "", "RBF"], [627, 1, 1, "", "RationalQuadratic"], [628, 1, 1, "", "Sum"], [629, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameter_length_scale"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[621, 6, 1, "", "bounds"], [621, 2, 1, "", "count"], [621, 6, 1, "", "fixed"], [621, 2, 1, "", "index"], [621, 6, 1, "", "n_elements"], [621, 6, 1, "", "name"], [621, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[629, 2, 1, "", "__call__"], [629, 3, 1, "", "bounds"], [629, 2, 1, "", "clone_with_theta"], [629, 2, 1, "", "diag"], [629, 2, 1, "", "get_params"], [629, 3, 1, "", "hyperparameters"], [629, 2, 1, "", "is_stationary"], [629, 3, 1, "", "n_dims"], [629, 3, 1, "", "requires_vector_input"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "theta"]], "sklearn.impute": [[631, 1, 1, "", "IterativeImputer"], [632, 1, 1, "", "KNNImputer"], [633, 1, 1, "", "MissingIndicator"], [634, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "inverse_transform"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "transform"]], "sklearn.inspection": [[635, 1, 1, "", "DecisionBoundaryDisplay"], [636, 1, 1, "", "PartialDependenceDisplay"], [637, 4, 1, "", "partial_dependence"], [638, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[635, 2, 1, "", "from_estimator"], [635, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[636, 2, 1, "", "from_estimator"], [636, 2, 1, "", "plot"]], "sklearn.isotonic": [[639, 1, 1, "", "IsotonicRegression"], [640, 4, 1, "", "check_increasing"], [641, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_fit_request"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "set_score_request"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[642, 1, 1, "", "AdditiveChi2Sampler"], [643, 1, 1, "", "Nystroem"], [644, 1, 1, "", "PolynomialCountSketch"], [645, 1, 1, "", "RBFSampler"], [646, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "fit_transform"], [644, 2, 1, "", "get_feature_names_out"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "set_output"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "fit_transform"], [645, 2, 1, "", "get_feature_names_out"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "set_output"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "fit_transform"], [646, 2, 1, "", "get_feature_names_out"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "set_output"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[647, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[648, 1, 1, "", "ARDRegression"], [649, 1, 1, "", "BayesianRidge"], [650, 1, 1, "", "ElasticNet"], [651, 1, 1, "", "ElasticNetCV"], [652, 1, 1, "", "GammaRegressor"], [653, 1, 1, "", "HuberRegressor"], [654, 1, 1, "", "Lars"], [655, 1, 1, "", "LarsCV"], [656, 1, 1, "", "Lasso"], [657, 1, 1, "", "LassoCV"], [658, 1, 1, "", "LassoLars"], [659, 1, 1, "", "LassoLarsCV"], [660, 1, 1, "", "LassoLarsIC"], [661, 1, 1, "", "LinearRegression"], [662, 1, 1, "", "LogisticRegression"], [663, 1, 1, "", "LogisticRegressionCV"], [664, 1, 1, "", "MultiTaskElasticNet"], [665, 1, 1, "", "MultiTaskElasticNetCV"], [666, 1, 1, "", "MultiTaskLasso"], [667, 1, 1, "", "MultiTaskLassoCV"], [668, 1, 1, "", "OrthogonalMatchingPursuit"], [669, 1, 1, "", "OrthogonalMatchingPursuitCV"], [670, 1, 1, "", "PassiveAggressiveClassifier"], [671, 1, 1, "", "PassiveAggressiveRegressor"], [672, 1, 1, "", "Perceptron"], [673, 1, 1, "", "PoissonRegressor"], [674, 1, 1, "", "QuantileRegressor"], [675, 1, 1, "", "RANSACRegressor"], [676, 1, 1, "", "Ridge"], [677, 1, 1, "", "RidgeCV"], [678, 1, 1, "", "RidgeClassifier"], [679, 1, 1, "", "RidgeClassifierCV"], [680, 1, 1, "", "SGDClassifier"], [681, 1, 1, "", "SGDOneClassSVM"], [682, 1, 1, "", "SGDRegressor"], [683, 1, 1, "", "TheilSenRegressor"], [684, 1, 1, "", "TweedieRegressor"], [685, 4, 1, "", "enet_path"], [686, 4, 1, "", "lars_path"], [687, 4, 1, "", "lars_path_gram"], [688, 4, 1, "", "lasso_path"], [689, 4, 1, "", "orthogonal_mp"], [690, 4, 1, "", "orthogonal_mp_gram"], [691, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_predict_request"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_predict_request"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "path"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"], [650, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "path"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "path"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"], [656, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "path"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[662, 2, 1, "", "decision_function"], [662, 2, 1, "", "densify"], [662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "predict_log_proba"], [662, 2, 1, "", "predict_proba"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"], [662, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[663, 2, 1, "", "decision_function"], [663, 2, 1, "", "densify"], [663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "predict_log_proba"], [663, 2, 1, "", "predict_proba"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"], [663, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "path"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"], [664, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "path"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "path"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"], [666, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "path"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[670, 2, 1, "", "decision_function"], [670, 2, 1, "", "densify"], [670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "partial_fit"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_partial_fit_request"], [670, 2, 1, "", "set_score_request"], [670, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[671, 2, 1, "", "densify"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "partial_fit"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_partial_fit_request"], [671, 2, 1, "", "set_score_request"], [671, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[672, 2, 1, "", "decision_function"], [672, 2, 1, "", "densify"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "partial_fit"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_partial_fit_request"], [672, 2, 1, "", "set_score_request"], [672, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[678, 3, 1, "", "classes_"], [678, 2, 1, "", "decision_function"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[679, 3, 1, "", "classes_"], [679, 2, 1, "", "decision_function"], [679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[680, 2, 1, "", "decision_function"], [680, 2, 1, "", "densify"], [680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "partial_fit"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "predict_log_proba"], [680, 2, 1, "", "predict_proba"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_partial_fit_request"], [680, 2, 1, "", "set_score_request"], [680, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[681, 2, 1, "", "decision_function"], [681, 2, 1, "", "densify"], [681, 2, 1, "", "fit"], [681, 2, 1, "", "fit_predict"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "partial_fit"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score_samples"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_partial_fit_request"], [681, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[682, 2, 1, "", "densify"], [682, 2, 1, "", "fit"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "partial_fit"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "score"], [682, 2, 1, "", "set_fit_request"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_partial_fit_request"], [682, 2, 1, "", "set_score_request"], [682, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[683, 2, 1, "", "fit"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "score"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[684, 2, 1, "", "fit"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "predict"], [684, 2, 1, "", "score"], [684, 2, 1, "", "set_fit_request"], [684, 2, 1, "", "set_params"], [684, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[692, 1, 1, "", "Isomap"], [693, 1, 1, "", "LocallyLinearEmbedding"], [694, 1, 1, "", "MDS"], [695, 1, 1, "", "SpectralEmbedding"], [696, 1, 1, "", "TSNE"], [697, 4, 1, "", "locally_linear_embedding"], [698, 4, 1, "", "smacof"], [699, 4, 1, "", "spectral_embedding"], [700, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_feature_names_out"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "reconstruction_error"], [692, 2, 1, "", "set_output"], [692, 2, 1, "", "set_params"], [692, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[693, 2, 1, "", "fit"], [693, 2, 1, "", "fit_transform"], [693, 2, 1, "", "get_feature_names_out"], [693, 2, 1, "", "get_metadata_routing"], [693, 2, 1, "", "get_params"], [693, 2, 1, "", "set_output"], [693, 2, 1, "", "set_params"], [693, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[694, 2, 1, "", "fit"], [694, 2, 1, "", "fit_transform"], [694, 2, 1, "", "get_metadata_routing"], [694, 2, 1, "", "get_params"], [694, 2, 1, "", "set_fit_request"], [694, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[695, 2, 1, "", "fit"], [695, 2, 1, "", "fit_transform"], [695, 2, 1, "", "get_metadata_routing"], [695, 2, 1, "", "get_params"], [695, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[696, 2, 1, "", "fit"], [696, 2, 1, "", "fit_transform"], [696, 2, 1, "", "get_feature_names_out"], [696, 2, 1, "", "get_metadata_routing"], [696, 2, 1, "", "get_params"], [696, 2, 1, "", "set_output"], [696, 2, 1, "", "set_params"]], "sklearn.metrics": [[701, 1, 1, "", "ConfusionMatrixDisplay"], [702, 1, 1, "", "DetCurveDisplay"], [703, 1, 1, "", "DistanceMetric"], [704, 1, 1, "", "PrecisionRecallDisplay"], [705, 1, 1, "", "PredictionErrorDisplay"], [706, 1, 1, "", "RocCurveDisplay"], [707, 4, 1, "", "accuracy_score"], [708, 4, 1, "", "adjusted_mutual_info_score"], [709, 4, 1, "", "adjusted_rand_score"], [710, 4, 1, "", "auc"], [711, 4, 1, "", "average_precision_score"], [712, 4, 1, "", "balanced_accuracy_score"], [713, 4, 1, "", "brier_score_loss"], [714, 4, 1, "", "calinski_harabasz_score"], [715, 4, 1, "", "check_scoring"], [716, 4, 1, "", "class_likelihood_ratios"], [717, 4, 1, "", "classification_report"], [28, 0, 0, "-", "cluster"], [720, 4, 1, "", "cohen_kappa_score"], [721, 4, 1, "", "completeness_score"], [722, 4, 1, "", "confusion_matrix"], [723, 4, 1, "", "consensus_score"], [724, 4, 1, "", "coverage_error"], [725, 4, 1, "", "d2_absolute_error_score"], [726, 4, 1, "", "d2_log_loss_score"], [727, 4, 1, "", "d2_pinball_score"], [728, 4, 1, "", "d2_tweedie_score"], [729, 4, 1, "", "davies_bouldin_score"], [730, 4, 1, "", "dcg_score"], [731, 4, 1, "", "det_curve"], [732, 4, 1, "", "explained_variance_score"], [733, 4, 1, "", "f1_score"], [734, 4, 1, "", "fbeta_score"], [735, 4, 1, "", "fowlkes_mallows_score"], [736, 4, 1, "", "get_scorer"], [737, 4, 1, "", "get_scorer_names"], [738, 4, 1, "", "hamming_loss"], [739, 4, 1, "", "hinge_loss"], [740, 4, 1, "", "homogeneity_completeness_v_measure"], [741, 4, 1, "", "homogeneity_score"], [742, 4, 1, "", "jaccard_score"], [743, 4, 1, "", "label_ranking_average_precision_score"], [744, 4, 1, "", "label_ranking_loss"], [745, 4, 1, "", "log_loss"], [746, 4, 1, "", "make_scorer"], [747, 4, 1, "", "matthews_corrcoef"], [748, 4, 1, "", "max_error"], [749, 4, 1, "", "mean_absolute_error"], [750, 4, 1, "", "mean_absolute_percentage_error"], [751, 4, 1, "", "mean_gamma_deviance"], [752, 4, 1, "", "mean_pinball_loss"], [753, 4, 1, "", "mean_poisson_deviance"], [754, 4, 1, "", "mean_squared_error"], [755, 4, 1, "", "mean_squared_log_error"], [756, 4, 1, "", "mean_tweedie_deviance"], [757, 4, 1, "", "median_absolute_error"], [758, 4, 1, "", "multilabel_confusion_matrix"], [759, 4, 1, "", "mutual_info_score"], [760, 4, 1, "", "ndcg_score"], [761, 4, 1, "", "normalized_mutual_info_score"], [28, 0, 0, "-", "pairwise"], [782, 4, 1, "", "pairwise_distances"], [783, 4, 1, "", "pairwise_distances_argmin"], [784, 4, 1, "", "pairwise_distances_argmin_min"], [785, 4, 1, "", "pairwise_distances_chunked"], [786, 4, 1, "", "precision_recall_curve"], [787, 4, 1, "", "precision_recall_fscore_support"], [788, 4, 1, "", "precision_score"], [789, 4, 1, "", "r2_score"], [790, 4, 1, "", "rand_score"], [791, 4, 1, "", "recall_score"], [792, 4, 1, "", "roc_auc_score"], [793, 4, 1, "", "roc_curve"], [794, 4, 1, "", "root_mean_squared_error"], [795, 4, 1, "", "root_mean_squared_log_error"], [796, 4, 1, "", "silhouette_samples"], [797, 4, 1, "", "silhouette_score"], [798, 4, 1, "", "top_k_accuracy_score"], [799, 4, 1, "", "v_measure_score"], [800, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[703, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[704, 2, 1, "", "from_estimator"], [704, 2, 1, "", "from_predictions"], [704, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[705, 2, 1, "", "from_estimator"], [705, 2, 1, "", "from_predictions"], [705, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[706, 2, 1, "", "from_estimator"], [706, 2, 1, "", "from_predictions"], [706, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[718, 4, 1, "", "contingency_matrix"], [719, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[762, 4, 1, "", "additive_chi2_kernel"], [763, 4, 1, "", "chi2_kernel"], [764, 4, 1, "", "cosine_distances"], [765, 4, 1, "", "cosine_similarity"], [766, 4, 1, "", "distance_metrics"], [767, 4, 1, "", "euclidean_distances"], [768, 4, 1, "", "haversine_distances"], [769, 4, 1, "", "kernel_metrics"], [770, 4, 1, "", "laplacian_kernel"], [771, 4, 1, "", "linear_kernel"], [772, 4, 1, "", "manhattan_distances"], [773, 4, 1, "", "nan_euclidean_distances"], [774, 4, 1, "", "paired_cosine_distances"], [775, 4, 1, "", "paired_distances"], [776, 4, 1, "", "paired_euclidean_distances"], [777, 4, 1, "", "paired_manhattan_distances"], [778, 4, 1, "", "pairwise_kernels"], [779, 4, 1, "", "polynomial_kernel"], [780, 4, 1, "", "rbf_kernel"], [781, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[801, 1, 1, "", "BayesianGaussianMixture"], [802, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[801, 2, 1, "", "fit"], [801, 2, 1, "", "fit_predict"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "sample"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[802, 2, 1, "", "aic"], [802, 2, 1, "", "bic"], [802, 2, 1, "", "fit"], [802, 2, 1, "", "fit_predict"], [802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "sample"], [802, 2, 1, "", "score"], [802, 2, 1, "", "score_samples"], [802, 2, 1, "", "set_params"]], "sklearn.model_selection": [[803, 1, 1, "", "FixedThresholdClassifier"], [804, 1, 1, "", "GridSearchCV"], [805, 1, 1, "", "GroupKFold"], [806, 1, 1, "", "GroupShuffleSplit"], [807, 1, 1, "", "HalvingGridSearchCV"], [808, 1, 1, "", "HalvingRandomSearchCV"], [809, 1, 1, "", "KFold"], [810, 1, 1, "", "LearningCurveDisplay"], [811, 1, 1, "", "LeaveOneGroupOut"], [812, 1, 1, "", "LeaveOneOut"], [813, 1, 1, "", "LeavePGroupsOut"], [814, 1, 1, "", "LeavePOut"], [815, 1, 1, "", "ParameterGrid"], [816, 1, 1, "", "ParameterSampler"], [817, 1, 1, "", "PredefinedSplit"], [818, 1, 1, "", "RandomizedSearchCV"], [819, 1, 1, "", "RepeatedKFold"], [820, 1, 1, "", "RepeatedStratifiedKFold"], [821, 1, 1, "", "ShuffleSplit"], [822, 1, 1, "", "StratifiedGroupKFold"], [823, 1, 1, "", "StratifiedKFold"], [824, 1, 1, "", "StratifiedShuffleSplit"], [825, 1, 1, "", "TimeSeriesSplit"], [826, 1, 1, "", "TunedThresholdClassifierCV"], [827, 1, 1, "", "ValidationCurveDisplay"], [828, 4, 1, "", "check_cv"], [829, 4, 1, "", "cross_val_predict"], [830, 4, 1, "", "cross_val_score"], [831, 4, 1, "", "cross_validate"], [832, 4, 1, "", "learning_curve"], [833, 4, 1, "", "permutation_test_score"], [834, 4, 1, "", "train_test_split"], [835, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[803, 3, 1, "", "classes_"], [803, 2, 1, "", "decision_function"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[804, 3, 1, "", "classes_"], [804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "inverse_transform"], [804, 3, 1, "", "n_features_in_"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "set_split_request"], [805, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "set_split_request"], [806, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[807, 3, 1, "", "classes_"], [807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "inverse_transform"], [807, 3, 1, "", "n_features_in_"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_log_proba"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "score_samples"], [807, 2, 1, "", "set_params"], [807, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[808, 3, 1, "", "classes_"], [808, 2, 1, "", "decision_function"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "inverse_transform"], [808, 3, 1, "", "n_features_in_"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_log_proba"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "score_samples"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[810, 2, 1, "", "from_estimator"], [810, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "set_split_request"], [811, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "set_split_request"], [813, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[818, 3, 1, "", "classes_"], [818, 2, 1, "", "decision_function"], [818, 2, 1, "", "fit"], [818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "inverse_transform"], [818, 3, 1, "", "n_features_in_"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "predict_log_proba"], [818, 2, 1, "", "predict_proba"], [818, 2, 1, "", "score"], [818, 2, 1, "", "score_samples"], [818, 2, 1, "", "set_params"], [818, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "set_split_request"], [822, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_n_splits"], [823, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_n_splits"], [825, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[826, 3, 1, "", "classes_"], [826, 2, 1, "", "decision_function"], [826, 2, 1, "", "fit"], [826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "predict_log_proba"], [826, 2, 1, "", "predict_proba"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[827, 2, 1, "", "from_estimator"], [827, 2, 1, "", "plot"]], "sklearn.multiclass": [[836, 1, 1, "", "OneVsOneClassifier"], [837, 1, 1, "", "OneVsRestClassifier"], [838, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[836, 2, 1, "", "decision_function"], [836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 3, 1, "", "n_classes_"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[837, 2, 1, "", "decision_function"], [837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 3, 1, "", "multilabel_"], [837, 3, 1, "", "n_classes_"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[839, 1, 1, "", "ClassifierChain"], [840, 1, 1, "", "MultiOutputClassifier"], [841, 1, 1, "", "MultiOutputRegressor"], [842, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[839, 2, 1, "", "decision_function"], [839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_log_proba"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_fit_request"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[843, 1, 1, "", "BernoulliNB"], [844, 1, 1, "", "CategoricalNB"], [845, 1, 1, "", "ComplementNB"], [846, 1, 1, "", "GaussianNB"], [847, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_joint_log_proba"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"], [844, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_joint_log_proba"], [845, 2, 1, "", "predict_log_proba"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_joint_log_proba"], [846, 2, 1, "", "predict_log_proba"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_partial_fit_request"], [846, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "partial_fit"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_joint_log_proba"], [847, 2, 1, "", "predict_log_proba"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_fit_request"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_partial_fit_request"], [847, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[848, 1, 1, "", "BallTree"], [849, 1, 1, "", "KDTree"], [850, 1, 1, "", "KNeighborsClassifier"], [851, 1, 1, "", "KNeighborsRegressor"], [852, 1, 1, "", "KNeighborsTransformer"], [853, 1, 1, "", "KernelDensity"], [854, 1, 1, "", "LocalOutlierFactor"], [855, 1, 1, "", "NearestCentroid"], [856, 1, 1, "", "NearestNeighbors"], [857, 1, 1, "", "NeighborhoodComponentsAnalysis"], [858, 1, 1, "", "RadiusNeighborsClassifier"], [859, 1, 1, "", "RadiusNeighborsRegressor"], [860, 1, 1, "", "RadiusNeighborsTransformer"], [861, 4, 1, "", "kneighbors_graph"], [862, 4, 1, "", "radius_neighbors_graph"], [863, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[848, 2, 1, "", "get_arrays"], [848, 2, 1, "", "get_n_calls"], [848, 2, 1, "", "get_tree_stats"], [848, 2, 1, "", "kernel_density"], [848, 2, 1, "", "query"], [848, 2, 1, "", "query_radius"], [848, 2, 1, "", "reset_n_calls"], [848, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[849, 2, 1, "", "get_arrays"], [849, 2, 1, "", "get_n_calls"], [849, 2, 1, "", "get_tree_stats"], [849, 2, 1, "", "kernel_density"], [849, 2, 1, "", "query"], [849, 2, 1, "", "query_radius"], [849, 2, 1, "", "reset_n_calls"], [849, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "kneighbors"], [850, 2, 1, "", "kneighbors_graph"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "predict_proba"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "kneighbors"], [851, 2, 1, "", "kneighbors_graph"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "kneighbors"], [852, 2, 1, "", "kneighbors_graph"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "sample"], [853, 2, 1, "", "score"], [853, 2, 1, "", "score_samples"], [853, 2, 1, "", "set_fit_request"], [853, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[854, 2, 1, "", "decision_function"], [854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_predict"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "kneighbors"], [854, 2, 1, "", "kneighbors_graph"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "score_samples"], [854, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[855, 2, 1, "", "decision_function"], [855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "predict_log_proba"], [855, 2, 1, "", "predict_proba"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "kneighbors"], [856, 2, 1, "", "kneighbors_graph"], [856, 2, 1, "", "radius_neighbors"], [856, 2, 1, "", "radius_neighbors_graph"], [856, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "predict_proba"], [858, 2, 1, "", "radius_neighbors"], [858, 2, 1, "", "radius_neighbors_graph"], [858, 2, 1, "", "score"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "predict"], [859, 2, 1, "", "radius_neighbors"], [859, 2, 1, "", "radius_neighbors_graph"], [859, 2, 1, "", "score"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "radius_neighbors"], [860, 2, 1, "", "radius_neighbors_graph"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.neural_network": [[864, 1, 1, "", "BernoulliRBM"], [865, 1, 1, "", "MLPClassifier"], [866, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "gibbs"], [864, 2, 1, "", "partial_fit"], [864, 2, 1, "", "score_samples"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "partial_fit"], [865, 2, 1, "", "predict"], [865, 2, 1, "", "predict_log_proba"], [865, 2, 1, "", "predict_proba"], [865, 2, 1, "", "score"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_partial_fit_request"], [865, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "partial_fit"], [866, 2, 1, "", "predict"], [866, 2, 1, "", "score"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[867, 1, 1, "", "FeatureUnion"], [868, 1, 1, "", "Pipeline"], [869, 4, 1, "", "make_pipeline"], [870, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[867, 3, 1, "", "feature_names_in_"], [867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 3, 1, "", "n_features_in_"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[868, 3, 1, "", "classes_"], [868, 2, 1, "", "decision_function"], [868, 3, 1, "", "feature_names_in_"], [868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_predict"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 3, 1, "", "n_features_in_"], [868, 3, 1, "", "named_steps"], [868, 2, 1, "", "predict"], [868, 2, 1, "", "predict_log_proba"], [868, 2, 1, "", "predict_proba"], [868, 2, 1, "", "score"], [868, 2, 1, "", "score_samples"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "set_score_request"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing": [[871, 1, 1, "", "Binarizer"], [872, 1, 1, "", "FunctionTransformer"], [873, 1, 1, "", "KBinsDiscretizer"], [874, 1, 1, "", "KernelCenterer"], [875, 1, 1, "", "LabelBinarizer"], [876, 1, 1, "", "LabelEncoder"], [877, 1, 1, "", "MaxAbsScaler"], [878, 1, 1, "", "MinMaxScaler"], [879, 1, 1, "", "MultiLabelBinarizer"], [880, 1, 1, "", "Normalizer"], [881, 1, 1, "", "OneHotEncoder"], [882, 1, 1, "", "OrdinalEncoder"], [883, 1, 1, "", "PolynomialFeatures"], [884, 1, 1, "", "PowerTransformer"], [885, 1, 1, "", "QuantileTransformer"], [886, 1, 1, "", "RobustScaler"], [887, 1, 1, "", "SplineTransformer"], [888, 1, 1, "", "StandardScaler"], [889, 1, 1, "", "TargetEncoder"], [890, 4, 1, "", "add_dummy_feature"], [891, 4, 1, "", "binarize"], [892, 4, 1, "", "label_binarize"], [893, 4, 1, "", "maxabs_scale"], [894, 4, 1, "", "minmax_scale"], [895, 4, 1, "", "normalize"], [896, 4, 1, "", "power_transform"], [897, 4, 1, "", "quantile_transform"], [898, 4, 1, "", "robust_scale"], [899, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_transform_request"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_fit_request"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "set_transform_request"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_inverse_transform_request"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "partial_fit"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "partial_fit"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "set_transform_request"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 3, 1, "", "infrequent_categories_"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 3, 1, "", "infrequent_categories_"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 3, 1, "", "powers_"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "inverse_transform"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "set_fit_request"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_transform"], [888, 2, 1, "", "get_feature_names_out"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "inverse_transform"], [888, 2, 1, "", "partial_fit"], [888, 2, 1, "", "set_fit_request"], [888, 2, 1, "", "set_inverse_transform_request"], [888, 2, 1, "", "set_output"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "set_partial_fit_request"], [888, 2, 1, "", "set_transform_request"], [888, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "fit_transform"], [889, 2, 1, "", "get_feature_names_out"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 3, 1, "", "infrequent_categories_"], [889, 2, 1, "", "set_output"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "transform"]], "sklearn.random_projection": [[900, 1, 1, "", "GaussianRandomProjection"], [901, 1, 1, "", "SparseRandomProjection"], [902, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "fit_transform"], [900, 2, 1, "", "get_feature_names_out"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "inverse_transform"], [900, 2, 1, "", "set_output"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[901, 2, 1, "", "fit"], [901, 2, 1, "", "fit_transform"], [901, 2, 1, "", "get_feature_names_out"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "inverse_transform"], [901, 2, 1, "", "set_output"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[903, 1, 1, "", "LabelPropagation"], [904, 1, 1, "", "LabelSpreading"], [905, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[903, 2, 1, "", "fit"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "predict_proba"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "predict_proba"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[905, 2, 1, "", "decision_function"], [905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "predict_log_proba"], [905, 2, 1, "", "predict_proba"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_params"]], "sklearn.svm": [[908, 1, 1, "", "LinearSVC"], [909, 1, 1, "", "LinearSVR"], [910, 1, 1, "", "NuSVC"], [911, 1, 1, "", "NuSVR"], [912, 1, 1, "", "OneClassSVM"], [913, 1, 1, "", "SVC"], [914, 1, 1, "", "SVR"], [915, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[908, 2, 1, "", "decision_function"], [908, 2, 1, "", "densify"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_score_request"], [908, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[910, 3, 1, "", "coef_"], [910, 2, 1, "", "decision_function"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 3, 1, "", "n_support_"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "predict_log_proba"], [910, 2, 1, "", "predict_proba"], [910, 3, 1, "", "probA_"], [910, 3, 1, "", "probB_"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[911, 3, 1, "", "coef_"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 3, 1, "", "n_support_"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[912, 3, 1, "", "coef_"], [912, 2, 1, "", "decision_function"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "fit_predict"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_params"], [912, 3, 1, "", "n_support_"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "score_samples"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[913, 3, 1, "", "coef_"], [913, 2, 1, "", "decision_function"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_params"], [913, 3, 1, "", "n_support_"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "predict_log_proba"], [913, 2, 1, "", "predict_proba"], [913, 3, 1, "", "probA_"], [913, 3, 1, "", "probB_"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[914, 3, 1, "", "coef_"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_params"], [914, 3, 1, "", "n_support_"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_score_request"]], "sklearn.tree": [[916, 1, 1, "", "DecisionTreeClassifier"], [917, 1, 1, "", "DecisionTreeRegressor"], [918, 1, 1, "", "ExtraTreeClassifier"], [919, 1, 1, "", "ExtraTreeRegressor"], [920, 4, 1, "", "export_graphviz"], [921, 4, 1, "", "export_text"], [922, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[916, 2, 1, "", "apply"], [916, 2, 1, "", "cost_complexity_pruning_path"], [916, 2, 1, "", "decision_path"], [916, 3, 1, "", "feature_importances_"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_depth"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_n_leaves"], [916, 2, 1, "", "get_params"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "predict_log_proba"], [916, 2, 1, "", "predict_proba"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[917, 2, 1, "", "apply"], [917, 2, 1, "", "cost_complexity_pruning_path"], [917, 2, 1, "", "decision_path"], [917, 3, 1, "", "feature_importances_"], [917, 2, 1, "", "fit"], [917, 2, 1, "", "get_depth"], [917, 2, 1, "", "get_metadata_routing"], [917, 2, 1, "", "get_n_leaves"], [917, 2, 1, "", "get_params"], [917, 2, 1, "", "predict"], [917, 2, 1, "", "score"], [917, 2, 1, "", "set_fit_request"], [917, 2, 1, "", "set_params"], [917, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[918, 2, 1, "", "apply"], [918, 2, 1, "", "cost_complexity_pruning_path"], [918, 2, 1, "", "decision_path"], [918, 3, 1, "", "feature_importances_"], [918, 2, 1, "", "fit"], [918, 2, 1, "", "get_depth"], [918, 2, 1, "", "get_metadata_routing"], [918, 2, 1, "", "get_n_leaves"], [918, 2, 1, "", "get_params"], [918, 2, 1, "", "predict"], [918, 2, 1, "", "predict_log_proba"], [918, 2, 1, "", "predict_proba"], [918, 2, 1, "", "score"], [918, 2, 1, "", "set_fit_request"], [918, 2, 1, "", "set_params"], [918, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[919, 2, 1, "", "apply"], [919, 2, 1, "", "cost_complexity_pruning_path"], [919, 2, 1, "", "decision_path"], [919, 3, 1, "", "feature_importances_"], [919, 2, 1, "", "fit"], [919, 2, 1, "", "get_depth"], [919, 2, 1, "", "get_metadata_routing"], [919, 2, 1, "", "get_n_leaves"], [919, 2, 1, "", "get_params"], [919, 2, 1, "", "predict"], [919, 2, 1, "", "score"], [919, 2, 1, "", "set_fit_request"], [919, 2, 1, "", "set_params"], [919, 2, 1, "", "set_score_request"]], "sklearn.utils": [[923, 1, 1, "", "Bunch"], [924, 1, 1, "", "ClassifierTags"], [925, 1, 1, "", "InputTags"], [926, 1, 1, "", "RegressorTags"], [927, 1, 1, "", "Tags"], [928, 1, 1, "", "TargetTags"], [929, 1, 1, "", "TransformerTags"], [930, 4, 1, "", "_safe_indexing"], [42, 0, 0, "-", "arrayfuncs"], [932, 4, 1, "", "as_float_array"], [933, 4, 1, "", "assert_all_finite"], [934, 4, 1, "", "check_X_y"], [935, 4, 1, "", "check_array"], [936, 4, 1, "", "check_consistent_length"], [937, 4, 1, "", "check_random_state"], [938, 4, 1, "", "check_scalar"], [42, 0, 0, "-", "class_weight"], [941, 1, 1, "", "deprecated"], [42, 0, 0, "-", "discovery"], [42, 0, 0, "-", "estimator_checks"], [948, 4, 1, "", "estimator_html_repr"], [42, 0, 0, "-", "extmath"], [955, 4, 1, "", "gen_batches"], [956, 4, 1, "", "gen_even_slices"], [957, 4, 1, "", "get_tags"], [42, 0, 0, "-", "graph"], [959, 4, 1, "", "indexable"], [42, 0, 0, "-", "metadata_routing"], [42, 0, 0, "-", "metaestimators"], [42, 0, 0, "-", "multiclass"], [969, 4, 1, "", "murmurhash3_32"], [42, 0, 0, "-", "parallel"], [972, 1, 1, "", "parallel_backend"], [42, 0, 0, "-", "random"], [974, 4, 1, "", "register_parallel_backend"], [975, 4, 1, "", "resample"], [976, 4, 1, "", "safe_mask"], [977, 4, 1, "", "safe_sqr"], [978, 4, 1, "", "shuffle"], [42, 0, 0, "-", "sparsefuncs"], [42, 0, 0, "-", "sparsefuncs_fast"], [42, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[923, 2, 1, "", "clear"], [923, 2, 1, "", "copy"], [923, 2, 1, "", "fromkeys"], [923, 2, 1, "", "get"], [923, 2, 1, "", "items"], [923, 2, 1, "", "keys"], [923, 2, 1, "", "pop"], [923, 2, 1, "", "popitem"], [923, 2, 1, "", "setdefault"], [923, 2, 1, "", "update"], [923, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[931, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[939, 4, 1, "", "compute_class_weight"], [940, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[941, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[942, 4, 1, "", "all_displays"], [943, 4, 1, "", "all_estimators"], [944, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[945, 4, 1, "", "check_estimator"], [946, 4, 1, "", "estimator_checks_generator"], [947, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[949, 4, 1, "", "density"], [950, 4, 1, "", "fast_logdet"], [951, 4, 1, "", "randomized_range_finder"], [952, 4, 1, "", "randomized_svd"], [953, 4, 1, "", "safe_sparse_dot"], [954, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[958, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[960, 1, 1, "", "MetadataRequest"], [961, 1, 1, "", "MetadataRouter"], [962, 1, 1, "", "MethodMapping"], [963, 4, 1, "", "get_routing_for_object"], [964, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[960, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[961, 2, 1, "", "add"], [961, 2, 1, "", "add_self_request"], [961, 2, 1, "", "consumes"], [961, 2, 1, "", "route_params"], [961, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[962, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[965, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[966, 4, 1, "", "is_multilabel"], [967, 4, 1, "", "type_of_target"], [968, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[970, 1, 1, "", "Parallel"], [971, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[970, 2, 1, "", "__call__"], [970, 2, 1, "", "dispatch_next"], [970, 2, 1, "", "dispatch_one_batch"], [970, 2, 1, "", "format"], [970, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[973, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[979, 4, 1, "", "incr_mean_variance_axis"], [980, 4, 1, "", "inplace_column_scale"], [981, 4, 1, "", "inplace_csr_column_scale"], [982, 4, 1, "", "inplace_row_scale"], [983, 4, 1, "", "inplace_swap_column"], [984, 4, 1, "", "inplace_swap_row"], [985, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[986, 4, 1, "", "inplace_csr_row_normalize_l1"], [987, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[988, 4, 1, "", "check_is_fitted"], [989, 4, 1, "", "check_memory"], [990, 4, 1, "", "check_symmetric"], [991, 4, 1, "", "column_or_1d"], [992, 4, 1, "", "has_fit_parameter"], [993, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 44, 45, 46, 47, 48, 50, 51, 52, 53, 56, 58, 59, 62, 65, 71, 74, 75, 76, 78, 79, 80, 81, 82, 86, 87, 89, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 110, 111, 114, 116, 119, 121, 122, 123, 126, 127, 129, 130, 131, 133, 135, 137, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 162, 164, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 188, 190, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 209, 210, 212, 214, 216, 218, 219, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 243, 245, 246, 247, 249, 255, 257, 258, 260, 264, 265, 270, 271, 272, 273, 274, 277, 281, 283, 285, 290, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 308, 309, 310, 313, 316, 319, 321, 322, 323, 324, 325, 326, 327, 330, 331, 337, 338, 339, 340, 341, 344, 345, 346, 349, 351, 352, 353, 356, 357, 358, 359, 363, 364, 365, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 420, 422, 429, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 490, 492, 498, 500, 502, 506, 512, 513, 521, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 691, 692, 693, 694, 695, 696, 697, 704, 705, 706, 712, 715, 720, 724, 726, 739, 745, 762, 763, 783, 784, 801, 802, 803, 804, 806, 807, 808, 813, 818, 822, 823, 826, 829, 830, 831, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 932, 934, 935, 938, 945, 952, 954, 961, 962, 964, 988, 992, 993, 994, 996, 997, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1026, 1029, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "0": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 355, 356, 357, 358, 359, 363, 364, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 394, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 431, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 930, 931, 932, 934, 935, 939, 940, 942, 943, 944, 945, 947, 949, 951, 952, 954, 955, 956, 958, 965, 966, 967, 969, 970, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1031, 1032, 1033], "00": [188, 370, 373, 382, 408, 415, 416, 608, 609, 717, 719, 792, 804, 818, 832, 917, 1001, 1005, 1015, 1017, 1019, 1026], "000": [45, 63, 65, 78, 192, 205, 243, 264, 272, 315, 322, 351, 352, 359, 371, 382, 415, 416, 491, 563, 564, 648, 681, 1019, 1026, 1046], "000000": [80, 314, 741], "00000000": 174, "000024": 363, "00005": 55, "0000ff": [68, 298, 305], "0001": [220, 378, 420, 444, 448, 460, 472, 473, 479, 535, 540, 542, 549, 551, 552, 561, 562, 650, 651, 652, 653, 656, 657, 662, 663, 664, 665, 666, 667, 672, 673, 676, 678, 680, 682, 684, 691, 693, 697, 865, 866, 908, 909, 994], "0004": [53, 607], "000977": 270, "00099547": 174, "000e": 416, "001": [47, 54, 69, 80, 96, 145, 221, 239, 249, 255, 270, 272, 332, 373, 382, 412, 538, 539, 541, 548, 631, 648, 649, 650, 651, 656, 657, 664, 665, 666, 667, 670, 671, 672, 680, 681, 682, 683, 685, 688, 693, 694, 697, 698, 801, 802, 865, 866, 903, 904, 910, 911, 912, 913, 914, 994], "0012": 698, "00166409": 665, "00171412": [762, 763, 1003], "002": [52, 373], "003586": 538, "00360392": 538, "0036211": 538, "00362644": 538, "003e": 416, "0044": 915, "00462428": 755, "005": [274, 295, 310, 382], "005422": 270, "006": 382, "007": [255, 290], "0072b2": 255, "0075": [474, 543], "00755": 543, "008": [373, 382], "0083899664": 768, "00860051": 662, "009": 382, "00ff00": 298, "01": [46, 48, 50, 54, 76, 80, 85, 96, 121, 123, 138, 146, 148, 150, 152, 153, 169, 180, 188, 196, 198, 204, 219, 224, 225, 232, 233, 239, 243, 244, 245, 249, 257, 261, 263, 269, 270, 275, 277, 279, 295, 306, 310, 320, 326, 342, 357, 371, 373, 381, 408, 417, 450, 472, 517, 523, 534, 541, 545, 547, 598, 599, 601, 608, 646, 650, 658, 662, 682, 700, 719, 804, 818, 902, 973, 1001, 1005, 1009, 1015, 1017, 1019], "010": [382, 833, 1013], "0106": 653, "011": [290, 382], "0116": 607, "011e": 416, "012": [190, 192], "0129126": 370, "01327": 371, "014": 382, "0144": 619, "015": [355, 1013], "0157": 546, "01621459": 408, "016445": 270, "017": [382, 472, 473], "018": 473, "0182": 901, "0188ff": 314, "019": [373, 382, 472], "019023": 270, "0193": [471, 477], "0195": [421, 476], "0198e1": 119, "02": [52, 67, 80, 84, 92, 96, 98, 114, 121, 124, 137, 143, 173, 186, 239, 247, 249, 264, 265, 277, 295, 305, 308, 310, 312, 334, 336, 356, 370, 373, 381, 407, 412, 442, 446, 600, 608, 662, 680, 804, 818, 887, 903, 917, 1001], "020": 1013, "022": 1013, "0226": 653, "023": [909, 1013], "02306214": 671, "025": [68, 249, 267, 694, 698], "025422": 270, "027": 373, "027400": 363, "02891072": 1006, "029": 1013, "02d": 202, "03": [52, 86, 121, 150, 255, 261, 330, 373, 416, 752, 804, 1001, 1005], "030867": 187, "031": 373, "0321": 839, "03228": 626, "03228706": 614, "03260883": 1006, "033": 1013, "034": 472, "03498585": 1006, "03531816": [830, 831], "036": [382, 473], "036445": 270, "0368": 623, "037": 713, "0370": 854, "038": [472, 473, 865], "03812219": 1006, "038159": 816, "03823144": 174, "0387": 607, "039": [755, 785, 1005], "03f": 268, "04": [67, 76, 78, 88, 123, 130, 176, 211, 247, 255, 261, 270, 303, 346, 373, 415, 417, 472, 473, 650, 651, 656, 664, 665, 666, 685, 792, 804, 818, 1001, 1005, 1009, 1019], "0416": 407, "042": 382, "0427": [470, 475], "043": 382, "044": [755, 1005], "045": 727, "0453": 546, "047": 382, "0479": 546, "048": 1013, "049": 472, "0499": 546, "05": [47, 48, 53, 55, 62, 64, 73, 80, 94, 96, 98, 99, 101, 108, 126, 138, 141, 147, 150, 153, 165, 180, 195, 211, 214, 226, 236, 237, 239, 249, 255, 257, 258, 261, 270, 281, 295, 298, 303, 310, 312, 319, 323, 330, 332, 345, 373, 417, 451, 457, 479, 527, 532, 533, 548, 595, 598, 599, 601, 617, 618, 619, 623, 624, 626, 627, 629, 636, 637, 653, 694, 698, 760, 804, 857, 908, 909, 1001, 1009, 1015], "050": 1013, "051": 473, "0512": 546, "052": 539, "053": [373, 382], "054699": 187, "0547": 912, "055": [373, 1005], "05518": 627, "05532": 624, "0556": 912, "056": [759, 1013], "0561": 912, "0566": 627, "05663": 624, "0568": 751, "057": [382, 833], "058": 373, "0595": 474, "06": [211, 270, 308, 312, 346, 382, 407, 483, 484, 485, 648, 649, 693, 697, 801, 802, 804, 818, 917, 1001, 1015, 1017], "060": 755, "0614": 627, "06165": 624, "0622": [471, 477], "0626": 839, "063": 438, "064": [382, 1013], "065": 382, "0652": 626, "06525643": 614, "066": 652, "06896552": 450, "0693": 623, "07": [130, 359, 371, 408, 563, 564, 696, 698, 1005, 1019], "0707": 627, "07073": 624, "071": [373, 438], "072": [438, 652], "073": [472, 473], "075": 124, "076": 896, "077": 290, "079": 373, "08": [80, 84, 124, 188, 198, 308, 373, 479, 533, 545, 547, 565, 645, 662, 804, 865, 866, 887, 1011], "08022103": [830, 831], "081": 1013, "0813": [470, 475], "08377444": 755, "0872422": 664, "088": [673, 1013], "08d": 56, "08t16": 370, "09": [123, 130, 247, 408, 531, 610, 739, 846, 1005, 1015, 1019], "093": 472, "094": 473, "09541846": 538, "097": 373, "0986": [416, 872], "09861229": [616, 1015], "0d": 1036, "0e": [281, 551, 552], "0e4": 219, "0f": [58, 92], "0rc1": 380, "0rcn": 380, "0x": 937, "1": [0, 1, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 189, 190, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 389, 390, 391, 394, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 580, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1033, 1037], "10": [2, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 59, 63, 64, 65, 67, 68, 69, 73, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 110, 111, 112, 113, 114, 116, 117, 119, 123, 124, 125, 126, 130, 131, 135, 137, 138, 140, 141, 142, 143, 145, 147, 148, 150, 152, 153, 156, 158, 162, 169, 172, 173, 175, 177, 178, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 198, 203, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 228, 229, 230, 233, 234, 239, 242, 243, 244, 245, 246, 248, 249, 250, 252, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 281, 283, 284, 285, 287, 289, 295, 305, 306, 307, 308, 310, 311, 313, 314, 315, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 333, 338, 339, 340, 342, 343, 345, 346, 347, 349, 351, 352, 359, 363, 370, 371, 372, 373, 374, 376, 378, 381, 382, 388, 389, 390, 394, 399, 400, 401, 405, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 439, 444, 448, 450, 452, 453, 454, 460, 461, 463, 476, 489, 494, 495, 498, 502, 503, 504, 506, 512, 513, 514, 515, 518, 522, 523, 526, 528, 530, 533, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 550, 554, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 570, 572, 585, 586, 590, 596, 597, 602, 603, 608, 610, 615, 621, 623, 631, 634, 636, 638, 639, 640, 641, 644, 646, 647, 648, 650, 651, 653, 656, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 681, 682, 685, 689, 690, 695, 696, 699, 700, 703, 709, 719, 730, 746, 760, 773, 801, 802, 804, 805, 806, 807, 808, 815, 818, 819, 820, 821, 822, 824, 825, 827, 832, 834, 835, 836, 837, 843, 844, 845, 847, 848, 849, 855, 864, 865, 866, 868, 874, 878, 881, 882, 885, 897, 905, 911, 914, 916, 917, 921, 926, 938, 949, 952, 956, 968, 973, 974, 980, 981, 990, 994, 995, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1032, 1033, 1036, 1037, 1038, 1043, 1045, 1046, 1047, 1049, 1050], "100": [45, 47, 50, 52, 53, 56, 58, 63, 65, 73, 78, 84, 87, 91, 95, 100, 104, 105, 108, 111, 112, 121, 123, 124, 130, 136, 141, 150, 151, 154, 157, 172, 176, 179, 180, 187, 188, 190, 192, 194, 195, 197, 198, 199, 203, 204, 207, 211, 212, 213, 214, 216, 221, 222, 223, 225, 227, 228, 234, 235, 237, 242, 243, 244, 245, 246, 250, 255, 257, 261, 264, 265, 266, 268, 270, 273, 275, 280, 281, 285, 295, 296, 297, 308, 311, 312, 314, 316, 317, 322, 326, 327, 333, 334, 338, 339, 341, 342, 343, 346, 347, 349, 351, 352, 355, 357, 358, 363, 365, 371, 373, 376, 378, 381, 382, 399, 405, 408, 409, 412, 413, 414, 415, 416, 438, 442, 446, 450, 472, 473, 479, 491, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 532, 536, 538, 546, 547, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 608, 610, 614, 635, 636, 637, 643, 644, 645, 646, 650, 651, 652, 653, 656, 657, 662, 663, 664, 665, 666, 667, 669, 671, 673, 675, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 750, 801, 802, 806, 826, 832, 833, 838, 843, 844, 845, 847, 848, 849, 853, 865, 866, 884, 886, 889, 898, 915, 994, 995, 998, 1002, 1005, 1006, 1012, 1015, 1017, 1043, 1044, 1045, 1048, 1049], "1000": [44, 48, 55, 64, 68, 73, 105, 108, 116, 130, 138, 140, 142, 145, 146, 147, 152, 157, 161, 164, 192, 199, 215, 234, 242, 245, 255, 259, 268, 270, 276, 279, 281, 295, 297, 311, 314, 320, 321, 323, 325, 326, 341, 342, 348, 351, 352, 381, 382, 389, 406, 416, 438, 474, 480, 481, 533, 534, 539, 541, 543, 544, 545, 547, 548, 550, 555, 565, 566, 636, 650, 651, 655, 656, 657, 659, 664, 665, 666, 667, 670, 671, 672, 676, 680, 681, 682, 691, 696, 702, 705, 768, 885, 897, 903, 908, 909, 994, 998, 1020, 1042, 1044, 1053], "10000": [44, 51, 53, 67, 79, 97, 105, 106, 148, 160, 199, 206, 220, 228, 245, 321, 337, 339, 359, 365, 415, 416, 563, 564, 648, 683, 885, 914, 1017], "100000": [245, 255, 376, 617, 618, 619, 623, 624, 626, 627, 629, 897, 998], "1000000": [56, 538], "10005": 1043, "1000x": 1041, "1001": 223, "10027": 1048, "10045": 1043, "1005": 1020, "10058": 1044, "10059": 1043, "1007": 709, "10071": 1043, "10093": 1043, "10095": 1043, "10096": 1048, "100_000": [63, 65, 187], "100k": [243, 396], "100ksampl": 396, "100x": [1035, 1038, 1052], "101": [65, 287, 373, 854, 1036], "10101": 1043, "10112": 1043, "1013": 1013, "10142": 1043, "10153": 1043, "10168": 1050, "10181": 1043, "10192": 1043, "10195": 1043, "101alexmartin": [1052, 1053], "102": [382, 1037], "10210": 1043, "10229": 1043, "1024": [87, 130, 450, 469, 540, 906, 1048], "10280": 1043, "10297": 1043, "103": [289, 290, 371, 415, 499, 557, 558, 1035], "10306": 1043, "10325": 1043, "10336": 1043, "10346": 1043, "10377": 1043, "1038": 408, "10397": 1043, "10412": 1043, "10428": 1043, "10437": 1043, "10440": 1044, "10441": 1043, "10452": 1043, "10458": 1043, "10468": 1050, "10469096": 174, "10471": 1043, "10474": 1043, "10478008": 408, "10482": 1045, "1048576": [416, 585, 592], "10493": 1047, "105": 314, "10500": 1043, "10521": 1043, "10526": 408, "10536": 1043, "10580": 1044, "10581": 1043, "10584743": 174, "10587": 1043, "10591": 1047, "10593": 1043, "106": [373, 884, 999, 1036], "10610": 1043, "10655": 1043, "10663": 1043, "10677": 1043, "10687": 1043, "107": [408, 903, 1006, 1037], "10708": 1047, "10711": 1047, "10723": [1042, 1043], "10727": 1044, "1073": [371, 489], "10740": 1043, "10774": 1043, "10795": 1043, "108": [0, 1036], "1080": [370, 408], "10805": 1049, "10811": 1043, "10815": 1045, "10827": 1043, "10829": 1043, "10836": 1043, "10845": 1043, "10869": 1043, "10881": 1043, "10887": 1043, "10898": 1043, "10899": 1043, "109": [1006, 1037], "10908": 1043, "10913": 1043, "10928": 1043, "10933": 1043, "10982": 1043, "10992": 1043, "10998": 1043, "10999": 1043, "10_000": [47, 63, 108, 140, 147, 186, 192, 243, 273, 283, 290, 327, 561, 562, 566, 567, 885], "10_fold": [371, 495], "10e": [194, 198], "10k": [320, 396, 448], "10ksampl": 396, "10x": 1035, "10x10": 217, "10\u2079": 1043, "11": [58, 113, 123, 174, 213, 214, 217, 267, 275, 276, 282, 293, 294, 296, 314, 321, 339, 343, 347, 370, 373, 374, 382, 389, 408, 411, 412, 415, 451, 458, 483, 484, 485, 486, 498, 503, 519, 520, 616, 654, 660, 674, 719, 725, 727, 728, 782, 783, 784, 805, 808, 822, 825, 833, 860, 917, 953, 968, 997, 1001, 1003, 1015, 1019, 1020, 1033, 1037, 1041, 1043, 1044, 1046, 1049, 1050], "110": [127, 194, 219, 242, 326, 438, 999, 1000], "11000": 1044, "11005": 1043, "11006": 1043, "11010": 1043, "11011": 1043, "11042": 1043, "11047": 1045, "11064": 1047, "11082": 1043, "11099": 768, "111": [47, 48, 101, 127, 227, 236, 290, 860, 1038], "1111": [654, 660], "11124": 1043, "1112658": [902, 1017], "11135": 1043, "11136": 1043, "11144": [1043, 1044], "11160": 1043, "11166": 1043, "1117": 623, "11176": 1043, "11179": 1044, "112": [371, 373, 1037], "11206": 1043, "11211": 1043, "112141": 382, "11232": 1045, "11235": 1043, "112589990684262": 750, "11272": 1043, "11293": 1043, "11295": 1043, "11296": 1046, "113": [287, 382, 1038], "11306": 1043, "11308": 1043, "11310": 1043, "11314": 371, "11315": 1043, "11327": 1043, "11353": 1043, "11354": 1044, "11364": 1044, "114": [714, 1035], "1140": 371, "11420": 1043, "1145": [192, 408, 680], "11458": 1044, "11464": 1043, "11466": 1043, "11467": 1043, "115": 1013, "11505": 1043, "11514": 1046, "11520": 1043, "11526": 1044, "11542": 1043, "11553": 1043, "11556": 1043, "11557": 1043, "11558": 1043, "11576": 1043, "11585": 1043, "11596": 1043, "116": 1035, "1162": 408, "11635": 1045, "11646": 1044, "11650": 1044, "11679": 1043, "11682": 1047, "11699": 1044, "117": 1036, "11705": 1044, "11724": 1043, "11727": 1044, "11741": 1043, "11754": 1044, "11756": [1043, 1044], "11774": 1043, "118": 593, "11841": [902, 1017], "1185": 382, "11860": 1050, "1189": 415, "119": [999, 1038], "11901": 1043, "11905": 1043, "11912": 1043, "11915045": 359, "11924": 1043, "11950": 1046, "11951": 1043, "11973": 1044, "12": [0, 44, 46, 59, 71, 76, 78, 79, 87, 89, 90, 91, 106, 116, 143, 144, 145, 148, 150, 174, 175, 176, 183, 188, 190, 195, 205, 212, 220, 232, 235, 236, 239, 240, 242, 250, 257, 258, 269, 270, 272, 273, 276, 282, 283, 284, 293, 314, 315, 316, 324, 347, 353, 372, 373, 374, 381, 389, 391, 394, 400, 401, 402, 408, 412, 416, 444, 448, 450, 458, 483, 484, 485, 486, 498, 534, 536, 543, 572, 650, 651, 656, 664, 665, 666, 668, 673, 675, 685, 689, 690, 693, 696, 697, 729, 734, 801, 802, 805, 822, 825, 839, 860, 876, 985, 994, 995, 997, 1001, 1003, 1005, 1006, 1015, 1019, 1020, 1033, 1036, 1038, 1042, 1043, 1045, 1046, 1051, 1052], "120": [151, 233, 326, 417, 593, 1035], "1200": [146, 310, 415], "12000": 522, "12068": 1045, "12069": 1048, "121": [101, 137, 183, 244, 622, 673, 1015], "12105": 1043, "12116": 1044, "1212": 500, "12122": 1043, "12143": 1044, "12145": 1045, "12159": 1043, "12165": 1043, "12165031": 1006, "12171": 1043, "12174": 1044, "12177": 1044, "12197": 1044, "122": [0, 137, 183, 188, 244, 382, 1006], "1220": 623, "12211": 1043, "12222": 1044, "12232": 1044, "12234": 1043, "12246": 1043, "12251": 1044, "12258": 1045, "12274212": 1006, "12279": 1044, "12285": 1050, "1229": 519, "123": [139, 157, 359, 415, 518, 519, 520, 557, 558, 841, 1006, 1013], "12300": 1044, "12303": 1045, "12304": 1043, "12317": 1043, "1232": 415, "12328": 1044, "12330": 1043, "12334": 1044, "12338": 1043, "12339": 1043, "1234": [195, 258, 273, 376], "12344": 1044, "12345": 1043, "12350": 1043, "12360": 1043, "12365": 1043, "12388": 1043, "12393": 1043, "124": [415, 1037], "12436": 1044, "12441": 1043, "12451": 1043, "12462": 1043, "12467": 1043, "12471": 1043, "12481": 1043, "125": [112, 536, 994, 1005, 1015], "12513": 1044, "12514": 1043, "12517": 1043, "12518": 1043, "12522": 1043, "12543": 1044, "12557": 1045, "12568": 1044, "12569": 1045, "12582": 1044, "12583": 1044, "12599": 1044, "126": 415, "12612": 1043, "12613": 1044, "12625": 1043, "1263": 382, "12638": 1047, "12650": 1045, "12669": 1044, "12685": 1043, "12699": 1043, "127": [146, 1035], "12701": 1043, "12704": 1043, "12715": 1044, "12732": 1044, "12789": 1045, "128": [54, 55, 212, 363, 538], "12807": 1044, "12821": 1044, "12834": 1044, "12852": 1045, "12855": 1044, "12860": 1044, "12861": 1044, "1288": 371, "12881": 1043, "12883823": 412, "12887": 1045, "129": 1035, "12908": 1044, "12914884": 1006, "12916": 1044, "12927": 1045, "12946": 1043, "12949": 1043, "12955": 1044, "12972": 1044, "12983": 1044, "12988": 1044, "1299": [874, 1015], "12th": 1017, "13": [44, 50, 51, 80, 126, 130, 143, 146, 148, 182, 192, 221, 264, 271, 274, 276, 310, 314, 340, 371, 373, 376, 382, 389, 412, 420, 498, 512, 515, 534, 535, 553, 554, 585, 609, 639, 643, 738, 763, 822, 852, 867, 874, 900, 901, 1001, 1005, 1006, 1011, 1012, 1015, 1020, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1047], "130": 382, "13003": 1047, "13005": 1043, "13007": 1044, "130107": 490, "13013": 1045, "13042": 1050, "13046": 1043, "13077794": 359, "13086": 1044, "131": [54, 90, 382, 1005, 1036], "13124": [1043, 1044], "13134": 1043, "13142": 1044, "13146": 1045, "13151": 1044, "13157": 1044, "13164": 1044, "13165": 1043, "13174": 1044, "1319": [874, 1015], "13193": 1044, "132": [54, 90, 415], "13204": 1047, "13213": 1045, "1322": 626, "13221": 1043, "13222543": 614, "13231": 1045, "13233": [371, 495, 496], "13240": 1044, "13241": 1044, "13250": 1044, "13251": 1044, "13253": 1044, "13260": 1044, "13266": 1044, "13276": 1043, "13279": 1044, "13283": 1044, "13286": 995, "13290": 1045, "133": [54, 90], "13312": 1043, "13317": 1044, "13328": 1044, "13333": 1044, "13336": 1044, "13350": 1044, "13363": 1044, "13366": 1044, "1338": 265, "13382": 1044, "13389": 1044, "13392": 1045, "13393": 1045, "13397": 1044, "134": [146, 270, 1038], "13422": 1044, "13427": 1044, "13439": 1044, "13447": 1044, "13459": 1044, "13467": 1045, "13485": 1044, "13486": 1044, "13496": 1044, "135": 373, "13511": 1046, "13524": 1044, "13531": 1044, "13545": 1044, "13549": 1044, "13554": 1044, "13562": 1044, "13575": 1045, "13601": 1044, "13607": 1044, "13609": 1045, "13618": 1045, "13620": 1044, "13628": 1044, "13636": [1001, 1044], "13641": 1044, "13649": 1052, "13651": 1044, "137": [382, 1036], "13704": 1045, "13707": 1045, "1371": 536, "13726": 1045, "1373": 1002, "1374": 536, "13741": 1044, "13769": 1045, "13772": [1043, 1044], "13773": 1045, "13779": 1044, "13780": 1044, "138": [382, 415, 1005], "13806": 1045, "1382": 526, "13835": 1044, "1385": 475, "13864": 1044, "13875": 1045, "13877": 1044, "13894": 1044, "13896": 1045, "139": [290, 382, 415, 453, 463, 695, 699, 1006], "13900": 1047, "13902": 1045, "13903": [1043, 1044], "13910": 1044, "13911": 1045, "13925": 1045, "13933": 1045, "13938": 1045, "13947": 1044, "1396": 1002, "13960": 1045, "1397": 382, "13974": 1044, "13987": 1045, "13995": 1045, "13th": 65, "14": [44, 51, 74, 83, 94, 96, 97, 100, 113, 126, 164, 188, 198, 202, 234, 239, 244, 264, 269, 275, 276, 285, 289, 290, 313, 314, 324, 346, 349, 364, 371, 373, 374, 389, 394, 400, 401, 408, 412, 498, 500, 512, 555, 556, 639, 647, 696, 818, 822, 874, 998, 1001, 1005, 1015, 1020, 1033, 1035, 1036, 1038, 1039, 1043, 1048], "140": [326, 415, 512, 518, 519, 520, 557, 558, 1006], "1400": 475, "14012": 1045, "14024": 1044, "14028": 1045, "14035": 1045, "14048": 1046, "14053": 1044, "14067": 1044, "14075": 1046, "14087": 1044, "14092": 1044, "141": [287, 503, 536, 908, 1006], "14108": 1045, "14114": 1045, "14170": 1045, "14180": 1046, "14194": 1045, "14197": 1044, "142": 415, "14228": 364, "14237": [1043, 1044], "14259": 1045, "14264": 1046, "14286": 1045, "14287": 1045, "14294": 1045, "14296": 1045, "143": [373, 472, 473, 1017, 1035, 1036], "14300": 1046, "14305": 1045, "14309": 1044, "14336": 1045, "14338": 995, "14356": 1045, "14357": 1045, "14378": 1045, "14381": 1045, "14393": 1044, "144": [270, 382, 1035], "1440": 44, "14406": 1045, "1441": 626, "14410151": 614, "14417": 1045, "1443": 1011, "14430": 1045, "14446": 1047, "14458": 1045, "14464": 1045, "14475": 1045, "14496": [382, 1044], "145": 408, "14510": 1045, "14516": 1046, "14520": 1045, "14538": 1045, "14544": 1045, "14549": 1045, "14591": 1045, "14593": 1045, "14595": 1045, "146": 415, "1460": 155, "14602": 1045, "14623": 1045, "14629": 1045, "1464": 240, "14646": 1045, "14647": 1045, "14680": 1045, "14682": 1045, "14696": 1046, "147": 1006, "14702": 1045, "14704": 1045, "14706": 1045, "1471": 1011, "14710": 1045, "14732": 1045, "14736": 1050, "1474": 382, "14740": 1045, "14764": 1045, "148": 1038, "14800": 1047, "14848": 1046, "14849": 1045, "14862": 1050, "14864": 1045, "14865": 1045, "14869": 1045, "14872": 1045, "14884": 1045, "14890": 1045, "14894": 1045, "14898": 1045, "149": [1006, 1035], "14900": 1045, "14902": 1045, "14907": 1045, "14908": 1045, "14933": 1045, "14936": 1045, "14971": 1045, "14975": 1049, "14982": 1047, "15": [47, 52, 53, 54, 55, 67, 68, 71, 76, 80, 88, 95, 96, 100, 106, 112, 114, 119, 130, 139, 141, 143, 144, 150, 164, 168, 171, 175, 182, 186, 188, 214, 226, 230, 234, 237, 239, 257, 258, 265, 273, 275, 278, 281, 282, 285, 294, 298, 305, 306, 310, 312, 314, 325, 330, 338, 340, 343, 346, 349, 356, 370, 371, 374, 376, 389, 394, 400, 401, 412, 415, 416, 441, 455, 491, 498, 499, 500, 533, 539, 547, 548, 557, 558, 601, 607, 612, 648, 656, 665, 667, 672, 680, 682, 696, 822, 837, 860, 889, 994, 1000, 1001, 1002, 1005, 1008, 1009, 1015, 1020, 1033, 1037, 1047, 1049, 1050], "150": [46, 119, 127, 139, 160, 233, 237, 239, 283, 326, 344, 347, 373, 412, 417, 506, 604, 605, 829, 830, 831, 1005], "1500": [75, 91, 96, 101, 119, 232, 236, 255], "15000": [676, 691, 865, 866], "15005": [1046, 1048], "15007": 1047, "15010": 1045, "15028": 1045, "15038": 1045, "150407": 382, "15044": 1045, "15049": 1045, "15053": 1045, "15057": 1045, "1506": 384, "15080": 1045, "15082": 1045, "15083": 1045, "15084": 1045, "15086": 1045, "15094": 1045, "15096": 1045, "15099": 1045, "151": [382, 415, 503, 1017], "15100": 1045, "15119": 1045, "15120": 1045, "15126": 1047, "15138": 1045, "15160": 1045, "15179": 1046, "152": 382, "15257": 1045, "1527": 864, "15274": 1045, "15297572": 538, "153": 667, "15304": 1045, "153244303321897735": 408, "15361": 1047, "15375": 1045, "15380": 1046, "15382": 1045, "15393": 1045, "154": [655, 1006], "1542": 382, "15427": 1047, "15429": 1045, "15436": 1046, "15463": 1045, "15488": 1045, "15490": 1045, "15503": 1046, "15524": 1045, "1553374": 408, "1553511": 408, "1554": 864, "15557": 1045, "15558": 1046, "15582": 1046, "156": 373, "15611": 995, "15622": 1046, "15625": 1045, "15636": 1047, "15652": 1046, "15655": 1046, "15661": 1045, "15669": 1046, "15699552": 1006, "157": 382, "15707": 1046, "15709": 1046, "15730": 1046, "15751": 1045, "15760": 1045, "15762": 1046, "15763": 1047, "15773": 1046, "15782": 1046, "15785": 1046, "15797": 1045, "158": [78, 415, 673], "15806": 1046, "15810": 1045, "15834": 1046, "15863": 1045, "15864": 1046, "15868": 1045, "15879": 1045, "15888": 1045, "15898": 1045, "159": [371, 1035], "15918": 1046, "1592": 500, "15926": 1046, "15930": 1045, "15933": 1045, "15936": 1045, "15937": 1045, "15946": 1046, "15947": 1045, "15948": 1049, "15950": 1046, "15953": 1046, "15959": 1046, "15963": 1046, "1597": 264, "15980": 1046, "15984": 1049, "15996": 1045, "15e": 121, "16": [45, 58, 65, 79, 84, 85, 88, 100, 112, 121, 124, 164, 188, 206, 211, 212, 213, 230, 232, 233, 244, 248, 272, 274, 294, 308, 310, 314, 319, 344, 352, 357, 371, 373, 374, 382, 389, 394, 400, 401, 412, 413, 416, 443, 458, 460, 472, 473, 479, 480, 499, 500, 504, 518, 536, 537, 572, 592, 598, 599, 610, 611, 643, 654, 655, 658, 659, 660, 661, 686, 687, 817, 822, 834, 883, 909, 917, 980, 981, 982, 994, 1001, 1005, 1015, 1020, 1033, 1035, 1036, 1040, 1041, 1043, 1044], "160": [247, 994], "16006": 1046, "16018": 1049, "16021": 1046, "16061": 1049, "16066": 1047, "16069": 1046, "16075": 1046, "16076": 1045, "16084": 1046, "16090": 1046, "16103": 1046, "16111": 1046, "16112": 1046, "16117": 1046, "16132": 1046, "16144": 382, "16147": 373, "16149": 1046, "16159": [382, 1046], "1616": 474, "16182": 1046, "16183": 1046, "162": 373, "16224": 1046, "1624": 500, "16245": 1046, "16257": 1046, "16261": 1046, "16266": 1046, "16280": 1046, "16289": 1047, "163": [373, 1013], "16323": 1046, "16326": 1047, "16331": 1046, "16335": 1047, "16352": 1047, "16362": 1046, "16392": 1047, "16397": [1045, 1046], "164": 415, "16401": 1046, "16403": 1046, "16431": 1046, "16437": 1046, "16442": 1046, "16443186": 1006, "16449": 1048, "16451": 1046, "16466": 1046, "16484": 1046, "16493": 1047, "165": 1006, "16500": 1045, "16505": 1045, "16508": 1046, "16530": 1047, "16539": 1046, "16585": 1046, "166": [382, 1005, 1035], "16605": 1049, "16619": 1047, "16622": 1046, "16625": 1047, "16632": 1046, "16655": 1046, "16663": 1046, "16692": 1046, "16695": 1050, "167": [382, 1035], "16718": 1046, "16726": 1046, "16728": 1046, "16747": 1050, "16748": 1049, "168": 1035, "1680": 373, "16801": 1046, "16837": 1046, "16841": 1046, "16849": 1046, "169": 92, "16906": 1047, "1691": 1001, "1693": 908, "16935": 1047, "16948": 1049, "16950": 1046, "16979946": 1006, "1698": 653, "16981": 1046, "16985": 1047, "16993": 1046, "17": [75, 86, 112, 150, 211, 264, 305, 314, 371, 374, 381, 394, 400, 401, 408, 412, 445, 462, 488, 499, 500, 502, 525, 533, 538, 542, 549, 551, 552, 557, 561, 562, 571, 572, 600, 632, 653, 661, 662, 663, 670, 673, 676, 678, 691, 696, 733, 734, 744, 765, 770, 787, 788, 791, 793, 822, 846, 857, 872, 877, 878, 886, 888, 894, 910, 913, 916, 917, 918, 919, 953, 994, 995, 1006, 1008, 1015, 1033, 1035, 1036, 1037, 1038, 1041, 1044, 1049], "170": [80, 91, 96, 382], "17021": 1046, "17032": 1046, "17036": 1048, "17038": 1047, "170388": 1006, "17061": 1046, "17090": 1047, "17095": 1047, "171": [373, 382, 792, 1005], "17107": 1047, "1714": 1001, "17148": 1047, "17159": 1047, "17169": 1048, "17187": 1047, "17192": 1047, "17193": 1047, "172": [382, 495, 496, 653, 1001], "17204": 1046, "17205": 1046, "17210": 1046, "17225": 1047, "17233": 1047, "17235": 1046, "17266": 1049, "17289014": 174, "173": [382, 587], "17309": 1046, "17317": 1047, "17357": 1046, "17360": 1046, "17367": 1047, "17379": 1047, "1738": 1005, "17386": 1047, "17388": 1051, "17396": 1047, "174": [146, 382, 587], "17406": 1047, "17412": 1047, "17414": 1047, "17427": 1047, "17433": 1046, "17443": 1048, "17448": 1047, "17478": 1047, "17491": 1047, "17499": 1047, "175": [382, 1015], "17526": 1047, "17546": 1047, "17569": 1047, "17578": 1047, "17598": 1047, "176": [382, 841, 1006, 1013], "17603": 1047, "17604": 1047, "17606": 1047, "17608": 1047, "17609": 1047, "17610": 1047, "17612": 1047, "17614": 1047, "17616": 1047, "17622": 1048, "17633": 1047, "17644": 1047, "17651": 1047, "17661": 1047, "17662": 1047, "17679": 1047, "17694": 1046, "177": 382, "17702": 1047, "17742": 1046, "17743": 1048, "17746": 1048, "17750": 1048, "17759": 1047, "17769": 1048, "17772": 1048, "17777": 1047, "17785": 1048, "178": [373, 382, 512, 852], "178000": 312, "17804": 1047, "17812": 1046, "17819": 1049, "17826": 1047, "17833": 1047, "17848": 1046, "17856": 1047, "17864": 1047, "17876": 1047, "17878": 1047, "179": [373, 382, 415, 1035], "17914": 1046, "17928620": 370, "17932": 1047, "17935": 1047, "17937": 1047, "17959": 1046, "1797": [329, 373, 420, 446, 504, 534, 535, 536, 537, 602, 603, 692, 693, 694, 695, 697, 1008], "17984": 1047, "17985": 1046, "17987": 1047, "17992": 1047, "17995": 1046, "17997": 1047, "17_760": 150, "17t14": 370, "18": [44, 48, 76, 80, 94, 96, 180, 223, 239, 244, 270, 314, 351, 352, 353, 376, 382, 412, 413, 416, 448, 460, 494, 502, 503, 504, 506, 507, 512, 537, 538, 540, 542, 543, 559, 560, 561, 562, 565, 566, 567, 568, 571, 573, 574, 575, 576, 578, 580, 581, 592, 597, 602, 603, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 650, 653, 662, 663, 675, 718, 722, 735, 738, 739, 745, 747, 764, 774, 801, 802, 825, 841, 855, 864, 865, 866, 872, 878, 886, 887, 898, 908, 909, 916, 917, 918, 919, 920, 951, 952, 994, 1003, 1005, 1015, 1033, 1035, 1036, 1039, 1040, 1042, 1043, 1045, 1046], "180": [71, 255, 256, 257, 260, 261, 299, 303, 382, 504], "18000": [353, 371], "18010": 1048, "18016": 1046, "18020": 1050, "1804243": 370, "18052": 1047, "18094": 1050, "181": [287, 382], "18114": 1047, "18121": 1047, "18124": 1047, "18149": 1047, "18167": 1047, "18170": 1049, "18176": 1047, "18197458": 359, "182": [382, 415], "18222": 1047, "18256": 1047, "18266": 1047, "18269": 1047, "18278": 1047, "18280": 1047, "18293": 1047, "18298": 1050, "183": [330, 382, 1006, 1035], "18302": 1047, "18310": 1049, "18326": 1047, "18328": 1048, "18334": 1047, "18341": 1047, "18343": 1047, "18368": 1048, "18370": 1047, "18393": 1048, "18394": 1047, "184": [382, 803], "18405": 1047, "18406": 1047, "18410": 1047, "18429": 1047, "18433": 1048, "18444": 1048, "18447": 1047, "18459": 1048, "18482": 1049, "18488": 1051, "185": [373, 382, 865, 866], "1850": 371, "18508": 1047, "18510": 1047, "18525": 1047, "18527": 1047, "18528": 1047, "18543": 1048, "18545": 1047, "18555": 1053, "18595": 1047, "186": [382, 792, 1005], "18607": 1047, "18612": 1047, "18622": 1047, "18639": 1047, "18649": 1048, "18682": 1047, "18689": 1052, "18691": 1047, "187": [382, 587, 1006, 1037], "1871": 1020, "18723": 1051, "18736": 1048, "1874": 1020, "18746": 1047, "1875": 985, "18768": 1047, "188": [373, 382, 587], "1880": 382, "18805": 1050, "18818427": 671, "18832": 1049, "18842": 1048, "18843": 1053, "18846": [371, 489, 490], "18898": 1048, "189": [382, 905, 1018], "18925": 1048, "18959": 1048, "18964": 1048, "18975": 1049, "18987": 1047, "19": [314, 373, 374, 390, 394, 400, 401, 408, 416, 419, 445, 494, 518, 519, 520, 538, 542, 543, 549, 551, 552, 559, 560, 561, 562, 566, 567, 568, 585, 592, 610, 652, 662, 663, 670, 671, 672, 675, 676, 678, 680, 682, 691, 711, 785, 789, 803, 804, 818, 831, 836, 837, 839, 840, 854, 855, 874, 885, 906, 910, 913, 916, 917, 918, 919, 994, 1005, 1015, 1033, 1035, 1036, 1037, 1038, 1040, 1043, 1052], "190": [51, 146, 279, 303, 371, 382, 500], "19002": 1048, "19004": 1048, "19011": 1048, "19024": 1048, "19035": 1048, "19041": 1048, "19046": 1048, "1905": 373, "19052": 1048, "19055": 1048, "19069": 1048, "19075": 1050, "19085": 1049, "191": [382, 1006], "19126": 1047, "19158": 1049, "19159": 1048, "19162": 1048, "19172": 1048, "19179": 1047, "19182": 1047, "19198": 1048, "192": [146, 382, 1035], "19210": 1048, "19211": 1047, "19234": 1047, "19244": 1048, "19263": 1048, "19271": 1047, "19278": 1048, "19296": 1048, "19297": 1048, "193": [382, 415, 719, 790, 1018], "19308": 1047, "1931": 112, "19310": 1048, "19336": 1048, "19356": 1048, "1936": 373, "19365": 1048, "19390": 1048, "19391": 1048, "19401": 1048, "19407": 1047, "19411": 1048, "19415": 1048, "19417": 1047, "194239": 382, "19426": 1048, "19428": 1048, "19438": 1049, "19459": 1048, "19472": 1048, "19473": 1048, "19483": 1048, "19490": 1049, "19491": 1048, "19499": 1048, "195": [495, 496], "1950": [373, 1005], "195133": 382, "19520": 1048, "19527": 1048, "19564": 1048, "19568": 1048, "19571": 1048, "19579": 1047, "1958": [176, 413, 415, 534], "19580": 1047, "196": [905, 1018], "1960": [631, 720], "19616": 1048, "19631": 1048, "1964": [694, 698, 884, 896, 1002], "19641": 1048, "19643": 1048, "19646": 1047, "19659": 1047, "19662693": [848, 849], "19664": 1051, "19669": 1048, "19680": 1049, "19689": 1049, "19703": 1047, "1972": 373, "19721": 1047, "19727": 1047, "1973": [373, 406], "19732": 1047, "19733": 1048, "19734": 1048, "1974": [408, 416, 714], "19747": 1049, "1975": 1008, "19752": 1048, "19766": 1048, "1977": 639, "1978": 1001, "19784": 1048, "19788": 1048, "1979": [408, 729, 773], "19790": 1048, "19794": 1049, "19799": 1048, "198": 1035, "1980": 373, "1981": 1001, "1983": [408, 735, 888], "19836": 1048, "1984": [112, 113, 410, 475, 916, 917, 1021], "19847": 1047, "1985": [187, 408, 709, 719, 790], "1986": [995, 1021], "19869": 1048, "1987": [408, 610, 611, 796, 797], "19879": 1048, "1988": 373, "19883": 1048, "19888": 1047, "1989": [279, 639, 792, 865, 866, 1001, 1008], "199": [651, 795, 1020], "1990": 371, "19906": 1048, "19908": 1048, "1990a": 406, "1991": [518, 519, 520], "19916": 1049, "1992": [371, 373, 412, 415, 569, 570, 649, 1001], "19922": 1047, "19924": 1047, "1993": [373, 475, 668, 689, 690, 1021], "19934": 1048, "19939": 1047, "1994": [371, 373, 648], "19948": 1048, "1995": [270, 373, 406, 415, 555, 556, 838, 905, 1006], "1996": [65, 150, 408, 415, 419, 445, 518, 519, 520, 557, 558, 1015], "1997": [136, 371, 413, 415, 537, 556, 694, 698, 1001, 1002, 1005], "1998": [150, 270, 371, 373, 413, 415, 557, 558, 838, 843, 874, 1006, 1007, 1009, 1015, 1019], "19982": 1047, "1999": [179, 371, 406, 408, 410, 413, 415, 438, 451, 458, 470, 475, 536, 543, 557, 558, 561, 562, 727, 902, 910, 911, 913, 914, 1011, 1017], "19th": 408, "1_": 1015, "1_000": [45, 65, 71, 105, 126, 150, 171, 176, 178, 188, 205, 243, 267, 347, 407, 539, 541, 705, 803, 826, 827, 835], "1d": [2, 136, 138, 184, 188, 213, 243, 291, 294, 303, 327, 346, 376, 383, 385, 389, 390, 409, 414, 465, 468, 621, 634, 637, 657, 661, 664, 667, 688, 707, 716, 717, 723, 733, 734, 738, 742, 787, 788, 791, 800, 850, 851, 852, 853, 854, 856, 858, 859, 860, 873, 925, 928, 930, 934, 935, 967, 991, 1006, 1026, 1035, 1040, 1041, 1042, 1044, 1048, 1049, 1053], "1e": [45, 46, 47, 50, 56, 64, 81, 121, 169, 171, 174, 176, 177, 178, 179, 180, 182, 187, 195, 206, 212, 213, 219, 226, 230, 235, 239, 245, 250, 255, 258, 261, 268, 278, 281, 307, 317, 322, 325, 333, 338, 340, 347, 351, 382, 420, 444, 448, 453, 460, 463, 472, 473, 479, 483, 484, 485, 533, 534, 535, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 561, 562, 563, 564, 595, 600, 609, 611, 612, 615, 617, 618, 619, 623, 624, 626, 627, 629, 631, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 656, 657, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 693, 694, 695, 696, 697, 698, 699, 732, 789, 801, 802, 818, 843, 844, 845, 846, 847, 848, 849, 857, 865, 866, 873, 903, 904, 908, 909, 910, 911, 912, 913, 914, 990, 994, 1005, 1009, 1013, 1015, 1019, 1043, 1048, 1049, 1050], "1e0": [171, 245, 261, 278, 994], "1e1": [171, 177, 212, 245, 340], "1e15": 180, "1e2": [50, 171, 178, 245, 261, 340], "1e3": [46, 47, 50, 171, 177, 182, 245, 281, 325, 994], "1e4": [281, 663, 683, 902, 1017], "1e5": [46, 176, 196, 203, 281, 617, 618, 619, 623, 624, 626, 627, 629, 897, 902, 1017], "1e6": [48, 50, 206, 243, 327, 351, 353, 363, 538, 902, 1005, 1017], "1e7": 382, "1er": 416, "1f": [53, 59, 84, 87, 124, 195, 212, 243, 255, 257, 277, 319, 326, 352, 353], "1gb": 363, "1kastner": 1042, "1m": 970, "1mb": [364, 1040], "1mo": 176, "1nn": 373, "1or": 416, "1px": 308, "1st": [0, 44, 94, 127, 179, 213, 315, 886, 887], "1z": 416, "2": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 162, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 371, 372, 373, 374, 376, 378, 380, 381, 382, 383, 385, 388, 389, 390, 394, 399, 400, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 473, 474, 475, 476, 479, 480, 481, 483, 484, 485, 486, 495, 498, 502, 503, 506, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 580, 584, 585, 587, 588, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 707, 708, 709, 710, 711, 712, 715, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 767, 768, 771, 772, 773, 775, 777, 778, 779, 780, 782, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 898, 899, 901, 902, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 923, 930, 931, 932, 934, 935, 936, 940, 943, 950, 951, 952, 953, 954, 955, 956, 958, 959, 965, 966, 967, 968, 969, 970, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1032, 1033, 1035, 1036, 1037, 1039, 1040], "20": [2, 44, 47, 48, 53, 55, 63, 64, 65, 70, 71, 75, 76, 79, 81, 82, 84, 88, 89, 95, 101, 110, 114, 119, 121, 130, 137, 141, 143, 147, 151, 155, 156, 158, 162, 164, 165, 166, 177, 186, 188, 189, 197, 202, 203, 209, 211, 212, 213, 216, 221, 224, 225, 226, 229, 235, 243, 249, 257, 259, 270, 271, 273, 274, 276, 281, 282, 285, 290, 294, 295, 296, 297, 298, 301, 314, 315, 316, 320, 321, 322, 323, 325, 329, 330, 333, 337, 339, 343, 345, 349, 352, 353, 357, 369, 373, 374, 376, 381, 382, 394, 400, 401, 408, 415, 416, 442, 447, 448, 450, 465, 466, 470, 472, 473, 479, 489, 490, 491, 492, 494, 496, 498, 499, 502, 504, 506, 507, 513, 514, 517, 518, 525, 533, 538, 539, 544, 547, 548, 550, 554, 557, 558, 561, 562, 563, 564, 565, 571, 572, 585, 592, 593, 595, 597, 600, 602, 633, 634, 649, 653, 662, 670, 671, 672, 680, 682, 700, 708, 712, 717, 720, 729, 730, 743, 760, 761, 771, 796, 797, 801, 802, 803, 804, 818, 830, 831, 832, 835, 837, 840, 841, 842, 845, 846, 853, 854, 865, 866, 867, 868, 870, 872, 873, 881, 882, 883, 884, 889, 903, 904, 906, 907, 912, 915, 920, 926, 932, 934, 935, 938, 982, 994, 1001, 1005, 1008, 1011, 1012, 1015, 1018, 1028, 1029, 1031, 1033, 1035, 1041, 1044, 1047, 1049, 1050], "200": [70, 71, 80, 88, 94, 108, 124, 137, 147, 154, 175, 199, 208, 213, 216, 217, 218, 224, 229, 233, 251, 255, 277, 279, 280, 310, 313, 331, 339, 340, 357, 359, 371, 388, 413, 415, 420, 441, 455, 469, 472, 473, 524, 535, 536, 537, 540, 541, 542, 545, 549, 587, 653, 655, 675, 683, 696, 750, 818, 865, 866, 906, 910, 911, 912, 913, 914, 926, 1005, 1020], "2000": [55, 64, 76, 108, 122, 128, 192, 258, 261, 270, 287, 305, 323, 352, 371, 373, 408, 409, 415, 420, 453, 463, 535, 536, 561, 693, 695, 697, 747, 792, 801, 854, 866, 884, 896, 1002, 1005, 1011, 1017], "20000": [58, 123], "200000": [230, 873], "20002": 1048, "2001": [2, 65, 176, 189, 264, 269, 405, 408, 415, 438, 452, 453, 454, 463, 513, 561, 562, 566, 567, 632, 638, 643, 649, 695, 700, 739, 792, 889, 901, 939, 995, 997, 1001, 1005, 1011, 1013, 1015, 1017, 1020], "2002": [97, 406, 408, 415, 438, 449, 596, 597, 730, 760, 855, 903, 997, 1005], "20023": 1048, "2003": [2, 52, 176, 405, 408, 413, 416, 452, 453, 463, 515, 517, 693, 697, 843, 845, 1001, 1002, 1007, 1017, 1043], "20030": 1048, "20031": 1049, "2004": [45, 270, 287, 371, 373, 408, 410, 413, 474, 537, 610, 611, 693, 697, 709, 747, 787, 904, 999, 1001, 1002, 1007, 1020], "2005": [63, 65, 113, 373, 406, 438, 440, 857, 1001, 1008, 1018], "20056": 1048, "2006": [2, 51, 303, 371, 415, 418, 463, 500, 559, 560, 567, 568, 614, 615, 618, 623, 626, 653, 670, 671, 745, 792, 793, 801, 843, 901, 918, 919, 1001, 1005, 1007, 1010, 1017, 1018], "2007": [0, 74, 200, 371, 408, 417, 441, 453, 455, 461, 463, 568, 660, 695, 721, 738, 741, 762, 763, 799, 997, 1001, 1003, 1005], "20072": 1048, "2008": [52, 410, 412, 413, 479, 536, 565, 593, 649, 668, 689, 690, 696, 720, 730, 760, 838, 843, 847, 864, 999, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1020], "20087": 1048, "2009": [2, 135, 138, 139, 149, 198, 408, 412, 413, 415, 416, 521, 522, 530, 533, 539, 540, 542, 543, 546, 549, 555, 561, 562, 639, 675, 683, 700, 839, 855, 916, 917, 951, 952, 1001, 1005, 1006, 1012, 1021], "200_000": [873, 1051], "200j": 162, "200m": 371, "200x": 1035, "201": [146, 373, 587], "2010": [0, 111, 188, 275, 276, 405, 408, 410, 412, 413, 421, 476, 538, 708, 712, 723, 724, 744, 833, 865, 866, 997, 1001, 1005, 1009, 1019, 1023, 1035], "2011": [0, 188, 382, 413, 416, 537, 540, 542, 543, 549, 593, 631, 642, 662, 734, 995, 1009, 1019, 1023, 1035], "20117": 1048, "2012": [0, 113, 406, 415, 557, 558, 565, 643, 747, 994, 998, 1005, 1023, 1035], "2013": [0, 192, 373, 408, 412, 413, 538, 730, 760, 997, 1005, 1023, 1036, 1037], "2014": [0, 370, 402, 413, 415, 418, 532, 610, 611, 626, 627, 662, 696, 865, 866, 951, 952, 1002, 1009, 1029, 1038], "20145": 1049, "2015": [0, 188, 370, 712, 725, 727, 728, 865, 866, 1005, 1012, 1029, 1039, 1040], "20155": 1048, "20159": 1048, "2016": [0, 237, 370, 408, 994, 1040, 1041], "20161": 1048, "20165": 1048, "2017": [0, 270, 370, 406, 408, 419, 445, 1005, 1041, 1042], "2018": [0, 212, 230, 416, 451, 994, 1005, 1029, 1042, 1043], "2019": [0, 188, 374, 408, 453, 463, 696, 1002, 1005, 1012, 1015, 1043, 1044, 1045], "2020": [0, 371, 1045, 1046, 1047, 1048], "20200": 1048, "20207": 1048, "20209": 1048, "2021": [0, 374, 376, 675, 1005, 1047, 1048], "2022": [0, 364, 408, 415, 709, 1015, 1049, 1050], "2023": [0, 388, 402, 406, 1050, 1051], "20231": 1048, "2024": [1052, 1053], "20240": 1048, "20250": 1048, "20272": 1048, "20297": 1048, "20312": 1048, "20326": 1048, "20331": 1050, "2034": 371, "20380": 1048, "20385": 1048, "204": [1013, 1018], "20408": 1049, "20415": 1050, "20416": 1048, "20431": 1048, "20477": 1048, "20512": 1048, "20515": 1048, "20521": 1048, "20524": 1051, "20526": 1048, "20528": 1048, "20531": 1048, "20534": 1048, "20552": 1048, "20554": 1048, "20560": 1048, "20567": 1049, "20583": 1048, "20597": 1048, "20617": 1050, "20619": 1048, "20638": 1048, "20640": [183, 371, 491], "20652": 1048, "20653": 1049, "20657": 1048, "20673": 1048, "20683": 1048, "207": 1035, "2071716": [848, 849], "20727": 1048, "20729": 1048, "20752": 1048, "20753": 1049, "20761": 1048, "2079": 275, "208": [290, 373], "20802": 1050, "20803": 1049, "20811": 1049, "20842": 1048, "20843": 1048, "20860": 1049, "20880": 1048, "20899": 1048, "209": [745, 884], "20904": 1048, "20959": 1048, "20960": 1048, "20961": 1048, "20_000": 290, "20new": 371, "20newgroup": [67, 184, 193, 205, 228, 308, 490, 662, 834, 837, 1001, 1026], "20news_hom": 371, "20newsgroup": [227, 369, 1035], "20th": 712, "21": [187, 213, 264, 290, 312, 314, 325, 373, 374, 378, 380, 394, 405, 415, 416, 442, 446, 475, 479, 531, 534, 563, 564, 565, 571, 572, 591, 592, 594, 631, 673, 691, 758, 804, 818, 831, 874, 881, 883, 889, 906, 922, 951, 997, 1001, 1005, 1006, 1015, 1033, 1035, 1036, 1038, 1042, 1043, 1045], "2100": 322, "2102": 546, "21020": 1050, "21026": 1049, "21032": 1049, "21038": 1049, "2107": 275, "21078": 1049, "21079": 1049, "21080": 1048, "21086": 1049, "21093": 1048, "211": [275, 332, 884, 896], "21109": 1049, "21114": 1049, "211217613": 1043, "21130": 1048, "21145": 1048, "21148": 1049, "21177": 1049, "21179": 1048, "21194": [81, 1048], "21195": 1048, "21199": 1048, "212": [146, 275, 332, 373, 470, 502, 1011], "21219": 1049, "21243": 81, "21251": 1048, "21271": 1048, "21278": 1049, "21295": 1048, "21298": 1049, "21301203": 174, "21310": 1049, "21316": 1049, "21330": 1049, "21334": 1049, "21336": 1048, "21340": 1048, "21341": 1049, "21351": 1048, "21389": 1048, "2139": [212, 230], "214": 587, "21408": 1049, "21425": 1049, "21430": 1049, "21432": 1049, "21434": 1049, "21436": 1049, "21445": 1049, "21448": 1049, "21469": 1050, "21481": [1048, 1049], "21482": 1049, "21493": 1048, "215": 587, "21517": 1048, "21534": 1049, "21542": 1049, "21552": 1048, "21565": 1049, "21567": 1049, "21569": 1049, "21573": 1049, "21576": 1049, "21578": [48, 1048], "2159048": [657, 667, 688], "216": 1018, "21606": 1049, "21616": 745, "21617": 1049, "21632": 1049, "21694": 1048, "217": [537, 543, 803], "21701": 1049, "21705": 1049, "21713": 1049, "21724": 1049, "2173": [200, 660, 1001], "21735": 1049, "21741": 1048, "21762": 1049, "21767": 1049, "218": [373, 472, 719, 790], "21800": 1049, "21805": 1049, "21807": 1052, "21808": 1049, "21809": 1051, "21814": 1049, "21832": 1049, "21833": 1048, "21837": 1049, "21845": 1048, "21871": 1048, "21873": 1049, "21880": 1049, "21881": 1049, "21888": 1049, "219": 269, "21901": 1049, "21915": 1048, "21917": 1048, "2192": [200, 660, 1001], "21938": 1050, "21954": 1049, "21987": 1049, "21988": 1049, "21991": 1048, "21998": 1049, "22": [78, 139, 140, 142, 182, 183, 184, 188, 189, 229, 252, 292, 310, 314, 318, 321, 324, 327, 353, 376, 381, 394, 405, 438, 449, 473, 479, 489, 490, 497, 498, 506, 517, 526, 533, 539, 544, 547, 548, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 597, 612, 631, 632, 636, 638, 649, 651, 655, 657, 659, 662, 663, 665, 667, 669, 673, 692, 696, 706, 708, 717, 761, 773, 782, 787, 788, 792, 804, 805, 809, 818, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 852, 854, 856, 858, 859, 860, 865, 866, 867, 869, 872, 888, 899, 908, 910, 911, 912, 913, 914, 916, 917, 918, 919, 945, 947, 997, 1005, 1015, 1026, 1033, 1035, 1038, 1043, 1046, 1048], "220": [80, 264, 1035], "2200": [371, 495], "22002": 1049, "22014": 1050, "22015": 1049, "22016": 1049, "22027": 1049, "220446049250313e": [472, 473, 479, 654, 655, 658, 659, 660, 686, 687], "22050": 1048, "22054": 1050, "22058": 1049, "22059": 1049, "22062": 1049, "22063": 1049, "22064": 1049, "22065": 1049, "221": [116, 153, 1038], "22106": 1049, "22108": 1049, "2211": 638, "22111": 1049, "22114": 1049, "22118": 1049, "22119": 1049, "22120": 1049, "22137": 1049, "22148": 1049, "22149": 1049, "22150": 1049, "22154": 1049, "22159": 1049, "22181": 1049, "22188": 1049, "22191": 1049, "22199": 1049, "222": [116, 153, 1020], "22203": 1049, "22206": 1049, "22212": 1049, "22215": 1049, "22217": 1049, "22218": 1049, "2222": 660, "22223": 1049, "22235": 1049, "22237": 1049, "2224": 1037, "22240": 1049, "22248": 1049, "22249": 1049, "22254": 1049, "22255": 1049, "22268": 1050, "22269": 1050, "22284": 1049, "22288": 1049, "223": [116, 153, 373], "22300": 1049, "22314355": 593, "22318": 1049, "22320": 1049, "22356": 1049, "22361": 373, "22370": 1049, "224": [116, 153, 408, 729, 826], "22409": 1051, "22410": 1049, "22412": 1049, "22438": 388, "22476": 1049, "22486": 1049, "22493": 1049, "22498": 1049, "225": 415, "22504": 408, "22506": 1051, "22508": 1049, "22518": 1050, "22525": 1049, "22526": 1049, "22527": 1050, "22537": 1049, "22548": 1049, "22553": 1049, "22554": 1050, "22562": 1050, "22566": 1049, "22578": 1049, "22595": 1049, "226": [408, 419, 445], "22604": 1049, "22629": 1050, "22635": 1049, "22665": 1050, "22685": 1049, "22687": 1049, "22694": 1049, "22695": 1049, "22696": 1049, "22697": 1049, "227": [408, 729], "22710": 1050, "22735": 1049, "22775": 1049, "22784907": 831, "22806": 1049, "22808": 1049, "22830": 1049, "22856": 1049, "2286": 371, "22866": 1049, "22868": 1049, "2287": 371, "2288": 371, "22891": 1049, "22898": 1050, "22899": 1049, "229": 1005, "22908": 1049, "22913": 1049, "22950": 1049, "22953": 1049, "22965": 1050, "22968": 1050, "22982": 1049, "22993": 1050, "22nd": 440, "23": [44, 64, 71, 84, 124, 152, 184, 212, 241, 251, 308, 314, 318, 321, 322, 323, 325, 326, 373, 374, 382, 394, 415, 421, 431, 441, 448, 453, 455, 463, 466, 468, 469, 476, 479, 480, 481, 483, 484, 485, 491, 494, 502, 503, 504, 506, 507, 512, 514, 516, 524, 526, 540, 541, 542, 545, 549, 556, 558, 560, 562, 563, 564, 567, 570, 571, 572, 610, 611, 615, 631, 634, 636, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 679, 682, 683, 684, 685, 721, 734, 782, 834, 840, 841, 842, 851, 859, 866, 869, 881, 888, 896, 897, 906, 909, 911, 914, 917, 919, 932, 934, 935, 947, 952, 1005, 1026, 1033, 1035, 1036, 1042, 1043, 1044, 1047], "230": 587, "2300": 202, "23023": 1049, "23033": 1049, "23034": 1049, "23036": 1049, "23038": 1050, "23040": 1049, "23046": 1049, "23047": 1049, "23077": 1049, "23079": 1049, "23095": 1049, "23097": 1049, "23098": 1049, "23099": 1051, "231": [51, 303, 371, 408, 419, 445, 500, 587], "23101": 1050, "23113": 1049, "23115": 1049, "23127": 1050, "23139": 1050, "23149": [371, 499, 1049], "23194": 1049, "23197": 1050, "23198": 1049, "232": 1005, "23210": 1050, "23214": 1049, "2323": [693, 697, 1002], "23252": 1050, "23256": 1049, "23264": 1049, "23271": 1049, "23273": 1049, "23275": 1050, "23299": 1049, "23317": 1052, "23358": 1049, "2336": 382, "23370": 1049, "23395": 1049, "233mb": 46, "234": [843, 847, 865, 866, 1007], "2341": 526, "23410": 1049, "23442": 1050, "23446": 1050, "23461": 1050, "23470": 1050, "23471": 1049, "23480": 1050, "23548": 1049, "2357juan": [1049, 1050, 1051], "23585": 1050, "23595": 1051, "23604": 1050, "23608": 1049, "23619": 1050, "23636": 1049, "23637": 1050, "23668876": [657, 667, 688], "23683": 1050, "23689075": [657, 667, 688], "23726": 1050, "23731": 1051, "23734": 1050, "23798": 1050, "23819": [1050, 1051], "23833": 1049, "23834": 1050, "23865": 1050, "23874": 1050, "23877": 1050, "239": 1035, "23905": 1050, "23935": 1050, "23977": 1050, "23990": 1049, "23993": 1050, "24": [44, 45, 53, 100, 150, 169, 184, 188, 192, 250, 282, 290, 318, 319, 320, 322, 325, 326, 374, 376, 380, 394, 400, 401, 408, 415, 416, 438, 441, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 461, 463, 465, 470, 471, 472, 473, 474, 475, 476, 477, 490, 491, 492, 494, 498, 506, 517, 518, 519, 520, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 546, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 584, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 617, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 702, 703, 704, 706, 712, 718, 731, 742, 750, 757, 801, 802, 804, 807, 808, 818, 825, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 869, 871, 872, 873, 874, 877, 878, 880, 882, 883, 884, 885, 886, 888, 898, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 947, 951, 979, 985, 994, 1012, 1015, 1026, 1033, 1035, 1043, 1044, 1045, 1046, 1048], "240": [80, 1013, 1035], "24000": 522, "24015": 1049, "24017": 1049, "24027": 1051, "24051": 1050, "24058": 1050, "24075": 1050, "24076": 1051, "24083": 1051, "24084": 1050, "24087": 1049, "241": [415, 569, 570], "2410": 546, "24140": 1051, "24141": 1050, "24145": 1051, "24146": 1050, "242": [888, 1035], "24218": 1050, "24230": 1051, "24245": 1050, "24258": 1050, "24264": 1050, "24283": 1050, "243": 587, "2431": 476, "24317": 1050, "24338": 1050, "24350": 1050, "24354": 1050, "24365": 1050, "244": 587, "24405": 1050, "24412": 1050, "24421": 1050, "24433": 1050, "24446": 1049, "24465": 1050, "2449": 382, "245": [1017, 1037], "24512": 1050, "24523": 1050, "24528": 1050, "24538": 1050, "24539": 1050, "24543": 1050, "24556": 1050, "24568": 1051, "246": [198, 1013, 1035], "24617": 1050, "2463": 1001, "24630": 1050, "24631": 1049, "24637": 1050, "24645": 1050, "24667": 1050, "24668": 1051, "24677": 1051, "24683": 1050, "24688": 1050, "24699": 1050, "247": 888, "24714": 1050, "24747": 1050, "24750": 1050, "24755": 1050, "24767": 1050, "24769": 1051, "24838": 1052, "24849": 1050, "24855": 1050, "24856": 1050, "24871": 1051, "24873": 1050, "2487575": 192, "2487591": 192, "24882": 1051, "24889": 1050, "24894": 1050, "24935": 1051, "24951": 1050, "25": [44, 45, 46, 47, 49, 50, 51, 62, 64, 78, 89, 112, 116, 128, 130, 139, 147, 165, 172, 182, 195, 203, 239, 257, 270, 303, 305, 310, 312, 329, 330, 351, 357, 359, 363, 382, 412, 415, 416, 419, 445, 478, 482, 503, 506, 523, 572, 600, 622, 682, 738, 800, 821, 834, 860, 878, 883, 885, 886, 889, 897, 898, 900, 901, 949, 953, 985, 1001, 1005, 1006, 1008, 1015, 1035, 1037, 1043, 1046], "250": [50, 99, 147, 192, 232, 495, 696, 826, 994, 1017, 1042], "2500": 1005, "25000": 78, "2501": 373, "25044": 1051, "25067": 1050, "25077": 1050, "25080": 1050, "25089": 1050, "25093": 1051, "25094": 1050, "251": [234, 373], "25102": 1051, "25120": 1051, "25129": 1050, "25147": 1050, "25163598": 384, "25172": 1050, "25174": 1050, "25177": 1051, "25186": 1051, "25188": 1050, "25190": 1051, "25193977": 1006, "25196": 1051, "252": [234, 373, 536, 884, 896], "25209": 1051, "25214": 1051, "25220": 1051, "25232": 1051, "25250": 1050, "25251": 1051, "25257": 1051, "25274": 1050, "25275": 1052, "25291": 1051, "25291366": 359, "25294": 1051, "25295": 1050, "25296": 1050, "25297": 1051, "25299": 1051, "253": [146, 536], "25308": 1051, "25312": 1050, "25334": 1051, "25341": 1050, "2535": [470, 475], "25354": 1050, "2536": 477, "25363": 1050, "25367": 1051, "25370": 1050, "25387": 1051, "25402": 1051, "25417": 1051, "25432": 1051, "25438": 1051, "25443": 1051, "25477": 1050, "25490": 1051, "25499205": 538, "255": [124, 290, 307, 316, 322, 371, 415, 495, 496, 563, 564], "25500": 1050, "25506": 1051, "25511": 1050, "25531": 1051, "25563": 1050, "25570": 1050, "25587": 1051, "25589": 1050, "256": [78, 87, 146, 316, 364, 371, 408, 415, 450, 469, 539, 548, 565, 864, 896, 906, 1049], "25601": 1051, "25619": 1050, "25629": 1051, "25638": 1050, "25659": 1051, "25664": 1050, "25672": 1051, "25677": 1051, "2568": 1044, "25694": 1050, "25697": 1051, "257": 234, "25704": 1050, "25713": 1051, "25719016": 1006, "25732": 1051, "25733": 1051, "25744": 1050, "25747": 1050, "25752": 1051, "25774": 1050, "25784": 1051, "2579": 696, "258": 234, "25805": 1051, "25813": 1051, "25814": 1051, "25815": 1051, "259": [51, 234, 303, 371, 415, 500, 569, 570], "25931": 1051, "25956": 1051, "25973": 1051, "25987": 1051, "25991": 1053, "25th": [44, 249, 886], "26": [44, 81, 88, 112, 123, 248, 382, 572, 652, 733, 787, 826, 884, 896, 952, 1005, 1015, 1035, 1038, 1039, 1047, 1053], "260": [269, 1048], "26019": 1051, "26021": 1051, "26033": 1051, "2605": 696, "26082": 1051, "26093": 1051, "26106": 1051, "26108": 1051, "26120": 1053, "26121": 1051, "26163": 1052, "26194": 1051, "262": 1035, "26207": 1051, "26242": 1051, "26243": 1052, "26264": 1051, "26267": 1052, "26278": 1052, "26286": 1051, "26289": 1051, "26299": 1052, "26315": 1052, "26318": 1051, "26323": 1051, "26325": 1051, "26333": 1051, "26337": 1051, "26366": 1052, "263758": [586, 590], "26376": 1051, "26385": 1051, "26386": 1051, "26386883": 174, "26391": 1052, "2640": 839, "26400": 1051, "26410": 1052, "26411": 1052, "26416": 1051, "26424": 1051, "26433": 1051, "26454": 1051, "26459": 1052, "26464": 1052, "26466": 1051, "265": [739, 843, 847, 1007], "26503": 1051, "26506": 1052, "26521": 1051, "2652124": 819, "26525": 1052, "26551": 1051, "26566": 1051, "26579": 1051, "26600": 1051, "26602": 1051, "26616": 1052, "26634": 1052, "26642044": 670, "26644": 1051, "26648": 1052, "26653": 1051, "26657": 1051, "2666": 1005, "2667": 500, "26674": 1052, "26683": 1052, "267": 1035, "2671": 1015, "26721": 1052, "26734": 1052, "26736": 1052, "26744": 1052, "26748": 1051, "26754": 1051, "26760": 1051, "26765": 1052, "26772": 1051, "26786": 1052, "26789": 1052, "26814": 1051, "26828": 1052, "26830": 1052, "26831": 1052, "26837": 1053, "26840": 1052, "26855": 1052, "26862": 1052, "26893": 1051, "26896": 1052, "269": 513, "26903": 1051, "26909": 1052, "26913": 1051, "2692": 1015, "26931": 1051, "26940": 1051, "26944": 1052, "26957": 1052, "26th": [408, 730, 760, 1005], "27": [68, 82, 348, 373, 408, 416, 519, 526, 608, 717, 792, 793, 889, 909, 1005, 1015, 1035, 1037], "270": 198, "27002": 1051, "27005": 1052, "27006": 1052, "27017": 1052, "27018": 1052, "27044": 1051, "27058": 1052, "27098": 1052, "27100": 1052, "27104": 1052, "27110": 1052, "27137": 1052, "27139": 1052, "27161": 1052, "27166": 1052, "27167": 1051, "27179": 1052, "27185": 1052, "27204": 1052, "27219": 1052, "272214": 587, "27239": 1052, "27240": 1052, "27243": 1051, "27250": 1052, "27252": 1052, "2727": 560, "27274": 1052, "27277": 1052, "27291": 1052, "27292": 1051, "27301": 1052, "27308": 1052, "27309": 1052, "27311": 1051, "27314": 1052, "27315": 1052, "27328": 1052, "27336": 1052, "2734": 382, "27344": 1053, "27372": 1052, "27389": 1052, "274": 513, "27417": 1052, "27431": 1052, "27438": 1052, "27456": 1053, "27468": 1051, "27478": 1052, "27490": 1052, "27491": 1053, "275": 1038, "27500": 1052, "27526": 1053, "27538": 1052, "27544": 1052, "27556": 1052, "27558": 1052, "27560": 1053, "27566": 1053, "27573": 1051, "27576": 1053, "27577": 1052, "27580": 1051, "27583": 1051, "27584": 1053, "2759": [900, 901], "27601": 1052, "27614": 1052, "27624": 1052, "2763": [421, 476], "27636": 1053, "27639": 1052, "27645": 1052, "27650": 1052, "27651": 1052, "27657": 1053, "27668": 1052, "27670": 1052, "27675": 1052, "27678": 1052, "277": [1013, 1037], "27700": 1053, "27702": 1052, "27710": 1052, "27718": 1052, "27720": 1052, "27721": 1052, "27734": 1052, "27757": 1052, "27760": 1052, "278": [373, 848, 849], "2780": 382, "27800": 1053, "27801": 1052, "27817": 1052, "27821": 1052, "27828": 1052, "27834": 1052, "27835": 1052, "27841": 1052, "27844": 1053, "27865": 1052, "27898": 1052, "27899": 1052, "279": 1001, "27904": 1053, "27937": 1053, "27979": 1052, "27990": 1053, "28": [100, 228, 307, 373, 382, 408, 412, 451, 458, 866, 1015, 1035, 1038, 1041], "28009951": 831, "28040": 1053, "28048": 1052, "28051": 1053, "28053": 1053, "28074": 1052, "28085": 1053, "28090": 1052, "28092": 1053, "28095": 1052, "28102": 1053, "28111": 1052, "28121": 1052, "28136": 1053, "28160": 1053, "28165": 1052, "28167": 1052, "2818": 471, "28184": 1052, "28187": 1053, "28188": 1052, "28191": 1052, "28195": 1052, "28198": 1052, "282": [1026, 1035], "28205": 1053, "28210": 1053, "28222": 1052, "28233": 1052, "28235": 1052, "28240": 1052, "28241": 1052, "28247": 1052, "2825": 0, "28256": 1052, "28261": 1053, "28262": 1052, "28263": 1052, "28295": 1052, "2830": 0, "28306": 1053, "28327": 1052, "2833": 382, "28351": 1053, "28352": 1053, "28360": 1053, "28365": 1052, "28377": 1052, "28385": 1052, "28399": 1053, "284": 653, "28407": 1053, "28425": 1053, "28432": 1053, "28435": 1053, "28471": 1053, "28483": 1053, "28491": 1053, "28498": 1053, "285": 728, "28521": 1053, "28552": 1053, "28557": 1053, "28582": 1053, "286": 415, "28604": 1053, "28612": 1053, "28651": 1053, "28664": 1053, "28670": 1053, "28692": 1053, "287": 1017, "28703": 1053, "28712": 1053, "28718": 1053, "28722": 1053, "28756": 1053, "28763": 1053, "28768": 1053, "2879": 1042, "288": [537, 543], "28822": 1053, "28823": 1053, "28843": 1053, "28847": 1053, "28915": 1053, "28925": 1053, "28951": 1053, "28975": 1048, "28988": 1053, "28x28": 307, "29": [113, 172, 229, 373, 415, 561, 562, 694, 698, 785, 801, 860, 1001, 1002, 1019], "290": [692, 693, 697, 866, 1002], "29018": 1053, "29078": 1053, "291": [371, 373], "29119": 1053, "2914": 496, "29179": 1053, "292": [394, 415, 739], "29235": 1053, "29269": 1053, "29314": 1053, "29327": 1053, "29330": 1053, "29336": 1053, "29401": 1053, "29437": 1025, "29473397": [848, 849], "29545": 1053, "296": 1017, "2961": 655, "29612": 1053, "29694": 1053, "297": 371, "29780": 1053, "298": 1013, "299": [136, 684], "2_": 997, "2_000": 135, "2_2": [650, 651, 656, 657, 658, 659, 660, 664, 665, 666, 667, 676, 685, 686, 687, 688], "2_f": 656, "2_fro": [657, 666, 667, 688], "2_poli": 270, "2_y": 1007, "2c": [647, 656, 676, 677, 678, 679, 691, 997], "2d": [2, 44, 70, 72, 75, 80, 82, 83, 87, 90, 95, 96, 120, 122, 125, 127, 131, 153, 184, 205, 207, 213, 218, 232, 233, 234, 237, 239, 242, 243, 299, 329, 330, 337, 340, 358, 370, 372, 376, 385, 390, 408, 409, 413, 416, 418, 420, 442, 453, 463, 465, 468, 482, 489, 491, 492, 494, 495, 496, 502, 503, 504, 506, 512, 516, 535, 543, 551, 587, 589, 639, 647, 661, 676, 695, 742, 783, 829, 833, 837, 875, 925, 928, 930, 934, 935, 951, 967, 990, 991, 999, 1001, 1002, 1005, 1012, 1016, 1021, 1026, 1035, 1039, 1042, 1043, 1044, 1047, 1049, 1053], "2e": [199, 283, 285], "2e6": 1005, "2ec5ac": 314, "2f": [45, 48, 51, 53, 58, 68, 75, 78, 80, 81, 84, 86, 96, 98, 101, 116, 119, 124, 130, 147, 150, 154, 155, 164, 187, 188, 192, 195, 202, 204, 209, 212, 227, 228, 229, 230, 239, 243, 249, 264, 269, 273, 274, 276, 278, 279, 280, 284, 298, 299, 305, 312, 315, 323, 327, 340, 351, 352, 359, 409, 412, 415, 700, 832, 835], "2fbf01908075": 709, "2fx": 258, "2g": [234, 237, 701, 1046], "2h": 414, "2k": 182, "2l": [418, 626], "2n": [700, 997, 1009], "2n_": 1001, "2nd": [94, 127, 179, 315, 408, 419, 445, 532, 855, 1015, 1050], "2x": 1035, "2x2": [337, 408, 758], "2x_iy_i": 997, "3": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 364, 365, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 388, 389, 390, 394, 399, 400, 401, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 506, 507, 508, 509, 512, 514, 517, 518, 519, 520, 521, 523, 525, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 580, 584, 586, 587, 590, 593, 596, 597, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 621, 622, 631, 632, 633, 634, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 696, 697, 698, 700, 703, 704, 706, 707, 708, 709, 711, 713, 714, 717, 720, 721, 725, 727, 728, 729, 730, 732, 733, 734, 735, 737, 738, 739, 740, 741, 745, 747, 748, 749, 750, 752, 754, 755, 756, 757, 758, 760, 761, 772, 773, 779, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 930, 931, 934, 935, 936, 940, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 967, 968, 970, 971, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1016, 1018, 1020, 1021, 1023, 1024, 1026, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1045, 1047, 1048, 1050, 1052, 1053], "30": [44, 48, 50, 55, 71, 75, 76, 80, 88, 94, 104, 106, 110, 128, 135, 143, 147, 150, 154, 160, 169, 171, 172, 175, 188, 192, 194, 207, 210, 212, 230, 232, 233, 237, 244, 248, 249, 259, 264, 270, 275, 285, 290, 299, 300, 314, 315, 325, 329, 330, 334, 338, 341, 343, 344, 358, 363, 371, 373, 374, 381, 382, 394, 400, 401, 412, 416, 419, 445, 451, 456, 457, 458, 502, 533, 537, 539, 540, 541, 543, 545, 547, 548, 572, 595, 598, 599, 601, 652, 696, 739, 787, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 889, 904, 917, 982, 994, 999, 1005, 1006, 1008, 1013, 1035, 1036, 1042, 1043, 1044], "300": [44, 59, 60, 71, 74, 92, 124, 135, 136, 137, 141, 183, 203, 237, 239, 243, 259, 273, 283, 300, 313, 321, 329, 344, 347, 444, 448, 449, 460, 462, 515, 643, 648, 649, 683, 694, 696, 698, 865, 924, 1001, 1045], "3000": [53, 98, 235, 900, 901], "30000": 371, "30061": 543, "301": [409, 1019], "30151134": 467, "302": 631, "30258509": 418, "303": 639, "304": [314, 358, 373], "305": 382, "3053": [470, 475], "306": 631, "30750": 408, "308": 639, "30m": 371, "31": [111, 264, 295, 322, 405, 416, 502, 563, 564, 600, 653, 675, 683, 969, 1006, 1035], "3109306": 174, "312": [150, 1038], "3121": 712, "315": [290, 373], "316": [615, 618, 629, 884], "3164764": [212, 230], "31760": 1001, "318": 451, "31bit": 1046, "31st": [213, 887], "32": [45, 85, 186, 189, 248, 284, 323, 370, 374, 381, 390, 405, 415, 416, 446, 566, 567, 585, 592, 638, 680, 887, 889, 934, 935, 969, 1013, 1015, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1049, 1052], "320": [371, 994, 1019, 1035], "3204": 1041, "322": [472, 473], "3221": [696, 1002], "324": 371, "3245": [696, 1002], "325": [810, 832], "3252": 600, "327": 734, "3273": 750, "32767": 1046, "32782448": 174, "328": 734, "3288": 546, "329": 451, "32987858": 567, "32bit": [2, 363, 969, 1053], "32x32": 373, "33": [112, 212, 358, 371, 373, 381, 382, 408, 416, 462, 534, 641, 652, 716, 717, 733, 734, 742, 747, 787, 788, 791, 834, 836, 895, 919, 986, 1001, 1005, 1015, 1035, 1043], "330": 330, "3315057": [830, 831], "332": 896, "333": 850, "3333": 500, "33333333": [858, 1015], "334": 174, "336": [150, 382, 1015], "3367": 1042, "337": 382, "3397": [668, 689, 690], "33rd": [905, 1018], "34": [295, 358, 373, 412, 522, 531, 572, 600, 653, 671, 720, 768, 1035], "340": 329, "34118": 371, "3415": [668, 689, 690], "342": 826, "345": 373, "34545455": 1001, "346": [415, 503, 557, 558], "3467": 619, "34867495": 1006, "349": [135, 382, 555], "35": [46, 47, 49, 51, 89, 137, 157, 188, 194, 200, 239, 546, 652, 653, 660, 706, 710, 711, 731, 745, 760, 786, 793, 841, 994, 1001, 1005, 1011, 1012, 1015, 1035, 1037], "352": [270, 382], "356": 1013, "3565178": 969, "357": [373, 502, 909], "3573": 831, "3591": 1044, "36": [54, 123, 177, 343, 358, 373, 382, 415, 416, 557, 558, 572, 739, 763, 1005, 1035], "360": [135, 555], "361": [371, 415, 557, 558], "3635": 831, "364": [472, 473, 1036], "365": [410, 474], "3659": 1040, "366": 358, "367": [415, 1035], "36787944": 1003, "3680": [615, 618, 629], "3684": 839, "36851234": 820, "3696": 617, "3697": 854, "37": [198, 284, 358, 371, 415, 526, 720, 888, 899, 1015, 1035], "375": [450, 754, 1005], "376": 1013, "377eb8": [76, 80, 96, 97, 239], "378": [415, 1035], "37845099": 359, "37967282": 1006, "38": [211, 295, 325, 415, 636, 889, 951, 1005, 1015, 1035, 1036, 1037], "3800": 202, "381327": 371, "384": [700, 909], "3840": 1043, "384616559": 385, "3854": [668, 669], "3855": 1025, "386": 884, "3862": 872, "38629436": 1015, "387": 1035, "3889": 476, "389": [596, 597], "3894": 619, "39": [371, 373, 374, 380, 408, 416, 497, 899, 917, 953], "3908844": 831, "391": 700, "3910350737": 385, "3928": 471, "3947": 1017, "39568399": 538, "396": 373, "3964": [421, 476], "397": 371, "3972": 659, "398": 651, "3996": 655, "3_": 997, "3_poli": 270, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 48, "3c479a6885bfa0438971388283a1ce32": 370, "3d": [101, 127, 232, 234, 236, 358, 416, 508, 589, 925, 967, 1042, 1043, 1045], "3f": [44, 46, 48, 51, 53, 55, 56, 60, 62, 64, 74, 76, 82, 83, 92, 104, 106, 108, 117, 135, 142, 150, 165, 169, 171, 172, 173, 175, 180, 186, 188, 189, 195, 198, 199, 205, 212, 214, 218, 227, 228, 230, 233, 243, 245, 268, 270, 271, 273, 276, 278, 281, 283, 290, 305, 327, 333, 351, 352, 353, 826, 833, 1013], "3k": 700, "3l": 418, "3llobo": 1050, "3m": 52, "3rd": [127, 179, 843, 886, 1007, 1015], "3ssnporch": 144, "4": [44, 45, 46, 47, 49, 50, 56, 59, 63, 64, 65, 68, 69, 70, 71, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 96, 98, 99, 100, 105, 106, 113, 114, 116, 117, 119, 122, 123, 124, 125, 126, 127, 129, 130, 135, 136, 138, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 160, 165, 169, 174, 176, 177, 179, 180, 182, 183, 184, 187, 188, 192, 194, 195, 197, 198, 201, 203, 204, 205, 206, 210, 211, 212, 213, 216, 218, 219, 220, 222, 225, 226, 230, 232, 239, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 256, 257, 258, 260, 261, 265, 266, 267, 268, 270, 271, 272, 275, 277, 279, 281, 284, 285, 289, 290, 292, 294, 295, 296, 297, 300, 305, 307, 308, 310, 311, 313, 314, 316, 318, 319, 320, 321, 322, 324, 325, 327, 331, 332, 337, 339, 343, 344, 345, 347, 348, 349, 351, 352, 358, 359, 364, 370, 371, 372, 373, 374, 376, 381, 382, 385, 388, 389, 390, 394, 399, 400, 401, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 492, 498, 506, 514, 515, 518, 519, 520, 526, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 580, 584, 585, 586, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 621, 622, 623, 626, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 681, 683, 684, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 702, 703, 706, 710, 711, 719, 720, 729, 730, 731, 736, 738, 746, 747, 748, 750, 751, 752, 753, 755, 756, 760, 772, 773, 785, 786, 792, 793, 794, 795, 798, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 834, 836, 837, 838, 839, 842, 843, 844, 845, 847, 852, 855, 856, 857, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 895, 896, 900, 901, 902, 906, 908, 909, 912, 916, 917, 918, 919, 930, 931, 933, 934, 935, 936, 940, 951, 952, 953, 954, 956, 958, 959, 960, 961, 968, 975, 976, 977, 979, 980, 981, 982, 985, 986, 987, 994, 995, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1015, 1016, 1019, 1020, 1026, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1048, 1049, 1050, 1053], "40": [55, 88, 100, 110, 121, 127, 151, 157, 171, 188, 204, 205, 207, 229, 234, 236, 247, 249, 259, 271, 296, 302, 307, 329, 330, 338, 339, 341, 343, 345, 346, 364, 371, 412, 447, 497, 519, 520, 803, 848, 849, 853, 865, 866, 994, 1006, 1015, 1035, 1036], "400": [45, 64, 121, 149, 154, 171, 183, 218, 237, 282, 306, 352, 371, 413, 497], "4000": [93, 149, 258], "4017": 526, "402": 274, "402344": 382, "4025": 1040, "403": 274, "40597": 289, "406": [693, 697, 1002], "407": 373, "40887718": 91, "40945": 104, "4096": [121, 371, 413, 497], "40966": 370, "41": [249, 358, 371, 373, 458, 470, 482, 494, 625, 628, 639, 650, 651, 656, 662, 664, 665, 666, 668, 685, 689, 690, 703, 785, 843, 1007, 1011], "41075698": 414, "41076071": 414, "41082": 45, "411": [410, 420, 474, 535], "4110": 477, "41187": 176, "412": [498, 1001], "41214": [212, 230], "41215": 230, "414": [409, 730, 760, 884, 896, 1005], "41421356": [767, 773, 1008], "4143": 388, "416": [743, 1005], "41666667": 754, "417": 289, "41888636": 666, "419": 620, "4194": 373, "42": [44, 45, 46, 53, 59, 62, 63, 64, 65, 68, 80, 81, 90, 110, 123, 128, 135, 142, 144, 145, 147, 148, 150, 151, 155, 165, 166, 183, 187, 189, 190, 192, 194, 202, 207, 208, 214, 218, 219, 220, 226, 227, 229, 232, 233, 234, 239, 244, 245, 246, 249, 252, 264, 269, 271, 274, 283, 284, 290, 296, 297, 298, 305, 310, 311, 312, 313, 315, 317, 319, 321, 323, 332, 338, 340, 351, 352, 359, 364, 381, 382, 390, 399, 408, 412, 415, 416, 419, 438, 445, 479, 489, 494, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 529, 531, 533, 539, 546, 547, 548, 559, 560, 567, 568, 569, 570, 572, 608, 609, 610, 611, 612, 681, 698, 699, 700, 764, 796, 797, 801, 803, 806, 826, 832, 834, 848, 849, 853, 857, 860, 900, 901, 903, 904, 905, 915, 918, 919, 926, 937, 951, 969, 973, 1008, 1015, 1032, 1035], "42074": 316, "421": [730, 760, 1005], "42165": 144, "422": [596, 597, 730, 760, 1005], "425": [233, 619], "4254": 373, "4260": [753, 756], "427": [373, 508, 509, 586, 587, 590], "4285714285714286": 1005, "4294": 1041, "43": [270, 290, 373, 381, 804, 818, 889], "430": [420, 535], "431": 373, "4310090": 773, "432": 410, "433": 373, "4337": 1001, "43475": 882, "436": 243, "4362": 1040, "438": 1013, "4394": 1043, "44": [188, 294, 480, 785, 889, 909, 912, 987, 1005, 1012, 1035], "4406": 474, "44063": 53, "442": [169, 183, 373, 503], "4425765": [657, 667, 688], "44373091": 1006, "44412786": 538, "445": 1013, "446": [730, 760, 1005], "4474": 382, "4478": 1040, "448": 290, "4486": 546, "449": [45, 413, 537], "45": [76, 98, 106, 150, 165, 176, 189, 277, 281, 282, 340, 412, 415, 416, 566, 567, 631, 638, 650, 651, 656, 664, 665, 666, 685, 686, 687, 792, 801, 912, 995, 1005, 1013, 1023, 1035, 1038], "45070924": 670, "451": 650, "4550": 370, "456": [45, 413, 537], "45612256": 664, "45663524": 664, "457": 619, "4576": 839, "459": [408, 443], "46": [249, 359, 382, 596, 597, 686, 687, 720, 826, 912, 917, 1015], "46033": 498, "46043": 498, "46081961": 1006, "461": 382, "466": 1012, "4666": 638, "46874778": [657, 667, 688], "46915237": [657, 667, 688], "4694": 526, "46958558": 665, "47": [371, 495, 496, 537, 543], "471": 373, "47140": 408, "47236": [371, 499], "47330339": 416, "4738": 1040, "47985": 498, "48": [44, 53, 150, 373, 382, 408, 512, 600, 703, 750, 832, 843, 994, 1007, 1015], "48204257": 1006, "483": 652, "4831": 659, "485": 700, "487": 728, "48736655": 671, "4881": 1040, "48841": 498, "48842": 498, "48858": 382, "48979592": 450, "4898431": [371, 494], "49": [370, 371, 373, 381, 408, 451, 458, 717, 730, 760, 768, 797, 801, 804, 889, 1005, 1015, 1038], "491": 700, "492": [647, 998], "4923": 653, "493": [647, 908, 998], "4939": 1042, "494021": 494, "4951": 657, "495761": 382, "4967": 526, "4976": 600, "499": [373, 382], "4995": 1041, "49999993": 1001, "4daf4a": [80, 96], "4dbd33": 119, "4e": 233, "4e9a06": [93, 98], "4eacc5": [93, 98], "4f": [47, 48, 58, 138, 146, 148, 227, 228, 230, 315, 915], "4i": 84, "4th": [179, 373], "4x": [382, 1050], "4x11": 294, "4x4": [373, 413, 416], "5": [44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 103, 104, 106, 108, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 128, 130, 133, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 160, 162, 164, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 192, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 218, 220, 223, 224, 225, 226, 227, 228, 230, 233, 234, 235, 237, 239, 242, 243, 244, 245, 247, 248, 249, 251, 253, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 281, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 299, 300, 302, 303, 305, 306, 307, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 332, 333, 334, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 356, 357, 359, 371, 372, 373, 374, 376, 380, 381, 382, 384, 388, 389, 390, 394, 400, 401, 402, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 423, 438, 439, 440, 441, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 470, 473, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 506, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 530, 533, 535, 536, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 554, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 595, 596, 597, 600, 605, 607, 608, 609, 610, 611, 614, 617, 618, 619, 620, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 645, 647, 650, 651, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 692, 693, 695, 696, 697, 699, 700, 701, 703, 707, 709, 711, 713, 716, 717, 722, 724, 725, 726, 727, 728, 730, 731, 732, 734, 736, 739, 742, 743, 744, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 773, 774, 782, 785, 786, 788, 789, 791, 792, 793, 794, 795, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 865, 866, 867, 868, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 902, 908, 909, 910, 911, 912, 913, 914, 916, 918, 926, 930, 931, 934, 935, 939, 940, 950, 951, 952, 953, 954, 956, 958, 959, 967, 968, 973, 975, 976, 979, 980, 981, 982, 983, 984, 985, 994, 995, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1026, 1027, 1031, 1033, 1036, 1037, 1038, 1040, 1042, 1043, 1045, 1049, 1050, 1051, 1054], "50": [0, 47, 50, 53, 55, 62, 69, 70, 74, 84, 86, 93, 94, 99, 100, 103, 104, 116, 119, 121, 124, 130, 135, 138, 141, 147, 150, 153, 154, 172, 174, 175, 176, 177, 186, 188, 195, 198, 208, 215, 219, 220, 224, 226, 228, 232, 236, 237, 242, 243, 245, 253, 264, 265, 270, 272, 273, 283, 290, 310, 314, 321, 323, 332, 334, 338, 346, 352, 371, 373, 376, 381, 396, 412, 415, 416, 417, 420, 443, 474, 480, 481, 502, 506, 523, 525, 528, 535, 541, 546, 555, 556, 571, 596, 597, 609, 611, 612, 619, 621, 662, 663, 670, 671, 672, 674, 680, 681, 682, 696, 717, 796, 804, 818, 837, 857, 908, 917, 1000, 1001, 1005, 1006, 1008, 1011, 1015, 1028, 1035, 1052], "500": [50, 80, 84, 91, 94, 95, 97, 116, 117, 128, 130, 139, 141, 148, 168, 171, 192, 225, 226, 233, 250, 251, 255, 256, 260, 264, 273, 283, 290, 296, 302, 314, 320, 325, 326, 344, 349, 363, 415, 421, 470, 471, 475, 476, 477, 482, 483, 484, 485, 615, 617, 618, 620, 625, 628, 629, 654, 655, 658, 659, 660, 684, 686, 687, 994, 1020], "5000": [90, 199, 227, 228, 321, 889], "50000": 62, "5000000": 56, "50000000": 174, "50000013": 1001, "500x500": 543, "5012": 1041, "5016": [410, 421, 476], "5029": [410, 421, 476], "5036": 1042, "50447799": 1006, "505": 833, "507": 409, "50755672": 467, "5082": 1025, "50941682": 1006, "50_000": [317, 352], "50sampl": 396, "51": [62, 290, 408, 409, 770, 780, 785, 1001], "51082562": 593, "512": 211, "51292546": 616, "513": [857, 1008], "5131": 1040, "51341712": 1003, "5141": 1041, "51462041": 853, "515390": 382, "5166": 677, "5166646": 768, "517": [453, 463], "5182": 1040, "5186": 1040, "52": [176, 533, 637, 801, 951, 1035], "520": [632, 857, 995, 1008], "52003279": 1006, "5211": 1042, "522": 909, "5229": 1042, "523": 526, "5243": 416, "52433293": 416, "525": [440, 632, 995], "5251": 1041, "526": 908, "5279": 1042, "5282": 1040, "52875032": 665, "5291": 1041, "5295": 1042, "52955942": 853, "5299": 1041, "53": [408, 415, 537, 543, 548, 796, 797], "5337": 1040, "534": 187, "5355": 1040, "5359": 1042, "536": 290, "5360": 1040, "53844117956": 768, "54": [192, 249, 371, 373, 408, 492, 1036, 1037], "54035582": 768, "541": [453, 463], "5415": 1002, "542": 373, "5420": 546, "5425": 526, "5431": 1040, "54488318": 385, "5460": 1041, "5469": 373, "5488135": 385, "5495": 1040, "54980": 543, "55": [234, 381, 408, 412, 492, 600, 804, 810, 818, 832, 1005, 1035], "5500": [692, 1002], "55102041": 450, "5515": 750, "552": 1005, "55212743": 359, "55249": 600, "554": [220, 228, 307], "5540": 1041, "55422893": 416, "555": 720, "559": 620, "5591": [693, 697, 1002], "55968825": 650, "56": [243, 382, 650, 651, 656, 664, 665, 666, 685, 717, 739, 1005, 1015, 1035], "560": [519, 520], "561": 408, "56479934": 359, "569": [169, 332, 373, 502, 595, 598, 599, 601], "5697": 1042, "56b4e9": 255, "57": [373, 374, 394, 400, 401, 409, 709, 765, 785, 841, 1005, 1015, 1035], "570": 373, "5713": 667, "57142857": 725, "573": 416, "5732": 1042, "57320793": 416, "574": [536, 543], "5748": 496, "5749": [371, 495, 496], "5762": 1041, "577": 373, "579": 526, "58": [100, 111, 373, 410, 421, 476, 610, 768, 1015], "580": [848, 849], "5805": 1041, "5807": 1008, "581": 192, "581012": [371, 492], "5814": 1042, "58149261": 416, "582": 909, "5828": [371, 495, 496], "583": 408, "5833": [742, 1005], "58364548": 1003, "5857": 1040, "5863": 382, "5871": 683, "5874": 1041, "59": [373, 382, 408, 409, 512, 826, 1005, 1035], "59122734": 671, "592": [615, 618, 629, 1012], "5929": 1041, "593": 139, "5956": 1043, "596": 720, "5963": 1045, "598": [128, 543], "5981": 546, "599": 684, "5991": 1042, "5_000": 192, "5a": 888, "5d": 48, "5e": [45, 121, 201, 598, 599, 601], "5e5": 212, "5f": [160, 323], "5m": 56, "5n_": 113, "5th": [53, 147, 150, 179, 408], "5x": 1052, "6": [0, 44, 49, 50, 51, 52, 53, 64, 65, 68, 76, 80, 81, 83, 84, 86, 90, 91, 94, 95, 96, 97, 98, 99, 101, 106, 108, 110, 111, 112, 114, 121, 123, 127, 130, 136, 148, 150, 152, 154, 160, 164, 169, 174, 178, 179, 182, 183, 187, 188, 190, 192, 194, 195, 198, 205, 206, 210, 212, 213, 216, 226, 230, 232, 233, 236, 239, 242, 243, 247, 250, 251, 255, 256, 257, 258, 260, 261, 264, 265, 269, 270, 271, 272, 273, 279, 280, 281, 282, 283, 289, 292, 295, 303, 305, 310, 312, 314, 315, 317, 319, 322, 323, 325, 326, 327, 334, 340, 341, 343, 345, 347, 349, 352, 353, 357, 358, 359, 370, 371, 373, 374, 376, 378, 380, 381, 382, 389, 394, 400, 401, 406, 408, 409, 412, 413, 415, 416, 417, 423, 428, 435, 438, 443, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 462, 463, 464, 465, 466, 483, 484, 485, 486, 491, 493, 498, 507, 519, 526, 532, 540, 542, 543, 547, 549, 555, 564, 565, 569, 570, 571, 572, 596, 597, 605, 607, 608, 609, 611, 615, 618, 619, 629, 631, 632, 634, 640, 641, 648, 649, 683, 693, 697, 703, 704, 706, 715, 725, 732, 742, 746, 749, 750, 754, 755, 757, 773, 782, 789, 792, 794, 801, 802, 803, 805, 806, 811, 813, 814, 816, 821, 822, 825, 832, 833, 834, 835, 843, 844, 845, 847, 848, 849, 855, 856, 858, 859, 860, 868, 869, 875, 876, 878, 881, 883, 886, 887, 891, 892, 905, 923, 930, 932, 934, 935, 945, 946, 947, 951, 952, 953, 955, 957, 958, 959, 967, 979, 982, 990, 993, 994, 995, 999, 1001, 1002, 1005, 1015, 1016, 1019, 1020, 1021, 1033, 1036, 1037, 1038, 1041, 1043, 1048, 1052, 1053], "60": [93, 106, 114, 224, 232, 233, 258, 283, 343, 351, 370, 408, 412, 451, 458, 717, 804, 1005, 1015, 1035, 1038], "600": [64, 145, 154, 155, 371, 684], "6000": [308, 631], "60244657": 853, "60276338": 385, "603": [97, 449], "604": [128, 543], "606": [617, 838, 1006], "60809415": 666, "60834549": 91, "609": 382, "61": [113, 370, 373, 382, 409, 459, 543, 562, 650, 651, 656, 664, 665, 666, 685, 717, 826, 953], "6101": 1042, "611": 543, "6114": 831, "612": 794, "6121": 1041, "6126": 1042, "6147": 1040, "616": [845, 1007, 1015], "61611719": 174, "617": [408, 773], "6173": 1041, "6178": 1041, "6181": 1042, "6182": 1041, "619": [97, 449], "619052": 371, "6196": 1040, "6198": 750, "62": [359, 371, 495, 496, 848, 849, 1038], "620": 500, "621": 773, "622": 543, "623": [845, 1007], "6231": 1025, "624": 1012, "625": [622, 712], "6250": 1042, "6258": 1040, "6261": 1044, "62745778": 1006, "6282": 1041, "6284": 1025, "6288": 1042, "63": [373, 415, 559, 560, 567, 568, 650, 651, 656, 664, 665, 666, 685, 703, 730, 804, 818, 826, 918, 919, 1005], "630": 728, "63035731": 416, "635": 620, "636": 382, "63667341": 91, "6371000": 768, "6374": 1043, "6375861597263857": 950, "638": 382, "63bit": 1046, "64": [69, 87, 92, 121, 233, 243, 244, 248, 268, 279, 294, 299, 363, 364, 373, 374, 382, 390, 394, 409, 413, 420, 497, 500, 504, 602, 603, 650, 662, 692, 693, 694, 695, 697, 909, 1008, 1035, 1037, 1043, 1044, 1047, 1048, 1049, 1052], "640": [406, 491, 508, 509, 586, 587, 590, 994], "64185414": 670, "64236448": 538, "6452": 1043, "646": 179, "6463": 1044, "6472": 1041, "6476": 526, "6497": 1041, "64_conda": 384, "64bit": 1035, "64x64": [121, 371, 413], "65": [70, 188, 408, 440, 504, 519, 600, 703, 745, 796, 797, 826, 1012, 1035, 1036, 1037], "650": 406, "6507": 1042, "651": 382, "653": [382, 615, 618, 629, 855], "6545": 1047, "656": 371, "6567": 855, "6572": 855, "6573": 1042, "6586": 1041, "66": [236, 373, 408, 425, 462, 534, 636, 716, 787, 788, 799, 887, 895, 986, 1005, 1017], "6624": 1047, "663": [902, 1013, 1017], "664": 373, "6651": 1041, "666": [174, 408, 850, 995], "6660": 1041, "6666": [742, 1005, 1041], "66666667": [733, 786, 858, 1015], "6667": 1041, "667": [724, 744, 1005], "6689": 1043, "6691": 1041, "6697": 1041, "67": [100, 373, 500, 518, 519, 520, 631, 671, 717, 818, 995, 1005, 1019, 1035], "670": 264, "671": 1017, "67251877": 670, "673": 382, "676": 673, "6764": 1041, "678013": 230, "679": 908, "68": [408, 479, 537, 543, 593, 689, 690, 1035], "681": 382, "6817": 1041, "682": 382, "684": 112, "6846": 1041, "6848": 1044, "685": [724, 744, 1005], "687": 1017, "6875": 720, "688": 112, "69": [408, 472, 473, 610, 611, 760, 1005, 1015], "6902": 1041, "691": 725, "6913": 1041, "6929": 1025, "693": 1005, "6931": 872, "69314718": [418, 616, 1015], "6954": 1041, "6984743": 174, "699691": 371, "6d": 48, "6f": [56, 125, 275, 741, 799], "6ppm": 176, "6th": 179, "7": [1, 2, 44, 52, 53, 54, 55, 64, 67, 71, 75, 78, 80, 81, 87, 88, 89, 90, 94, 98, 99, 101, 105, 112, 114, 124, 135, 138, 150, 151, 155, 156, 180, 186, 187, 188, 190, 192, 197, 211, 213, 230, 232, 239, 244, 245, 251, 255, 256, 259, 260, 265, 270, 274, 276, 277, 281, 287, 289, 290, 292, 295, 296, 298, 307, 310, 314, 319, 322, 323, 326, 329, 332, 337, 344, 347, 348, 352, 353, 359, 371, 373, 374, 381, 382, 394, 400, 401, 406, 412, 413, 415, 416, 417, 419, 420, 423, 440, 445, 446, 449, 451, 452, 453, 454, 456, 457, 458, 459, 462, 463, 464, 465, 468, 472, 473, 483, 484, 485, 486, 492, 498, 500, 534, 535, 536, 537, 538, 540, 542, 546, 563, 564, 591, 594, 603, 608, 609, 631, 632, 634, 636, 637, 641, 650, 651, 653, 656, 662, 663, 664, 665, 666, 677, 679, 685, 686, 687, 696, 703, 711, 713, 725, 727, 728, 730, 732, 748, 749, 750, 754, 755, 757, 786, 789, 794, 795, 798, 801, 803, 804, 805, 806, 807, 808, 811, 814, 818, 821, 822, 825, 831, 834, 838, 848, 849, 857, 867, 868, 873, 880, 881, 903, 904, 951, 952, 955, 956, 959, 968, 973, 994, 995, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1011, 1015, 1019, 1020, 1028, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1048, 1053], "70": [46, 51, 100, 104, 106, 135, 188, 249, 255, 270, 330, 371, 373, 412, 495, 496, 686, 687, 717, 730, 760, 804, 818, 895, 994, 1015], "700": 321, "703": [406, 515], "7049": 1041, "707": [884, 896], "7071": 1043, "708": [540, 542, 549, 754], "70814003": 359, "7083": 1005, "7089": 1042, "70x": 1052, "71": [373, 512, 734, 740, 770, 780, 1005, 1037], "710": 406, "7101": 1041, "71518937": 385, "7152": 1041, "7154": 1041, "7159": 1041, "716": 515, "7187": 1041, "7194": 1041, "72": [141, 381, 826, 832], "7200": 653, "721": [540, 542, 549], "7239": 1041, "7248": 1041, "7256": 639, "726": 1013, "7260": 1041, "7261": 1041, "72667194": 1006, "72850319": 1006, "7295": 1041, "73": [274, 389, 482, 740, 804, 818, 854, 917, 1015, 1035, 1037], "7301": 1041, "73153": 382, "7323": 1041, "7325": 1041, "733": 290, "7331": 1042, "7332": 912, "7350": 1041, "7353": 1041, "7356": 1042, "7365": 1042, "737": 526, "7376": 1042, "7382": 1025, "7387": 477, "7388": 1042, "74": [373, 593, 698, 804, 818, 887], "7411": [470, 475, 1041], "7419": 1041, "74310541": 174, "744": 290, "7441": 1042, "7459": 1042, "746": 373, "7464": 1042, "748": 382, "7490": [1041, 1042], "75": [47, 50, 70, 80, 89, 114, 138, 178, 179, 183, 194, 197, 219, 253, 257, 258, 264, 270, 295, 310, 349, 351, 359, 450, 503, 553, 641, 662, 698, 710, 716, 738, 743, 744, 749, 757, 760, 798, 804, 886, 894, 898, 905, 921, 939, 940, 985, 1005, 1007, 1015, 1021, 1023, 1037], "750": [83, 89], "7501": 1042, "7506": 1042, "7532": 490, "7533": [421, 476, 1042], "75474165": 1006, "7548": 1042, "7553": 1041, "7565": 1042, "7567": 1042, "7569": 471, "757": [290, 373], "7573": 1042, "7578": 1042, "759": 290, "7593": 1041, "7594": 1041, "75th": [249, 886], "76": [359, 373, 382, 781, 785, 868], "760": 150, "7608": 1025, "7632": 1041, "7638": 1001, "764": [725, 1005], "7655": 1042, "7660": 1041, "7661": 1042, "7668": 1043, "7674": [526, 1042], "7676": 1041, "768": 87, "7680": 1041, "7685": 1042, "769": 290, "76995": 371, "77": [80, 279, 370, 373, 536, 711, 740, 779, 826], "7702": 1042, "772": 727, "7721": 1042, "7723": 1042, "7724": 1041, "773": [652, 846], "77310": 371, "7732": 1041, "7738": 1043, "7739": 1042, "775": [810, 832], "7750": 1041, "775047": 680, "775151": 680, "7756": 1041, "77630514": 416, "7768366": 1003, "777": 382, "7771": 1042, "77764": 404, "7786": 1041, "7794": 1042, "7798": 912, "7799": 1041, "78": [495, 496, 650, 651, 656, 657, 659, 664, 665, 666, 668, 669, 685, 689, 690, 804, 826, 1005, 1025], "7812": 1042, "781265": [371, 499], "7814": 1042, "7819": [408, 1042], "7823": [1042, 1043], "7825": 1042, "7826": 373, "7833": 476, "7838": 1042, "784": 307, "7849": 1042, "786": 87, "7863": 1042, "7872": 1042, "7880": 1042, "789": 415, "7894": [902, 1017], "79": [112, 113, 124, 373, 381, 410, 475, 526, 600, 698, 826, 846, 1035, 1037], "7906": [626, 653], "79064206": 614, "79084103": 359, "7914": 1042, "7929": 1042, "7943": 1045, "7944": 1042, "7946": 1041, "795": 652, "7954": 1042, "7970": 1042, "7971": 667, "7972": 556, "798": 415, "7983": 1042, "7986": 1042, "798982054": 1005, "7990": 1042, "7998": 1042, "7_qbz5n2kfra8p0": 394, "8": [44, 45, 46, 47, 48, 49, 52, 54, 63, 64, 65, 68, 69, 71, 73, 79, 80, 84, 87, 89, 94, 96, 98, 99, 103, 105, 108, 113, 116, 119, 121, 122, 125, 126, 127, 129, 131, 135, 138, 140, 144, 146, 147, 149, 153, 156, 157, 160, 168, 169, 172, 174, 177, 179, 180, 183, 186, 188, 190, 192, 194, 195, 201, 204, 205, 207, 212, 213, 216, 220, 222, 228, 230, 232, 233, 234, 236, 237, 240, 244, 245, 247, 251, 252, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 277, 280, 281, 287, 289, 292, 294, 298, 302, 305, 307, 308, 310, 312, 313, 314, 315, 316, 319, 331, 333, 334, 337, 340, 344, 345, 346, 347, 348, 351, 352, 353, 357, 359, 364, 370, 371, 372, 373, 374, 376, 381, 382, 394, 400, 401, 402, 406, 408, 412, 413, 415, 416, 417, 419, 421, 440, 443, 444, 445, 448, 450, 451, 453, 456, 457, 458, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 486, 488, 491, 498, 500, 504, 505, 516, 518, 533, 536, 540, 542, 545, 547, 549, 551, 552, 555, 557, 558, 567, 572, 585, 591, 592, 593, 594, 607, 608, 632, 633, 634, 640, 641, 652, 662, 674, 680, 683, 693, 696, 697, 698, 699, 703, 706, 710, 711, 713, 714, 719, 725, 731, 732, 733, 745, 746, 749, 750, 754, 755, 757, 782, 786, 787, 789, 792, 793, 794, 795, 799, 801, 803, 805, 806, 811, 814, 821, 822, 825, 826, 827, 832, 834, 835, 837, 846, 848, 849, 855, 865, 866, 867, 873, 880, 887, 889, 905, 910, 913, 932, 934, 935, 945, 950, 951, 952, 956, 973, 979, 980, 981, 982, 983, 984, 985, 994, 995, 1001, 1002, 1003, 1005, 1008, 1013, 1015, 1019, 1029, 1032, 1033, 1036, 1037, 1038, 1042, 1043, 1048, 1049, 1051], "80": [51, 65, 101, 113, 155, 162, 177, 188, 194, 247, 316, 343, 345, 351, 357, 359, 371, 373, 376, 406, 412, 417, 419, 445, 480, 512, 543, 717, 804, 818, 826, 889, 902, 921, 994, 1000, 1001, 1005, 1012, 1018, 1021], "800": [322, 371, 587, 696], "8000": 274, "8002": 1042, "8003": 1043, "8005": 1042, "8006": 1042, "8010": 1042, "802": 373, "8022": [474, 1044], "8028": 1042, "8040": 1041, "804414": [371, 499], "8053": 1042, "806": 653, "8061": 1042, "8065": 1042, "8066": 1043, "8068": 1042, "8075": 1043, "8086": [623, 1042], "8087": 1042, "8093": 1042, "8094": 1042, "80956739": 1006, "80_000": 140, "81": [84, 408, 703, 765, 792, 804, 818, 835, 1005, 1006, 1008, 1015], "810": 833, "8100": 1025, "8102": 1043, "810596": 371, "8117": 1042, "8120": 1042, "8125": 725, "8129": 1043, "81355169": 416, "8137": 1042, "8139": 1042, "8157": 1025, "8159": 1042, "816": [472, 473], "8160": 1042, "8174": 1042, "8181": 1042, "819": 416, "8190": 1043, "81940995": 416, "8198": 1042, "82": [92, 792, 804, 818, 951, 1005, 1008, 1035], "820": [848, 849], "8216": 1044, "822": 794, "8224": 1042, "823": 290, "8243": 1025, "825": 754, "8251": 1042, "8259": 1042, "828": 290, "8282": 1042, "8295": 1042, "83": [71, 75, 373, 698, 711, 790, 924, 1000, 1005, 1038], "8306": 1042, "8316": 1042, "832": [415, 557, 558], "83236428": 416, "83281226": [848, 849], "8333": 500, "83333": 768, "8335": 1042, "8344": 1042, "8345": 600, "8354": [626, 1042], "83548752": 614, "8355": 1041, "8361": 1043, "8363": 1042, "8377": 1042, "83816048": 650, "83822343": 1003, "83833": 382, "8387": 839, "839": 684, "84": [359, 373, 415, 416, 792, 818, 1005, 1015], "840": 382, "84127814": 670, "84253": 1006, "844": [415, 557, 558], "8446": 1042, "8449": 1042, "8473": 416, "8478": 1044, "8480": 1025, "8481": 1042, "8484": 1043, "85": [56, 84, 89, 124, 227, 281, 308, 330, 359, 415, 440, 500, 502, 557, 558, 600, 656, 662, 749, 757, 792, 804, 832, 1005, 1006, 1035], "8508": 1044, "8512": 1042, "8513": 623, "8515": [416, 1042], "85151335": 416, "85253229": 91, "85418642": 359, "8549": 1042, "8554": 1043, "8586": 1042, "8591": 1042, "86": [407, 792, 916, 1005], "861": [373, 792, 793, 1005], "8617": 1043, "8628": 639, "866": 1013, "8672": 1042, "8676": [624, 1042], "8678": 627, "8698": 1042, "87": [600, 671, 781, 792, 804, 826, 884, 896, 1005], "870": 373, "871": [112, 113, 410, 475], "872": 1013, "8720": [558, 1043], "873": 373, "87382323": 666, "874": [792, 793, 1005], "87421f": 119, "875": 673, "87600388": 174, "8768": 1042, "8769": 1044, "8773": 1044, "878964": 816, "88": [269, 355, 371, 373, 376, 407, 410, 474, 650, 651, 656, 664, 665, 666, 685, 868, 951, 1035], "88089948": 416, "88213": 371, "8833": 500, "8835": 1042, "884": 290, "8845": 1042, "885": 373, "8854": 1042, "8874": 1042, "8878": 839, "8880": 624, "8881": 627, "889": 438, "88978285": 1006, "89": [987, 1000, 1005, 1015, 1035, 1038, 1046], "8922": 1042, "8931": 1042, "8936": 1042, "8947": 918, "89483932": 1003, "8948621": 1006, "896": 652, "8965": 415, "8973": 1042, "89856": 816, "8992": 1042, "8995": 1042, "8pt": 1015, "8x8": [69, 204, 243, 299, 308, 373, 504], "9": [47, 49, 62, 64, 65, 68, 69, 71, 78, 80, 84, 89, 92, 96, 98, 114, 143, 144, 146, 147, 148, 153, 155, 161, 162, 174, 178, 183, 186, 187, 188, 190, 197, 204, 225, 226, 229, 230, 232, 235, 243, 244, 255, 256, 257, 258, 273, 277, 279, 283, 289, 292, 294, 295, 298, 299, 300, 305, 306, 310, 312, 313, 314, 316, 317, 319, 325, 327, 330, 332, 334, 340, 344, 349, 359, 373, 374, 382, 389, 394, 400, 401, 406, 407, 409, 410, 412, 415, 416, 440, 444, 451, 458, 464, 483, 484, 485, 486, 491, 498, 500, 518, 520, 522, 529, 536, 540, 541, 542, 549, 562, 569, 572, 586, 594, 607, 608, 610, 611, 631, 634, 638, 641, 643, 650, 651, 656, 662, 664, 665, 666, 685, 686, 687, 691, 696, 703, 713, 727, 730, 745, 752, 773, 782, 783, 784, 801, 803, 805, 807, 808, 822, 825, 826, 832, 834, 837, 845, 846, 850, 851, 856, 859, 865, 866, 874, 880, 883, 951, 952, 956, 977, 994, 1000, 1001, 1005, 1009, 1015, 1019, 1020, 1033, 1036, 1037, 1038, 1040, 1049, 1051], "90": [46, 50, 53, 55, 130, 131, 146, 147, 148, 150, 176, 190, 195, 211, 214, 219, 255, 279, 281, 312, 325, 359, 363, 376, 382, 412, 565, 785, 804, 832, 837, 889, 1000, 1005, 1050, 1051], "900": 108, "9010": 1041, "9012": 1043, "9015": [667, 1043], "9019": 1042, "9022": 1042, "9024": 1042, "904": 409, "9041": 1043, "9043": 1043, "9044": 1042, "90453403": 467, "9067": 1042, "9069": 1044, "9078": 1042, "908": 1005, "9085": 1043, "9087": 1049, "91": [85, 415, 1000], "9100": 1042, "9101": 1043, "9105": 1042, "9108": 1042, "913": [415, 561], "9145": 1042, "9147": 1043, "9149": 1041, "9151": 1043, "9157": 1043, "91629073": 593, "92": [84, 124, 308, 340, 371, 373, 540, 542, 549, 564, 600, 700, 804, 818, 826, 1000], "9206": 1042, "9219": 1042, "9221": 653, "9222": 1043, "923223": 816, "9234": 1043, "9239": 1042, "925": 1005, "9250": 1045, "92529176": 1006, "9257": 1043, "9259": 1042, "927": 438, "9274": 1045, "9277": 1042, "9278": 1042, "928": [113, 438], "9284": 1042, "9288": 1045, "9289": 1042, "93": [212, 373, 650, 651, 656, 664, 665, 666, 685, 781, 792, 804, 826, 832, 916, 1000, 1005], "9302": 1042, "9304": 1043, "93271427": 174, "933": 412, "9333": 412, "933333": 857, "935": 1042, "9354": 1043, "936": [438, 1005], "9372": 1043, "9378": 1043, "938": [789, 1005], "939": 672, "9399": 1043, "93fletcher": 1001, "93goldfarb": 1001, "93lindenstrauss_lemma": 902, "93shanno_algorithm": 1001, "94": [71, 88, 123, 143, 211, 247, 407, 415, 667, 792, 826, 1000, 1005, 1006, 1015, 1035], "94114649": [848, 849], "9417": 675, "9431": 839, "9456": 1043, "94592424": 666, "946": 113, "94731329": 671, "947958": 994, "948": [789, 1005], "9484": 1043, "9490": 373, "9492": 1043, "9497": 1043, "9499": 642, "95": [53, 55, 80, 86, 91, 101, 143, 147, 150, 178, 194, 214, 219, 257, 258, 261, 270, 271, 295, 303, 312, 323, 340, 359, 415, 529, 636, 637, 640, 651, 665, 752, 826, 905, 1001, 1005, 1006, 1018, 1038], "9507": 1042, "9515": 1043, "951958": 994, "9521": 1043, "9524": 1043, "95373": 371, "954": [884, 896], "955": [290, 412, 658], "9558": 1042, "955989": 994, "9565": 373, "9569": 1043, "957": [732, 1005], "9579": 1043, "9583": 407, "9584": [631, 1042], "959": [884, 896], "9593": 1042, "9595": 678, "9597": 1045, "9599": 1043, "95th": [53, 147, 150, 752], "96": [44, 53, 96, 178, 239, 373, 412, 555, 686, 687, 715, 826, 994, 1000, 1005, 1015, 1035], "9600": 1042, "9604": 1042, "961": 865, "961009": 994, "9612": 1043, "961904": 857, "96190476": 1008, "9623": 1042, "9630": 679, "9641": 1042, "9647": 1043, "965": 1005, "9655": 1043, "9656": 1043, "9666": 545, "967": [1005, 1009], "9677": 1042, "9681": 1043, "9686": 1043, "969": 370, "9693": 1042, "9697": 1042, "97": [130, 190, 247, 261, 340, 373, 382, 389, 412, 650, 651, 656, 662, 664, 665, 666, 685, 686, 687, 1000, 1006, 1015, 1035], "9701": 1043, "9707": 1043, "9711": 1042, "9717": 1042, "9723": 1043, "9726": 1043, "973": 412, "9731": 1043, "9733": [624, 627], "974e": 416, "975": 1020, "9750": 1042, "976158": 371, "977": 412, "9771": 556, "9772": 1043, "9775": 1043, "9781605585161": 408, "9786": 1043, "9788": 1042, "98": [78, 80, 88, 96, 98, 114, 124, 239, 268, 305, 373, 412, 415, 663, 843, 866, 899, 1000, 1005, 1007], "9802": 1042, "981": [373, 1005], "9815": 1042, "9816": 1043, "9821": 854, "983": 732, "9830": 1042, "9832": 1043, "9833": 500, "983667": 994, "9837": 1043, "9843": 1048, "9847": 1042, "984ea3": [80, 96], "9851": 1043, "9858": 1043, "9865": 1042, "9866": [614, 623, 626], "9868": [902, 1017], "9875": 1043, "9884": 683, "9885": 675, "9886": 1043, "99": [46, 63, 80, 85, 96, 121, 230, 239, 243, 249, 255, 257, 271, 310, 364, 369, 373, 412, 415, 416, 494, 651, 665, 675, 686, 687, 792, 826, 855, 973, 1000, 1005, 1015, 1019, 1031, 1037], "990": [673, 1005], "9907": 1044, "9908": 1043, "991": 1005, "9922": 1042, "9924": 543, "99244": 543, "9935": 839, "9939": 1043, "994": 290, "9945": 1042, "9951": 1045, "997": 76, "9978": 1048, "998": 1009, "9980": 1043, "9987": 643, "999": [230, 270, 415, 721, 865, 866], "9991": [668, 669, 1043], "9993": [657, 659, 1043], "9994": 667, "9996": 655, "9998": [51, 303], "9999": [51, 230, 303, 332, 500, 631, 1043], "99999": 332, "999999": [80, 96], "A": [0, 2, 20, 26, 42, 54, 56, 57, 63, 65, 68, 72, 74, 75, 76, 77, 80, 81, 83, 87, 88, 90, 91, 93, 94, 95, 96, 98, 101, 108, 110, 113, 117, 119, 122, 123, 124, 136, 137, 142, 144, 154, 158, 160, 161, 162, 166, 168, 171, 174, 176, 178, 179, 180, 184, 187, 188, 198, 200, 213, 216, 222, 226, 227, 230, 233, 246, 249, 258, 264, 270, 271, 273, 277, 285, 287, 305, 310, 312, 315, 319, 321, 324, 330, 331, 332, 334, 340, 344, 345, 351, 352, 353, 358, 359, 363, 365, 370, 371, 373, 374, 376, 378, 379, 380, 381, 384, 388, 389, 390, 391, 393, 399, 403, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 431, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 491, 492, 494, 496, 499, 502, 503, 504, 505, 506, 510, 512, 513, 514, 515, 516, 522, 524, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 610, 611, 613, 614, 615, 621, 624, 631, 632, 633, 634, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 708, 709, 714, 715, 716, 720, 721, 723, 725, 726, 727, 728, 729, 730, 735, 740, 741, 744, 746, 747, 748, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 768, 770, 771, 778, 779, 780, 781, 782, 785, 792, 794, 795, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 945, 947, 950, 951, 952, 960, 961, 963, 964, 989, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1031, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "AND": 739, "AS": 420, "AT": [2, 371, 497], "And": [53, 184, 231, 232, 237, 246, 270, 378, 384, 402, 408, 412, 416, 532, 591, 592, 594, 696, 697, 1001, 1005, 1026, 1042], "As": [0, 31, 44, 47, 59, 63, 67, 76, 79, 87, 89, 91, 92, 100, 114, 117, 126, 135, 136, 142, 144, 145, 146, 148, 150, 154, 164, 167, 171, 176, 177, 183, 187, 189, 190, 192, 194, 197, 198, 202, 204, 212, 216, 220, 230, 237, 246, 258, 264, 265, 267, 268, 270, 271, 273, 289, 295, 311, 322, 327, 332, 340, 344, 352, 353, 355, 357, 359, 363, 364, 371, 375, 376, 378, 381, 388, 389, 390, 402, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 447, 495, 556, 564, 568, 613, 623, 636, 659, 660, 676, 678, 691, 739, 762, 768, 850, 851, 852, 854, 856, 887, 994, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1015, 1019, 1020, 1021, 1024, 1025, 1029, 1035, 1041, 1046, 1051, 1053], "At": [53, 108, 135, 217, 246, 264, 282, 287, 289, 329, 332, 363, 364, 380, 391, 399, 404, 411, 415, 438, 441, 466, 591, 592, 594, 605, 836, 838, 875, 968, 994, 1001, 1004, 1006, 1010, 1019, 1029], "Be": [166, 180, 351, 376, 410, 569, 570, 652, 658, 659, 660, 662, 663, 673, 684, 708, 822, 823, 883, 1015, 1032, 1036], "Being": [376, 390, 391, 1001, 1008], "But": [44, 49, 87, 186, 213, 214, 270, 290, 310, 376, 388, 408, 411, 414, 415, 463, 750, 916, 917, 994, 1005, 1020, 1025], "By": [58, 121, 150, 151, 152, 188, 194, 216, 246, 264, 279, 287, 310, 319, 325, 326, 344, 351, 364, 376, 378, 382, 383, 390, 399, 407, 408, 409, 411, 412, 413, 414, 415, 417, 439, 442, 446, 447, 451, 465, 468, 469, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 526, 551, 552, 559, 560, 561, 562, 566, 567, 588, 589, 591, 592, 594, 609, 612, 636, 637, 675, 677, 679, 681, 694, 696, 698, 701, 703, 704, 706, 707, 722, 733, 734, 738, 742, 787, 788, 791, 798, 800, 807, 808, 854, 855, 868, 869, 881, 882, 884, 886, 896, 898, 906, 911, 912, 916, 917, 918, 919, 934, 935, 994, 995, 997, 1001, 1005, 1012, 1013, 1015, 1017, 1021, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1052, 1053], "For": [2, 31, 44, 48, 49, 52, 53, 54, 58, 65, 69, 73, 76, 80, 81, 83, 87, 89, 91, 92, 94, 101, 106, 112, 117, 122, 138, 140, 147, 148, 150, 151, 153, 165, 166, 169, 171, 173, 178, 182, 183, 187, 188, 198, 200, 202, 205, 209, 212, 213, 216, 217, 220, 229, 230, 232, 234, 237, 239, 240, 242, 243, 244, 246, 253, 260, 264, 267, 270, 271, 277, 284, 289, 290, 300, 305, 307, 308, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 332, 334, 340, 342, 344, 347, 351, 352, 353, 355, 356, 358, 359, 363, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 399, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 424, 431, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 472, 473, 475, 483, 484, 485, 486, 490, 496, 498, 500, 505, 516, 517, 525, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 584, 585, 586, 587, 591, 592, 594, 595, 596, 597, 600, 605, 610, 611, 612, 614, 615, 618, 623, 626, 627, 631, 632, 633, 634, 635, 636, 637, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 692, 693, 694, 696, 697, 699, 705, 708, 710, 711, 733, 734, 742, 745, 767, 773, 782, 787, 788, 791, 792, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 934, 940, 957, 967, 988, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1023, 1028, 1029, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "If": [0, 44, 51, 53, 65, 69, 78, 83, 89, 104, 114, 124, 133, 147, 150, 155, 180, 183, 187, 196, 212, 227, 229, 230, 246, 249, 253, 264, 270, 277, 284, 295, 303, 310, 315, 316, 340, 344, 347, 348, 352, 353, 358, 359, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 394, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 429, 432, 433, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 514, 516, 517, 521, 524, 525, 526, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 715, 716, 717, 718, 720, 721, 722, 726, 730, 731, 732, 733, 734, 735, 736, 740, 742, 745, 749, 750, 752, 757, 758, 759, 760, 761, 762, 763, 765, 767, 768, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 816, 818, 821, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 929, 930, 932, 933, 934, 935, 937, 938, 939, 940, 943, 945, 950, 952, 954, 956, 961, 963, 967, 970, 973, 975, 978, 979, 985, 988, 989, 990, 991, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1009, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1035, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1051, 1053], "In": [0, 7, 38, 44, 45, 47, 49, 51, 52, 53, 54, 55, 63, 64, 65, 71, 73, 75, 83, 87, 89, 91, 92, 94, 100, 101, 104, 107, 108, 110, 112, 113, 114, 117, 121, 123, 126, 127, 128, 129, 133, 135, 138, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 155, 165, 166, 168, 169, 171, 175, 176, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 198, 200, 201, 202, 204, 205, 208, 212, 213, 214, 215, 216, 217, 220, 229, 230, 239, 240, 241, 244, 245, 246, 247, 249, 250, 252, 253, 258, 260, 263, 264, 267, 268, 270, 271, 272, 273, 275, 276, 279, 280, 283, 284, 285, 287, 290, 293, 296, 297, 299, 308, 310, 311, 312, 315, 316, 317, 319, 320, 321, 323, 324, 326, 327, 331, 333, 340, 344, 347, 351, 352, 353, 355, 357, 358, 359, 363, 364, 365, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 388, 389, 390, 391, 393, 394, 395, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 438, 441, 442, 443, 444, 445, 448, 449, 450, 453, 463, 464, 465, 470, 473, 476, 495, 498, 505, 510, 511, 513, 525, 536, 538, 540, 542, 543, 544, 546, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 591, 594, 605, 609, 612, 614, 615, 634, 636, 637, 638, 640, 647, 648, 649, 651, 652, 653, 655, 657, 659, 662, 663, 665, 667, 669, 670, 672, 673, 678, 679, 680, 683, 684, 688, 689, 690, 700, 703, 707, 716, 722, 724, 730, 732, 733, 738, 739, 742, 744, 746, 758, 760, 761, 785, 787, 789, 792, 798, 800, 801, 802, 803, 804, 807, 808, 810, 818, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 873, 875, 881, 882, 886, 887, 889, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 913, 916, 918, 923, 933, 935, 952, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1029, 1032, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "Ines": 1052, "It": [0, 31, 44, 47, 48, 49, 53, 59, 63, 71, 73, 76, 87, 89, 92, 105, 110, 112, 114, 121, 124, 125, 127, 130, 135, 138, 140, 141, 143, 145, 147, 155, 169, 176, 177, 178, 182, 183, 187, 188, 189, 195, 198, 200, 202, 212, 216, 226, 229, 230, 232, 233, 239, 244, 246, 249, 264, 265, 266, 268, 270, 271, 273, 276, 277, 284, 287, 290, 296, 297, 298, 300, 301, 303, 310, 314, 315, 317, 319, 325, 327, 336, 340, 344, 347, 351, 352, 353, 359, 363, 364, 365, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 384, 385, 388, 389, 390, 391, 394, 399, 402, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 438, 439, 442, 443, 444, 445, 446, 448, 449, 450, 453, 460, 463, 465, 468, 469, 470, 475, 479, 486, 488, 498, 510, 517, 526, 535, 537, 538, 540, 542, 543, 551, 552, 555, 556, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 592, 599, 605, 609, 610, 611, 615, 618, 619, 623, 624, 626, 627, 631, 634, 635, 636, 637, 645, 646, 647, 650, 651, 654, 656, 657, 658, 659, 662, 664, 665, 666, 667, 670, 671, 672, 674, 675, 676, 678, 680, 681, 682, 683, 685, 686, 687, 688, 691, 693, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 708, 712, 713, 714, 720, 727, 738, 746, 747, 751, 762, 763, 766, 769, 785, 787, 792, 803, 804, 807, 808, 810, 816, 817, 818, 826, 827, 829, 832, 835, 844, 845, 850, 851, 852, 854, 857, 858, 859, 860, 864, 865, 866, 870, 871, 872, 876, 877, 878, 882, 885, 887, 897, 900, 901, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 925, 929, 938, 952, 961, 975, 978, 980, 981, 982, 983, 984, 985, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1021, 1024, 1029, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "Its": [110, 268, 272, 372, 390, 413, 418, 540, 925, 1000, 1001, 1010, 1013, 1019, 1024, 1029, 1038, 1052], "NOT": [246, 296, 373, 379, 565, 814, 848, 849], "Nearness": 631, "No": [62, 149, 198, 218, 220, 246, 264, 330, 347, 373, 384, 394, 402, 408, 475, 561, 562, 593, 594, 613, 639, 649, 668, 680, 682, 689, 690, 801, 945, 1001, 1052], "Not": [89, 160, 188, 363, 388, 402, 408, 426, 427, 430, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 470, 471, 472, 473, 474, 475, 476, 477, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 565, 568, 571, 572, 584, 585, 586, 591, 592, 594, 631, 632, 633, 634, 681, 692, 693, 694, 695, 697, 798, 801, 802, 804, 807, 808, 818, 845, 848, 849, 852, 853, 854, 856, 860, 872, 880, 883, 884, 886, 889, 900, 901, 912, 1005, 1011, 1024, 1044], "OF": 373, "ONE": [370, 610, 611], "OR": [310, 408, 419, 445, 1046], "Of": [49, 63, 65, 182, 284, 363, 378, 408, 416, 995], "On": [44, 53, 56, 101, 116, 117, 126, 135, 138, 147, 164, 175, 187, 188, 200, 202, 214, 216, 243, 245, 249, 255, 257, 265, 266, 267, 272, 273, 275, 310, 312, 314, 315, 320, 340, 347, 357, 363, 374, 376, 377, 378, 380, 388, 390, 404, 406, 408, 412, 413, 415, 417, 418, 647, 660, 695, 739, 765, 873, 889, 994, 998, 1001, 1004, 1005, 1007, 1011, 1013, 1018, 1020], "One": [2, 44, 49, 52, 62, 67, 83, 89, 126, 128, 144, 147, 150, 151, 184, 187, 190, 193, 203, 216, 227, 239, 250, 260, 264, 270, 277, 280, 287, 296, 299, 311, 326, 335, 337, 352, 358, 363, 373, 376, 389, 390, 402, 407, 408, 411, 413, 414, 415, 416, 417, 419, 445, 450, 473, 475, 479, 514, 568, 635, 643, 662, 670, 672, 677, 679, 680, 681, 792, 811, 812, 836, 837, 838, 869, 870, 881, 912, 967, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1015, 1020, 1026, 1027, 1031, 1039, 1041, 1048, 1050], "Or": [358, 412, 413, 881, 1005, 1011, 1019], "Such": [54, 151, 171, 176, 186, 194, 198, 202, 213, 264, 273, 351, 390, 391, 402, 412, 413, 415, 557, 558, 660, 995, 1005, 1008, 1015, 1021, 1045, 1050, 1052], "THE": 373, "That": [53, 65, 121, 135, 150, 169, 187, 202, 239, 270, 274, 352, 353, 364, 370, 378, 384, 390, 407, 412, 417, 418, 444, 447, 448, 559, 566, 596, 822, 916, 917, 994, 1002, 1003, 1011, 1021, 1044, 1045], "The": [2, 16, 26, 28, 31, 32, 34, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 285, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 388, 389, 390, 391, 393, 394, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 428, 430, 431, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 756, 757, 758, 759, 760, 761, 762, 763, 766, 768, 769, 770, 771, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 945, 947, 948, 949, 950, 951, 952, 954, 955, 957, 960, 961, 964, 967, 969, 970, 971, 973, 974, 975, 978, 986, 987, 988, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "Their": [187, 371, 373, 391, 408, 648, 1035], "Then": [104, 136, 140, 150, 155, 158, 166, 187, 192, 198, 200, 209, 212, 216, 236, 240, 246, 252, 264, 272, 273, 287, 358, 370, 380, 382, 384, 394, 395, 405, 408, 411, 413, 416, 417, 572, 596, 723, 760, 804, 818, 908, 909, 995, 1004, 1005, 1011, 1020, 1021, 1044], "There": [0, 75, 81, 141, 171, 205, 230, 236, 246, 261, 265, 267, 270, 289, 369, 371, 373, 376, 377, 378, 381, 388, 390, 391, 394, 405, 408, 413, 415, 416, 417, 447, 453, 463, 536, 555, 556, 561, 562, 591, 592, 594, 609, 649, 995, 1001, 1002, 1003, 1004, 1005, 1008, 1012, 1015, 1019, 1020, 1021, 1023, 1028, 1035, 1043], "These": [11, 18, 26, 33, 39, 44, 45, 47, 65, 85, 121, 123, 140, 143, 184, 188, 202, 205, 212, 213, 214, 240, 264, 287, 290, 294, 308, 310, 317, 318, 323, 330, 332, 359, 363, 364, 369, 372, 373, 376, 378, 380, 383, 385, 388, 390, 394, 399, 402, 405, 406, 407, 408, 411, 413, 415, 416, 417, 418, 443, 447, 449, 500, 510, 511, 517, 540, 569, 570, 605, 606, 672, 680, 681, 703, 710, 737, 782, 798, 804, 807, 808, 810, 818, 827, 829, 830, 831, 832, 833, 835, 853, 854, 873, 947, 994, 996, 999, 1001, 1002, 1005, 1006, 1016, 1018, 1020, 1024, 1035, 1041, 1043, 1044, 1045, 1048, 1052], "To": [1, 44, 48, 64, 65, 69, 81, 89, 91, 110, 112, 114, 117, 126, 135, 144, 147, 148, 157, 160, 169, 176, 177, 180, 182, 183, 186, 187, 192, 196, 198, 200, 212, 213, 214, 216, 220, 230, 243, 244, 246, 249, 251, 253, 260, 264, 265, 267, 268, 270, 272, 273, 275, 277, 283, 284, 287, 289, 307, 310, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 349, 352, 355, 359, 363, 364, 369, 370, 374, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 394, 402, 404, 405, 408, 409, 410, 411, 412, 413, 415, 416, 447, 449, 450, 451, 462, 465, 468, 494, 498, 504, 505, 509, 510, 511, 533, 539, 540, 541, 543, 545, 546, 547, 548, 559, 560, 561, 562, 566, 567, 571, 600, 615, 631, 636, 650, 651, 656, 657, 660, 662, 663, 664, 665, 666, 667, 688, 704, 716, 732, 767, 789, 797, 807, 808, 830, 837, 868, 879, 884, 898, 899, 908, 909, 913, 916, 917, 918, 919, 941, 952, 991, 994, 995, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1019, 1020, 1021, 1029, 1035, 1038, 1040, 1041, 1042, 1044, 1046], "Will": [376, 499, 536, 631, 648, 649, 650, 656, 660, 661, 664, 665, 666, 667, 668, 669, 677, 679, 711, 718, 792, 873, 877, 887, 888, 1038, 1039, 1041, 1043, 1053], "Willing": [1041, 1042], "With": [62, 71, 80, 101, 108, 126, 127, 150, 152, 165, 184, 188, 212, 214, 238, 240, 245, 247, 253, 270, 294, 363, 371, 374, 376, 378, 390, 399, 408, 409, 412, 415, 417, 438, 440, 503, 543, 585, 636, 637, 662, 866, 869, 871, 882, 888, 889, 915, 917, 998, 1001, 1002, 1005, 1006, 1008, 1009, 1012, 1019, 1021, 1026, 1032, 1038, 1042, 1043, 1045, 1047, 1049], "_": [44, 45, 47, 48, 49, 51, 52, 53, 55, 59, 63, 64, 65, 67, 69, 70, 76, 79, 84, 87, 89, 92, 97, 101, 103, 114, 119, 121, 126, 127, 128, 130, 138, 139, 140, 150, 164, 171, 176, 177, 178, 186, 187, 188, 190, 192, 194, 198, 200, 201, 202, 205, 210, 212, 214, 216, 225, 226, 229, 233, 236, 240, 245, 249, 253, 264, 265, 270, 272, 273, 274, 276, 277, 279, 283, 284, 287, 293, 298, 301, 308, 312, 315, 316, 317, 320, 323, 324, 325, 327, 330, 331, 339, 344, 347, 351, 353, 356, 378, 382, 390, 413, 415, 416, 420, 447, 479, 534, 535, 536, 537, 538, 540, 541, 542, 545, 547, 548, 549, 568, 600, 650, 651, 656, 657, 664, 665, 666, 667, 685, 686, 687, 688, 692, 693, 694, 695, 697, 699, 700, 702, 704, 714, 768, 804, 810, 818, 827, 852, 860, 881, 882, 889, 995, 1001, 1002, 1005, 1007, 1008, 1009, 1012, 1013, 1015, 1020, 1021, 1042], "_0": [211, 689, 1001, 1005, 1020], "_1": [322, 344, 410, 413, 416, 533, 539, 540, 542, 547, 548, 549, 650, 651, 656, 657, 658, 659, 660, 664, 665, 666, 667, 685, 686, 687, 688, 770, 1001, 1003, 1005, 1020], "_11": 656, "_2": [113, 176, 344, 413, 416, 533, 539, 547, 548, 650, 656, 1001, 1009, 1019, 1020], "_21": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688], "__": [106, 271, 390, 409, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1043, 1044], "__add__": [418, 628], "__array__": [1038, 1045], "__array_function__": [1025, 1045], "__c": 378, "__call__": [179, 340, 390, 416, 418, 467, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 941, 970, 1042], "__class__": [182, 212, 214, 246, 249, 272, 312, 351, 352, 353, 383], "__class_weight": 378, "__dataframe__": [563, 564], "__doc__": [79, 108, 176, 258, 390], "__file__": [48, 50, 1048], "__getitem__": 1053, "__getstate__": [1042, 1050], "__init__": [48, 90, 133, 179, 246, 290, 340, 376, 378, 380, 381, 382, 383, 390, 416, 422, 425, 428, 431, 432, 622, 965, 1036, 1041, 1043, 1048, 1049, 1050, 1051], "__init_subclass__": 378, "__len__": 1044, "__main__": [333, 388], "__metadata_request__fit": 246, "__mul__": 625, "__mul___": 418, "__name__": [47, 63, 95, 182, 212, 214, 246, 249, 253, 265, 272, 312, 333, 351, 352, 353, 383, 388, 881], "__pow__": [418, 620], "__repr__": 1044, "__sklearn_clone__": [378, 433, 1051], "__sklearn_is_fitted__": [90, 132, 184, 378, 422, 425, 988, 1026, 1048, 1049], "__sklearn_tags__": [378, 957], "__version__": [148, 190, 319, 380], "_array_api": 404, "_bag": 943, "_basehmm": 1035, "_bay": 943, "_birch": 1045, "_build": 376, "_c_step": 1042, "_cfnode": 443, "_check_bounds_param": 1047, "_check_i": 993, "_check_param_grid": 1041, "_check_sample_weight": 1048, "_check_stop_list": 594, "_check_target": 1042, "_check_x": 1045, "_class": 1005, "_class_cov": 1043, "_class_mean": 1043, "_classifier_ha": 90, "_compon": [243, 538], "_coo": [588, 589], "_count_nonzero_coeffici": 47, "_criterion": 1043, "_csr": 881, "_cython_bla": 377, "_devianc": 1005, "_doc_link_modul": 378, "_doc_link_templ": 378, "_doc_link_url_param_gener": 378, "_dotbla": 382, "_encod": 1043, "_error": 1005, "_estim": 993, "_estimator_html_repr": 948, "_estimator_typ": 1040, "_estimator_with_converted_arrai": 404, "_f": [179, 1001], "_featur": [413, 540, 542, 549], "_fit_and_scor": 1043, "_fit_stag": [561, 562], "_fro": [533, 539, 547, 548, 650, 651, 656, 664, 665, 666, 685], "_g": 179, "_gb": 1045, "_generate_center_coordin": 54, "_get_support_mask": 604, "_get_tag": 1046, "_get_warnings_filters_info_list": 364, "_h": [540, 542, 549], "_hist_gradient_boost": 380, "_i": [406, 415, 996, 1001, 1005, 1009, 1020], "_idx": 390, "_init": 195, "_init_t": 1019, "_initialize_nmf": 382, "_intermediate_coef": 378, "_is_fit": 133, "_iter": 380, "_j": [406, 996], "_k": [410, 999, 1001], "_l": 1005, "_learntselectormixin": 1040, "_level": [418, 629], "_logist": 376, "_loss": [390, 1005, 1053], "_m": 1021, "_mean": 316, "_mean_frequency_by_risk_group": 212, "_method": 964, "_my": 376, "_n": [416, 1005], "_n_cluster": 376, "_n_compon": 549, "_n_features_out": 424, "_name_estim": 1045, "_neg": 382, "_newton_cg": 1046, "_nls_subproblem": 382, "_nmf": 382, "_not_in_sphinx": [48, 50], "_num_thread": 364, "_obj": 964, "_openmp_help": 377, "_pairwis": [1045, 1047], "_plain_sgd": 1050, "_po": 382, "_posterior_mod": 614, "_preprocess_data": 691, "_pvalu": 1035, "_rand": 359, "_ratio": [540, 542, 549], "_request": [246, 399, 1053], "_required_paramet": 428, "_reset": 48, "_run_search": 1043, "_safe_index": [2, 1048, 1052, 1053], "_safe_split": 925, "_safe_tag": 1046, "_sag": 1044, "_sampl": [243, 413, 540, 542, 549], "_samples_gener": 258, "_score": [390, 804, 818, 831, 1005, 1035, 1048], "_search": 1041, "_serial": 246, "_sgd_fast": 1050, "_skip_test": 927, "_spars": 382, "_sparse_fit": 1045, "_std": 316, "_t": 1019, "_tag": 927, "_test": [220, 312, 364, 378, 1048], "_test_scor": [270, 473, 597, 1048], "_transform_select": 1041, "_tree": [916, 917, 918, 919, 1036, 1038], "_typedef": 377, "_valu": [418, 617], "_w": [540, 542, 549], "_weight": [54, 230], "_weight_boost": 943, "_weighted_percentil": 1048, "_which_": 188, "_x_is_even": 965, "a16": [1045, 1046], "a65628": [80, 96], "a674e682c281": 381, "a_": [122, 405, 408, 540, 542, 549, 1001], "a_column": 723, "a_i": 408, "a_mask": 279, "a_n": 405, "a_row": 723, "a_tru": 279, "aaa": 179, "aaaaff": [295, 298], "aaai": [408, 419, 445, 843, 1007], "aact": 179, "aaffaa": 298, "aagaard": 1039, "aakanksha": 1043, "aapl": 52, "aarch64": 384, "aaron": [496, 1001, 1038, 1039, 1040, 1045], "aarshai": [1042, 1043], "aashil": 1042, "ab": [52, 56, 76, 108, 125, 131, 137, 144, 155, 165, 169, 190, 204, 223, 225, 228, 230, 235, 270, 310, 327, 338, 349, 408, 540, 542, 549, 631, 848, 849, 883, 1005], "ab_mask": 279, "abadi": [1041, 1042], "abandon": 376, "abati": [1050, 1052, 1053], "abbi": [1045, 1046], "abbrevi": 703, "abdela": 1044, "abdulaziz": 1053, "abdulelah": 1048, "abdur": 1045, "abenbihi": 1045, "abhijeet": 1037, "abhinav": [1045, 1048], "abhishek": [1038, 1039, 1045, 1049, 1051, 1052], "abhyudai": 1042, "abid": 376, "abil": [49, 53, 95, 112, 147, 170, 171, 172, 176, 178, 180, 182, 184, 186, 187, 189, 212, 216, 230, 239, 351, 365, 394, 415, 416, 418, 615, 626, 629, 786, 787, 788, 791, 792, 1002, 1005, 1008, 1011, 1021, 1026, 1035, 1037, 1042, 1044, 1048, 1049], "abirami": 408, "abl": [44, 45, 49, 62, 82, 89, 95, 114, 117, 125, 126, 150, 152, 177, 187, 190, 198, 202, 212, 228, 230, 236, 276, 281, 283, 326, 327, 340, 359, 363, 364, 365, 370, 374, 376, 378, 380, 381, 384, 388, 402, 408, 410, 412, 416, 486, 505, 536, 833, 880, 994, 995, 1001, 1004, 1005, 1006, 1011, 1015, 1018, 1021, 1022, 1025, 1041, 1042, 1046, 1053], "ablin": 1050, "abnorm": [226, 239, 296, 339, 371, 494, 565, 854, 1011, 1043], "abo7atm": 1047, "abort": [696, 945], "about": [3, 47, 51, 66, 80, 87, 91, 96, 103, 117, 143, 166, 180, 184, 186, 190, 216, 229, 239, 246, 264, 267, 268, 270, 272, 277, 289, 295, 315, 319, 321, 322, 323, 324, 325, 330, 353, 358, 359, 363, 364, 369, 371, 375, 376, 378, 380, 381, 382, 384, 389, 390, 391, 402, 407, 412, 413, 416, 418, 439, 494, 496, 497, 498, 499, 502, 503, 504, 506, 507, 512, 517, 563, 564, 596, 597, 610, 611, 618, 644, 680, 682, 747, 804, 810, 818, 827, 837, 887, 935, 995, 1001, 1002, 1004, 1006, 1008, 1011, 1012, 1015, 1016, 1018, 1020, 1021, 1024, 1028, 1029, 1040, 1041, 1051, 1053], "abov": [44, 63, 64, 65, 73, 80, 100, 103, 137, 140, 141, 147, 150, 158, 168, 169, 187, 188, 199, 212, 214, 218, 223, 243, 246, 247, 264, 270, 276, 287, 295, 312, 315, 316, 320, 322, 326, 344, 352, 353, 358, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 378, 380, 382, 388, 390, 391, 406, 408, 409, 410, 412, 413, 414, 415, 416, 418, 442, 446, 465, 468, 490, 497, 498, 499, 525, 593, 638, 708, 759, 804, 808, 816, 818, 829, 871, 872, 885, 891, 897, 905, 967, 994, 995, 997, 999, 1001, 1002, 1005, 1008, 1010, 1012, 1015, 1019, 1020, 1021, 1025, 1041, 1053], "abraham": [1035, 1036, 1041, 1045], "abrahamowicz": 1015, "absenc": [239, 273, 390, 716, 871, 1004, 1005], "absent": [390, 406, 416, 733, 758, 829], "absgrad": 1046, "absher": 1037, "absolut": [2, 44, 53, 108, 125, 144, 169, 187, 212, 214, 218, 230, 327, 358, 378, 402, 408, 410, 412, 413, 415, 416, 417, 418, 419, 445, 451, 457, 458, 533, 539, 544, 547, 548, 550, 551, 552, 560, 562, 563, 564, 567, 591, 593, 594, 596, 600, 605, 623, 631, 636, 650, 653, 654, 656, 658, 660, 675, 676, 678, 680, 682, 686, 687, 708, 721, 725, 740, 741, 749, 750, 752, 757, 759, 761, 799, 806, 810, 821, 824, 832, 834, 846, 848, 849, 853, 872, 877, 880, 893, 917, 919, 990, 1001, 1002, 1015, 1019, 1021, 1036, 1041, 1046, 1047, 1048, 1049, 1052], "absolute_error": [53, 415, 560, 562, 564, 567, 675, 917, 919, 1048], "absolute_loss": 1048, "absolutelynowarranti": 1043, "absp": 864, "abstain": 536, "abstract": [390, 413, 418, 622, 773, 1035], "abstractmethod": 1045, "absurd": 1012, "abund": 371, "ac": [532, 668, 689, 690, 1001, 1018], "acad": [693, 697, 1002], "academ": [412, 1029], "academi": [112, 855], "acategorypredict": 396, "acc": 146, "acc_clf1": 70, "acc_clf2": 70, "acc_clf3": 70, "acc_histori": 48, "acc_knn": 299, "acceler": [244, 324, 363, 388, 404, 408, 469, 696, 906, 1002, 1024, 1029, 1044, 1048, 1050, 1052], "accent": [348, 591, 592, 594, 1045], "accept": [169, 171, 246, 264, 267, 319, 327, 340, 351, 353, 359, 363, 364, 370, 376, 378, 385, 388, 389, 390, 391, 399, 404, 408, 416, 438, 442, 445, 446, 449, 462, 465, 468, 510, 511, 557, 558, 563, 564, 571, 572, 584, 585, 596, 597, 600, 632, 639, 643, 647, 650, 651, 656, 657, 683, 731, 746, 782, 801, 802, 803, 807, 808, 826, 850, 851, 858, 859, 868, 872, 932, 934, 935, 938, 993, 1001, 1003, 1005, 1008, 1013, 1015, 1020, 1024, 1025, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "accept_large_spars": [934, 935, 1043], "accept_spars": [872, 934, 935, 1042, 1052], "access": [44, 83, 110, 145, 249, 256, 261, 326, 327, 351, 358, 363, 364, 376, 377, 378, 384, 388, 390, 391, 404, 408, 410, 411, 415, 416, 418, 451, 458, 465, 468, 538, 569, 570, 571, 572, 613, 621, 866, 867, 868, 923, 994, 1001, 1004, 1005, 1011, 1012, 1013, 1019, 1020, 1029, 1035, 1037, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1051], "accid": [212, 230], "accident": [1035, 1039, 1044], "accommod": [176, 1043], "accompani": [270, 1043], "accomplish": [246, 406, 548, 1002, 1006, 1008, 1029, 1052], "accord": [2, 56, 62, 64, 73, 83, 110, 141, 146, 169, 172, 212, 230, 243, 319, 344, 352, 359, 376, 378, 388, 389, 390, 391, 402, 405, 406, 408, 410, 412, 413, 415, 416, 418, 438, 451, 453, 457, 461, 463, 466, 470, 506, 518, 519, 520, 527, 532, 534, 537, 538, 540, 542, 552, 555, 556, 563, 564, 565, 568, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 645, 646, 648, 649, 653, 662, 663, 674, 684, 695, 699, 739, 783, 784, 804, 805, 806, 807, 808, 811, 812, 813, 818, 829, 843, 844, 845, 846, 847, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 871, 878, 886, 898, 900, 901, 908, 909, 910, 911, 913, 914, 999, 1001, 1005, 1007, 1008, 1015, 1018, 1019, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "accordingli": [150, 188, 249, 344, 376, 380, 381, 1042, 1043, 1050], "account": [53, 54, 89, 123, 129, 135, 150, 176, 182, 187, 230, 246, 264, 270, 293, 299, 347, 349, 352, 363, 372, 376, 390, 391, 399, 408, 411, 412, 413, 415, 416, 464, 563, 564, 569, 570, 631, 632, 634, 636, 637, 653, 677, 683, 708, 711, 732, 733, 734, 742, 747, 760, 787, 788, 791, 792, 805, 809, 822, 882, 994, 997, 999, 1003, 1005, 1006, 1007, 1008, 1015, 1019, 1021, 1040, 1042, 1043, 1044, 1047, 1048, 1050, 1052, 1053], "acctactagaagtt": 388, "acctcctagaag": 388, "accumul": [48, 84, 142, 202, 380, 382, 408, 416, 1005, 1036, 1043], "accur": [44, 49, 53, 60, 63, 64, 112, 121, 149, 171, 178, 187, 188, 205, 216, 227, 230, 264, 270, 277, 281, 287, 323, 351, 352, 359, 375, 390, 406, 408, 410, 413, 415, 416, 417, 438, 444, 448, 452, 454, 460, 533, 540, 542, 544, 545, 547, 548, 549, 610, 611, 638, 807, 808, 848, 849, 951, 952, 997, 1002, 1005, 1021, 1049], "accuraci": [2, 31, 38, 44, 47, 48, 63, 67, 68, 70, 104, 105, 106, 135, 141, 142, 145, 146, 153, 165, 168, 172, 190, 192, 205, 212, 216, 220, 227, 228, 257, 269, 270, 271, 272, 274, 276, 284, 287, 292, 298, 299, 300, 308, 312, 315, 325, 332, 340, 343, 344, 347, 359, 363, 389, 390, 407, 408, 412, 415, 416, 417, 425, 438, 450, 470, 472, 473, 479, 534, 536, 543, 551, 552, 553, 555, 557, 559, 560, 561, 563, 566, 567, 569, 571, 614, 638, 662, 663, 670, 672, 675, 678, 679, 680, 696, 701, 707, 712, 715, 717, 722, 736, 737, 738, 742, 747, 758, 767, 791, 798, 800, 803, 826, 832, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 850, 855, 857, 858, 865, 903, 904, 908, 910, 913, 916, 918, 924, 951, 952, 994, 999, 1000, 1001, 1002, 1006, 1008, 1009, 1013, 1017, 1019, 1021, 1043, 1044, 1053], "accuracy_histori": 48, "accuracy_multinomi": 205, "accuracy_ovr": 205, "accuracy_scor": [2, 67, 135, 172, 274, 315, 332, 351, 359, 389, 399, 404, 425, 559, 566, 712, 715, 733, 734, 738, 742, 787, 788, 791, 798, 800, 944, 994, 1005, 1036, 1037, 1038, 1047, 1052, 1053], "acf": 144, "achar": [1042, 1043, 1044, 1045], "achiev": [44, 52, 56, 58, 65, 68, 124, 135, 143, 145, 150, 153, 179, 192, 212, 220, 267, 270, 277, 315, 327, 332, 340, 343, 344, 347, 351, 359, 363, 365, 370, 371, 373, 378, 382, 388, 390, 396, 405, 406, 407, 408, 412, 413, 415, 416, 560, 567, 644, 653, 680, 682, 711, 733, 734, 742, 744, 767, 787, 788, 791, 807, 808, 844, 888, 994, 995, 997, 1001, 1005, 1015, 1018, 1020, 1048], "achin": 1029, "achliopta": [243, 901, 902, 1017], "acid": [315, 373], "acknowledg": [375, 612, 1052], "acl": [905, 1018, 1019], "acm": [370, 371, 408, 419, 445, 451, 458, 461, 513, 565, 680, 730, 760, 854, 1005, 1008, 1011, 1017], "acoust": 1005, "acq": 48, "acquaint": 376, "acquir": [54, 272, 1047], "acquisit": [405, 723], "acronym": 380, "across": [0, 2, 15, 44, 53, 89, 95, 101, 116, 127, 141, 160, 187, 202, 207, 233, 265, 267, 270, 283, 284, 290, 310, 315, 344, 377, 378, 385, 390, 402, 406, 408, 412, 415, 416, 417, 420, 438, 441, 451, 453, 455, 458, 461, 463, 470, 473, 475, 489, 492, 494, 497, 499, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 591, 594, 597, 605, 610, 611, 614, 615, 636, 637, 638, 643, 644, 645, 646, 650, 651, 654, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 680, 682, 683, 689, 690, 693, 694, 695, 696, 697, 698, 699, 708, 709, 721, 735, 761, 792, 797, 799, 801, 802, 804, 805, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 853, 857, 864, 865, 866, 873, 877, 878, 885, 886, 888, 889, 897, 900, 901, 903, 904, 908, 909, 910, 913, 916, 917, 951, 952, 975, 978, 994, 1001, 1003, 1005, 1015, 1019, 1021, 1025, 1029, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1053], "act": [340, 376, 389, 414, 415, 717, 733, 734, 742, 787, 788, 791, 883, 887, 1002, 1005, 1008, 1020, 1043], "action": [322, 375, 379, 380, 394, 407, 1015, 1045], "activ": [53, 69, 184, 220, 255, 261, 271, 328, 329, 353, 370, 371, 374, 376, 377, 382, 384, 388, 390, 391, 394, 395, 399, 409, 498, 504, 528, 636, 639, 641, 654, 655, 657, 658, 659, 667, 668, 669, 686, 687, 688, 689, 690, 717, 722, 801, 864, 865, 866, 904, 970, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1018, 1026, 1028, 1046], "active_": [654, 655, 658, 659], "active_features_": 1043, "actual": [44, 53, 65, 81, 94, 108, 117, 141, 150, 187, 192, 202, 212, 216, 220, 257, 266, 273, 277, 353, 358, 359, 363, 365, 373, 376, 378, 381, 382, 388, 389, 390, 406, 408, 413, 415, 416, 417, 433, 511, 517, 518, 529, 537, 540, 542, 549, 564, 565, 648, 649, 652, 662, 663, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 684, 691, 695, 699, 705, 708, 713, 719, 725, 726, 727, 728, 789, 801, 807, 808, 820, 823, 824, 854, 885, 908, 914, 942, 943, 944, 979, 997, 1004, 1005, 1008, 1012, 1013, 1021, 1028, 1042, 1043, 1049, 1050, 1051], "actual_vs_predict": [44, 108, 155, 187, 266, 324, 705], "actuari": 406, "ad": [44, 54, 59, 108, 128, 130, 135, 141, 150, 165, 171, 177, 178, 194, 198, 209, 214, 216, 236, 245, 246, 270, 271, 272, 310, 320, 321, 322, 323, 324, 325, 326, 327, 344, 352, 375, 376, 378, 380, 384, 388, 390, 391, 413, 415, 416, 417, 418, 419, 420, 426, 430, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 506, 507, 512, 514, 516, 524, 525, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 584, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 708, 712, 715, 717, 718, 722, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 738, 742, 743, 744, 745, 746, 747, 750, 757, 758, 761, 765, 770, 771, 773, 779, 781, 782, 786, 787, 788, 789, 791, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 817, 818, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 897, 898, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 932, 934, 935, 941, 945, 946, 947, 951, 952, 957, 960, 961, 962, 963, 964, 967, 970, 974, 979, 985, 991, 993, 994, 998, 1000, 1001, 1002, 1006, 1008, 1009, 1011, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adaboost": [2, 68, 116, 134, 138, 143, 151, 154, 155, 158, 174, 184, 224, 357, 521, 553, 555, 556, 561, 635, 707, 834, 916, 917, 1026, 1027, 1031, 1037], "adaboost_clf": 135, "adaboostclassifi": [2, 68, 137, 143, 399, 415, 556, 561, 563, 943, 1037, 1038, 1041, 1042, 1044, 1045, 1048, 1050, 1051, 1052], "adaboostregressor": [2, 136, 399, 415, 555, 564, 943, 1037, 1038, 1041, 1044, 1045, 1048, 1050, 1051], "adam": [0, 306, 397, 865, 866, 1009, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adamgonzo": 1049, "adamson": 1047, "adanhawth": [1043, 1044], "adapt": [87, 89, 135, 146, 147, 255, 256, 264, 344, 364, 375, 376, 385, 408, 415, 418, 517, 518, 519, 520, 680, 681, 682, 865, 866, 1001, 1007, 1009, 1015, 1019, 1024, 1025, 1043, 1044, 1051, 1052], "adarsh": [1052, 1053], "add": [45, 52, 56, 59, 63, 64, 65, 69, 70, 76, 80, 88, 108, 112, 113, 117, 122, 127, 143, 146, 165, 167, 169, 171, 176, 177, 178, 182, 183, 197, 201, 202, 208, 213, 215, 216, 227, 235, 239, 243, 245, 246, 277, 279, 280, 290, 302, 312, 314, 319, 321, 322, 343, 344, 346, 347, 352, 363, 374, 375, 376, 377, 378, 380, 382, 384, 390, 394, 404, 406, 412, 415, 416, 417, 517, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 605, 631, 632, 634, 636, 662, 663, 698, 701, 825, 848, 849, 905, 941, 961, 962, 994, 995, 1004, 1011, 1015, 1018, 1019, 1025, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "add_2d_scatt": 232, "add_artist": [71, 127, 205, 233, 255, 256, 257, 260, 261], "add_ax": [188, 236, 281], "add_categori": 249, "add_collect": [52, 235, 242], "add_dummy_featur": 2, "add_ind": [155, 183, 631, 632, 634, 995, 1044, 1047, 1051], "add_missing_valu": 183, "add_nois": 177, "add_self_request": [246, 961], "add_subplot": [47, 63, 65, 78, 98, 101, 127, 188, 227, 234, 236, 329, 330, 383], "add_trac": 141, "adddatapointbatch": 290, "addep": 1046, "addison": [593, 734], "addit": [2, 7, 38, 44, 45, 47, 52, 54, 55, 100, 104, 114, 121, 124, 127, 135, 139, 141, 142, 144, 145, 168, 176, 177, 178, 183, 187, 188, 194, 198, 202, 205, 213, 214, 216, 236, 250, 264, 272, 279, 283, 285, 289, 310, 320, 321, 326, 331, 344, 353, 357, 359, 363, 364, 368, 369, 370, 371, 372, 375, 376, 378, 380, 381, 382, 384, 388, 390, 391, 394, 402, 407, 408, 410, 412, 413, 416, 417, 418, 419, 432, 442, 443, 445, 446, 447, 451, 458, 470, 475, 498, 505, 534, 536, 539, 541, 543, 544, 545, 551, 555, 556, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 615, 616, 623, 632, 634, 635, 639, 642, 643, 644, 645, 646, 647, 648, 649, 674, 691, 692, 696, 702, 703, 706, 746, 762, 763, 792, 796, 801, 802, 810, 827, 837, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 890, 900, 901, 908, 909, 945, 952, 994, 999, 1001, 1005, 1006, 1008, 1009, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1031, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "addition": [87, 105, 137, 150, 187, 212, 230, 246, 320, 322, 352, 376, 388, 406, 416, 614, 615, 650, 656, 675, 885, 994, 995, 1005, 1013, 1024, 1041, 1052], "additional_nois": 76, "additive_chi2": [624, 642, 769, 778], "additive_chi2_kernel": [2, 404, 642, 763, 769, 997], "additivechi2sampl": [2, 643, 644, 645, 646, 762, 763, 997, 1049, 1051], "address": [44, 216, 246, 351, 371, 376, 407, 408, 416, 448, 661, 1001, 1002, 1007, 1008, 1009, 1010, 1011, 1015, 1029, 1043], "adelr": 1043, "adequ": [364, 382, 569, 1048], "adeyemi": 1053, "adher": [2, 363, 378, 390, 945, 947, 1035, 1036], "adien": 1051, "adijohar": 1049, "adil": 1050, "adimension": 187, "adithya": 1040, "aditi": 1053, "aditya": [1041, 1043, 1044, 1045, 1049, 1050], "adityadaflapurkar": 1043, "adjac": [408, 413, 453, 463, 588, 589, 639, 695, 699, 958, 1002, 1008], "adjacency_matrix": 408, "adjust": [2, 44, 49, 72, 74, 83, 92, 110, 135, 147, 164, 184, 216, 239, 244, 252, 271, 287, 319, 333, 347, 352, 383, 408, 409, 413, 415, 416, 526, 555, 556, 559, 561, 563, 564, 566, 662, 663, 670, 672, 678, 679, 680, 708, 709, 712, 718, 719, 759, 761, 790, 799, 843, 844, 846, 847, 878, 900, 901, 908, 909, 910, 913, 916, 918, 940, 1004, 1005, 1009, 1015, 1026, 1032, 1035, 1041, 1051], "adjusted_mutual_info_scor": [2, 73, 74, 83, 92, 408, 709, 719, 737, 759, 761, 790, 1005, 1035, 1043, 1047, 1051], "adjusted_rand_index": 709, "adjusted_rand_scor": [2, 73, 74, 83, 92, 352, 408, 708, 719, 737, 761, 790, 1005, 1048], "administr": [394, 395], "admir": [1050, 1051], "admiss": [243, 364], "adopt": [378, 380, 388, 390, 904, 1005, 1019, 1043, 1050, 1052], "adoublet": [1050, 1051], "adpot": 325, "adrian": [1048, 1049, 1050], "adrien": 1035, "adrin": [0, 391, 397, 402, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adrinjalali": [1038, 1047], "adult": [326, 498, 1015], "advanc": [45, 152, 184, 188, 238, 240, 270, 289, 365, 376, 408, 413, 490, 503, 537, 636, 643, 787, 801, 857, 866, 869, 888, 917, 994, 997, 1005, 1008, 1015, 1026, 1029, 1032, 1037], "advani": 1047, "advantag": [44, 45, 75, 89, 91, 121, 126, 148, 212, 213, 239, 256, 271, 289, 323, 327, 359, 390, 406, 412, 413, 416, 418, 442, 446, 461, 536, 592, 653, 678, 679, 767, 836, 837, 838, 868, 869, 908, 909, 910, 911, 912, 913, 914, 994, 997, 1000, 1001, 1002, 1005, 1006, 1008, 1009, 1013, 1015, 1019, 1020, 1021, 1038], "advic": [384, 418, 626, 627], "advik": [1052, 1053], "advis": [53, 213, 246, 359, 376, 408, 416, 438, 650, 656, 658, 664, 666, 676, 691, 997, 1001, 1007, 1009, 1020, 1049], "advoc": 1006, "aeberhard": 373, "aesthet": [310, 1021, 1040], "af": 74, "affan": 1041, "affanv14": 1042, "affect": [47, 63, 112, 150, 178, 186, 187, 216, 236, 249, 250, 273, 280, 315, 325, 359, 363, 364, 365, 372, 376, 390, 393, 406, 408, 411, 412, 414, 416, 419, 421, 445, 451, 458, 474, 476, 480, 551, 552, 571, 703, 716, 792, 804, 805, 807, 808, 809, 818, 822, 823, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 888, 889, 899, 913, 1004, 1008, 1020, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "affili": 371, "affin": [2, 28, 72, 73, 80, 83, 97, 184, 310, 331, 368, 378, 390, 413, 441, 442, 453, 455, 463, 514, 537, 695, 699, 708, 709, 721, 741, 797, 799, 904, 925, 999, 1002, 1005, 1026, 1030, 1031, 1035, 1036, 1039, 1045, 1046, 1048, 1050], "affinity_matrix": [695, 699], "affinity_matrix_": [441, 453, 695], "affinity_propag": [2, 52, 80], "affinitypropag": [2, 74, 80, 323, 408, 1035, 1038, 1039, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "affirm": 44, "afnlp": 1019, "afor": [900, 901], "aforement": [364, 1006], "afraid": 394, "africa": 1015, "afroj": 1052, "aft": 1038, "aftab": 1044, "after": [44, 56, 59, 60, 64, 81, 87, 89, 103, 104, 108, 113, 123, 135, 145, 150, 153, 155, 158, 165, 176, 178, 180, 182, 187, 192, 205, 206, 212, 249, 250, 253, 258, 270, 279, 289, 290, 298, 300, 310, 311, 314, 315, 351, 352, 365, 371, 373, 375, 376, 378, 380, 382, 383, 384, 388, 390, 402, 404, 405, 406, 408, 409, 412, 413, 416, 417, 420, 443, 448, 451, 452, 453, 454, 457, 463, 517, 534, 538, 552, 555, 556, 561, 562, 563, 564, 600, 631, 634, 662, 663, 670, 671, 672, 677, 679, 680, 681, 682, 696, 716, 730, 760, 798, 801, 802, 807, 808, 857, 864, 868, 881, 887, 908, 913, 914, 929, 994, 995, 999, 1001, 1005, 1009, 1010, 1015, 1017, 1019, 1020, 1021, 1025, 1035, 1038, 1042, 1043, 1046, 1047, 1050, 1053], "afterward": [59, 376, 380, 537, 543, 832], "ag": [104, 187, 189, 212, 230, 250, 251, 253, 310, 322, 323, 324, 371, 373, 498, 1029], "again": [44, 59, 101, 105, 147, 177, 187, 236, 271, 359, 380, 385, 390, 391, 408, 409, 410, 415, 416, 473, 569, 570, 638, 651, 655, 657, 659, 665, 667, 669, 696, 994, 1001, 1005, 1019, 1032, 1035, 1043, 1052], "against": [65, 73, 117, 130, 138, 148, 164, 192, 204, 205, 221, 229, 246, 279, 316, 319, 340, 371, 376, 391, 402, 406, 408, 412, 416, 439, 511, 544, 550, 553, 680, 682, 759, 761, 792, 806, 811, 813, 833, 837, 970, 997, 1001, 1005, 1006, 1008, 1020, 1023], "agamemnon": [1042, 1043, 1044, 1045, 1047, 1048], "agarw": [1042, 1043, 1045], "agath": 1049, "agc": 179, "agct": 179, "agent": 1029, "agg": 176, "aggfunc": 281, "agglo": [85, 446], "agglom": [2, 52, 72, 73, 78, 80, 82, 90, 94, 96, 101, 184, 233, 235, 329, 330, 408, 442, 446, 504, 695, 782, 861, 1026, 1038], "agglomer": [2, 45, 69, 72, 84, 165, 167, 184, 197, 211, 248, 294, 329, 330, 368, 408, 416, 446, 504, 603, 609, 649, 804, 809, 868, 1026, 1031], "agglomerativeclust": [2, 75, 76, 77, 80, 82, 86, 90, 96, 101, 390, 408, 441, 443, 446, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052], "aggreg": [94, 139, 230, 273, 279, 284, 323, 325, 408, 415, 417, 536, 557, 558, 597, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 1006, 1008, 1015, 1051], "aggress": [2, 48, 219, 670, 671, 807, 808, 1027, 1031, 1036], "aggressive_elimin": [807, 808, 994], "agnost": [1004, 1013, 1053], "ago": [52, 380, 1025], "agraw": [1038, 1043, 1049, 1050], "agre": [26, 164, 384, 391, 408, 790], "agreement": [0, 2, 408, 708, 720, 759, 761, 799, 1005], "agricultur": 1001, "aguiar": 417, "agundez": 1043, "ahead": 892, "ahmadi": 1046, "ahmadjubair33": 1049, "ahmedbgh": [1050, 1051], "ahn": 1047, "ahuja": [1042, 1049, 1050], "ai": 412, "ai8rahim": 1038, "aic": [2, 160, 184, 193, 199, 200, 201, 207, 220, 260, 503, 655, 657, 658, 659, 660, 802, 869, 888, 994, 1026, 1035, 1042, 1048, 1049], "aic_criterion": 200, "aid": [267, 408, 796, 797, 1002, 1029, 1035, 1047], "aidan": 1043, "aidar": 1049, "aig": 52, "aiko": 1050, "aim": [53, 59, 113, 150, 183, 216, 264, 298, 331, 344, 365, 371, 374, 376, 390, 402, 408, 410, 416, 449, 1001, 1005, 1008, 1015, 1020, 1024, 1049], "air": [176, 768], "airport": 768, "airspe": 376, "aisha": 1053, "aishgrt1": 1043, "aishwarya": 1043, "aishwaryark": 1042, "aistat": 1018, "aivision2020": 1042, "aj": [496, 1049], "ak": [406, 1049, 1050], "aka": [2, 46, 305, 351, 388, 416, 453, 538, 540, 542, 546, 549, 584, 585, 619, 626, 655, 656, 658, 659, 660, 662, 663, 666, 670, 671, 672, 674, 680, 681, 682, 745, 875, 879, 881, 1001, 1009, 1019, 1037, 1049], "akai": 1048, "akaik": [200, 202, 260, 660, 802, 994, 1001], "akash": [1043, 1053], "aki": [1049, 1050, 1051], "akihiro": 1053, "akin": [44, 213, 390], "akinkunl": 1045, "akitti": 1040, "akshai": [1039, 1042, 1047], "akshay0724": 1042, "akshayah3": 1039, "akshita": 1050, "al": [0, 2, 51, 110, 111, 135, 149, 200, 303, 371, 373, 405, 408, 410, 413, 415, 416, 417, 452, 500, 521, 522, 530, 537, 543, 546, 565, 686, 687, 723, 724, 843, 845, 865, 866, 901, 951, 952, 1001, 1002, 1005, 1011, 1015, 1017, 1020, 1021, 1043, 1048, 1051, 1052], "ala": [1050, 1051], "aladago": 1045, "alam": [1050, 1051], "alan": [1042, 1043, 1046, 1048, 1049, 1053], "alastuei": 1038, "albeit": 63, "albert": [0, 366, 1042, 1043, 1044, 1047, 1048], "alberto": [1044, 1048, 1049, 1053], "alcalin": 373, "alcohol": [315, 373], "alcorn": 1043, "aldrian": 1039, "aleator": 53, "alec": 1045, "alejandro": [1036, 1041, 1052], "alek": [1048, 1049], "aleksandr": 1042, "aleksandra": 1046, "alemagnani": 1038, "alert": 1042, "alessandro": [1045, 1047, 1050], "alessia": 1048, "alex": [402, 416, 1020, 1035, 1038, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "alexand": [0, 398, 408, 413, 537, 874, 1037, 1038, 1039, 1041, 1042, 1043, 1047, 1048, 1049, 1052], "alexandercbooth": 1042, "alexandr": [0, 121, 391, 397, 398, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "alexandracraciun": 1047, "alexandru": 440, "alexanmv": 1049, "alexei": 1040, "alexfield": 1041, "alexgoryainov": 1045, "alexi": [1035, 1038, 1039, 1042, 1052, 1053], "alexl": [1051, 1052], "alexqiao": 1053, "alexryndin": 1043, "alexshack": [1045, 1046, 1047], "alfano": 1042, "alfaro": [0, 366, 1046, 1047, 1048, 1049, 1050], "alfr": 0, "algebra": [364, 374, 379, 388, 413, 416, 463, 874, 1015], "algesheim": 408, "algo": [79, 130], "algo_param": [80, 96], "algorithm": [2, 6, 8, 9, 11, 18, 29, 31, 33, 34, 39, 40, 42, 49, 54, 56, 57, 66, 72, 73, 78, 79, 81, 84, 90, 91, 92, 93, 94, 95, 96, 100, 101, 103, 111, 112, 116, 121, 123, 135, 136, 141, 151, 184, 192, 201, 202, 215, 226, 228, 234, 236, 238, 242, 243, 249, 256, 257, 258, 261, 267, 270, 279, 290, 296, 297, 299, 303, 310, 312, 315, 319, 320, 321, 324, 326, 331, 333, 339, 351, 352, 353, 359, 363, 365, 369, 370, 371, 372, 373, 376, 377, 378, 379, 384, 385, 389, 390, 393, 404, 405, 408, 410, 411, 412, 413, 415, 416, 418, 419, 420, 421, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 470, 475, 476, 479, 483, 484, 485, 489, 505, 513, 514, 515, 516, 517, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 547, 548, 549, 550, 555, 556, 557, 558, 561, 562, 565, 594, 606, 607, 614, 615, 639, 641, 643, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 708, 709, 712, 721, 723, 739, 741, 747, 778, 782, 783, 797, 799, 801, 802, 836, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 864, 869, 873, 875, 888, 892, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 934, 951, 952, 954, 969, 973, 979, 995, 997, 1000, 1002, 1003, 1004, 1005, 1007, 1010, 1011, 1015, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "algorithm_nam": 79, "ali": [1040, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "alia": [53, 246, 377, 384, 390, 399, 438, 444, 445, 448, 450, 466, 483, 484, 485, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 614, 615, 621, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 978, 1011, 1025, 1035, 1049], "alias": [81, 82, 246, 374, 376, 379, 399, 600, 1035, 1039, 1049], "aliased_sample_weight": 246, "align": [71, 148, 150, 183, 232, 255, 281, 353, 390, 693, 697, 997, 1008, 1019, 1030, 1031, 1051, 1052], "alihan": 1048, "alik": [413, 1003], "alin": 1048, "alison": 1042, "all": [0, 2, 4, 31, 44, 45, 47, 48, 51, 54, 58, 62, 63, 65, 71, 74, 75, 76, 78, 79, 86, 87, 88, 89, 94, 98, 108, 114, 121, 123, 124, 133, 140, 141, 143, 147, 150, 157, 158, 169, 176, 177, 179, 184, 186, 187, 188, 190, 194, 198, 199, 205, 206, 207, 212, 213, 214, 215, 216, 221, 223, 227, 229, 230, 232, 233, 239, 245, 246, 249, 250, 253, 256, 258, 260, 264, 268, 271, 272, 273, 274, 276, 277, 278, 280, 282, 283, 287, 290, 293, 295, 307, 310, 311, 315, 319, 320, 321, 322, 324, 325, 326, 327, 329, 331, 332, 333, 337, 340, 344, 345, 347, 348, 351, 352, 353, 356, 358, 359, 363, 364, 365, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 384, 385, 388, 389, 390, 391, 395, 399, 402, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 427, 428, 430, 431, 432, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 505, 510, 511, 517, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 709, 713, 717, 718, 719, 720, 721, 722, 724, 725, 727, 730, 732, 733, 734, 736, 737, 739, 740, 741, 742, 746, 749, 750, 752, 754, 755, 757, 760, 765, 773, 778, 782, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 806, 807, 808, 810, 811, 813, 814, 816, 818, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 930, 932, 934, 935, 936, 940, 942, 943, 944, 946, 958, 961, 967, 979, 988, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "all_class": 48, "all_displai": [2, 385, 1050], "all_estim": [2, 385, 1045, 1046, 1050], "all_funct": [2, 385, 1050], "all_handl": 205, "all_label": [205, 905], "all_model": 147, "all_or_ani": [988, 1045], "all_scor": 737, "all_split": [44, 53], "all_uppercas": 416, "allan": [406, 1047], "allclos": [122, 152, 1017], "allefeld": 1048, "allen": [1038, 1040, 1042, 1045], "allend": [1046, 1048], "allevi": [91, 150, 194, 198, 408, 1007], "alloc": [2, 43, 46, 63, 95, 184, 282, 321, 372, 376, 377, 408, 416, 444, 448, 460, 489, 538, 540, 542, 587, 591, 594, 650, 656, 664, 666, 807, 808, 810, 827, 832, 835, 994, 1015, 1024, 1026, 1030, 1031, 1039, 1040, 1045, 1046, 1052], "allow": [26, 44, 59, 90, 92, 107, 108, 125, 126, 127, 138, 139, 145, 153, 171, 176, 177, 178, 180, 188, 201, 205, 207, 212, 216, 230, 233, 240, 243, 250, 252, 253, 255, 264, 270, 283, 284, 289, 319, 320, 321, 322, 324, 327, 344, 345, 351, 358, 359, 363, 370, 371, 376, 377, 378, 380, 383, 384, 385, 388, 390, 391, 399, 402, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 438, 444, 445, 447, 448, 450, 465, 466, 467, 468, 483, 484, 485, 498, 525, 526, 535, 536, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 592, 593, 596, 597, 600, 606, 614, 615, 619, 631, 632, 634, 638, 639, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 694, 696, 703, 746, 766, 769, 778, 782, 785, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 815, 818, 822, 825, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 858, 859, 863, 865, 866, 868, 870, 871, 873, 874, 875, 880, 887, 888, 892, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 932, 934, 935, 947, 968, 994, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "allow_nan": [925, 933, 935, 1051], "allow_nd": [934, 935], "allow_non": 715, "allow_single_clust": [80, 447], "allow_unlabel": [119, 247, 525], "allowed_extens": 505, "allwein": 287, "almeida": [1036, 1037, 1048], "almeidayoel": 1049, "almer": 1042, "almost": [44, 71, 141, 146, 214, 220, 246, 249, 264, 285, 315, 327, 332, 359, 369, 371, 380, 382, 388, 389, 390, 399, 408, 412, 413, 471, 472, 473, 474, 476, 477, 478, 801, 994, 1000, 1001, 1004, 1005, 1020, 1043, 1048], "almubarak": [1048, 1049], "alon": [187, 216, 276, 340, 390, 406, 652, 673, 684, 1042, 1044], "along": [2, 52, 54, 90, 93, 100, 117, 142, 147, 150, 176, 201, 212, 244, 246, 274, 319, 352, 353, 359, 371, 376, 380, 384, 385, 390, 394, 399, 402, 405, 413, 415, 416, 417, 420, 535, 552, 590, 615, 616, 634, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 680, 682, 685, 686, 687, 688, 689, 690, 783, 784, 796, 804, 818, 877, 878, 881, 882, 885, 886, 887, 888, 893, 894, 895, 897, 898, 899, 930, 954, 979, 985, 994, 1001, 1008, 1015, 1018, 1029, 1035, 1040, 1041, 1043, 1047, 1048], "alongsid": [376, 382, 390, 394, 417, 829, 830, 831, 832, 833, 835, 1005, 1012, 1024, 1025], "alonso": [1046, 1048], "aloqe": 1053, "alpaydin": 373, "alpha": [2, 44, 45, 47, 48, 50, 52, 53, 54, 56, 62, 64, 68, 71, 73, 76, 78, 86, 90, 94, 99, 108, 114, 117, 121, 123, 124, 126, 129, 130, 135, 137, 138, 143, 147, 150, 151, 152, 154, 155, 156, 169, 171, 174, 176, 177, 178, 179, 180, 182, 183, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 207, 208, 210, 212, 213, 214, 216, 217, 221, 224, 225, 230, 232, 233, 236, 244, 245, 252, 255, 270, 271, 272, 273, 274, 277, 278, 280, 282, 283, 289, 290, 293, 295, 298, 300, 305, 307, 310, 311, 312, 313, 315, 317, 320, 322, 323, 326, 331, 333, 337, 338, 341, 342, 344, 345, 347, 348, 349, 351, 363, 371, 378, 382, 388, 410, 411, 413, 415, 417, 418, 420, 447, 472, 473, 479, 529, 533, 535, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 562, 598, 599, 601, 615, 617, 619, 620, 627, 635, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 691, 727, 752, 843, 844, 845, 847, 865, 866, 904, 916, 917, 918, 919, 994, 1001, 1005, 1007, 1009, 1013, 1018, 1019, 1020, 1021, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1053], "alpha_": [44, 114, 160, 187, 195, 200, 202, 473, 615, 648, 649, 651, 655, 657, 659, 660, 665, 667, 677, 679, 1001, 1021, 1035, 1042], "alpha_1": [648, 649, 1001], "alpha_2": [648, 649, 1001], "alpha_a": 202, "alpha_b": 202, "alpha_bound": [180, 627], "alpha_h": [55, 413, 540, 542, 549, 1048], "alpha_i": [1007, 1020], "alpha_init": [195, 649, 1001, 1045], "alpha_max": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688], "alpha_min": [650, 651, 654, 656, 657, 658, 660, 664, 665, 666, 667, 685, 686, 687, 688], "alpha_per_target": [677, 1047], "alpha_w": [55, 413, 540, 542, 549, 1048], "alphabet": [105, 390, 726, 745], "alphanumer": [390, 591, 592, 594], "alphas_": [200, 202, 651, 654, 655, 657, 658, 659, 660, 665, 667, 686, 687, 1035, 1038, 1048], "alphas_enet": 201, "alphas_lar": 201, "alphas_lasso": 201, "alphas_positive_enet": 201, "alphas_positive_lar": 201, "alphas_positive_lasso": 201, "alphavantag": 52, "alphonsu": 1045, "alreadi": [2, 44, 46, 50, 89, 92, 126, 127, 135, 150, 155, 169, 187, 240, 247, 249, 252, 264, 271, 277, 290, 322, 325, 376, 377, 378, 381, 388, 390, 406, 407, 410, 412, 414, 415, 420, 438, 493, 501, 525, 535, 569, 570, 638, 650, 653, 668, 669, 670, 671, 672, 678, 680, 681, 682, 689, 690, 772, 782, 843, 863, 871, 877, 878, 880, 885, 905, 908, 909, 937, 963, 994, 997, 1011, 1015, 1016, 1025, 1032, 1036, 1040, 1043, 1047, 1048, 1049, 1050], "alsadi": 1043, "alsaedi": 1048, "alsalhi": [0, 1038, 1039], "alsawadi": 1048, "also": [0, 2, 26, 31, 44, 47, 51, 53, 56, 58, 59, 62, 63, 64, 65, 69, 81, 87, 91, 92, 94, 98, 103, 104, 110, 112, 116, 117, 121, 128, 130, 135, 138, 141, 144, 145, 146, 147, 148, 150, 153, 155, 165, 166, 167, 169, 171, 173, 176, 183, 184, 187, 188, 189, 190, 192, 195, 196, 202, 205, 206, 212, 213, 214, 216, 217, 221, 229, 230, 232, 242, 244, 246, 249, 250, 261, 264, 268, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 283, 284, 287, 289, 290, 298, 301, 302, 303, 305, 310, 311, 312, 314, 315, 319, 320, 321, 322, 326, 327, 334, 336, 337, 338, 340, 342, 344, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 382, 384, 385, 388, 389, 390, 391, 394, 396, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 438, 439, 440, 442, 443, 446, 447, 448, 449, 451, 453, 455, 463, 464, 466, 468, 483, 485, 494, 498, 500, 505, 510, 534, 535, 537, 538, 543, 548, 551, 553, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 626, 636, 637, 639, 647, 648, 649, 650, 651, 654, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 668, 676, 680, 682, 685, 686, 688, 691, 695, 698, 699, 703, 714, 717, 727, 733, 734, 742, 747, 767, 783, 784, 787, 788, 791, 801, 802, 804, 806, 807, 808, 818, 821, 824, 830, 831, 832, 833, 834, 835, 837, 847, 850, 851, 852, 854, 855, 856, 858, 859, 860, 864, 865, 866, 868, 870, 871, 876, 877, 881, 885, 888, 893, 897, 910, 913, 916, 917, 918, 919, 934, 945, 952, 954, 961, 968, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "alt": [58, 271, 333, 351, 352, 353, 371, 384, 489], "altai": 1045, "alter": [63, 183, 378, 390, 733, 734, 742, 787, 788, 791, 1040, 1044, 1047], "altern": [44, 64, 104, 117, 142, 148, 150, 155, 189, 198, 212, 230, 240, 258, 261, 264, 279, 319, 344, 352, 353, 359, 371, 374, 376, 380, 382, 388, 390, 391, 394, 402, 403, 405, 406, 408, 409, 410, 412, 413, 415, 416, 418, 442, 443, 446, 447, 448, 453, 459, 464, 501, 540, 542, 543, 549, 555, 556, 559, 560, 561, 562, 566, 567, 568, 585, 591, 592, 594, 621, 624, 647, 696, 710, 712, 775, 778, 782, 785, 806, 837, 872, 878, 881, 894, 901, 903, 916, 917, 918, 919, 971, 999, 1001, 1002, 1004, 1005, 1008, 1009, 1013, 1015, 1017, 1018, 1020, 1021, 1025, 1031, 1040, 1042, 1048, 1049, 1053], "alternate_sign": [48, 416, 585, 592, 1042], "although": [44, 49, 63, 142, 155, 186, 230, 239, 257, 289, 344, 359, 365, 378, 380, 384, 390, 408, 409, 413, 416, 498, 879, 1004, 1006, 1007, 1008, 1011, 1021, 1035, 1043, 1050], "altman": [632, 995], "altogeth": [144, 382, 1043], "alva": 1045, "alvaro": [1041, 1043], "alvin": 1043, "alwai": [141, 144, 147, 187, 194, 212, 230, 237, 243, 264, 273, 276, 280, 317, 337, 344, 347, 352, 359, 363, 364, 370, 374, 376, 377, 378, 382, 384, 389, 390, 394, 402, 406, 408, 409, 412, 415, 416, 417, 418, 425, 431, 444, 450, 465, 466, 468, 470, 483, 484, 485, 489, 498, 510, 511, 546, 551, 553, 554, 556, 558, 560, 561, 562, 563, 564, 566, 567, 570, 572, 584, 591, 592, 594, 597, 615, 631, 632, 634, 636, 637, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 676, 677, 680, 682, 683, 699, 709, 713, 719, 725, 726, 727, 728, 736, 738, 739, 743, 786, 789, 790, 801, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 841, 842, 851, 852, 859, 860, 866, 873, 881, 886, 888, 891, 893, 894, 895, 896, 897, 898, 899, 901, 909, 910, 911, 913, 914, 916, 917, 919, 953, 963, 964, 994, 995, 997, 999, 1001, 1004, 1005, 1008, 1011, 1013, 1017, 1018, 1020, 1021, 1029, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "always_accept_polici": 264, "always_reject_polici": 264, "alyssa": [1038, 1042], "alyssaq": 1041, "am": [108, 112, 155, 188, 381, 410, 475, 495, 1042], "amai": 1051, "aman": [1041, 1042, 1043, 1049, 1050], "amanda": [1043, 1046, 1047, 1048, 1049], "amar": [1049, 1050, 1051, 1053], "amax": 110, "amazon": 52, "amber": 390, "ambient": 236, "ambigu": [271, 381, 416, 574, 716, 952, 1008, 1044, 1046, 1048], "ambival": 94, "ambrosio": 1042, "ambroz": [1045, 1046], "amelia": 995, "amen": [382, 388, 418, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 994], "america": [51, 52, 112, 303, 371, 855, 1015], "american": [51, 52, 113, 371, 408, 410, 414, 415, 416, 470, 475, 735, 888], "amerr": 1053, "ames_h": 249, "amg": [81, 100, 408, 453, 463, 695, 699, 1045, 1049, 1050], "amherst": 371, "ami": [73, 83, 92, 408, 708], "amicel": [1035, 1038], "amin": 110, "aminaka": 1039, "amit": [1035, 1049, 1050], "amlan": 1041, "amo": 1038, "amol": 1048, "among": [2, 65, 127, 179, 188, 190, 192, 212, 260, 277, 289, 358, 365, 371, 378, 390, 391, 406, 411, 448, 450, 514, 521, 798, 833, 851, 856, 858, 910, 913, 916, 917, 918, 919, 994, 997, 1005, 1006, 1012, 1015, 1020, 1021, 1035, 1041, 1042, 1045, 1052], "amongst": [52, 1021], "amor": [0, 387, 1049, 1050, 1051, 1052, 1053], "amormachin": 1038, "amort": 1008, "amount": [38, 39, 48, 52, 87, 100, 110, 113, 121, 125, 136, 138, 177, 187, 198, 216, 230, 244, 264, 283, 321, 327, 329, 332, 334, 340, 347, 353, 363, 364, 365, 378, 388, 408, 410, 413, 415, 416, 417, 444, 455, 470, 540, 541, 543, 545, 565, 599, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 669, 685, 688, 696, 807, 808, 848, 849, 854, 889, 904, 905, 918, 919, 994, 1000, 1001, 1004, 1007, 1009, 1015, 1017, 1018, 1019, 1020, 1048, 1052], "amount_fraud": 264, "amount_iter": 332, "amount_label": 332, "amount_test": 264, "amount_train": 264, "amourav": 1044, "amplitud": [147, 176, 178, 207, 1001], "amplitude_nois": 76, "amput": 1025, "amrcod": 1049, "amsterdam": [402, 876, 1016], "amy12xx": 1047, "amzn": 52, "an": [0, 2, 26, 30, 38, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 63, 64, 65, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 104, 105, 106, 108, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 154, 155, 158, 165, 169, 171, 172, 173, 176, 177, 178, 180, 181, 182, 184, 186, 187, 188, 189, 192, 193, 194, 195, 198, 200, 201, 208, 209, 212, 213, 214, 216, 217, 219, 220, 226, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 242, 243, 244, 245, 246, 247, 249, 253, 255, 256, 258, 260, 261, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 289, 290, 293, 296, 297, 298, 301, 303, 310, 315, 316, 317, 320, 321, 322, 324, 325, 326, 327, 330, 334, 336, 337, 339, 340, 342, 343, 344, 351, 352, 353, 355, 358, 359, 363, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 389, 390, 391, 393, 394, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 429, 432, 433, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 613, 614, 615, 616, 623, 626, 627, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 713, 715, 716, 722, 724, 725, 731, 733, 734, 738, 739, 741, 746, 747, 749, 750, 752, 754, 755, 757, 760, 762, 763, 767, 768, 770, 771, 772, 773, 774, 777, 779, 780, 781, 782, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 931, 932, 934, 935, 937, 938, 941, 945, 946, 947, 948, 950, 951, 952, 954, 956, 957, 960, 961, 962, 963, 964, 965, 967, 968, 969, 974, 975, 978, 979, 985, 988, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "ana": [1046, 1048, 1053], "anaconda": [0, 364, 374, 380], "anak": 1047, "analog": [44, 149, 382, 415, 1005, 1006, 1020, 1044], "analogi": [1004, 1005], "analys": [232, 358, 413, 807, 808, 1002, 1024, 1029], "analysen": 451, "analysi": [2, 12, 28, 45, 47, 49, 50, 56, 59, 63, 66, 72, 91, 97, 99, 110, 111, 112, 113, 114, 116, 119, 120, 122, 123, 125, 126, 129, 130, 144, 161, 183, 184, 187, 202, 221, 233, 254, 256, 257, 260, 261, 263, 264, 267, 270, 271, 275, 276, 281, 290, 291, 292, 293, 301, 302, 310, 315, 347, 352, 356, 368, 371, 373, 376, 378, 391, 405, 408, 410, 415, 416, 420, 421, 440, 448, 449, 474, 476, 477, 483, 484, 486, 504, 506, 514, 517, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 557, 558, 635, 642, 692, 694, 695, 696, 697, 714, 723, 729, 730, 760, 792, 793, 796, 797, 801, 804, 830, 834, 850, 857, 868, 869, 874, 884, 888, 896, 923, 951, 952, 995, 1001, 1002, 1004, 1005, 1015, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1035, 1036, 1037, 1039, 1044], "analyst": 871, "analyt": [126, 413, 418, 534, 624, 712, 995, 999, 1005, 1023, 1029], "analyz": [44, 47, 56, 198, 272, 279, 324, 351, 353, 381, 382, 408, 416, 505, 591, 592, 594, 792, 1002, 1005, 1012, 1013, 1021, 1035, 1044], "anam": 1052, "anand": [1043, 1047], "ananiad": 1019, "anantharam": 1049, "anavelyz": 1048, "ana\u00ebl": 1045, "anbari": 530, "anchor": 281, "ander": [1039, 1045], "andersen": [747, 1049], "anderson": [51, 303, 371, 500, 1041, 1047, 1053], "andi": [1035, 1042], "ando": 1040, "andr": [1042, 1049], "andrea": [0, 391, 397, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "andreh7": 1042, "andrei": [1050, 1052, 1053], "andrew": [408, 463, 695, 699, 721, 741, 799, 883, 1009, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "andrewww": 1043, "andrii": 1049, "andriushchenko": [1041, 1042], "androutsopoulo": [843, 1007], "andrzej": [540, 542, 549], "andr\u00e1": [1048, 1049, 1050, 1051], "andr\u00e9": [1048, 1049, 1051], "ands": 879, "andyscanzio": 1052, "ang": 1042, "angel": [0, 398], "angela": [1045, 1046, 1050], "angelaambroz": 1046, "angermuel": [1039, 1040], "angl": [2, 54, 71, 124, 255, 256, 257, 260, 261, 373, 413, 533, 539, 541, 544, 545, 547, 548, 550, 654, 655, 656, 657, 658, 659, 660, 667, 668, 669, 682, 686, 687, 688, 689, 690, 696, 1002, 1003, 1027, 1031, 1035], "angu": [1042, 1043, 1049], "angular": [414, 696, 768], "anh": [540, 542, 549], "ani": [2, 26, 38, 44, 48, 49, 53, 54, 58, 80, 81, 89, 91, 101, 152, 164, 169, 177, 178, 186, 187, 188, 189, 190, 202, 212, 216, 230, 239, 242, 243, 246, 256, 260, 261, 264, 270, 271, 273, 276, 279, 287, 303, 310, 311, 314, 319, 321, 322, 324, 327, 340, 344, 353, 359, 363, 364, 365, 370, 371, 373, 374, 376, 378, 380, 381, 382, 384, 389, 390, 391, 394, 396, 399, 402, 404, 405, 406, 408, 409, 412, 413, 414, 415, 416, 417, 433, 441, 442, 447, 449, 450, 451, 453, 455, 457, 458, 462, 465, 468, 489, 490, 510, 511, 525, 536, 539, 541, 548, 553, 559, 560, 561, 562, 566, 567, 568, 569, 570, 571, 572, 582, 583, 585, 591, 592, 594, 596, 606, 614, 615, 624, 631, 636, 637, 649, 652, 662, 663, 670, 671, 672, 673, 680, 681, 682, 683, 684, 696, 700, 703, 704, 708, 720, 721, 723, 728, 740, 741, 756, 759, 761, 778, 782, 783, 784, 785, 796, 797, 799, 804, 807, 808, 816, 817, 837, 840, 848, 849, 854, 858, 867, 868, 872, 873, 877, 879, 881, 882, 889, 898, 899, 902, 905, 908, 909, 916, 917, 918, 919, 920, 922, 930, 934, 935, 945, 974, 988, 994, 995, 997, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1028, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "aniket": [1050, 1052], "anil": [408, 453, 463], "anim": 416, "anirban": 416, "aniruddha": 1043, "anish": [1040, 1041], "anisha": 1045, "aniso": [80, 96], "anisotrop": [91, 173, 418, 621, 623, 626], "anisotropicli": [80, 96], "anjirbag": 1043, "ankan": 1040, "ankerst": [408, 451, 458], "ankit": [1038, 1045, 1047, 1049], "ankit810": 1046, "ankita": 1043, "ankur": [1040, 1051], "ann": [1035, 1047, 1049], "anna": 1043, "annaayzenshtat": 1043, "annal": [198, 200, 373, 415, 475, 518, 519, 520, 561, 562, 660, 1001], "annau": 1048, "annegnx": 1051, "anno": [696, 1002], "annoi": 364, "annot": [2, 44, 49, 64, 157, 167, 192, 233, 274, 277, 351, 376, 377, 378, 408, 720, 922, 1005, 1021, 1044], "annotationbbox": 233, "announc": [0, 319, 320, 321, 322, 323, 324, 325, 326, 327, 380], "annual": [373, 408, 730, 760, 905, 1005, 1018], "anomali": [14, 49, 112, 151, 184, 226, 238, 249, 296, 297, 371, 470, 514, 524, 565, 643, 681, 854, 869, 912, 1011, 1024, 1026, 1041, 1042], "anomaly_algorithm": 239, "anomaly_frac": 249, "anoth": [44, 73, 121, 126, 135, 145, 149, 169, 171, 179, 183, 187, 202, 216, 220, 237, 239, 246, 250, 256, 264, 270, 272, 273, 276, 280, 284, 300, 353, 355, 359, 363, 365, 370, 371, 374, 376, 378, 382, 388, 390, 402, 405, 408, 412, 413, 415, 416, 417, 419, 443, 445, 453, 456, 463, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 510, 540, 542, 549, 677, 680, 696, 713, 723, 810, 826, 827, 867, 868, 889, 994, 995, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1015, 1019, 1020, 1044, 1045, 1052], "anova": [2, 50, 88, 107, 163, 165, 168, 169, 184, 335, 409, 446, 506, 517, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 717, 830, 834, 868, 869, 888, 908, 913, 1020, 1026], "anova__percentil": [88, 343], "anova_filt": 166, "anova_svm": 166, "ansam": 1051, "answer": [160, 186, 270, 376, 388, 402, 407, 730, 760, 1005, 1029], "ant": [722, 758, 1005], "anthoni": [1040, 1042, 1043], "anthony22": [1050, 1051], "anti": [198, 359, 609, 843, 1007], "anti_alias": [81, 82], "anticip": 53, "antoin": [1035, 1037, 1038, 1039, 1042], "antoni": [1039, 1041, 1047, 1050], "antonin": 1042, "antonio": [1043, 1045], "anubhav": 1043, "anuja": 1045, "anulekh": 1050, "anupam": [902, 1017, 1050], "any_method": 964, "anymor": [150, 189, 212, 272, 319, 320, 340, 359, 380, 409, 428, 674, 1041, 1044, 1047, 1048, 1049, 1051, 1052], "anyon": [376, 391, 407, 1028, 1029], "anyth": [353, 382, 390, 399, 409, 412, 964, 968, 1049], "anywai": [49, 378, 669, 689, 690], "anywher": 311, "anz": 1036, "aoif": [712, 1005], "ap": [2, 277, 711, 712, 1005], "apart": [187, 322, 340, 388, 390, 399, 409, 411, 417, 729, 1020, 1029, 1043], "api": [0, 52, 84, 90, 132, 140, 184, 238, 240, 246, 250, 251, 267, 272, 279, 280, 290, 326, 327, 352, 353, 365, 369, 370, 376, 379, 380, 385, 386, 388, 389, 391, 394, 402, 407, 413, 415, 416, 418, 422, 425, 426, 427, 430, 432, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 498, 506, 510, 512, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 565, 566, 568, 569, 570, 571, 572, 582, 583, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 662, 675, 681, 692, 693, 694, 695, 696, 706, 801, 802, 807, 808, 810, 827, 834, 852, 854, 856, 857, 860, 864, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 906, 912, 913, 927, 945, 947, 970, 988, 994, 1003, 1004, 1005, 1008, 1015, 1019, 1024, 1025, 1026, 1029, 1031, 1032, 1033, 1034, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "api_refer": 376, "apk": 394, "apostolo": 1050, "appar": [116, 1007, 1029], "appdata": 394, "appeal": 391, "appear": [0, 48, 81, 138, 187, 190, 265, 267, 268, 296, 297, 305, 307, 311, 330, 344, 351, 352, 353, 371, 374, 376, 381, 390, 410, 413, 489, 490, 557, 569, 570, 582, 614, 631, 632, 634, 701, 704, 706, 716, 720, 722, 786, 793, 805, 822, 843, 844, 845, 846, 847, 910, 913, 954, 1001, 1007, 1011, 1035, 1043, 1047, 1048], "append": [47, 48, 49, 52, 53, 56, 63, 70, 73, 76, 80, 84, 95, 104, 128, 138, 139, 141, 145, 147, 150, 183, 190, 206, 216, 217, 219, 220, 227, 230, 244, 245, 270, 273, 279, 280, 305, 306, 316, 332, 340, 343, 351, 352, 353, 355, 358, 382, 390, 409, 416, 662, 663, 908, 909, 915, 941, 1015], "appendix": [649, 680, 1001, 1015], "appl": [52, 363, 374, 388, 1006], "appli": [2, 33, 49, 55, 58, 63, 65, 69, 76, 80, 81, 82, 89, 90, 92, 96, 104, 108, 117, 121, 122, 127, 129, 131, 140, 141, 145, 147, 165, 171, 187, 189, 198, 202, 205, 216, 217, 226, 232, 233, 234, 239, 244, 246, 270, 271, 273, 282, 283, 284, 289, 299, 310, 314, 315, 320, 340, 344, 353, 358, 359, 363, 368, 376, 378, 380, 384, 388, 389, 390, 399, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 441, 447, 453, 463, 465, 466, 468, 470, 475, 483, 484, 485, 486, 510, 511, 518, 519, 520, 526, 533, 534, 535, 536, 537, 539, 541, 543, 544, 545, 550, 551, 552, 555, 556, 559, 560, 561, 562, 566, 567, 568, 591, 592, 593, 594, 631, 636, 637, 642, 643, 645, 646, 662, 663, 672, 680, 681, 682, 695, 703, 705, 711, 715, 730, 760, 762, 763, 785, 792, 796, 797, 804, 818, 834, 837, 843, 844, 845, 846, 847, 855, 857, 867, 868, 877, 884, 885, 888, 893, 894, 896, 897, 898, 899, 904, 915, 916, 917, 918, 919, 929, 934, 940, 943, 951, 952, 976, 995, 997, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1029, 1036, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049], "applic": [43, 45, 58, 83, 89, 112, 184, 192, 212, 229, 234, 263, 264, 273, 310, 327, 363, 365, 371, 373, 376, 382, 385, 388, 390, 406, 407, 408, 412, 413, 414, 415, 418, 420, 445, 447, 453, 498, 534, 535, 536, 555, 556, 633, 692, 693, 694, 698, 716, 733, 734, 742, 787, 788, 791, 834, 928, 994, 1001, 1002, 1003, 1004, 1005, 1009, 1011, 1017, 1021, 1024, 1025, 1026, 1028, 1029, 1035, 1036, 1041, 1043, 1046], "applical": 378, "apply_along_axi": 308, "appr": 623, "appreci": [0, 376, 388], "approach": [45, 48, 92, 97, 100, 125, 169, 171, 182, 187, 190, 197, 200, 205, 212, 214, 220, 230, 232, 264, 287, 316, 344, 351, 352, 353, 365, 375, 376, 382, 385, 390, 394, 396, 402, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 438, 444, 447, 449, 453, 463, 522, 534, 585, 592, 615, 639, 662, 663, 678, 679, 837, 853, 952, 994, 995, 1001, 1002, 1005, 1006, 1008, 1009, 1015, 1019, 1020, 1023, 1024, 1029, 1039, 1051], "appropri": [26, 89, 91, 128, 176, 187, 216, 246, 279, 284, 327, 355, 359, 376, 378, 384, 390, 402, 406, 408, 412, 414, 415, 419, 445, 451, 458, 490, 491, 492, 498, 502, 503, 504, 506, 507, 512, 580, 585, 594, 595, 598, 599, 601, 602, 603, 676, 678, 691, 713, 850, 851, 852, 854, 856, 858, 859, 860, 988, 1001, 1004, 1005, 1015, 1039, 1042, 1048, 1051, 1053], "approv": [376, 391, 415], "approx": [65, 121, 244, 413, 415, 416, 1005, 1012, 1019], "approxim": [0, 2, 24, 44, 45, 65, 70, 81, 87, 112, 125, 126, 130, 139, 146, 147, 172, 187, 195, 212, 213, 226, 230, 234, 237, 238, 239, 242, 245, 261, 270, 275, 285, 291, 292, 299, 310, 312, 313, 315, 319, 322, 351, 353, 357, 359, 368, 373, 385, 388, 390, 405, 406, 409, 411, 412, 413, 415, 418, 420, 421, 422, 432, 450, 470, 471, 474, 475, 476, 477, 483, 484, 485, 492, 498, 504, 523, 526, 535, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 561, 562, 585, 592, 614, 615, 623, 642, 643, 644, 645, 646, 649, 661, 662, 663, 676, 678, 680, 681, 683, 691, 696, 762, 763, 768, 801, 805, 822, 829, 833, 834, 848, 849, 852, 856, 858, 859, 860, 864, 868, 869, 874, 878, 880, 881, 885, 897, 908, 913, 914, 951, 952, 978, 998, 999, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1020, 1021, 1024, 1026, 1031, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "approximate_nearest_neighbor": [290, 1026], "approximateident": 1036, "april": [371, 668, 689, 690, 1005, 1039, 1047, 1052], "apriori": 230, "apt": [374, 384, 394], "aptitud": 187, "aqua": 279, "aquantitypredict": 396, "ar": [0, 2, 16, 26, 31, 32, 33, 38, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 69, 71, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 100, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 123, 126, 127, 128, 131, 133, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 165, 166, 168, 169, 171, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 216, 221, 223, 230, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 253, 256, 257, 258, 260, 263, 265, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 295, 296, 300, 303, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 338, 340, 342, 344, 347, 348, 351, 352, 353, 355, 357, 358, 359, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 389, 390, 391, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 428, 429, 432, 433, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 510, 511, 512, 514, 517, 518, 519, 520, 521, 522, 525, 526, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 713, 715, 716, 717, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 752, 754, 755, 757, 758, 760, 761, 765, 766, 767, 769, 771, 772, 773, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 816, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 930, 931, 932, 934, 935, 938, 939, 940, 943, 945, 946, 947, 951, 952, 953, 956, 957, 958, 960, 961, 964, 967, 968, 970, 975, 978, 979, 983, 984, 985, 988, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "arab": 631, "arabi": [408, 709, 719, 790], "aradwad": 1046, "arafat": 1041, "arai": 1045, "arang": [44, 51, 53, 54, 76, 92, 94, 99, 106, 111, 112, 128, 131, 143, 144, 146, 148, 149, 153, 157, 165, 171, 173, 178, 179, 182, 183, 190, 198, 212, 215, 217, 221, 235, 242, 244, 265, 270, 273, 278, 281, 289, 290, 303, 305, 312, 322, 329, 330, 332, 334, 340, 346, 351, 353, 357, 358, 359, 388, 405, 412, 416, 466, 546, 834, 883, 887, 1000, 1001, 1009, 1015, 1019], "aravindh": 1050, "arbitrari": [2, 44, 53, 89, 117, 121, 122, 123, 140, 178, 194, 212, 229, 230, 268, 310, 314, 316, 321, 327, 358, 376, 388, 390, 402, 409, 412, 413, 415, 416, 420, 447, 451, 456, 458, 466, 534, 535, 561, 562, 584, 643, 652, 673, 684, 692, 746, 793, 805, 806, 811, 813, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 872, 874, 887, 994, 996, 997, 1001, 1002, 1005, 1008, 1015, 1025, 1035, 1036, 1039, 1041, 1042, 1043, 1045, 1049, 1051], "arbitrarili": [172, 256, 261, 390, 418, 431, 466, 483, 484, 485, 554, 556, 558, 560, 562, 564, 567, 570, 572, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 682, 683, 684, 725, 726, 727, 728, 750, 789, 793, 841, 842, 851, 859, 866, 889, 909, 911, 914, 917, 919, 1005, 1008, 1015, 1021], "arc": [373, 415], "archana": [1045, 1047], "archit": 1041, "architectur": [374, 378, 384, 388, 394, 402, 469, 906, 1009, 1029, 1035, 1052], "archiv": [48, 287, 370, 371, 373, 374, 408, 443, 502, 504, 512, 675, 762, 763, 1003, 1020], "archive_filenam": 48, "archive_path": 48, "archive_sha256": 48, "arci": [712, 1005], "arcidiacono": [1049, 1050, 1052, 1053], "arcsin": [703, 768], "arctan": [71, 256, 261, 372, 520], "arctan2": [255, 257, 260], "ard": [2, 194, 648, 649], "ard_poli": 194, "ard_scor": 194, "ardregress": [2, 194, 198, 649, 943, 1001, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052], "area": [2, 51, 53, 151, 212, 230, 249, 267, 270, 277, 279, 280, 340, 344, 345, 348, 373, 376, 380, 388, 408, 416, 706, 710, 711, 712, 792, 793, 1002, 1005, 1008, 1023, 1037], "aren": [16, 246, 371, 380, 394, 730, 760, 1010, 1045, 1047], "arezki": 1035, "arfa": 1041, "arff": [324, 376, 498, 1047, 1050, 1051], "arg": [246, 306, 344, 377, 390, 413, 415, 422, 613, 703, 872, 970, 1001, 1007, 1008], "arg_sort_bi": 53, "argentina": 768, "argmax": [64, 128, 269, 283, 378, 415, 571, 836, 916, 1020, 1048], "argmin": [52, 146, 269, 378, 410, 533, 539, 547, 548, 689, 783, 784, 1021], "argpartit": 1042, "argsort": [55, 56, 58, 59, 60, 146, 148, 189, 190, 212, 230, 319, 329, 330, 351, 352, 371, 1013], "argument": [2, 105, 148, 190, 213, 240, 243, 246, 319, 364, 370, 371, 376, 377, 378, 381, 382, 384, 385, 388, 390, 408, 409, 412, 413, 415, 417, 419, 420, 422, 426, 430, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 458, 460, 462, 464, 465, 469, 470, 495, 498, 505, 510, 535, 537, 538, 540, 542, 553, 561, 562, 565, 569, 570, 571, 572, 580, 584, 585, 591, 592, 594, 613, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 635, 643, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 670, 672, 680, 681, 685, 688, 692, 696, 700, 702, 703, 704, 705, 706, 718, 723, 739, 746, 767, 783, 784, 810, 827, 829, 830, 831, 832, 833, 835, 836, 837, 840, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 865, 868, 869, 872, 906, 912, 922, 932, 941, 947, 971, 973, 974, 988, 994, 997, 1001, 1002, 1003, 1005, 1008, 1012, 1013, 1020, 1021, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "argv": 243, "ari": [73, 92, 352, 408, 709, 1040, 1046], "aria": [1043, 1044, 1050], "aric": 56, "arida": [1044, 1045, 1047, 1049, 1052], "ariel": [371, 1035, 1041], "arif": 1053, "ariga": 1041, "arik": 1043, "arima": 1024, "aris": [2, 187, 273, 347, 364, 381, 384, 408, 719, 1001, 1002, 1047], "arisa": [1049, 1050], "arithmet": [245, 382, 384, 408, 553, 652, 673, 684, 708, 721, 740, 741, 761, 799, 855, 1005, 1043], "ari\u00f1o": 1038, "arjona": 1044, "arka204": [1048, 1050], "arm": [374, 376, 384, 994], "arm64": [374, 379], "arm64v8": 384, "armstrong": 1047, "arnaud": [0, 398, 1036, 1037, 1038, 1039, 1040, 1041, 1053], "arnaudov": [1047, 1049], "arnaudstiegl": 1045, "arnold": [1035, 1036], "arnoldi": [692, 693, 697], "arora": [1043, 1050], "around": [0, 44, 64, 73, 86, 116, 135, 138, 147, 177, 188, 192, 205, 246, 249, 264, 273, 284, 308, 329, 331, 332, 340, 343, 344, 351, 352, 353, 358, 359, 371, 373, 376, 382, 388, 396, 407, 408, 412, 413, 416, 472, 473, 517, 546, 624, 644, 653, 672, 708, 746, 801, 810, 827, 854, 856, 858, 859, 860, 888, 1001, 1002, 1004, 1005, 1011, 1015, 1019, 1024, 1025, 1028, 1029, 1039, 1040], "arpack": [52, 58, 80, 81, 100, 103, 233, 326, 413, 452, 453, 454, 463, 537, 543, 546, 692, 693, 695, 697, 699, 1002, 1041, 1042, 1047, 1051, 1052, 1053], "arpanchowdhri": 1045, "arr": 327, "arrai": [2, 46, 47, 48, 50, 51, 52, 53, 54, 58, 69, 70, 71, 76, 80, 81, 87, 95, 96, 98, 103, 105, 113, 116, 119, 122, 123, 146, 148, 150, 151, 154, 157, 169, 172, 173, 174, 179, 194, 206, 207, 212, 213, 219, 229, 233, 234, 239, 243, 246, 249, 250, 253, 255, 256, 257, 259, 260, 264, 265, 266, 268, 270, 274, 275, 289, 303, 313, 319, 323, 325, 326, 330, 336, 343, 344, 351, 357, 359, 363, 364, 369, 370, 371, 376, 377, 378, 379, 381, 382, 384, 386, 388, 389, 390, 402, 405, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 491, 492, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 517, 521, 525, 526, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 584, 585, 586, 587, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 927, 930, 931, 932, 933, 934, 935, 936, 939, 940, 950, 951, 952, 953, 954, 956, 958, 959, 966, 967, 968, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 993, 995, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1029, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "arrang": [2, 59, 289, 636, 839, 840, 841, 842, 1005], "array_api": 404, "array_api_compat": 404, "array_api_dispatch": [404, 469, 906], "array_api_support": [404, 927], "array_convert": 935, "array_equ": [571, 1042], "array_lik": 950, "array_paramet": 376, "array_sym": 990, "arrayfunc": [2, 385, 931], "arrow": [64, 396, 1049], "arrow_arg": 49, "arrowprop": [49, 64], "arrowstyl": 49, "arroyo": 1049, "art": [321, 382, 653, 696, 1029], "artem": [1039, 1042, 1052], "arth": 1049, "arthur": [408, 448, 461, 1040, 1041, 1042, 1043, 1044, 1047, 1049], "arthurmello": 1049, "articl": [0, 56, 371, 375, 376, 384, 412, 421, 476, 709, 1001, 1005, 1048], "artiem": 1043, "artifact": [44, 54, 81, 82, 310, 365, 380, 1031], "artifici": [10, 142, 144, 152, 183, 216, 232, 245, 264, 308, 351, 371, 372, 373, 381, 405, 408, 412, 413, 537, 700, 838, 865, 866, 998, 1002, 1004, 1006, 1012, 1017, 1021, 1025, 1029, 1035], "artist": [383, 439, 636, 702, 704, 705, 706, 810, 827, 922], "artsiom": 1042, "artsion": 1041, "artstein": 720, "artur": [1050, 1051], "arturo": [0, 387, 1049, 1050, 1051, 1052, 1053], "arturoamor": 1049, "aruku": [1043, 1044], "arunav": 1046, "arunava": 1043, "arxiv": [376, 463], "arya": 1043, "as_dict": 378, "as_float_arrai": [2, 385], "as_fram": [44, 45, 104, 108, 127, 141, 144, 150, 155, 176, 187, 188, 189, 190, 200, 202, 212, 220, 228, 230, 249, 253, 264, 284, 287, 290, 293, 307, 315, 316, 319, 321, 323, 324, 370, 371, 490, 491, 492, 494, 498, 502, 503, 504, 506, 507, 512, 1045, 1046, 1047, 1048, 1051], "asanyarrai": 378, "asarrai": [48, 56, 212, 230, 308, 331, 351, 352, 378, 390, 404, 730, 760, 856, 858, 859, 860, 1015, 1020, 1052], "ascend": [59, 104, 189, 316, 415, 451, 457, 597, 631, 639, 920, 921, 922, 1019, 1045, 1051], "ascent": [176, 418], "ascii": [51, 303, 416, 488, 591, 592, 594], "ascontiguousarrai": 543, "asctim": 121, "asdict": 378, "aseem": 1042, "asgd": [219, 1019], "ash": [49, 373, 1038, 1041], "ashah002": [1050, 1051, 1052], "ashim": 1045, "ashimb9": 1045, "ashimin": 1048, "ashish": [1048, 1051], "ashra": 648, "ashutosh": [1042, 1043, 1045, 1047], "ashvith": 1048, "ashwin": [1050, 1051], "asia": [270, 1015], "asian": 416, "asid": [145, 220, 402, 561, 562, 563, 564, 670, 671, 672, 680, 682, 865, 866], "asish": [1041, 1042], "ask": [0, 182, 183, 270, 375, 376, 380, 381, 384, 390, 391, 402, 417, 850, 851, 852, 854, 856, 858, 859, 860, 1028, 1051], "asnt": 1041, "aspect": [47, 92, 117, 121, 175, 188, 232, 239, 279, 284, 299, 363, 364, 365, 376, 390, 391, 408, 492, 662, 663, 994, 1021, 1029, 1052], "aspir": [373, 376], "ass": [112, 113, 410, 475], "assembl": [289, 317, 353, 868], "assert": [48, 56, 122, 243, 270, 279, 364, 379, 1025], "assert_all_finit": [2, 363, 385, 469], "assert_allclos": 378, "assert_array_equ": 416, "assert_warn": 1048, "assert_warns_messag": 1048, "assertionerror": 1042, "assess": [45, 53, 73, 94, 135, 145, 147, 187, 212, 230, 249, 266, 267, 269, 273, 406, 415, 705, 747, 1004, 1005, 1011, 1025, 1050], "assia": 1044, "assiaben": 1044, "assign": [48, 56, 59, 71, 73, 81, 83, 91, 92, 94, 135, 140, 151, 153, 165, 167, 173, 225, 230, 239, 244, 247, 264, 305, 312, 317, 327, 334, 347, 352, 371, 376, 378, 390, 405, 412, 413, 415, 416, 417, 418, 441, 442, 443, 444, 446, 447, 448, 449, 450, 453, 455, 457, 460, 461, 462, 463, 517, 538, 563, 564, 596, 597, 610, 611, 614, 662, 663, 670, 671, 672, 680, 681, 682, 708, 709, 719, 720, 721, 723, 724, 733, 734, 735, 742, 743, 747, 759, 761, 787, 788, 790, 791, 797, 798, 799, 804, 807, 808, 810, 813, 818, 827, 829, 830, 831, 832, 835, 852, 858, 860, 861, 862, 875, 903, 904, 908, 909, 910, 911, 912, 913, 914, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1018, 1029, 1035, 1040, 1042, 1043, 1052, 1053], "assign_label": [81, 408, 453, 463], "assist": [0, 376, 388, 407, 1015, 1028, 1029], "associ": [51, 62, 63, 112, 135, 171, 186, 187, 216, 258, 264, 316, 329, 331, 351, 384, 408, 410, 412, 413, 415, 416, 426, 447, 450, 470, 471, 472, 473, 474, 475, 476, 477, 495, 496, 497, 526, 559, 563, 566, 608, 609, 634, 649, 662, 663, 670, 672, 678, 679, 680, 693, 699, 703, 735, 743, 826, 831, 851, 859, 873, 885, 897, 905, 914, 916, 918, 940, 1004, 1005, 1008, 1015, 1018, 1029, 1035, 1047, 1051], "assum": [49, 71, 89, 91, 178, 183, 186, 187, 202, 212, 230, 239, 242, 249, 261, 270, 279, 310, 347, 353, 364, 375, 376, 378, 382, 388, 389, 390, 393, 402, 405, 406, 408, 410, 412, 413, 415, 416, 418, 419, 424, 429, 440, 445, 447, 451, 458, 464, 470, 471, 472, 473, 474, 475, 476, 477, 505, 510, 511, 534, 544, 550, 551, 563, 564, 569, 570, 590, 591, 592, 594, 624, 636, 647, 648, 650, 651, 656, 662, 663, 664, 665, 666, 670, 671, 672, 675, 676, 680, 681, 682, 685, 689, 691, 692, 696, 713, 726, 730, 739, 745, 760, 768, 773, 778, 782, 785, 804, 807, 808, 818, 844, 850, 851, 854, 856, 858, 859, 864, 875, 888, 964, 980, 981, 982, 995, 999, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1015, 1019, 1021, 1041, 1047], "assume_cent": [70, 111, 410, 421, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "assume_finit": [363, 364, 469, 906], "assumpt": [33, 44, 49, 53, 63, 65, 72, 79, 110, 111, 124, 176, 180, 184, 186, 212, 239, 266, 289, 310, 382, 388, 389, 393, 406, 408, 410, 412, 413, 416, 418, 448, 452, 454, 489, 505, 514, 534, 536, 543, 654, 658, 802, 804, 807, 808, 818, 845, 900, 901, 999, 1001, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1018, 1021, 1026, 1042, 1048], "assur": [0, 390, 801, 802, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "astel": 1043, "astolfi": 1035, "astrai": 390, "astroml": 1024, "astronom": 1023, "astronomi": 1024, "astropi": 376, "astyp": [44, 54, 73, 77, 80, 87, 94, 96, 100, 113, 144, 146, 162, 186, 188, 203, 204, 230, 235, 245, 249, 264, 281, 290, 317, 402, 416, 995, 1001, 1042], "asv": 376, "asv_benchmark": 376, "aswathavicki": 1053, "asymmetr": [147, 214, 390, 1040], "asymmetri": [214, 351], "asymptot": [110, 111, 202, 363, 410, 475, 538, 734, 1001, 1004, 1045], "atag": 179, "atariah": 1044, "ateif": 1048, "atharva": 1049, "atheism": [58, 271, 333, 351, 352, 353, 371, 489], "athena": 1029, "ation": 416, "atla": [363, 374], "atleast_2d": [147, 378], "atmospher": 176, "atol": [378, 676, 678, 848, 849, 853], "atom": [124, 130, 413, 533, 539, 541, 544, 545, 547, 548, 657, 667, 688, 1001, 1035, 1048], "atomic_benchmark": 50, "atomic_benchmark_estim": 50, "atomic_runtim": 50, "atsushi": [1047, 1048], "attach": [48, 433, 853, 1036, 1046], "attack": [249, 371], "attalla": 1049, "attard": 1048, "attempt": [44, 88, 188, 218, 265, 351, 363, 375, 390, 408, 412, 420, 447, 451, 458, 465, 469, 635, 692, 693, 697, 822, 850, 851, 852, 854, 856, 858, 859, 860, 886, 888, 906, 934, 935, 1001, 1002, 1008, 1021, 1042, 1047, 1052], "attenberg": 416, "attent": [376, 384, 610, 611, 1019], "attenu": 171, "attia": 801, "attr": [48, 90], "attract": [419, 445, 999, 1008, 1024], "attractador": [1042, 1043], "attrgett": [596, 600], "attribut": [2, 48, 63, 69, 83, 104, 129, 133, 135, 142, 145, 165, 169, 212, 220, 246, 260, 268, 269, 274, 282, 299, 303, 322, 344, 353, 358, 365, 369, 370, 371, 373, 376, 379, 383, 388, 402, 405, 406, 408, 409, 410, 411, 413, 415, 416, 417, 418, 423, 424, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 509, 512, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 621, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 740, 799, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 923, 925, 965, 988, 993, 997, 999, 1001, 1006, 1008, 1009, 1011, 1015, 1018, 1019, 1020, 1021, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "attributeerror": [409, 561, 580, 965, 1044, 1045, 1047, 1051, 1052], "attrselect": 1035, "atukorala": 1050, "atuo": [1051, 1052], "aubert": 1042, "auc": [2, 51, 63, 169, 212, 230, 249, 267, 270, 274, 277, 279, 280, 326, 406, 706, 712, 792, 1005, 1040, 1043, 1047], "auc_scor": [1035, 1037], "audio": [370, 505], "audrei": 1053, "aufarkari": 1049, "aug": 1020, "augment": [2, 332, 634, 890, 1013, 1029], "augspurg": [1043, 1045], "august": [373, 408, 513, 536, 1020, 1035, 1037, 1038, 1042, 1049], "aura": 1047, "auroc": 1005, "aur\u00e9lien": [1042, 1043, 1044, 1048, 1049], "austin": 1042, "australian": [150, 394], "author": [0, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 376, 379, 384, 388, 390, 391, 412, 452, 536, 875, 997, 1024, 1038], "authorit": 391, "authorship": 380, "auto": [58, 70, 91, 92, 119, 169, 175, 232, 237, 251, 290, 293, 298, 319, 320, 321, 322, 323, 324, 327, 336, 337, 343, 346, 353, 370, 371, 378, 415, 418, 419, 438, 442, 445, 446, 447, 448, 450, 451, 453, 456, 457, 458, 460, 463, 498, 510, 511, 537, 540, 542, 543, 546, 549, 551, 559, 560, 563, 564, 565, 566, 567, 569, 596, 597, 600, 605, 610, 611, 633, 635, 636, 637, 639, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 676, 677, 678, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 706, 803, 807, 808, 826, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 865, 866, 881, 882, 889, 900, 901, 905, 908, 909, 910, 911, 912, 913, 914, 918, 919, 951, 952, 970, 973, 996, 999, 1001, 1002, 1008, 1015, 1024, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "auto_examples_jupyt": 184, "auto_examples_python": 184, "auto_viml": 1047, "auto_wrap_output_kei": 378, "autoclass": 373, "autocorrel": 412, "autolabel": 48, "autom": [271, 379, 380, 394, 696, 994, 1001, 1002, 1005, 1024, 1029], "automat": [2, 44, 48, 52, 53, 65, 81, 97, 99, 104, 128, 150, 160, 168, 194, 215, 255, 256, 264, 268, 271, 310, 317, 320, 324, 333, 342, 344, 364, 371, 374, 376, 378, 380, 384, 390, 394, 402, 404, 408, 409, 410, 413, 415, 416, 417, 432, 451, 453, 457, 463, 465, 466, 468, 498, 501, 517, 540, 542, 543, 549, 551, 553, 559, 563, 566, 586, 591, 594, 597, 605, 647, 649, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 670, 671, 672, 676, 678, 679, 680, 682, 685, 688, 691, 692, 695, 699, 806, 821, 824, 834, 844, 865, 866, 869, 870, 872, 881, 882, 889, 900, 901, 908, 909, 910, 913, 916, 918, 922, 940, 975, 978, 993, 994, 996, 999, 1004, 1009, 1015, 1019, 1021, 1024, 1025, 1035, 1038, 1039, 1040, 1046, 1049, 1050, 1051, 1052, 1053], "automl": [1005, 1024], "automobil": 1029, "autoregress": 371, "autoviml": 1024, "autoviz": 1047, "auxiliari": [183, 327, 374, 1029, 1050], "av": 1043, "avail": [0, 2, 45, 51, 52, 54, 77, 90, 91, 124, 127, 146, 150, 169, 171, 176, 180, 186, 187, 188, 202, 212, 220, 230, 233, 246, 249, 264, 267, 268, 273, 274, 277, 284, 295, 296, 297, 303, 315, 319, 320, 321, 322, 324, 325, 332, 334, 359, 363, 370, 371, 373, 374, 375, 376, 377, 380, 381, 385, 389, 390, 394, 402, 405, 408, 409, 412, 413, 414, 415, 416, 417, 419, 448, 451, 452, 453, 454, 470, 471, 472, 473, 474, 475, 476, 477, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 510, 537, 551, 557, 558, 559, 560, 561, 562, 566, 567, 569, 570, 571, 572, 596, 597, 605, 614, 615, 631, 636, 637, 651, 655, 657, 659, 661, 665, 667, 669, 672, 674, 675, 676, 677, 678, 679, 680, 686, 693, 700, 703, 736, 737, 804, 807, 808, 818, 830, 831, 836, 837, 838, 839, 840, 841, 842, 854, 865, 866, 868, 875, 884, 887, 892, 896, 901, 905, 960, 965, 994, 995, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1015, 1018, 1019, 1020, 1023, 1024, 1025, 1028, 1029, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051], "available_if": [2, 90, 390, 1048, 1049, 1052], "avebedrm": [310, 371, 491], "aventi": 52, "aveoccup": [310, 321, 371, 491], "averag": [2, 44, 53, 63, 65, 73, 75, 76, 80, 86, 94, 96, 138, 139, 143, 147, 150, 151, 156, 157, 158, 176, 188, 196, 202, 212, 219, 230, 249, 264, 273, 275, 278, 280, 284, 289, 310, 319, 325, 327, 333, 351, 359, 363, 371, 373, 388, 405, 406, 410, 412, 416, 417, 419, 420, 438, 439, 442, 445, 446, 447, 448, 450, 491, 495, 496, 525, 533, 534, 535, 539, 540, 542, 543, 547, 548, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 590, 597, 636, 637, 652, 662, 663, 670, 671, 673, 676, 678, 680, 681, 682, 684, 691, 704, 707, 708, 710, 711, 712, 717, 724, 725, 727, 729, 730, 732, 733, 734, 738, 739, 740, 742, 743, 744, 747, 749, 750, 752, 754, 755, 757, 760, 768, 785, 786, 787, 788, 789, 791, 792, 794, 795, 799, 800, 801, 802, 832, 835, 854, 874, 889, 990, 995, 1000, 1001, 1006, 1009, 1011, 1012, 1019, 1020, 1021, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "average_bike_rent": 188, "average_coef_": 1046, "average_feature_effect": 351, "average_intercept_": 1046, "average_linkag": 80, "average_method": [408, 708, 761, 1043], "average_pr": 150, "average_precis": [277, 704, 711, 1005], "average_precision_scor": [2, 277, 704, 710, 712, 786, 792, 1005, 1035, 1038, 1042, 1043, 1049, 1051], "average_week_demand": [44, 150], "averoom": [310, 321, 371, 491], "avg": [571, 708, 717, 826, 1005, 1051], "avg_dist": [76, 785], "avgclaim": 230, "avgclaimamount": 230, "avi": [1047, 1048], "avidar": 1051, "avinash": 1047, "avm19": [1049, 1050, 1052], "avoid": [44, 47, 52, 53, 80, 91, 96, 105, 140, 141, 145, 150, 187, 188, 216, 221, 230, 235, 246, 249, 264, 265, 271, 275, 283, 298, 300, 301, 314, 315, 326, 336, 337, 352, 364, 374, 376, 377, 378, 380, 381, 382, 388, 390, 391, 394, 402, 406, 408, 410, 412, 415, 416, 419, 441, 443, 445, 453, 463, 469, 495, 496, 497, 501, 510, 511, 536, 541, 545, 638, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 693, 695, 697, 699, 716, 796, 804, 805, 809, 815, 818, 829, 830, 831, 868, 871, 877, 878, 880, 885, 886, 887, 888, 891, 893, 894, 895, 896, 897, 898, 899, 901, 906, 952, 999, 1002, 1004, 1005, 1008, 1009, 1011, 1013, 1015, 1020, 1021, 1028, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "aw": 384, "awai": [63, 64, 65, 94, 110, 143, 171, 172, 176, 215, 264, 344, 345, 371, 406, 418, 632, 850, 851, 858, 859, 1004, 1005, 1020], "await": 320, "awalei": 1043, "awar": [49, 55, 166, 180, 264, 337, 351, 374, 376, 378, 388, 391, 407, 412, 416, 569, 570, 652, 658, 659, 660, 662, 663, 673, 684, 854, 883, 1011, 1015, 1021, 1032, 1035, 1036, 1049], "awesom": 1029, "awwwyan": 1053, "ax": [44, 45, 47, 48, 49, 50, 52, 53, 55, 63, 65, 67, 68, 69, 71, 76, 78, 79, 87, 89, 90, 91, 98, 100, 105, 108, 112, 114, 117, 119, 121, 127, 131, 135, 137, 140, 142, 144, 145, 150, 152, 153, 155, 156, 157, 174, 175, 180, 182, 186, 187, 188, 189, 190, 192, 194, 195, 198, 202, 204, 205, 208, 209, 210, 212, 213, 214, 216, 217, 220, 221, 223, 225, 226, 227, 230, 232, 233, 234, 235, 236, 237, 240, 245, 249, 250, 252, 255, 257, 260, 264, 265, 266, 267, 270, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 298, 300, 301, 305, 306, 307, 310, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 326, 336, 337, 338, 339, 341, 342, 344, 346, 347, 348, 349, 351, 352, 353, 355, 356, 372, 379, 413, 418, 439, 536, 543, 552, 635, 636, 701, 702, 704, 705, 706, 722, 810, 827, 922, 925, 1005, 1008, 1012, 1032, 1045, 1051], "ax0": [106, 108, 212, 242, 352], "ax1": [47, 50, 91, 94, 99, 101, 106, 108, 112, 119, 144, 183, 190, 205, 212, 240, 242, 250, 255, 273, 281, 311, 315, 316, 332, 351, 352, 372], "ax2": [47, 91, 94, 99, 101, 112, 119, 144, 183, 190, 205, 212, 240, 250, 255, 273, 281, 300, 311, 315, 316, 332, 351, 372], "ax3": [99, 332], "ax4": 99, "ax_": [151, 263, 273, 277, 279, 283, 293, 315, 319, 383, 439, 635, 701, 702, 704, 705, 706, 810, 827], "ax_bc": 314, "ax_bottom": 383, "ax_calibration_curv": [63, 65], "ax_colorbar": 310, "ax_det": 267, "ax_histi": 310, "ax_histx": 310, "ax_histx_zoom": 310, "ax_histy_zoom": 310, "ax_idx": 272, "ax_origin": 314, "ax_qt": 314, "ax_roc": 267, "ax_row": 71, "ax_scatt": 310, "ax_scatter_zoom": 310, "ax_top_left": 383, "ax_top_right": 383, "ax_yj": 314, "ax_zoom_in": 310, "ax_zoom_out": 310, "axarr": [156, 310], "axes_": [150, 152, 250, 320, 326, 383, 636], "axes_idx": 314, "axes_list": 314, "axes_row": 204, "axesimag": 701, "axhlin": [128, 160, 203, 269, 273], "axi": [2, 44, 45, 47, 51, 52, 54, 55, 56, 58, 63, 64, 73, 75, 76, 82, 84, 86, 87, 88, 89, 95, 104, 105, 108, 114, 117, 119, 121, 122, 123, 124, 125, 130, 137, 138, 142, 143, 151, 154, 158, 162, 165, 175, 180, 182, 186, 187, 196, 201, 202, 206, 207, 212, 217, 221, 224, 226, 227, 229, 230, 233, 234, 237, 239, 243, 244, 248, 255, 257, 259, 260, 266, 267, 271, 272, 277, 279, 280, 283, 289, 290, 295, 296, 297, 300, 301, 302, 308, 310, 314, 317, 326, 330, 332, 334, 336, 339, 340, 343, 345, 346, 347, 349, 351, 352, 356, 357, 358, 371, 378, 385, 390, 406, 408, 416, 420, 439, 446, 465, 468, 533, 535, 538, 539, 541, 543, 545, 547, 548, 552, 588, 616, 635, 636, 689, 690, 705, 767, 783, 784, 785, 786, 810, 827, 836, 877, 878, 885, 886, 888, 893, 894, 895, 897, 898, 899, 922, 930, 934, 935, 954, 979, 985, 995, 1005, 1012, 1015, 1020, 1043, 1045, 1047, 1052, 1053], "axis_idx": 44, "axis_list": 123, "axp": 52, "axvlin": [87, 94, 106, 114, 128, 146, 157, 187, 189, 190, 202, 276, 284, 347], "ayako": 1047, "ayan": 1049, "ayc\u0131": 1053, "aydor": [1042, 1043, 1046], "ayerdi": 1039, "aymer": 1036, "aymericbasset": 1051, "ayomid": 1045, "ayush": [1043, 1048], "ayzenshtat": [1029, 1043], "azaria": [1050, 1051], "azencott": 1049, "azim": [101, 127, 188, 232, 236], "azur": [0, 376], "b": [0, 2, 48, 50, 62, 64, 93, 99, 112, 128, 137, 138, 143, 147, 148, 158, 160, 172, 173, 174, 179, 183, 197, 198, 201, 213, 218, 247, 249, 264, 269, 273, 275, 280, 285, 289, 322, 332, 359, 371, 373, 376, 380, 381, 382, 405, 406, 408, 411, 412, 413, 416, 438, 483, 500, 502, 543, 568, 591, 592, 593, 594, 610, 611, 614, 615, 632, 650, 651, 652, 653, 662, 673, 676, 678, 680, 684, 691, 692, 709, 723, 734, 735, 796, 797, 815, 816, 855, 881, 882, 883, 884, 887, 888, 896, 923, 936, 952, 953, 967, 969, 995, 997, 1001, 1002, 1003, 1005, 1008, 1010, 1015, 1019, 1020, 1035, 1043, 1046, 1048, 1049, 1050], "b0noi": 1041, "b0rxington": 1050, "b1": [226, 296, 339], "b1996": 415, "b1998": 415, "b1999": 415, "b2": [226, 296, 339], "b2001": 415, "b2011": 408, "b2c": 1029, "b30065": 312, "b7a2ff": 314, "b_1": 1009, "b_2": 1009, "b_column": 723, "b_i": 1010, "b_iv_i": 1010, "b_j": 408, "b_k": 408, "b_mask": 279, "b_row": 723, "b_true": 279, "ba": [52, 865, 866, 1009], "baak": 1049, "baam": [1048, 1049], "babino": [1048, 1049], "bac": 52, "bach": [413, 533, 538, 539, 540, 662, 1001], "bachant": 1042, "back": [44, 126, 251, 364, 374, 376, 390, 391, 402, 409, 416, 433, 444, 447, 448, 460, 483, 484, 485, 510, 511, 535, 536, 537, 540, 542, 543, 546, 584, 634, 662, 663, 670, 671, 672, 680, 681, 682, 732, 873, 875, 876, 877, 881, 882, 883, 885, 886, 888, 900, 901, 908, 957, 1001, 1005, 1009, 1038, 1043, 1045, 1046, 1049, 1053], "backend": [2, 364, 379, 390, 469, 906, 970, 972, 974, 1005, 1038, 1043, 1044, 1045, 1046], "backend_param": 972, "background": [45, 51, 82, 100, 151, 308, 312, 371, 376, 384, 408, 495, 496, 1002, 1010, 1019, 1045], "background_point": 51, "backlink": 1040, "backport": [380, 385, 1042], "backprop": [1009, 1019], "backpropag": 1009, "backslash": 1050, "backtick": [376, 381], "backup": [510, 1035], "backward": [169, 321, 379, 390, 417, 498, 580, 605, 618, 619, 622, 623, 624, 626, 627, 921, 930, 1009, 1025, 1035, 1038, 1043, 1044, 1045, 1047, 1049, 1051], "bad": [94, 95, 172, 177, 187, 264, 327, 351, 359, 376, 408, 418, 696, 750, 994, 1001, 1002, 1007, 1013, 1035], "badaracco": 1048, "badli": [202, 212, 351, 365, 888, 1001, 1015], "badr": 1050, "baeza": [593, 734, 1038], "bag": [2, 14, 65, 103, 123, 134, 139, 141, 149, 184, 189, 287, 352, 353, 372, 406, 518, 519, 520, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 745, 809, 834, 917, 1003, 1006, 1026, 1027, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1048, 1049, 1051], "bagai": 1048, "baggingclassifi": [2, 390, 399, 415, 558, 918, 943, 995, 1038, 1041, 1042, 1043, 1046, 1050, 1051, 1053], "baggingregressor": [2, 138, 399, 415, 557, 919, 995, 1038, 1041, 1043, 1046, 1050, 1051, 1053], "baggipont": 1053, "baharev": 1040, "baibak": [1043, 1044], "bail": 1046, "bailei": [408, 708], "bajic": 1050, "baji\u0107": 1050, "bakir2003": 413, "bakiri": [838, 1006], "bak\u0131r": [45, 413, 537], "bala": [1035, 1038], "balakumaran": [1042, 1043], "balanc": [2, 44, 46, 53, 65, 87, 100, 105, 135, 141, 145, 168, 184, 216, 217, 262, 268, 271, 273, 274, 284, 310, 365, 388, 390, 406, 407, 412, 413, 415, 504, 517, 536, 542, 543, 549, 559, 563, 566, 644, 662, 663, 670, 672, 678, 679, 680, 707, 712, 733, 747, 786, 791, 804, 805, 822, 868, 908, 910, 913, 916, 918, 939, 940, 994, 1020, 1021, 1026, 1035, 1037, 1040, 1041, 1044, 1045, 1049], "balanced_accuraci": [284, 712, 826, 1005, 1043], "balanced_accuracy_scor": [2, 707, 791, 1005, 1043], "balanced_subsampl": [559, 566, 1043], "balaz": 1039, "baldi": 747, "ball": [295, 303, 408, 414, 449, 696, 848, 849, 853, 856, 858, 859, 860, 1035, 1037, 1040, 1046], "ball_tre": [303, 419, 445, 447, 451, 458, 692, 693, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1008, 1035, 1052], "balltre": [2, 419, 445, 447, 451, 458, 692, 693, 703, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1002, 1035, 1037, 1039, 1043, 1048, 1051, 1052], "baloo": 1002, "baluyot": 1044, "bamidel": 1045, "banana": [49, 1005], "band": [53, 273, 312, 1015], "bandit": 994, "bandwidth": [2, 49, 80, 97, 245, 294, 295, 303, 388, 390, 408, 414, 449, 459, 462, 848, 849, 853, 998, 1011, 1046, 1050], "bandwidth_": 853, "bangda": 1043, "banik": 1053, "banilo": [1039, 1040], "bank": [52, 1029], "bannerje": [1051, 1052], "bansal": 1042, "bansod": [1040, 1041, 1042], "bao": [1041, 1049], "baod": 408, "baptbillard": 1048, "baptist": [1038, 1046], "bar": [48, 50, 55, 105, 141, 142, 144, 145, 148, 157, 165, 169, 179, 182, 188, 194, 255, 260, 269, 271, 275, 289, 315, 316, 323, 324, 352, 378, 411, 584, 636, 652, 673, 684, 1005, 1012, 1019, 1021, 1041, 1042, 1043, 1044], "bar_color": 48, "bar_kw": 636, "bar_siz": 351, "baran": 1045, "barang": 1051, "baraniuk": 417, "barankaraku": 1047, "barata": 1051, "barber": 534, "barberogaston": 1047, "bardiya": [1049, 1050], "bare": [371, 1002], "barh": [55, 148, 182, 183, 186, 187, 189, 190, 253, 317, 351, 352, 353], "barikbin": 1051, "barkhorn": 1043, "barklei": 1045, "barmalei": [1039, 1040], "barn": [696, 1002, 1040, 1042, 1045, 1053], "barnes_hut": [290, 696, 1042, 1043], "barnett": 1043, "barnhil": [596, 597], "barnowski": [1049, 1050], "barreca": [889, 1015], "barreto": 1049, "barri": [371, 1043], "barrier": 416, "barrycg": 1045, "bars_": 636, "bartelheim": 1046, "barth\u00e9lemi": [1051, 1052], "bartosz": 1044, "bart\u0142omiej": 1050, "barycent": [302, 1035], "basbug": 1042, "base": [2, 14, 20, 24, 31, 32, 33, 35, 41, 45, 52, 53, 54, 55, 56, 59, 63, 64, 65, 71, 83, 90, 91, 92, 101, 103, 104, 108, 112, 121, 122, 127, 133, 135, 136, 141, 145, 146, 147, 148, 150, 153, 155, 158, 163, 166, 167, 171, 176, 177, 179, 188, 189, 190, 193, 194, 199, 200, 201, 202, 205, 207, 208, 212, 213, 220, 229, 230, 232, 239, 246, 247, 249, 267, 268, 273, 283, 287, 289, 290, 303, 308, 310, 311, 313, 315, 321, 323, 327, 334, 338, 344, 352, 355, 363, 370, 371, 372, 373, 374, 377, 379, 380, 384, 388, 390, 391, 393, 402, 404, 406, 407, 409, 413, 414, 416, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 445, 446, 447, 448, 449, 450, 451, 453, 457, 458, 462, 464, 465, 466, 467, 468, 488, 502, 503, 510, 511, 534, 535, 537, 538, 539, 540, 541, 543, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 581, 591, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 614, 615, 620, 621, 622, 625, 628, 636, 637, 639, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 668, 673, 675, 676, 677, 678, 679, 684, 686, 687, 689, 690, 691, 694, 696, 708, 721, 730, 739, 740, 741, 743, 745, 759, 760, 761, 789, 792, 799, 803, 804, 806, 807, 808, 810, 811, 813, 818, 820, 822, 823, 824, 825, 832, 834, 838, 839, 842, 850, 851, 852, 854, 856, 858, 859, 860, 865, 866, 869, 870, 873, 880, 881, 883, 887, 888, 889, 897, 900, 901, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 924, 926, 928, 937, 945, 957, 973, 994, 996, 997, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1053], "base_classifi": [332, 334, 1018], "base_clf": 438, "base_estim": [406, 555, 556, 557, 558, 839, 842, 905, 994, 1046, 1048, 1049, 1050, 1051], "base_estimator_": [555, 556, 557, 558, 559, 560, 565, 566, 567, 568, 614, 1050], "base_estimator__": 1050, "base_lr": [289, 839], "base_model": 407, "base_x_test": 110, "base_x_train": 110, "basebag": [1041, 1043], "basebal": [58, 371], "basedecisiontre": [1043, 1044, 1047], "basedictionarylearn": 1035, "baseensembl": [1042, 1045], "baseestim": [2, 90, 133, 246, 290, 376, 389, 390, 418, 423, 424, 425, 426, 429, 430, 431, 432, 604, 636, 637, 943, 957, 1035, 1042, 1045, 1047, 1049, 1050], "basegradientboost": 1036, "baselabelpropag": 1042, "baselibsvm": 1045, "baselin": [63, 135, 144, 147, 158, 190, 194, 230, 264, 280, 289, 321, 352, 373, 408, 417, 553, 554, 638, 1005, 1008, 1051], "baseline_similar": 179, "baseline_similarity_bound": 179, "basemap": [51, 303], "basemixtur": [1043, 1044], "basemultilayerperceptron": [1043, 1045], "basenb": 1045, "baserandomproject": [900, 901], "basesearchcv": [1042, 1043], "basesgd": 1019, "basesgdclassifi": 1044, "baseshufflesplit": 1048, "bash": [364, 376, 384], "bashrc": 384, "basi": [2, 44, 46, 54, 126, 171, 176, 178, 213, 264, 307, 322, 340, 344, 368, 374, 377, 408, 413, 415, 453, 536, 626, 636, 643, 695, 887, 1003, 1015, 1020, 1027, 1031, 1043, 1045, 1048], "basic": [147, 170, 171, 176, 177, 179, 180, 183, 184, 210, 284, 317, 345, 363, 365, 376, 380, 388, 390, 408, 412, 413, 415, 615, 626, 904, 916, 917, 918, 919, 994, 995, 1008, 1019, 1023, 1024, 1025, 1026, 1029], "basicconfig": 121, "basil": 1042, "basilisk": 1024, "basis_1": 213, "basis_2": 213, "basri": 515, "bassett": 1001, "bastiaan": [1036, 1037], "bastian": 1043, "bat": 374, "batch": [2, 48, 51, 98, 121, 125, 303, 323, 365, 385, 390, 416, 441, 443, 448, 450, 452, 454, 533, 535, 536, 538, 539, 540, 541, 542, 544, 545, 547, 548, 668, 689, 690, 805, 809, 822, 823, 843, 844, 845, 846, 847, 865, 866, 877, 878, 888, 901, 955, 970, 1009, 1010, 1019, 1035, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1051], "batch_dict_estim": 121, "batch_pca_estim": 121, "batch_siz": [2, 55, 58, 78, 98, 121, 124, 125, 352, 413, 450, 536, 538, 539, 540, 541, 548, 864, 865, 866, 955, 956, 970, 1036, 1043, 1046, 1048, 1049], "batch_size_": 536, "batchkarov": [1036, 1040], "batiss": 1046, "batista": [1043, 1044, 1048], "batistaki": 408, "batoul": 1048, "battista": 1046, "batula": 1042, "bauk": [1043, 1044], "baum": 447, "baumgartn": 1042, "baxlei": 1042, "bay": [2, 33, 65, 68, 138, 153, 171, 202, 260, 272, 351, 371, 406, 413, 415, 416, 538, 551, 552, 660, 843, 844, 845, 846, 847, 889, 999, 1000, 1001, 1015, 1027, 1031, 1035, 1036, 1037, 1038, 1043, 1045, 1048, 1050], "bayer": [0, 1035, 1036, 1040, 1053], "bayesian": [2, 47, 65, 88, 99, 119, 183, 184, 193, 198, 200, 213, 218, 254, 256, 260, 261, 273, 281, 285, 295, 300, 311, 315, 413, 438, 526, 530, 534, 615, 648, 649, 660, 661, 801, 802, 869, 871, 883, 888, 994, 1024, 1026, 1027, 1030, 1031, 1041, 1048], "bayesiangaussianmixtur": [2, 255, 256, 261, 802, 1004, 1041, 1043, 1044, 1048, 1049, 1053], "bayesianridg": [2, 88, 182, 194, 195, 198, 321, 631, 648, 1001, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052], "baz": [378, 584], "baze": 1044, "bbbbbb": 98, "bbox": [49, 52, 71, 255, 256, 257, 260, 261, 312], "bbox_arg": 49, "bbox_to_anchor": [44, 73, 180, 275, 346], "bc": 314, "bcde": 144, "bcross_val": 1035, "bde": 144, "bdegraaff": 1050, "bdt": 137, "beach": 1043, "beam": [138, 1035], "bear": [415, 1024], "bearer": 1043, "beatrizsmg": 1047, "beauchamp": [1036, 1039], "beaugnon": 1045, "becam": [155, 391, 1043], "becaus": [44, 45, 53, 58, 63, 65, 76, 82, 84, 104, 114, 117, 135, 140, 147, 150, 169, 172, 175, 178, 187, 188, 190, 195, 199, 206, 212, 216, 218, 220, 230, 245, 246, 256, 264, 267, 270, 271, 276, 289, 290, 306, 307, 308, 310, 314, 315, 316, 317, 331, 340, 344, 351, 352, 353, 355, 358, 359, 363, 364, 371, 376, 380, 381, 384, 388, 389, 390, 399, 402, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 418, 421, 431, 448, 449, 462, 466, 476, 483, 484, 485, 536, 538, 554, 556, 558, 560, 562, 564, 565, 567, 570, 572, 610, 611, 615, 636, 637, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 680, 681, 682, 683, 684, 693, 703, 713, 716, 717, 725, 726, 727, 728, 750, 767, 789, 792, 798, 804, 818, 832, 836, 841, 842, 851, 854, 856, 858, 859, 860, 866, 877, 878, 886, 888, 889, 893, 894, 896, 897, 898, 899, 909, 911, 914, 917, 919, 945, 968, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1012, 1015, 1020, 1021, 1029, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1051], "becker": [408, 1029, 1038, 1047], "becom": [84, 89, 91, 105, 112, 145, 187, 205, 214, 216, 246, 249, 272, 290, 311, 315, 340, 344, 351, 359, 370, 376, 378, 380, 384, 390, 391, 408, 410, 415, 416, 418, 441, 451, 455, 456, 458, 584, 591, 592, 594, 623, 631, 662, 663, 680, 682, 882, 908, 909, 915, 1000, 1001, 1002, 1004, 1008, 1015, 1020, 1036, 1043, 1044, 1047, 1048, 1049, 1050, 1052], "bednar": 1042, "bedroom": [310, 371], "been": [0, 44, 49, 64, 80, 87, 94, 113, 126, 133, 135, 148, 171, 176, 178, 187, 190, 236, 239, 241, 247, 268, 270, 276, 277, 319, 320, 321, 322, 323, 325, 326, 327, 331, 359, 364, 370, 371, 373, 374, 375, 376, 378, 380, 382, 384, 385, 388, 389, 390, 391, 399, 402, 405, 406, 407, 408, 410, 412, 413, 415, 418, 433, 470, 472, 473, 475, 479, 488, 525, 536, 538, 551, 552, 569, 570, 584, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 615, 637, 638, 662, 663, 670, 671, 672, 677, 679, 680, 681, 682, 724, 782, 783, 784, 797, 804, 807, 808, 810, 818, 826, 827, 832, 833, 857, 905, 908, 995, 997, 998, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1015, 1017, 1019, 1020, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "befor": [2, 48, 52, 63, 78, 103, 105, 108, 117, 145, 150, 155, 165, 178, 180, 181, 182, 184, 187, 188, 190, 196, 198, 200, 202, 206, 246, 264, 270, 277, 292, 293, 311, 314, 315, 317, 322, 343, 359, 363, 364, 371, 374, 376, 378, 380, 381, 382, 384, 385, 388, 390, 391, 393, 394, 402, 404, 406, 408, 409, 410, 412, 413, 415, 417, 420, 421, 444, 448, 449, 450, 460, 462, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 491, 503, 536, 539, 540, 541, 542, 543, 546, 548, 549, 563, 564, 567, 569, 571, 572, 580, 591, 592, 594, 615, 631, 632, 634, 649, 670, 671, 672, 675, 680, 682, 691, 696, 698, 801, 802, 805, 809, 810, 822, 823, 825, 830, 832, 834, 848, 849, 856, 857, 858, 859, 860, 863, 868, 869, 872, 875, 882, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 905, 916, 917, 927, 952, 988, 995, 1001, 1002, 1005, 1011, 1015, 1019, 1020, 1021, 1025, 1026, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "beforehand": [253, 293, 1021], "begin": [58, 133, 169, 171, 265, 272, 289, 322, 359, 376, 381, 382, 390, 405, 408, 415, 555, 556, 561, 563, 564, 670, 671, 680, 681, 682, 994, 997, 1001, 1005, 1015, 1017, 1019, 1043, 1049, 1050], "beginn": 1025, "behav": [44, 52, 86, 91, 216, 264, 265, 310, 321, 340, 359, 376, 378, 382, 389, 408, 409, 412, 888, 1001, 1015, 1020, 1022, 1025, 1035, 1042, 1044, 1048, 1049], "behavior": [63, 73, 75, 86, 182, 184, 187, 188, 201, 209, 212, 230, 246, 253, 261, 262, 264, 273, 275, 307, 310, 312, 317, 340, 359, 364, 370, 373, 376, 378, 380, 384, 385, 390, 404, 406, 407, 408, 412, 415, 416, 538, 553, 568, 670, 671, 672, 680, 681, 682, 703, 705, 733, 734, 787, 788, 791, 804, 805, 806, 809, 818, 821, 822, 823, 824, 825, 845, 881, 908, 909, 994, 1001, 1005, 1006, 1011, 1015, 1020, 1026, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "behaviour": [75, 126, 150, 213, 214, 230, 342, 376, 390, 402, 408, 415, 561, 562, 566, 567, 605, 634, 805, 806, 809, 821, 822, 823, 824, 825, 906, 916, 917, 977, 994, 995, 1005, 1015, 1043, 1046, 1047, 1050, 1051], "behind": [38, 87, 112, 135, 287, 380, 384, 410, 415, 1004, 1008, 1017, 1051], "behrend": 1045, "behrouz": 1049, "behzad": 1041, "beier": 1046, "beimportantfew": 396, "being": [62, 65, 71, 86, 89, 114, 117, 126, 135, 139, 150, 152, 171, 176, 189, 192, 207, 246, 249, 263, 270, 314, 315, 340, 344, 353, 374, 375, 376, 378, 381, 388, 390, 391, 407, 408, 410, 412, 415, 416, 417, 418, 419, 421, 442, 443, 445, 446, 451, 457, 470, 476, 495, 525, 571, 644, 653, 660, 676, 678, 691, 694, 698, 716, 722, 738, 740, 787, 793, 801, 848, 849, 854, 856, 858, 859, 860, 883, 901, 953, 994, 995, 1001, 1004, 1005, 1008, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1035, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "beirouti": 1042, "belatedli": 1042, "belief": [270, 864, 1010], "believ": [384, 388, 1029], "belkin": 1002, "belkina": [696, 1002], "bell": [2, 523, 1043, 1045, 1047, 1048], "bella": 1005, "bella2012": 1005, "bellet": [1042, 1043, 1044], "belmont": [916, 917, 1021], "belong": [62, 65, 67, 89, 94, 249, 270, 319, 325, 331, 370, 371, 405, 406, 408, 409, 411, 412, 415, 423, 441, 444, 448, 449, 450, 452, 454, 525, 716, 735, 811, 817, 829, 875, 889, 960, 961, 1001, 1004, 1005, 1007, 1008, 1009, 1011, 1020, 1024], "below": [0, 2, 49, 53, 63, 64, 65, 69, 71, 89, 94, 103, 108, 112, 121, 133, 139, 142, 147, 164, 186, 188, 212, 214, 228, 229, 233, 237, 241, 246, 249, 251, 253, 265, 268, 273, 275, 276, 277, 310, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 345, 351, 358, 359, 364, 369, 370, 374, 376, 378, 380, 381, 385, 390, 391, 394, 396, 408, 410, 411, 412, 413, 415, 416, 417, 418, 445, 447, 449, 472, 473, 479, 492, 494, 496, 497, 498, 499, 500, 502, 503, 504, 506, 507, 512, 533, 539, 544, 550, 585, 598, 599, 600, 601, 602, 603, 637, 650, 656, 662, 663, 671, 672, 677, 679, 696, 703, 709, 747, 767, 801, 802, 804, 815, 818, 837, 868, 871, 881, 882, 885, 891, 897, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1022, 1024, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "beltran": 1053, "ben": [1037, 1038, 1039, 1042, 1043, 1044, 1047, 1052], "ben3940": 1049, "benavoli": 270, "benbihi": 1044, "bench_k_mean": 92, "benchmark": [290, 321, 352, 353, 363, 369, 371, 376, 388, 394, 401, 406, 469, 517, 906], "benchmark_estim": 50, "benchmark_influ": 47, "benchmark_throughput": 50, "bend": 344, "benedek": 1051, "benedikt": 1039, "benediktsson": [1035, 1036, 1037], "benefici": [105, 107, 110, 121, 153, 264, 310, 311, 327, 402, 407, 1002], "benefit": [44, 81, 90, 107, 108, 135, 136, 145, 150, 187, 226, 236, 242, 244, 264, 292, 323, 363, 376, 385, 390, 406, 408, 449, 462, 469, 510, 569, 570, 662, 663, 670, 671, 672, 680, 681, 682, 839, 906, 908, 994, 1000, 1008, 1015, 1029, 1035, 1038, 1039, 1040, 1047, 1048, 1049, 1050], "benfield": 1042, "bengio": [270, 865, 866, 994, 1018], "bengtsson": 1039, "benhel": 377, "benhur": 1048, "benign": [373, 502], "benjamin": [645, 1037, 1038, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "benjamini": [598, 1041, 1042], "benjaminirv": 1040, "benjastudio": [1043, 1044], "benn": 1043, "bennett": [373, 1005], "benni": 1049, "benoit": 1052, "beno\u00eet": 1048, "bentlei": 1008, "bera": 1050, "berei": 1049, "beren": 696, "berenbaum": 1051, "bereng": 1048, "berg": [371, 1036, 1037, 1047, 1052], "bergman": [1052, 1053], "bergstra": [994, 1035, 1036], "berk": 1035, "berkecanrizai": 1050, "berkelei": [645, 916, 917], "berlin": [176, 408, 413, 537, 700, 730, 760, 1005], "bernardo": 1041, "bernd": 1050, "bernhard": [45, 413, 537, 839, 874, 904, 1006, 1011, 1020, 1041], "bernhardsson": 1029, "berni": 1046, "bernoulli": [2, 308, 416, 417, 843, 844, 845, 846, 847, 864, 865, 866, 871, 1001, 1015, 1027, 1031, 1035], "bernoullinb": [2, 153, 365, 844, 845, 846, 847, 1006, 1007, 1036, 1037, 1039, 1042, 1047, 1048, 1050], "bernoullirbm": [2, 308, 865, 866, 1010, 1015, 1037, 1038, 1047, 1049, 1052], "bertin": 1029, "bertoncelj": 1046, "bertrand": [0, 398, 1035, 1041, 1042, 1047, 1048], "bertrandhaut": [1043, 1044], "besid": [155, 242, 284, 376, 381, 592, 994, 1043], "bessel": [418, 623], "besson": [1040, 1041], "best": [0, 44, 46, 48, 52, 53, 54, 58, 62, 64, 65, 76, 81, 88, 89, 95, 103, 104, 105, 106, 110, 116, 121, 125, 128, 129, 130, 138, 141, 144, 146, 147, 148, 150, 155, 158, 169, 171, 172, 177, 182, 187, 194, 198, 200, 202, 205, 226, 227, 228, 232, 235, 239, 244, 245, 249, 257, 261, 263, 264, 268, 269, 270, 271, 274, 277, 278, 281, 282, 285, 289, 294, 299, 311, 316, 321, 322, 327, 340, 343, 344, 351, 352, 353, 357, 363, 364, 370, 373, 375, 376, 379, 382, 389, 390, 394, 399, 402, 405, 406, 407, 408, 412, 413, 415, 416, 417, 418, 431, 444, 447, 448, 450, 452, 453, 454, 460, 463, 466, 473, 483, 484, 485, 540, 547, 548, 554, 556, 558, 559, 560, 561, 562, 564, 566, 567, 568, 570, 572, 596, 597, 600, 605, 614, 615, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 692, 693, 694, 697, 698, 707, 712, 723, 724, 725, 726, 727, 728, 732, 733, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 787, 788, 789, 791, 794, 795, 796, 797, 798, 800, 801, 802, 804, 807, 808, 818, 831, 833, 836, 841, 842, 851, 859, 865, 866, 909, 911, 914, 916, 917, 918, 919, 994, 999, 1000, 1001, 1002, 1005, 1008, 1009, 1011, 1019, 1021, 1024, 1025, 1029, 1035, 1038, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "best_alpha": 1035, "best_c": 347, "best_c_scal": 347, "best_clf": 106, "best_estim": [804, 807, 808, 818], "best_estimator_": [46, 88, 106, 107, 110, 128, 245, 260, 264, 271, 274, 294, 804, 807, 808, 818, 994, 1042], "best_idx": [58, 269], "best_index": [268, 274], "best_index_": [269, 274, 804, 807, 808, 818], "best_loss": [680, 682], "best_loss_": [865, 866, 1050], "best_low_complex": 269, "best_n_it": 460, "best_paramet": 271, "best_parameters_": 260, "best_params_": [104, 106, 147, 171, 245, 260, 268, 274, 321, 340, 389, 804, 807, 808, 818, 994], "best_recal": 268, "best_recall_std": 268, "best_recall_threshold": 268, "best_scor": 274, "best_score_": [104, 106, 245, 264, 271, 274, 275, 340, 407, 677, 679, 804, 807, 808, 818, 826, 1046], "best_score_idx": 269, "best_threshold_": [264, 284, 327, 826], "best_validation_score_": [865, 866, 1050], "beta": [2, 81, 116, 186, 216, 382, 406, 408, 411, 538, 540, 542, 549, 648, 733, 734, 740, 746, 787, 799, 801, 1005, 1037, 1040, 1042, 1044, 1045], "beta_": [216, 413], "beta_1": [865, 866], "beta_2": [865, 866], "beta_k": 413, "beta_loss": [55, 540, 542, 549, 1042], "betatim": 1050, "better": [44, 45, 49, 53, 58, 59, 62, 68, 84, 89, 107, 108, 110, 111, 112, 113, 117, 121, 124, 127, 138, 141, 145, 146, 147, 150, 155, 164, 175, 176, 182, 187, 189, 195, 198, 199, 202, 205, 212, 213, 214, 220, 227, 229, 230, 236, 244, 245, 246, 249, 260, 263, 264, 270, 272, 273, 276, 279, 280, 283, 287, 289, 308, 314, 315, 323, 324, 340, 347, 351, 352, 353, 355, 359, 363, 371, 375, 376, 377, 378, 381, 382, 384, 390, 393, 396, 404, 406, 408, 410, 412, 413, 414, 415, 416, 418, 450, 451, 540, 542, 549, 561, 562, 563, 564, 610, 611, 634, 675, 681, 696, 713, 729, 738, 743, 746, 767, 802, 833, 843, 844, 845, 846, 847, 848, 849, 854, 865, 866, 885, 886, 889, 897, 900, 901, 908, 909, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1013, 1015, 1018, 1019, 1021, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "better_prob": 270, "between": [2, 26, 38, 44, 45, 48, 49, 51, 52, 53, 59, 71, 73, 74, 75, 76, 78, 79, 87, 94, 95, 100, 116, 124, 126, 127, 129, 135, 138, 141, 144, 145, 147, 150, 164, 171, 176, 177, 179, 184, 186, 187, 188, 189, 194, 198, 199, 201, 204, 205, 208, 209, 212, 213, 214, 216, 217, 220, 230, 232, 239, 244, 246, 249, 262, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 282, 283, 284, 287, 289, 292, 296, 297, 299, 300, 310, 315, 317, 322, 327, 332, 340, 344, 346, 347, 351, 352, 353, 358, 359, 363, 364, 371, 376, 378, 380, 384, 385, 388, 389, 390, 391, 399, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 441, 442, 444, 445, 446, 447, 448, 451, 453, 454, 455, 457, 458, 459, 464, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 516, 517, 523, 526, 529, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 551, 552, 555, 556, 561, 562, 564, 565, 566, 567, 587, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 615, 624, 631, 636, 637, 638, 643, 646, 649, 650, 651, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 680, 682, 683, 685, 688, 692, 694, 696, 698, 699, 700, 703, 705, 707, 708, 709, 711, 713, 714, 718, 719, 720, 721, 723, 728, 729, 730, 733, 734, 735, 738, 740, 741, 747, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 796, 797, 799, 800, 801, 802, 804, 805, 806, 807, 809, 813, 821, 822, 823, 824, 825, 833, 834, 836, 838, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 866, 872, 875, 876, 878, 879, 881, 882, 885, 886, 887, 889, 894, 897, 898, 902, 908, 909, 913, 916, 917, 918, 919, 921, 949, 961, 962, 973, 994, 997, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1026, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "bewar": 417, "beyond": [44, 65, 213, 214, 264, 363, 365, 375, 376, 388, 406, 415, 733, 734, 742, 787, 788, 791, 913, 1002, 1006, 1015, 1020, 1043], "beyst": 1049, "bezuidenhout": 1048, "bf5fff": 119, "bfg": [306, 614, 615, 652, 653, 662, 673, 676, 678, 684, 691, 1008, 1009, 1050], "bgm": 801, "bharat": [412, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "bharathi": 1046, "bhardwaj": [1042, 1043], "bhargav": 1041, "bhaskaran": [1042, 1043], "bhat": [1048, 1050, 1051, 1052], "bhattacharya": 1043, "bhattarai": 1045, "bhavika": 1047, "bhoomika": 1050, "bhsu": 1039, "bhtsne": [696, 1042], "bi": [89, 416], "bia": [44, 65, 110, 123, 134, 142, 147, 150, 184, 187, 189, 194, 195, 197, 275, 305, 344, 347, 359, 371, 390, 406, 410, 414, 415, 418, 526, 558, 561, 562, 610, 611, 618, 646, 652, 653, 662, 663, 673, 674, 684, 865, 866, 881, 883, 887, 893, 894, 896, 897, 898, 899, 917, 926, 1000, 1001, 1004, 1005, 1009, 1010, 1013, 1019, 1026], "bianca": 65, "bianp": 382, "bias": [49, 114, 124, 147, 154, 186, 187, 189, 275, 371, 393, 406, 415, 526, 551, 864, 888, 899, 1000, 1004, 1013, 1019, 1021], "bibhash": [1045, 1046], "bibliograph": 376, "bibtex": 0, "bic": [2, 160, 184, 193, 199, 200, 201, 207, 220, 417, 503, 655, 657, 658, 659, 660, 802, 869, 888, 994, 1004, 1026, 1035, 1042, 1048, 1049], "bic_criterion": 200, "bicker": 1045, "biclust": [2, 6, 60, 103, 331, 333, 351, 352, 353, 416, 423, 450, 452, 454, 489, 513, 515, 594, 723, 799, 1005, 1026, 1030, 1031, 1037, 1041], "bicluster_ncut": 58, "biclustermixin": 2, "biclusters_": [59, 60, 423, 452, 454], "bidu": [1048, 1049], "biernat": 1047, "big": [44, 80, 94, 96, 217, 233, 249, 261, 364, 376, 382, 391, 410, 416, 420, 540, 563, 564, 566, 567, 810, 832, 843, 844, 845, 846, 847, 1025, 1029, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "bigg": [418, 623], "bigger": [48, 76, 94, 225, 270, 308, 344, 349, 352, 362, 364, 416, 439, 440, 510, 540, 854, 1031], "biggest": [408, 411, 413, 444], "biggest_inertia": [408, 444], "biggio": 1046, "bigram": [271, 416, 591, 592, 594], "bigram_vector": 416, "bijil": 1049, "bike": 1012, "bike_shar": 44, "bike_sharing_data_fil": 53, "bike_sharing_demand": [44, 188], "bilbro": 1042, "bill": [1045, 1046], "billaud": 1043, "billi": 1039, "billing": [1038, 1039, 1040], "billion": 1029, "bimod": [314, 414], "bin": [2, 44, 62, 63, 65, 87, 108, 137, 141, 212, 243, 249, 264, 276, 295, 310, 311, 312, 313, 314, 316, 317, 374, 384, 394, 406, 414, 415, 439, 440, 449, 462, 563, 564, 871, 873, 887, 954, 1043, 1044, 1045, 1049, 1053], "bin_cent": [87, 212], "bin_edg": 87, "bin_edges_": [87, 311, 873], "bin_seed": [80, 97, 449, 462, 1046], "binar": [2, 37, 277, 279, 280, 368, 370, 758, 843, 872, 873, 875, 879, 881, 889, 892, 1005, 1007, 1031, 1049, 1051], "binari": [2, 31, 48, 54, 63, 65, 139, 141, 151, 153, 166, 179, 187, 192, 204, 205, 206, 212, 220, 233, 240, 249, 252, 264, 267, 268, 273, 279, 284, 287, 294, 340, 344, 358, 359, 370, 371, 372, 380, 381, 390, 394, 402, 405, 406, 407, 408, 415, 416, 418, 438, 439, 440, 453, 488, 502, 510, 511, 522, 525, 551, 552, 555, 557, 561, 563, 568, 569, 570, 584, 591, 592, 594, 596, 597, 605, 614, 631, 632, 633, 634, 635, 636, 637, 662, 663, 670, 672, 677, 678, 679, 680, 704, 707, 711, 712, 713, 716, 717, 719, 722, 724, 726, 731, 733, 734, 738, 739, 742, 743, 744, 745, 747, 786, 787, 788, 791, 792, 793, 798, 800, 803, 804, 805, 807, 808, 809, 810, 818, 822, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 843, 854, 864, 875, 879, 881, 889, 892, 908, 910, 913, 924, 967, 995, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1032, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1052, 1053], "binary_crossentropi": 1049, "binary_eros": 54, "binary_onli": [1045, 1046], "binarytre": [853, 1039, 1043, 1047], "bincount": [390, 412, 559, 563, 566, 662, 663, 670, 672, 678, 679, 680, 908, 910, 913, 916, 918, 939, 940, 1042], "bind": [394, 1024, 1035, 1042, 1043], "binder": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358], "binesh": [1051, 1052], "binet": [1045, 1050], "bing": [1041, 1042], "bingham": 1017, "binned_numer": [212, 230], "binom": 1001, "binomi": [146, 149, 415, 555, 561, 563, 1001, 1049, 1052], "bio": 273, "biocsklearn": 1024, "bioinformat": [632, 995], "biola": 1053, "biologi": 51, "biometrika": [884, 896], "biostatist": [410, 479], "bipartit": [405, 454, 513, 1010], "biprateep": 1047, "birch": [2, 72, 80, 98, 184, 323, 365, 390, 447, 450, 514, 1026, 1030, 1031, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "birch_model": 78, "bird": [585, 722, 758, 1005], "birodkar": [1040, 1041, 1043], "bischl": 370, "bisect": [2, 72, 76, 91, 92, 93, 94, 95, 180, 184, 266, 444, 448, 514, 1026, 1049], "bisect_km": 323, "bisect_mean": 444, "bisecting_strategi": [408, 444], "bisectingkmean": [2, 79, 408, 448, 1049, 1050, 1051], "bisector": 71, "bishop": [534, 536, 543, 745, 801, 1001, 1006, 1020], "bistochast": [405, 452], "biswadip": 1045, "biswaroop": 1050, "bit": [44, 53, 65, 87, 110, 124, 210, 214, 287, 310, 340, 352, 359, 363, 371, 374, 390, 394, 396, 415, 416, 585, 592, 662, 838, 934, 935, 1002, 1006, 1023, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1049, 1052, 1053], "bithash": 644, "bithash_": 644, "bitli": 1029, "bitmap": 373, "bittarello": 1048, "bjerr": 1043, "bla": [363, 364, 374, 377, 382, 384, 782, 1035, 1043, 1044, 1046, 1047, 1053], "black": [44, 49, 50, 51, 53, 64, 71, 80, 83, 89, 90, 112, 113, 119, 121, 123, 143, 164, 167, 171, 172, 176, 177, 180, 183, 187, 188, 194, 200, 202, 203, 205, 212, 213, 214, 218, 221, 224, 225, 230, 239, 249, 255, 258, 295, 305, 306, 308, 334, 349, 356, 357, 376, 394, 401, 408, 415, 418, 557, 558, 635, 1011, 1012, 1021], "blackburn": [1038, 1041], "blackd0t": 1045, "blair": 371, "blakeflei": 1041, "blame": 376, "blanchard": [1039, 1040], "blank": [94, 381, 995, 1021], "bldgtype": 144, "bleed": 1029, "blei": [413, 538, 801], "bleich": [188, 1012], "bleki": 1047, "blend": [143, 155, 390, 412], "bli": [364, 374, 388], "blind": [120, 123, 184, 211, 413, 420, 535, 543, 1026], "blink": 340, "blis_num_thread": 364, "blob": [2, 62, 70, 71, 78, 80, 91, 96, 98, 376, 384, 408, 449, 514], "blobs_param": 239, "block": [2, 295, 310, 323, 371, 373, 376, 381, 384, 390, 405, 408, 411, 414, 453, 454, 463, 474, 480, 481, 489, 490, 513, 515, 699, 952, 1008, 1010], "block_siz": [474, 480, 481, 1039], "blocker": [380, 1053], "blocknum": 48, "blockwis": [405, 1001], "blog": [323, 363, 376, 382, 384, 391, 1046], "blogpost": 381, "blondel": [0, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1048], "blood": [240, 373], "bloom": [385, 969], "blown": 343, "blue": [47, 49, 53, 59, 60, 64, 71, 112, 119, 121, 135, 138, 142, 149, 150, 152, 155, 157, 167, 176, 178, 192, 195, 200, 202, 210, 235, 243, 263, 264, 265, 270, 306, 315, 320, 326, 331, 357, 373, 408, 413, 1052], "blueviolet": [226, 296, 339], "blum": 1042, "blyston": [1045, 1046], "bmaisonn": 1047, "bmalezieux": 1048, "bmatrix": [405, 997], "bmc": 1015, "bme": 1053, "bmi": [169, 250, 373, 1013], "bmreinig": 1049, "bmva": 675, "bmvc": [675, 1001], "bo": [64, 1047], "board": 0, "bob": [1036, 1042], "bobyrev": 1042, "boca": 1001, "bodenhof": [405, 723], "bodi": [48, 103, 250, 324, 373], "body_bow": 103, "body_stat": 103, "boe": 52, "boechat": 1042, "boenisch": 1046, "boerner": 1049, "boersma": 1041, "bogazici": 373, "bogdan": 1035, "boggavarapu": 1047, "bohl": [1047, 1049], "bohn\u00e9": 1048, "boil": [135, 379, 390, 410], "boilerpl": [246, 378, 1029], "boisberrang": [0, 397, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bold": [94, 147, 202, 208, 376], "boll": 1001, "bolleddula": 1053, "bolmier": [1046, 1047, 1051], "boltzmann": [2, 106, 161, 184, 203, 205, 304, 504, 662, 717, 834, 864, 865, 866, 868, 894, 1026, 1030, 1031, 1037], "bommarito": [1038, 1039], "bonald": 1050, "bone": [225, 349], "bonferroni": 270, "bonu": [230, 374, 376], "bonusmalu": [212, 230], "boo": 373, "book": [444, 448, 450, 838, 843, 847, 1001, 1002, 1003, 1006, 1047], "booktitl": 0, "bool": [83, 100, 113, 183, 230, 358, 376, 378, 420, 421, 422, 423, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 521, 524, 525, 526, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 704, 706, 707, 711, 712, 713, 715, 716, 717, 718, 730, 731, 732, 733, 734, 735, 742, 745, 746, 758, 760, 765, 767, 771, 773, 778, 782, 786, 787, 788, 789, 791, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 818, 822, 823, 826, 827, 828, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 930, 932, 933, 934, 935, 945, 946, 947, 952, 953, 966, 967, 969, 975, 977, 985, 990, 991, 992, 993, 995, 1044, 1047, 1048], "bool_": 214, "boolean": [2, 133, 246, 358, 371, 376, 378, 385, 409, 415, 416, 417, 465, 563, 564, 584, 585, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 633, 636, 637, 640, 653, 675, 703, 782, 837, 843, 864, 871, 891, 925, 930, 988, 995, 1001, 1007, 1012, 1015, 1021, 1035, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1053], "boom": 1053, "boost": [2, 14, 47, 53, 104, 134, 135, 136, 139, 140, 142, 152, 155, 158, 178, 184, 189, 190, 195, 209, 214, 220, 235, 269, 271, 306, 311, 314, 316, 323, 326, 377, 382, 390, 407, 417, 449, 467, 468, 491, 498, 503, 522, 555, 556, 561, 562, 563, 564, 566, 567, 636, 637, 638, 639, 745, 746, 752, 754, 794, 804, 807, 808, 809, 825, 831, 834, 869, 881, 882, 1001, 1005, 1024, 1026, 1027, 1031, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1048], "booster": 1040, "boosting_error": 135, "boostingdecis": 415, "booth": 1042, "bootstrap": [138, 139, 146, 182, 273, 282, 321, 412, 415, 556, 557, 558, 559, 560, 565, 566, 567, 940, 975, 1001, 1035, 1036, 1038, 1040, 1043, 1045, 1048], "bootstrap_featur": [415, 557, 558], "bootstrap_indic": 273, "borchmann": 1050, "border": [447, 1045], "borderaxespad": 112, "borderpad": 356, "borderwidth": 141, "borg": [694, 698, 1002], "borgn": 1048, "bori": [1039, 1047, 1051], "borja": 1039, "born": 1041, "borovec": 1049, "borovikova": 1046, "bosch": 1048, "bossan": [1047, 1049, 1050, 1051, 1053], "bossch": [0, 398, 1042, 1043, 1044, 1048], "boston": 1029, "bot": [376, 380, 1010, 1049, 1052, 1053], "botelho": 1047, "both": [31, 44, 45, 47, 49, 50, 53, 55, 59, 63, 64, 65, 71, 78, 88, 89, 98, 104, 110, 112, 116, 117, 126, 128, 133, 138, 141, 142, 144, 145, 150, 154, 155, 158, 164, 165, 167, 169, 171, 178, 180, 186, 187, 188, 189, 194, 198, 199, 200, 202, 205, 212, 213, 214, 216, 217, 218, 220, 230, 236, 245, 246, 247, 255, 256, 257, 258, 259, 260, 264, 270, 271, 272, 273, 277, 279, 281, 283, 290, 302, 310, 314, 315, 319, 321, 325, 331, 332, 337, 342, 344, 351, 352, 353, 358, 359, 363, 364, 365, 369, 370, 371, 374, 376, 378, 380, 382, 383, 385, 388, 389, 390, 391, 394, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 421, 438, 447, 453, 463, 469, 476, 483, 484, 485, 486, 489, 490, 498, 499, 502, 504, 507, 509, 510, 511, 536, 540, 542, 549, 553, 557, 558, 559, 565, 566, 567, 568, 569, 580, 591, 592, 594, 600, 610, 611, 631, 636, 637, 647, 661, 662, 663, 676, 678, 680, 682, 691, 703, 708, 716, 720, 733, 734, 735, 740, 742, 761, 765, 771, 778, 782, 787, 788, 791, 792, 793, 799, 807, 808, 810, 827, 837, 865, 866, 880, 882, 884, 896, 901, 906, 908, 909, 916, 918, 925, 938, 943, 953, 967, 979, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "botstein": [632, 995], "bottleneck": [363, 382, 415, 449, 865, 866], "bottom": [46, 48, 52, 54, 55, 71, 73, 75, 78, 80, 85, 87, 96, 98, 119, 145, 153, 158, 212, 223, 239, 255, 257, 258, 261, 267, 270, 281, 295, 310, 330, 332, 340, 376, 406, 408, 414, 590, 920, 999, 1001, 1005, 1013, 1025], "bottom_h": 310, "bottou": [680, 681, 682, 1009, 1019], "bou": [1050, 1051], "boucaud": 1043, "boucher": 1042, "bouckaert": 270, "boukhobza": 1053, "boulard": 1052, "bould": 408, "bouldin": [2, 729], "boulogn": 1038, "boun": 373, "bound": [2, 65, 89, 177, 184, 214, 230, 238, 269, 383, 408, 413, 416, 418, 419, 445, 490, 504, 514, 525, 538, 565, 598, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 636, 639, 641, 654, 658, 662, 681, 709, 739, 792, 801, 802, 848, 849, 885, 897, 900, 901, 902, 910, 911, 912, 915, 938, 1001, 1004, 1005, 1008, 1017, 1019, 1020, 1022, 1026, 1043, 1046, 1047, 1049], "bound_": 538, "boundari": [2, 51, 54, 63, 64, 65, 67, 68, 71, 92, 94, 134, 137, 143, 153, 157, 162, 172, 173, 175, 184, 188, 193, 203, 213, 221, 227, 239, 244, 247, 273, 285, 287, 298, 300, 301, 303, 305, 310, 312, 315, 328, 333, 335, 336, 337, 338, 339, 340, 342, 348, 349, 356, 372, 406, 415, 416, 418, 451, 457, 506, 514, 538, 551, 552, 571, 591, 592, 594, 635, 662, 739, 765, 804, 837, 850, 856, 858, 859, 860, 883, 887, 904, 905, 910, 912, 913, 916, 938, 999, 1001, 1008, 1011, 1015, 1018, 1019, 1020, 1026, 1035, 1037, 1039, 1048, 1049, 1050, 1052], "bounding_ax_": [383, 636], "boundscheck": [364, 377], "bourassa": 415, "bourbeau": [1042, 1043, 1044], "bourboux": 1046, "bourguignat": 1040, "bournhonesqu": 1045, "bousquet": 904, "boutili": 1017, "boutsidi": 413, "bow": 409, "bown": 1041, "bowyer": 1053, "box": [44, 50, 67, 89, 188, 189, 233, 287, 310, 314, 383, 413, 415, 514, 557, 558, 884, 896, 920, 922, 1005, 1006, 1012, 1015, 1021, 1043, 1051], "boxplot": [50, 112, 148, 187, 190, 284, 319], "boxplot_runtim": 50, "boxstyl": [49, 312], "boy": 1049, "boyd": 1001, "boyl": [1052, 1053], "boyuan": [1039, 1040, 1041], "bp": [50, 148, 373, 1013], "bpo": 882, "br": 137, "br_estim": 182, "bracket": [376, 1001], "bradi": 1042, "bradlei": [373, 1001], "bradshaw": [1038, 1039, 1042], "bradypu": [51, 303, 371, 500], "bradypus_variegatus_0": 51, "brain": 370, "branch": [363, 374, 376, 379, 380, 408, 415, 443, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 916, 917, 918, 919, 921, 1008, 1012, 1021], "branching_factor": 443, "brand": [391, 394], "brandon": [1041, 1042, 1049, 1050], "brandt": 1046, "brandyn": 1035, "brault": 1042, "braun": 1043, "bravi": 1041, "braycurti": [451, 458, 703, 782, 783, 784, 1008], "braycurtisdist": 703, "brc": [408, 443], "brdav": 1053, "bre": [2, 638, 1021], "bread": 1029, "breadth": [848, 849, 853, 1029, 1037], "breadth_first": [848, 849, 853], "break": [2, 56, 75, 81, 103, 113, 184, 202, 218, 246, 257, 287, 322, 330, 335, 351, 353, 376, 380, 382, 389, 408, 470, 514, 643, 778, 782, 785, 801, 881, 888, 893, 910, 913, 1001, 1004, 1013, 1015, 1020, 1025, 1026, 1035, 1036, 1042, 1043, 1045, 1047, 1051], "break_ti": [348, 910, 913, 1020, 1045], "breakdown": [112, 113, 229, 683, 1001], "breakdown_": 683, "breast": [2, 169, 369, 502, 1013, 1031, 1040], "breast_canc": 332, "breast_cancer_data": 169, "brecht": 645, "bredin": 1039, "breiman": [189, 412, 415, 518, 519, 520, 557, 558, 566, 567, 638, 916, 917, 1013, 1021], "brekk": 1050, "brendan": [74, 441, 455, 1051, 1052, 1053], "brenden": 1049, "brenner": 1005, "breno": [1042, 1043], "brent": [1039, 1043, 1044], "brentfagan": 1044, "brett": [1038, 1040, 1041, 1042, 1043, 1050], "brettingen": 1041, "breuer": 1046, "breunig": [408, 451, 458, 854, 1011], "breve": 1051, "brevin": [1051, 1052], "brew": [146, 374, 394], "brian": [0, 398, 712, 1005, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049], "brice": [1047, 1048], "bridg": [388, 1002], "brief": [376, 1003], "briefli": [279, 375, 389, 415, 994, 1045], "brier": [2, 62, 63, 65, 406, 713], "brier1950": 1005, "brier_scor": 62, "brier_score_loss": [2, 62, 63, 406, 1005, 1043, 1044, 1045, 1053], "brigata": 373, "bright": 340, "brighter": 179, "brigi": [1046, 1047], "brigitta": [1045, 1046, 1047, 1051, 1053], "bring": [187, 310, 413, 680, 682, 1002, 1029], "british": 416, "brittl": [75, 408], "broad": [376, 390, 1024], "broadcast": 631, "broader": [312, 1001, 1028], "broadli": [390, 408], "brocchini": 1047, "brochart": 1052, "brockherd": 1037, "brodersen": 712, "broke": 1042, "broken": [394, 412, 602, 603, 639, 724, 930, 1005, 1021, 1038, 1042, 1043, 1044, 1046, 1049], "brook": [1038, 1039, 1047], "brought": [186, 555, 556, 559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919], "brown": [51, 119, 303, 371, 500, 632, 995, 1040, 1042, 1043, 1044, 1047], "browser": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 376, 384, 1015, 1052], "broyden": 1001, "brr": 194, "brr_poli": 194, "brr_score": 194, "bruce": [1045, 1046], "brucher": [0, 398, 1035], "brummitt": [1042, 1043], "brunak": 747, "brunner": 1039, "bruno": [1046, 1047, 1048, 1053], "brutal": 340, "brute": [290, 388, 403, 412, 419, 445, 447, 451, 458, 636, 637, 692, 693, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 1012, 1031, 1039, 1043, 1047, 1050, 1051, 1052, 1053], "bry": 221, "bryan": [1035, 1038, 1044, 1045, 1048], "br\u00f6mmel": [1049, 1050], "bsa": 768, "bsas_in_radian": 768, "bscikit": 1035, "bsd": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 382, 388], "bsh": 1050, "bsmtfinsf1": [144, 155], "bsmtfinsf2": 144, "bsmthalfbath": 144, "bsmtunfsf": 155, "bspline": 887, "bsplines_": [213, 887], "bsr": [934, 935, 1048], "bt": 416, "btol": [676, 678], "buck": 631, "budarz": 1048, "buddha": 1040, "budget": [0, 144, 843, 844, 845, 846, 847, 994], "bueno": 768, "buffer": [84, 1048, 1053], "buffer_mb": 1035, "bug": [246, 319, 320, 321, 322, 323, 324, 325, 326, 327, 374, 378, 379, 380, 381, 384, 388, 390, 1025, 1035, 1036, 1037, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bugfix": [1035, 1049], "buguen": 1035, "buhmann": 712, "build": [0, 2, 7, 17, 36, 44, 47, 56, 69, 79, 89, 101, 107, 125, 135, 143, 145, 152, 158, 166, 168, 181, 182, 184, 187, 220, 275, 278, 287, 289, 290, 307, 308, 311, 316, 317, 353, 359, 363, 364, 365, 372, 379, 380, 381, 382, 390, 394, 401, 408, 412, 415, 416, 443, 491, 503, 505, 526, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 588, 589, 591, 592, 594, 631, 632, 634, 695, 717, 718, 805, 809, 813, 822, 828, 830, 869, 886, 888, 916, 917, 918, 919, 921, 948, 952, 994, 995, 1002, 1005, 1009, 1011, 1015, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1035, 1038, 1040, 1041, 1042, 1044, 1047], "build_analyz": [416, 591, 592, 594, 1045], "build_preprocessor": [416, 591, 592, 594, 1045], "build_projection_oper": 54, "build_token": [58, 416, 591, 592, 594], "build_tool": [376, 380, 384], "builder": [48, 50, 347, 380], "buildtool": 374, "built": [2, 26, 67, 117, 133, 135, 136, 143, 145, 189, 220, 273, 287, 303, 319, 356, 358, 363, 371, 374, 376, 377, 380, 382, 384, 385, 388, 389, 390, 394, 402, 408, 409, 412, 415, 417, 446, 505, 555, 556, 557, 558, 561, 562, 563, 564, 591, 592, 596, 600, 643, 644, 645, 646, 647, 650, 651, 656, 662, 664, 665, 666, 667, 676, 677, 678, 679, 685, 807, 808, 815, 839, 842, 848, 849, 918, 919, 957, 988, 1001, 1005, 1006, 1018, 1019, 1021, 1024, 1029, 1035, 1038, 1039, 1041, 1047, 1053], "builtin": 1020, "buitinck": [0, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "bulk": [279, 419, 445], "bulk_benchmark": 50, "bulk_benchmark_estim": 50, "bulk_runtim": 50, "bull": 1042, "buluttekin": 1045, "bumblebe": 1048, "bunch": [2, 51, 127, 246, 369, 370, 371, 465, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 509, 512, 569, 570, 571, 572, 636, 637, 638, 867, 868, 916, 917, 918, 919, 961, 964, 1029, 1040, 1042, 1045, 1047, 1051], "bundl": [1043, 1044], "bupu": 188, "burden": [376, 880, 1025], "bureau": 371, "buri": 376, "burjek": 1035, "burk": [0, 360, 1050], "burn": [1042, 1043], "burst": 1005, "busch": [1043, 1044, 1046], "bush": 371, "busi": [44, 212, 270, 327, 384, 388, 407, 792, 1001, 1005, 1029], "business_metr": 264, "business_scor": 264, "bussonni": [1035, 1047], "butler": [475, 1038, 1046, 1047], "butlerdavi": 475, "butter": 1029, "button": [376, 384], "butyugina": 1051, "buuren": [631, 995], "buzenet": [1050, 1051], "bv_bunch": 51, "bwignal": 1038, "bypass": [407, 409, 602, 650, 656, 826, 916, 917, 918, 919, 1051], "byproduct": 236, "byrd": 662, "byron": 1047, "byte": [87, 416, 488, 505, 510, 511, 585, 591, 592, 594, 969, 1035, 1042, 1043, 1050, 1053], "bz2": [56, 510, 511], "bz2file": 56, "bzip2": 1035, "c": [2, 44, 46, 47, 48, 51, 52, 53, 58, 62, 63, 65, 67, 68, 71, 75, 76, 78, 79, 86, 90, 91, 93, 94, 95, 99, 104, 105, 107, 117, 119, 126, 127, 135, 137, 138, 143, 144, 151, 153, 154, 156, 157, 162, 172, 173, 174, 175, 179, 192, 201, 203, 204, 205, 206, 208, 210, 219, 221, 223, 224, 225, 226, 228, 229, 232, 234, 236, 237, 244, 245, 247, 251, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 273, 275, 279, 281, 290, 293, 296, 298, 299, 300, 301, 303, 305, 306, 308, 310, 311, 312, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 331, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 356, 357, 363, 364, 370, 371, 372, 373, 374, 376, 377, 379, 381, 384, 385, 388, 394, 395, 399, 405, 406, 408, 409, 410, 411, 412, 413, 415, 417, 421, 438, 443, 444, 447, 448, 450, 460, 469, 476, 525, 530, 536, 540, 542, 543, 549, 551, 552, 593, 610, 611, 614, 635, 643, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 676, 677, 683, 689, 690, 692, 693, 696, 697, 712, 718, 719, 722, 735, 739, 745, 746, 762, 763, 804, 818, 827, 833, 835, 843, 844, 845, 846, 847, 848, 849, 855, 857, 864, 879, 881, 882, 883, 887, 889, 903, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 923, 934, 935, 967, 994, 997, 998, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1015, 1017, 1019, 1020, 1021, 1024, 1029, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1053], "c0": [144, 242, 316], "c1": [99, 144, 179, 242, 316], "c2": [99, 144, 179, 242, 316], "c3": [99, 144, 316], "c4": [99, 316, 1027, 1031], "c5": [99, 1027, 1031], "c56poni": 1045, "c6": 99, "c99": 1024, "c_": [51, 63, 64, 65, 92, 112, 122, 143, 146, 152, 153, 162, 173, 210, 225, 228, 239, 296, 313, 315, 334, 340, 348, 349, 408, 663, 718, 719, 722, 1005], "c_0": [997, 1003], "c_1": 1002, "c_2": [408, 1002], "c_2d_rang": 340, "c_e": 408, "c_i": [408, 1008], "c_j": [408, 1010], "c_jh_j": 1010, "c_k": 551, "c_option": 105, "c_p": 1001, "c_q": 408, "c_rang": 340, "c_scale": 347, "ca": [373, 408, 443, 916, 917, 1017, 1021], "cablevis": 52, "cabrera": 1045, "cach": [2, 53, 88, 100, 184, 271, 290, 291, 293, 298, 302, 363, 364, 371, 378, 390, 442, 446, 451, 469, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 504, 510, 511, 804, 850, 852, 868, 869, 906, 910, 911, 912, 913, 914, 989, 1008, 1020, 1026, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1053], "cache_path": 1008, "cache_s": [469, 906, 910, 911, 912, 913, 914, 1020], "cached_pip": [105, 409], "cachedir": [88, 105, 385, 409], "caching_dir": 989, "caherrera": 1048, "cai": 1048, "caicedo": 1035, "cailean": 1053, "cainei": 1053, "caio": [1041, 1043, 1045], "caj": 52, "caje": 1036, "cal_clf": 64, "cal_clf_prob": 64, "cal_hous": 371, "cal_scor": 64, "calcot": 1048, "calcsiz": 374, "calcul": [2, 47, 64, 65, 70, 81, 93, 112, 133, 134, 135, 139, 156, 183, 184, 190, 216, 217, 229, 244, 246, 269, 270, 276, 280, 285, 289, 338, 344, 345, 359, 363, 378, 383, 390, 399, 405, 406, 408, 412, 413, 415, 419, 439, 444, 445, 447, 449, 451, 452, 454, 456, 457, 472, 473, 479, 482, 538, 549, 565, 566, 571, 600, 615, 624, 636, 637, 638, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 683, 685, 688, 692, 694, 696, 698, 711, 720, 733, 734, 739, 740, 742, 748, 758, 768, 773, 775, 776, 777, 778, 782, 785, 787, 788, 791, 792, 793, 796, 797, 799, 811, 813, 829, 833, 846, 848, 849, 886, 887, 888, 894, 898, 908, 909, 940, 954, 997, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1013, 1015, 1018, 1020, 1026, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "cald": 903, "caleb": 1047, "calibr": [2, 53, 67, 138, 150, 157, 205, 230, 242, 264, 270, 272, 390, 399, 438, 439, 440, 514, 517, 566, 571, 613, 662, 663, 680, 713, 733, 745, 788, 791, 792, 803, 826, 834, 846, 905, 908, 942, 994, 1001, 1005, 1018, 1020, 1026, 1027, 1031, 1032, 1039, 1041], "calibrated_classifi": 64, "calibrated_classifiers_": [64, 406, 438], "calibrated_clf": 438, "calibrated_df": [63, 65], "calibrated_forest": 994, "calibratedclassifiercv": [2, 62, 63, 64, 359, 390, 399, 406, 680, 803, 826, 994, 1020, 1039, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "calibration_curv": [2, 62, 406, 438, 439, 1044, 1049, 1053], "calibration_displai": [63, 65], "calibrationdisplai": [2, 63, 65, 406, 942, 1048, 1049, 1053], "california": [2, 145, 179, 182, 183, 310, 321, 369, 373, 491, 1031], "calinski": [2, 714, 1041], "calinski_harabasz_scor": [2, 408, 1043], "calinski_harabaz_scor": [1041, 1043], "cali\u0144ski": 408, "call": [53, 54, 56, 81, 84, 104, 119, 133, 140, 146, 166, 171, 186, 188, 200, 205, 209, 212, 213, 216, 230, 246, 250, 252, 253, 264, 270, 271, 279, 283, 285, 287, 290, 292, 315, 317, 321, 322, 352, 353, 358, 363, 364, 365, 371, 376, 377, 378, 381, 382, 383, 384, 385, 388, 389, 390, 391, 394, 399, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 420, 431, 441, 444, 447, 448, 450, 451, 452, 453, 454, 455, 458, 461, 463, 465, 466, 469, 470, 475, 483, 484, 485, 489, 492, 494, 497, 499, 505, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 580, 585, 586, 591, 592, 594, 600, 605, 610, 611, 613, 614, 615, 618, 624, 631, 632, 633, 634, 635, 636, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 708, 736, 746, 759, 775, 778, 782, 783, 784, 785, 797, 801, 802, 804, 805, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 857, 859, 864, 865, 866, 867, 868, 871, 872, 873, 875, 877, 878, 880, 885, 888, 889, 892, 897, 898, 899, 900, 901, 905, 908, 909, 910, 911, 913, 914, 917, 919, 927, 929, 941, 945, 951, 952, 961, 962, 964, 970, 971, 975, 978, 988, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1017, 1018, 1020, 1021, 1024, 1029, 1031, 1032, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "callabl": [2, 260, 274, 327, 390, 412, 415, 416, 417, 419, 420, 442, 444, 445, 446, 447, 448, 450, 451, 453, 458, 460, 461, 465, 466, 467, 468, 533, 535, 537, 539, 541, 547, 548, 559, 560, 561, 562, 563, 564, 566, 567, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 614, 615, 624, 632, 634, 638, 643, 647, 663, 675, 677, 679, 692, 695, 696, 700, 715, 723, 736, 746, 775, 778, 782, 783, 784, 785, 796, 797, 804, 807, 808, 810, 818, 826, 827, 830, 831, 832, 833, 835, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 872, 881, 903, 904, 910, 911, 912, 913, 914, 945, 946, 947, 965, 971, 974, 988, 994, 1005, 1015, 1035, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1051], "callback": [533, 539, 541, 547, 548, 857, 945, 970, 1025, 1051], "callbl": 850, "calle": [2, 246, 962], "caller": [2, 246, 409, 650, 651, 656, 664, 665, 666, 685, 898, 899, 961, 962, 980, 981, 982, 1044], "callgrin": 382, "callgrind": 379, "calm": 52, "caltech": 351, "calvin": [1038, 1039], "calvo": [1043, 1044], "cambridg": [371, 413, 593, 843, 847, 1001, 1003, 1007], "came": 1004, "camera_ind": 54, "camil": [1043, 1051, 1052], "camila": 1045, "camilaagw": 1045, "camilo": 1041, "campello": [408, 447], "campustrampu": 1042, "can": [0, 11, 20, 26, 38, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 62, 63, 64, 65, 68, 69, 70, 73, 76, 78, 79, 81, 83, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 103, 104, 105, 106, 110, 111, 112, 113, 114, 117, 122, 124, 125, 126, 127, 128, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166, 167, 168, 169, 171, 176, 177, 178, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 198, 200, 202, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 228, 229, 230, 232, 233, 234, 239, 240, 241, 242, 243, 245, 246, 249, 250, 253, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 287, 289, 290, 292, 294, 295, 296, 297, 299, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 333, 334, 337, 338, 340, 343, 344, 347, 351, 352, 353, 357, 358, 359, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 389, 390, 391, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 431, 433, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 473, 483, 484, 485, 488, 498, 501, 505, 510, 511, 514, 523, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 582, 583, 584, 585, 586, 587, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 636, 637, 638, 639, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 693, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 708, 711, 713, 715, 716, 722, 724, 725, 726, 727, 728, 730, 731, 733, 734, 736, 737, 741, 742, 743, 744, 747, 750, 756, 759, 760, 761, 762, 763, 767, 783, 784, 786, 787, 788, 789, 791, 792, 793, 798, 799, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 866, 867, 868, 869, 871, 872, 873, 875, 876, 877, 881, 882, 883, 886, 887, 888, 893, 900, 901, 905, 906, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 920, 921, 924, 925, 927, 928, 930, 932, 934, 938, 940, 949, 951, 952, 959, 961, 964, 967, 970, 974, 975, 978, 985, 988, 989, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1029, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "canberra": [451, 458, 703, 782, 783, 784, 1008], "canberradist": 703, "cancel": [415, 416, 767], "cancer": [2, 169, 369, 407, 502, 596, 597, 855, 1013, 1031, 1040], "candela": 373, "candid": [260, 268, 278, 321, 365, 376, 380, 408, 415, 449, 451, 804, 807, 808, 816, 818, 1001, 1008, 1021, 1041], "candidate_idx": 269, "cannon": 1050, "cannot": [44, 53, 76, 90, 108, 114, 121, 126, 187, 188, 198, 212, 230, 246, 283, 310, 340, 347, 365, 375, 377, 382, 388, 390, 391, 396, 402, 408, 409, 410, 412, 413, 415, 416, 418, 466, 523, 540, 541, 542, 545, 549, 613, 614, 617, 618, 619, 621, 623, 624, 626, 627, 629, 655, 659, 696, 715, 721, 782, 807, 808, 855, 856, 858, 859, 860, 868, 869, 873, 878, 879, 890, 932, 934, 935, 945, 994, 995, 999, 1001, 1002, 1005, 1006, 1011, 1015, 1020, 1021, 1025, 1029, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "canon": [2, 52, 390, 406, 415, 483, 484, 486, 772, 1025, 1027, 1031], "canonic": 390, "cant": [1052, 1053], "cantor": [632, 995], "canuma": 1048, "canva": 52, "cao": 408, "cap": [405, 408, 759, 1005, 1044], "capabl": [89, 90, 117, 150, 176, 216, 236, 378, 390, 394, 1006, 1009, 1020, 1021, 1029, 1035, 1044, 1052], "capac": [150, 171, 189], "capit": [50, 63, 498, 810, 827], "capitain": 1053, "cappion": [696, 1002], "cappuzzo": 1052, "capsiz": 332, "caption": 103, "captur": [2, 44, 49, 52, 53, 73, 75, 117, 147, 152, 164, 176, 187, 194, 198, 205, 212, 216, 261, 283, 289, 320, 340, 344, 384, 408, 415, 416, 417, 573, 591, 592, 594, 854, 971, 1005, 1010, 1018, 1022, 1047], "car": 212, "carbal": 1052, "card": 1043, "cardin": [73, 142, 148, 189, 190, 316, 317, 325, 408, 415, 464, 555, 556, 559, 560, 561, 562, 566, 567, 568, 683, 881, 882, 889, 916, 917, 918, 919, 1005, 1006, 1013, 1015, 1049, 1050], "cardiotocogram": 249, "care": [48, 89, 148, 187, 264, 287, 344, 363, 365, 380, 382, 388, 390, 391, 402, 407, 408, 410, 416, 438, 461, 470, 644, 662, 663, 670, 671, 672, 680, 681, 682, 699, 908, 1002, 1020, 1029, 1051], "carefulli": [284, 363, 406, 413, 1020], "carei": [1038, 1039, 1040, 1041, 1042], "carett": 1042, "cari": 1047, "carl": [176, 418, 614, 615, 618, 623, 626], "carla": 1051, "carlo": [0, 244, 366, 415, 418, 615, 645, 646, 997, 1010, 1035, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "carlson": 1042, "carlsson": 1038, "carnegi": 903, "caro": 1040, "carol": [1041, 1042], "carolin": 1009, "carrascosa": [1029, 1039], "carre\u00f1o": 1050, "carri": [52, 68, 135, 183, 264, 270, 273, 278, 283, 306, 312, 353, 391, 416, 559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919, 1029], "carrillo": 1040, "carsten": 1048, "cart": [1027, 1031], "carter": [1041, 1042, 1050, 1053], "cartesian": [104, 405, 637, 1008, 1050], "cartman_nabana": 1045, "cartograph": 192, "cartographi": 1001, "caruana": [63, 65, 406, 438, 440], "carvaj": 1035, "casado": 1046, "casagrand": [1043, 1044], "casalegno": 1047, "cascad": 373, "case": [2, 31, 44, 47, 48, 53, 63, 65, 71, 73, 83, 86, 89, 91, 95, 100, 104, 105, 113, 117, 126, 128, 138, 140, 141, 147, 148, 155, 166, 168, 169, 171, 178, 187, 188, 190, 198, 199, 202, 204, 212, 213, 214, 216, 217, 220, 226, 228, 229, 230, 239, 243, 244, 245, 246, 249, 250, 260, 263, 264, 267, 269, 270, 271, 273, 276, 277, 279, 287, 290, 293, 297, 307, 310, 312, 315, 317, 319, 322, 327, 344, 351, 352, 353, 357, 358, 359, 363, 364, 365, 370, 371, 376, 377, 378, 380, 381, 382, 383, 385, 388, 389, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 438, 441, 444, 445, 447, 448, 452, 454, 464, 465, 466, 468, 475, 498, 510, 511, 517, 541, 543, 544, 545, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 584, 585, 591, 594, 596, 597, 600, 605, 609, 612, 614, 615, 629, 631, 632, 634, 636, 651, 652, 657, 660, 661, 662, 663, 665, 667, 670, 672, 673, 676, 678, 679, 680, 684, 686, 687, 688, 689, 690, 691, 703, 707, 712, 713, 716, 722, 724, 725, 727, 730, 732, 733, 734, 738, 739, 742, 746, 747, 749, 750, 752, 754, 757, 758, 760, 767, 782, 785, 787, 788, 789, 791, 792, 793, 794, 798, 800, 802, 804, 807, 808, 810, 818, 822, 827, 828, 829, 830, 831, 832, 833, 835, 837, 845, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 868, 875, 877, 878, 881, 882, 883, 886, 887, 888, 889, 892, 898, 899, 900, 901, 908, 910, 913, 916, 917, 923, 928, 930, 940, 952, 953, 993, 994, 995, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1021, 1024, 1025, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "caselli": [1043, 1044], "cash": 1001, "cashman": 1045, "casino": [1049, 1050], "cass": 1041, "cast": [51, 53, 87, 212, 233, 370, 391, 416, 498, 648, 649, 650, 656, 660, 661, 664, 665, 666, 667, 668, 669, 677, 679, 969, 1042, 1043, 1044, 1045, 1048, 1050, 1052], "castachick": 1046, "castello": 1039, "castor": 1046, "caswel": [1048, 1051], "cat": [52, 104, 188, 189, 249, 322, 323, 324, 325, 326, 327, 371, 416, 489, 585, 716, 722, 758, 787, 889, 1005, 1015, 1044, 1045, 1047], "cat_column": 249, "cat_linear_processor": 155, "cat_proc": [241, 320], "cat_selector": 155, "cat_str": 58, "cat_tree_processor": 155, "catajara": 1045, "catalfo": 1043, "catalin": 646, "catastroph": [264, 317, 767, 1025], "catch": [80, 96, 307, 364, 384, 385], "catch_warn": [80, 96, 246, 306, 307], "categor": [2, 44, 104, 134, 140, 150, 155, 184, 187, 188, 189, 212, 230, 249, 251, 253, 264, 317, 322, 324, 325, 365, 368, 370, 371, 381, 390, 409, 416, 467, 468, 490, 491, 498, 507, 563, 564, 584, 585, 610, 611, 636, 637, 652, 662, 663, 673, 684, 713, 831, 843, 844, 845, 846, 847, 869, 871, 875, 876, 879, 881, 882, 889, 903, 904, 925, 995, 1001, 1012, 1013, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1035, 1036, 1039, 1040, 1043, 1045, 1047, 1050, 1051, 1052, 1053], "categori": [2, 26, 58, 80, 96, 103, 104, 144, 155, 187, 188, 212, 220, 227, 249, 264, 271, 306, 307, 312, 316, 317, 321, 324, 333, 351, 352, 353, 370, 371, 385, 408, 409, 415, 416, 418, 489, 498, 499, 505, 563, 564, 652, 662, 663, 673, 684, 747, 762, 763, 844, 881, 882, 889, 945, 946, 947, 995, 1001, 1002, 1003, 1007, 1013, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "categorical_column": [44, 144, 187, 189, 249, 468], "categorical_columns_selector": 249, "categorical_columns_subset": 144, "categorical_crossentropi": [1045, 1049], "categorical_encod": 189, "categorical_featur": [44, 104, 144, 150, 188, 264, 316, 321, 322, 323, 324, 326, 381, 388, 415, 563, 564, 636, 637, 1012, 1043, 1047, 1050, 1052], "categorical_preprocessor": [251, 316], "categorical_transform": 104, "categoricaldtyp": 388, "categoricalnb": [2, 843, 845, 846, 847, 1007, 1045, 1046, 1047, 1048, 1050], "categories_": [881, 882, 889, 1015, 1043, 1050], "categoris": [945, 947], "category_1_fold": 505, "category_2_fold": 505, "category_count_": 844, "category_s": 352, "categr": 1013, "caterpillar": 52, "cathi": [1039, 1045], "catplot": 260, "caught": [357, 376, 384, 402], "caus": [44, 63, 65, 147, 172, 187, 210, 212, 216, 217, 230, 289, 317, 344, 353, 359, 374, 381, 406, 408, 413, 414, 416, 418, 444, 448, 450, 460, 511, 534, 585, 592, 614, 615, 782, 843, 844, 845, 847, 872, 881, 883, 886, 887, 934, 935, 995, 1001, 1005, 1013, 1015, 1018, 1025, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053], "causal": [184, 185, 208, 661, 789, 834, 1026], "causat": 187, "caution": [187, 264, 380, 441, 455, 1043], "cautiou": 1042, "caveat": [412, 417, 418], "cawlei": [275, 1005], "cax": [67, 174, 281], "ca\u00f1ardo": 1038, "cb": [174, 243, 259], "cbar_ax": 281, "cbar_kw": [194, 198], "cc": 374, "cc18": 370, "cc_home": [916, 917], "cca": [2, 247, 411, 484, 486, 1006, 1039, 1043, 1044, 1045, 1047, 1049, 1053], "ccat": 371, "ccf2002": 997, "cclauss": 1043, "ccp_alpha": [319, 355, 559, 560, 561, 562, 566, 567, 916, 917, 918, 919, 1021, 1045], "ccp_path": [916, 917, 918, 919], "cd": [121, 373, 374, 376, 380, 382, 413, 472, 473, 479, 533, 539, 541, 542, 545, 547, 548, 549, 1001, 1040, 1050], "cdef": 377, "cdf": 270, "cdist": 1048, "cdivis": 377, "cdot": [270, 344, 405, 408, 413, 414, 418, 618, 619, 623, 626, 627, 874, 997, 999, 1005, 1009, 1015], "cdrig": 1049, "cea": [843, 1007], "ceballo": 1049, "ceder": [792, 1005], "ceethinwa": [1047, 1048], "ceh": 1050, "ceil": [150, 249, 559, 560, 561, 562, 565, 566, 567, 568, 597, 675, 807, 808, 916, 917, 918, 919, 1019], "celelibi": 1044, "celeo": 1039, "celeux": 530, "cell": [51, 59, 69, 303, 373, 381, 696, 1005, 1006, 1041, 1049], "cellular": 54, "celsiu": [188, 1012], "cemlyn": 1053, "cen": 747, "censor": 1024, "censu": 371, "center": [0, 2, 37, 44, 47, 48, 49, 54, 62, 64, 70, 71, 73, 74, 76, 78, 79, 83, 87, 89, 90, 93, 94, 95, 97, 98, 113, 126, 130, 145, 146, 147, 148, 167, 183, 188, 196, 205, 207, 212, 213, 223, 224, 235, 236, 239, 240, 249, 255, 258, 259, 271, 281, 295, 298, 300, 306, 310, 312, 313, 323, 331, 338, 340, 341, 342, 346, 352, 353, 371, 372, 373, 381, 408, 410, 411, 413, 414, 415, 421, 441, 443, 444, 447, 448, 449, 450, 453, 455, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 503, 514, 526, 536, 537, 543, 546, 552, 609, 612, 614, 615, 636, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 682, 694, 698, 700, 801, 873, 874, 877, 886, 888, 898, 899, 908, 909, 999, 1001, 1002, 1004, 1012, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1052], "center1": 100, "center2": 100, "center3": 100, "center4": 100, "center_": 886, "center_box": [94, 514], "centers_0": 313, "centers_1": 313, "centers_init": 93, "cento": 374, "centr": 154, "central": [0, 54, 214, 371, 377, 408, 1011, 1024], "centrality_scor": 56, "centroid": [2, 78, 91, 92, 110, 184, 291, 298, 313, 323, 352, 372, 399, 408, 443, 444, 447, 448, 449, 450, 453, 460, 461, 463, 506, 551, 635, 855, 1026, 1027, 1031, 1035, 1039, 1042, 1047, 1051], "centroids_": [443, 447, 855], "ceo": 1029, "cerda": 1049, "certain": [53, 89, 145, 150, 187, 217, 229, 246, 270, 290, 314, 344, 359, 371, 372, 376, 378, 380, 390, 393, 402, 404, 408, 413, 417, 642, 653, 657, 662, 667, 688, 868, 873, 908, 994, 997, 1001, 1002, 1005, 1006, 1009, 1015, 1020, 1024, 1040, 1044, 1047, 1050], "certainli": [87, 187, 352, 407], "certainti": [270, 378, 1005], "ceshin": 1041, "cest": 1005, "cetina": 1047, "cf": [317, 407, 408, 411, 443, 704, 1001, 1015, 1025], "cflag": 374, "cft": 408, "cftree": 443, "cg": [308, 662, 663, 676, 678, 691, 1001, 1039, 1040, 1042, 1046, 1048, 1049, 1052, 1053], "cga": 179, "cgi": 901, "cgohlk": [1038, 1039], "cgroup": [1048, 1049], "cgsavard": [1045, 1046], "ch6": 532, "chacon": 709, "chac\u00f3n": [408, 709], "chad": 1052, "chadi": 1043, "chai": [1047, 1050, 1051], "chain": [2, 36, 102, 108, 135, 161, 184, 242, 278, 281, 288, 290, 293, 308, 359, 368, 388, 390, 418, 498, 504, 543, 615, 631, 662, 742, 804, 834, 837, 839, 840, 841, 842, 868, 869, 888, 994, 995, 1006, 1010, 1022, 1026, 1029, 1031], "chain_jaccard_scor": 289, "chain_method": [839, 1053], "chain_method_": 839, "chaitanya": 1046, "chaitanyamog": 1047, "chakhchoukh": 113, "chakravarti": [639, 641], "chalearn": 1005, "challeng": [52, 155, 171, 188, 194, 205, 230, 239, 365, 371, 372, 402, 408, 410, 463, 473, 1005, 1011, 1029], "chalmer": 1049, "chalmerlow": 1038, "chalulu": 1050, "chan": [0, 846, 888, 1053], "chanc": [2, 72, 74, 83, 135, 164, 184, 190, 212, 220, 227, 230, 270, 276, 279, 280, 316, 347, 352, 359, 375, 407, 408, 412, 704, 706, 708, 709, 712, 720, 759, 761, 790, 799, 833, 1005, 1013, 1021, 1026, 1051], "chance_level_": [704, 706, 1051], "chance_level_kw": [249, 704, 706, 1051], "chandra": [1045, 1046, 1049], "chang": [2, 47, 63, 64, 65, 121, 125, 126, 138, 141, 148, 172, 182, 186, 187, 190, 201, 213, 214, 216, 217, 250, 251, 264, 265, 270, 277, 280, 284, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 340, 344, 353, 357, 358, 359, 363, 364, 365, 371, 378, 379, 380, 381, 384, 388, 390, 399, 408, 412, 415, 416, 418, 420, 428, 433, 438, 441, 444, 445, 448, 450, 453, 455, 460, 463, 465, 466, 468, 469, 472, 473, 479, 483, 484, 485, 495, 496, 498, 506, 510, 511, 514, 515, 516, 524, 529, 533, 535, 537, 538, 539, 540, 541, 542, 543, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 580, 581, 582, 583, 584, 585, 591, 592, 593, 594, 596, 597, 600, 605, 614, 615, 617, 618, 619, 621, 623, 624, 626, 627, 629, 631, 634, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 694, 696, 698, 704, 708, 711, 716, 720, 721, 733, 734, 740, 741, 759, 761, 782, 787, 788, 789, 791, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 818, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 858, 859, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 880, 881, 887, 888, 889, 896, 897, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 932, 934, 935, 947, 952, 963, 970, 971, 974, 994, 995, 996, 1004, 1005, 1006, 1008, 1015, 1018, 1019, 1020, 1021, 1025, 1033, 1034, 1054, 1055], "changed_onli": 1046, "changedbehaviorwarn": 1047, "changedbehaviourwarn": 1044, "changelog": [324, 376, 380, 384, 390, 1033, 1054, 1055], "changing_param": 47, "changing_param_valu": 47, "changyao": [1050, 1051], "channel": [364, 371, 374, 376, 394, 416, 495, 496, 586, 587, 589, 590, 1028], "channel_prior": 374, "chapman": 1001, "chapter": [121, 359, 378, 408, 413, 415, 418, 532, 534, 536, 618, 623, 626, 647, 995, 998, 1001, 1020, 1021], "char": [416, 591, 592, 594, 1035], "char_wb": [416, 591, 592, 594], "charact": [353, 376, 381, 390, 416, 505, 510, 511, 591, 592, 594, 920, 1010, 1035, 1048, 1050], "character": [76, 230, 355, 408, 412, 1002], "characteris": 1008, "characterist": [2, 80, 96, 176, 184, 239, 240, 252, 262, 264, 265, 267, 272, 310, 359, 371, 373, 381, 406, 407, 412, 415, 418, 505, 506, 627, 642, 662, 706, 710, 712, 731, 786, 792, 793, 823, 834, 837, 875, 913, 1001, 1026], "chardet": 416, "chardetect": 416, "charg": [0, 264, 376], "charikar": 997, "charl": [65, 264, 768, 1035, 1038, 1041, 1045, 1047, 1050], "charli": [1042, 1043, 1051], "charlton": 1042, "charra": [1050, 1052, 1053], "charron": [1029, 1038, 1039, 1046, 1047, 1048], "charset": [1035, 1037], "charset_error": 1037, "chart": [73, 145, 275, 396, 1006, 1038], "chartbeat": 1029, "chase": [52, 1035], "chasnovski": 1046, "chat": 1029, "chatterje": 1046, "chaudhuri": 447, "chauhan": [1043, 1044, 1050, 1051], "chaumond": [1029, 1043], "chauvin": 747, "chavez": 371, "chawla": 1045, "chayant": 1042, "chazalon": 1049, "cheaper": [188, 408, 418, 677, 997, 1001], "cheat": [53, 340, 396, 1009, 1019, 1037], "chebee7i": 1039, "chebyshev": [451, 458, 703, 782, 783, 784, 1008], "chebyshevdist": 703, "check": [2, 42, 44, 45, 48, 56, 81, 87, 90, 125, 133, 141, 155, 171, 184, 186, 188, 189, 199, 200, 202, 212, 233, 246, 262, 264, 279, 287, 322, 331, 358, 363, 364, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 388, 389, 390, 394, 395, 399, 402, 409, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 492, 504, 510, 511, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 691, 692, 693, 694, 695, 696, 697, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 832, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 934, 935, 936, 945, 946, 947, 957, 959, 960, 961, 965, 966, 988, 989, 990, 992, 993, 1000, 1001, 1002, 1005, 1020, 1021, 1026, 1029, 1031, 1035, 1036, 1038, 1042, 1046, 1047, 1048, 1049, 1050, 1052], "check_arrai": [2, 378, 385, 469, 536, 906, 993, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "check_classifier_multioutput": 1045, "check_consistent_length": 2, "check_cv": [2, 390, 1040], "check_decision_proba_consist": 1042, "check_estim": [2, 319, 378, 390, 947, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "check_estimator_sparse_arrai": 1053, "check_estimator_sparse_data": 1053, "check_estimator_sparse_matrix": 1053, "check_estimators_fit_returns_self": 947, "check_estimators_pickl": 1052, "check_fit_idempot": 1044, "check_increas": 2, "check_input": [536, 550, 650, 651, 656, 664, 665, 666, 685, 691, 916, 917, 918, 919, 1043], "check_invers": [409, 466, 872, 1015, 1043, 1049, 1050], "check_is_fit": [2, 90, 133, 246, 379, 385, 390, 1045, 1048, 1049], "check_memori": [2, 385, 390, 1042], "check_metadata": 246, "check_methods_sample_order_invari": [1047, 1049], "check_methods_subset_invari": [1043, 1049], "check_nam": [577, 945, 946, 947], "check_pairwise_arrai": 1044, "check_param": 993, "check_random_st": [2, 95, 228, 234, 242, 248, 378, 385, 390], "check_regressor_multioutput": 1045, "check_requires_y_non": 1049, "check_sample_weights_pandas_seri": 1043, "check_scalar": [2, 1049], "check_scor": [2, 390, 1053], "check_set_param": 1043, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1045, "check_transformers_unfitted_stateless": 1051, "check_x_i": [2, 385, 993, 1039, 1043, 1044, 1049], "checkbox": 376, "checked_cv": 828, "checker": [2, 380, 828], "checkerboard": [2, 59, 405, 452, 454, 513, 515], "checkingclassifi": 1045, "checklist": [379, 380], "checkout": [374, 376, 380, 384], "checksum": [493, 1047], "cheeseman": 373, "chege": 1049, "chemic": 373, "chemometr": 373, "chen": [110, 111, 410, 415, 421, 476, 730, 760, 997, 1005, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1050, 1051], "chenal": [1044, 1045, 1047], "cherkasski": 1001, "chernei": 1053, "chernyi": 1049, "cherri": 380, "cherti": 1039, "cherubin": 1041, "cheuk": [1043, 1044], "cheung": 1036, "chevali": 1047, "chevalli": 1052, "chevron": 52, "chi": [2, 104, 112, 135, 314, 368, 417, 521, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 642, 643, 644, 645, 646, 762, 763, 1031, 1035, 1040, 1041], "chi2": [2, 104, 416, 417, 453, 584, 595, 598, 599, 601, 602, 603, 608, 609, 612, 624, 642, 643, 644, 645, 646, 647, 763, 769, 778, 1035, 1042, 1049], "chi2_featur": 646, "chi2_kernel": [2, 404, 642, 646, 762, 769, 1003, 1036], "chi2_stat": 607, "chi2sampl": 642, "chiang": 1043, "chiara": [0, 367, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "chibuik": 1048, "chicco": 1053, "chief": 1029, "chieh": [1042, 1043], "chigurupati": 1047, "chih": [662, 1040], "chilamkurthi": 1041, "child": [150, 246, 358, 364, 378, 388, 390, 399, 408, 415, 443, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 916, 917, 918, 919, 961, 962, 964, 1021, 1042], "child_idx": 77, "children": [358, 408, 415, 442, 446, 464, 568, 1039, 1052], "children_": [77, 442, 446, 464], "children_left": 358, "children_right": 358, "chime": 375, "chin": [373, 1039], "china": [408, 508, 509, 587, 590], "chines": 1024, "chinmaya": 1042, "chinthala": 1042, "chiotelli": 1044, "chip": [404, 1029], "chisquar": 314, "chitteti": 1049, "chkoar": 1042, "chloe": 1049, "cho": 1046, "choe": 1044, "choi": [1001, 1053], "choic": [2, 44, 47, 65, 76, 81, 89, 99, 103, 110, 128, 150, 171, 172, 178, 182, 202, 213, 249, 263, 264, 268, 270, 273, 284, 295, 317, 321, 351, 352, 359, 363, 374, 381, 390, 394, 408, 410, 412, 414, 415, 417, 418, 453, 463, 472, 473, 474, 475, 476, 477, 479, 540, 542, 543, 549, 561, 642, 651, 652, 660, 662, 663, 665, 673, 684, 696, 709, 746, 837, 850, 851, 856, 858, 859, 885, 888, 897, 899, 908, 909, 938, 994, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1013, 1018, 1019, 1020, 1021, 1042, 1045, 1046, 1050, 1051], "choleski": [111, 212, 230, 385, 472, 473, 479, 529, 615, 652, 654, 655, 658, 659, 660, 662, 663, 673, 676, 678, 684, 686, 687, 691, 801, 802, 1001, 1038, 1042, 1044, 1047, 1050, 1051], "cholesky_delet": 385, "cholesterol": 373, "chong": 538, "choo": [1050, 1051], "choos": [44, 51, 52, 80, 81, 84, 87, 94, 96, 100, 110, 143, 155, 169, 187, 190, 206, 247, 264, 265, 275, 282, 355, 359, 363, 364, 365, 378, 381, 384, 389, 390, 402, 406, 407, 408, 410, 412, 415, 416, 419, 444, 445, 448, 450, 460, 525, 534, 540, 561, 562, 585, 605, 662, 663, 676, 678, 683, 691, 692, 693, 697, 730, 760, 804, 807, 808, 818, 875, 908, 909, 916, 917, 918, 919, 994, 995, 996, 1000, 1001, 1002, 1003, 1004, 1008, 1015, 1018, 1019, 1020, 1031, 1037, 1038, 1042, 1044, 1046], "choose_check_classifiers_label": 1045, "choose_random_sampl": 378, "choraria": 1047, "chose": [78, 187], "chosen": [48, 59, 81, 106, 155, 172, 187, 188, 202, 213, 229, 247, 263, 264, 265, 267, 273, 284, 352, 359, 363, 388, 407, 408, 410, 411, 415, 418, 441, 447, 450, 452, 454, 455, 461, 498, 525, 537, 559, 560, 561, 562, 563, 564, 566, 567, 651, 657, 660, 662, 663, 665, 667, 675, 680, 681, 682, 683, 684, 694, 698, 798, 801, 802, 804, 807, 808, 818, 838, 857, 908, 909, 916, 917, 918, 919, 952, 994, 997, 999, 1001, 1002, 1004, 1006, 1011, 1012, 1019, 1021, 1043, 1051, 1052], "chou": [1042, 1043], "choudhari": [1039, 1040, 1049, 1051], "choudhri": 1053, "chowdhuri": [1043, 1049], "choyal": [1042, 1043], "chri": [0, 398, 1035, 1038, 1043, 1044, 1045, 1046, 1049], "chrissobel": 1048, "christian": [0, 58, 351, 371, 397, 1029, 1035, 1036, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "christianwaldmann": 1050, "christin": [1050, 1051], "christo": [1044, 1045, 1047, 1049, 1052], "christof": [1039, 1040], "christoph": [188, 413, 418, 534, 614, 615, 618, 623, 626, 801, 1001, 1006, 1036, 1040, 1043, 1046, 1047, 1048, 1049, 1050], "christopherlim98": 1049, "chrome": 1015, "chronolog": [371, 499], "chu": [855, 1051], "chuan": 1009, "chugh": 1047, "chuliang": 1048, "chun": [1046, 1047, 1049, 1050, 1051], "chung": [1042, 1043], "chunk": [2, 48, 84, 363, 364, 408, 413, 419, 445, 450, 469, 540, 782, 785, 836, 837, 843, 844, 845, 846, 847, 906, 1007, 1042, 1043, 1044, 1045, 1046], "chunk_siz": 1036, "chunker": 416, "church": [901, 1017], "chyi": [1038, 1039, 1040, 1041, 1042], "ci": [89, 364, 379, 380, 1007, 1041, 1043], "ciccolella": [696, 1002], "cice": [1012, 1049], "cichocki": [413, 540, 542, 549], "cimport": [377, 385, 1043], "cindi": [1040, 1048, 1052, 1053], "cio": 370, "cipri\u00e1n": 1049, "circl": [2, 71, 94, 126, 153, 154, 162, 237, 247, 297, 300, 306, 310, 312, 331, 344, 357, 372, 380, 384, 408, 453, 463, 516, 524, 768, 1020], "circle1": 100, "circle2": 100, "circle3": 100, "circle4": 100, "circleci": 376, "circlecl": 0, "circuit": 1002, "circular": 54, "circumst": [128, 230, 1008, 1024], "circumstanti": 212, "cirru": [0, 376], "cisco": 52, "citat": [0, 370, 373, 388], "cite": [370, 388, 408], "citi": [409, 416, 467], "citizen": 1015, "city_categori": 409, "city_london": 409, "city_pari": 409, "city_sallisaw": 409, "cityblock": [76, 80, 408, 451, 458, 766, 782, 783, 784, 1008], "cividi": 76, "ciyou": 662, "cj": [1007, 1038, 1039, 1040, 1041, 1042], "cjlin": [192, 370, 488, 510, 511, 662, 1038], "ckdtree": [419, 445, 1037], "cl": [0, 48, 52, 383, 390, 918], "clabel": [174, 223], "clae": 1043, "clai": 1035, "claim": [184, 193, 376, 465, 498, 554, 652, 673, 684, 710, 749, 754, 756, 834, 869, 872, 873, 881, 888, 1001, 1026], "claimamount": 230, "claimnb": [212, 230], "clair": 1035, "clamp": [904, 1018], "clang": [374, 377], "clara": [370, 1047], "clare": 1045, "clarifi": [384, 391, 797], "clariti": [167, 376, 384], "clark": 52, "class": [2, 4, 28, 31, 44, 48, 49, 50, 51, 54, 58, 61, 62, 63, 65, 67, 71, 76, 89, 90, 92, 105, 116, 119, 125, 126, 127, 129, 133, 134, 141, 150, 151, 156, 171, 172, 174, 175, 177, 179, 180, 182, 184, 192, 193, 203, 204, 205, 220, 224, 227, 228, 233, 239, 246, 247, 249, 255, 256, 257, 262, 263, 264, 265, 270, 272, 276, 280, 281, 284, 287, 289, 290, 293, 295, 296, 298, 299, 300, 301, 315, 319, 323, 325, 326, 327, 329, 331, 332, 335, 336, 338, 340, 341, 344, 348, 351, 352, 353, 356, 358, 365, 368, 370, 371, 372, 373, 376, 377, 378, 380, 381, 382, 383, 385, 388, 389, 394, 399, 402, 403, 404, 406, 408, 409, 411, 413, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 502, 504, 505, 506, 510, 511, 512, 514, 516, 517, 521, 524, 525, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 578, 580, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 724, 726, 731, 733, 734, 735, 737, 739, 740, 741, 742, 743, 744, 745, 747, 758, 759, 761, 786, 787, 788, 790, 791, 792, 793, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 939, 940, 941, 942, 943, 945, 947, 957, 960, 961, 962, 965, 970, 972, 974, 975, 988, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1012, 1013, 1015, 1016, 1018, 1021, 1025, 1026, 1027, 1029, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "class1_1": 157, "class2_1": 157, "class_0": [220, 373, 512], "class_1": [220, 373, 512], "class_2": [373, 512], "class_count_": [843, 844, 845, 846, 847], "class_id": [279, 280], "class_index": 89, "class_label": [390, 559, 563, 566, 662, 663, 670, 672, 678, 679, 680, 803, 826, 916, 918, 940, 1020], "class_likelihood_ratio": [2, 273, 1005, 1050], "class_log_prior_": [843, 844, 845, 847], "class_memb": 74, "class_member_mask": 83, "class_nam": [137, 263, 889, 920, 921, 922, 1021, 1051], "class_name0": [424, 443, 444, 446, 448, 450, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 874, 900, 901], "class_name1": [424, 443, 444, 446, 448, 450, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 874, 900, 901], "class_name2": [424, 443, 444, 446, 448, 450, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 874, 900, 901], "class_of_interest": [67, 279, 635, 1052], "class_prior": [371, 843, 844, 845, 847, 1036, 1039], "class_prior_": [553, 846, 855], "class_sep": [168, 300, 517, 803, 826], "class_weight": [2, 46, 342, 390, 559, 563, 566, 662, 663, 670, 672, 678, 679, 680, 681, 908, 910, 913, 915, 916, 918, 939, 940, 994, 1019, 1020, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1049, 1050], "class_weight_": [910, 913, 1050], "class_weight_vect": 939, "classes_": [133, 221, 240, 246, 279, 329, 330, 376, 378, 390, 433, 438, 439, 551, 552, 553, 555, 557, 559, 561, 563, 566, 569, 571, 596, 597, 614, 635, 662, 663, 670, 672, 678, 679, 680, 701, 704, 706, 792, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 850, 855, 858, 865, 868, 875, 876, 879, 889, 903, 904, 905, 908, 910, 913, 916, 918, 921, 1005, 1016, 1019, 1036, 1039, 1040, 1042, 1045, 1047], "classic": [56, 208, 236, 255, 261, 344, 373, 380, 410, 412, 413, 444, 448, 450, 460, 494, 502, 506, 512, 543, 636, 637, 918, 919, 999, 1001, 1004, 1007, 1015, 1024, 1035, 1036, 1040, 1049], "classif": [2, 14, 20, 31, 32, 39, 41, 43, 46, 47, 50, 58, 61, 62, 63, 65, 68, 71, 104, 105, 106, 110, 111, 116, 119, 124, 135, 137, 139, 141, 142, 143, 148, 150, 151, 153, 157, 159, 162, 164, 165, 166, 168, 170, 176, 177, 187, 188, 192, 193, 203, 204, 205, 206, 212, 220, 222, 223, 224, 225, 227, 238, 240, 244, 245, 249, 252, 258, 259, 262, 263, 267, 268, 269, 270, 271, 279, 284, 285, 287, 288, 291, 292, 298, 299, 300, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 329, 334, 335, 336, 340, 343, 345, 346, 347, 348, 349, 350, 352, 353, 359, 363, 365, 369, 370, 371, 373, 378, 381, 385, 389, 390, 403, 406, 407, 408, 409, 412, 413, 415, 416, 417, 421, 425, 438, 470, 476, 483, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 506, 512, 514, 516, 517, 521, 522, 524, 525, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 609, 612, 613, 614, 615, 617, 618, 626, 635, 636, 637, 647, 662, 663, 670, 672, 678, 679, 680, 701, 707, 709, 712, 716, 717, 719, 720, 722, 730, 731, 733, 734, 738, 739, 742, 745, 747, 758, 760, 762, 763, 765, 786, 787, 788, 790, 791, 792, 793, 798, 800, 803, 804, 805, 807, 808, 809, 810, 818, 822, 823, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 850, 855, 857, 858, 864, 865, 866, 868, 872, 875, 880, 881, 882, 883, 888, 889, 892, 894, 903, 904, 905, 908, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 937, 940, 949, 994, 995, 997, 998, 999, 1002, 1003, 1007, 1010, 1012, 1013, 1015, 1016, 1018, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "classifi": [2, 31, 46, 47, 48, 49, 61, 64, 66, 67, 69, 71, 90, 103, 104, 105, 106, 107, 126, 135, 136, 137, 138, 139, 142, 143, 146, 153, 156, 157, 162, 165, 166, 167, 168, 173, 184, 189, 190, 192, 203, 204, 210, 212, 219, 221, 224, 227, 230, 239, 242, 244, 246, 247, 252, 263, 264, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 287, 288, 292, 298, 299, 301, 305, 308, 312, 321, 322, 326, 328, 329, 330, 332, 333, 335, 336, 338, 339, 341, 342, 343, 344, 348, 349, 353, 371, 373, 376, 378, 381, 388, 390, 399, 407, 408, 409, 412, 416, 417, 418, 425, 433, 434, 435, 437, 438, 439, 440, 489, 490, 498, 506, 514, 516, 517, 524, 533, 538, 539, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 568, 569, 570, 571, 572, 596, 597, 605, 609, 614, 626, 633, 635, 636, 637, 653, 662, 663, 670, 672, 675, 676, 677, 678, 679, 680, 701, 702, 704, 706, 707, 711, 712, 713, 715, 716, 717, 722, 724, 726, 730, 731, 733, 734, 736, 738, 739, 742, 743, 744, 745, 747, 758, 760, 786, 787, 788, 791, 792, 793, 798, 800, 803, 804, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 856, 858, 859, 864, 865, 866, 868, 869, 875, 888, 889, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 924, 927, 928, 943, 945, 994, 995, 997, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "classification_data": 47, "classification_report": [2, 46, 69, 103, 166, 268, 308, 329, 330, 826, 1005, 1037, 1039, 1043, 1044, 1045, 1047, 1051, 1053], "classificationcriterion": 1043, "classifier_": [90, 246], "classifier_01": 327, "classifier_05": 327, "classifier__c": 104, "classifier__criterion": 251, "classifier__max_depth": 251, "classifier__max_featur": 251, "classifier__min_samples_leaf": 189, "classifier__n_estim": 251, "classifier__n_neighbor": 292, "classifier_idx": 67, "classifier_model": 292, "classifier_other_threshold": 803, "classifier_tag": 927, "classifier_tun": 826, "classifierchain": [2, 289, 390, 399, 840, 842, 1042, 1047, 1050, 1052, 1053], "classifiermixin": [2, 133, 246, 376, 378, 390, 412, 928, 1046], "classifiertag": [2, 927], "classify__c": 105, "classmethod": [383, 439, 635, 636, 701, 702, 703, 704, 705, 706, 810, 827], "classnameprefixfeaturesoutmixin": [2, 378, 432, 1050], "claudio": [373, 1049, 1050, 1052, 1053], "claus": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 388], "clauss": 1052, "clb": 188, "clean": [86, 104, 211, 359, 368, 374, 414, 1011, 1015, 1045], "cleaner": 100, "cleanli": [96, 1035], "cleanup": [376, 1035], "clear": [89, 94, 105, 187, 315, 371, 375, 376, 378, 388, 389, 390, 406, 409, 414, 922, 923, 994, 999, 1046, 1047, 1048, 1053], "clear_data_hom": 2, "clearer": [237, 1020], "clearli": [44, 94, 124, 188, 244, 344, 375, 376, 388, 390, 413, 415, 1006, 1012], "clegg": 1038, "clemen": 1039, "clement": [1042, 1043, 1047], "clenaghan": [1040, 1041], "cleveland": 371, "cleverless": 1037, "clf": [46, 50, 51, 52, 62, 63, 64, 65, 68, 69, 74, 85, 88, 92, 97, 104, 139, 146, 149, 151, 156, 160, 162, 165, 166, 168, 173, 175, 190, 203, 206, 210, 216, 219, 221, 224, 225, 226, 227, 228, 235, 240, 241, 244, 247, 253, 259, 267, 271, 275, 276, 278, 281, 282, 293, 296, 297, 298, 301, 305, 312, 315, 319, 320, 321, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 351, 355, 356, 358, 363, 371, 389, 390, 402, 409, 412, 415, 417, 439, 551, 552, 555, 557, 559, 561, 563, 565, 566, 569, 596, 597, 600, 613, 636, 638, 642, 643, 644, 645, 646, 648, 649, 652, 656, 662, 663, 664, 665, 666, 670, 672, 673, 676, 677, 678, 679, 680, 681, 684, 701, 702, 704, 706, 715, 792, 804, 807, 808, 818, 836, 837, 838, 840, 843, 844, 845, 846, 847, 854, 855, 865, 908, 910, 912, 913, 916, 920, 922, 995, 997, 1001, 1005, 1006, 1008, 1009, 1011, 1012, 1019, 1020, 1021], "clf1": [70, 156, 157, 415, 571], "clf2": [70, 156, 157, 378, 415, 571], "clf3": [70, 156, 157, 378, 415, 571], "clf__": 271, "clf__alpha": 271, "clf__c": 409, "clf_descr": 351, "clf_en_lr": 204, "clf_err": 139, "clf_isoton": 62, "clf_isotonic_scor": 62, "clf_l1_lr": 204, "clf_l2_lr": 204, "clf_list": [63, 65], "clf_name": [50, 351], "clf_no_weight": 349, "clf_pf": 846, "clf_prob": 64, "clf_sample_weight": 246, "clf_score": 62, "clf_sel": 190, "clf_select": 165, "clf_sgd": 226, "clf_sigmoid": 62, "clf_sigmoid_scor": 62, "clf_tut": 161, "clf_weight": 349, "click": [241, 251, 271, 320, 326, 376, 378, 384, 396, 1029], "clickabl": 1049, "client": 378, "clifford": 1048, "cliffordemmanuel": 1048, "clim": 174, "climatologi": 406, "climb": [408, 449, 462], "clip": [63, 65, 230, 242, 310, 340, 639, 680, 745, 878, 1015, 1039, 1046, 1047], "clmbst": 1047, "clock": 44, "clone": [2, 90, 147, 179, 188, 246, 308, 326, 359, 374, 376, 379, 380, 382, 384, 390, 406, 409, 418, 438, 466, 571, 572, 600, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 810, 827, 832, 835, 839, 842, 868, 869, 905, 1035, 1041, 1043, 1047, 1051, 1052], "clone_kernel": [614, 615, 1045], "clone_with_theta": [179, 418, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "cloned_classifi": 433, "close": [8, 48, 52, 56, 62, 63, 65, 74, 75, 81, 88, 94, 100, 110, 111, 114, 126, 138, 144, 147, 151, 155, 171, 172, 176, 178, 187, 189, 198, 216, 218, 233, 239, 245, 249, 255, 261, 270, 271, 283, 284, 296, 297, 310, 319, 340, 344, 345, 352, 359, 371, 376, 378, 379, 380, 388, 390, 391, 406, 408, 411, 412, 415, 418, 451, 456, 473, 510, 511, 534, 565, 632, 647, 651, 665, 676, 678, 691, 709, 750, 801, 822, 823, 843, 844, 845, 847, 854, 935, 994, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1012, 1015, 1020, 1024, 1029, 1038, 1042, 1043, 1044], "close_pric": 52, "closer": [44, 73, 124, 126, 154, 169, 171, 188, 194, 216, 344, 353, 406, 408, 413, 450, 555, 632, 716, 850, 851, 856, 858, 859, 860, 1020, 1042], "closest": [65, 81, 98, 216, 378, 408, 441, 443, 444, 448, 449, 450, 460, 657, 783, 784, 838, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 996, 999, 1006, 1008], "closur": 56, "cloud": [79, 116, 120, 122, 184, 384, 413, 420, 535, 543, 696, 1005, 1023, 1024, 1026], "cloudpickl": 1031, "clouldpickl": 402, "cls_info": 50, "cls_name": [48, 50], "cls_runtim": 48, "cls_stat": 48, "cls_valu": 50, "club": 373, "clue": [371, 384, 1002], "clump": 236, "clust": [99, 451, 458], "cluster": [2, 49, 54, 55, 57, 59, 62, 78, 79, 81, 84, 85, 87, 88, 91, 93, 95, 96, 103, 112, 133, 137, 143, 151, 164, 179, 190, 233, 235, 236, 237, 243, 249, 255, 256, 257, 258, 271, 296, 297, 299, 313, 320, 324, 329, 330, 331, 333, 342, 350, 351, 353, 358, 365, 369, 371, 373, 376, 378, 381, 388, 390, 403, 404, 409, 414, 416, 419, 422, 423, 426, 434, 435, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 489, 504, 505, 506, 513, 514, 515, 516, 517, 524, 532, 543, 546, 555, 566, 568, 592, 593, 594, 635, 695, 696, 699, 708, 709, 714, 718, 719, 721, 723, 729, 735, 740, 741, 759, 761, 782, 783, 790, 796, 797, 799, 801, 802, 860, 861, 869, 873, 880, 888, 927, 943, 945, 965, 988, 995, 1002, 1004, 1008, 1011, 1013, 1015, 1018, 1022, 1024, 1025, 1026, 1029, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "cluster_1": 151, "cluster_2": 151, "cluster_al": [449, 462], "cluster_cent": [74, 95, 97, 98, 462], "cluster_center_indic": [441, 455], "cluster_centers_": [78, 79, 84, 92, 94, 95, 97, 98, 121, 323, 352, 441, 444, 448, 449, 450], "cluster_centers_indic": [74, 455], "cluster_centers_indices_": [74, 441], "cluster_data": 93, "cluster_doc": 58, "cluster_hierarchy_": [408, 451], "cluster_id": [190, 352], "cluster_id_to_feature_id": 190, "cluster_label": [90, 94], "cluster_method": 451, "cluster_optics_dbscan": [2, 99, 408], "cluster_optics_xi": 2, "cluster_qr": [81, 408, 453, 463, 1049], "cluster_s": 352, "cluster_selection_epsilon": 447, "cluster_selection_method": 447, "cluster_std": [64, 74, 80, 83, 89, 90, 91, 93, 94, 96, 97, 98, 224, 239, 258, 313, 342, 372, 514], "cluster_word": 58, "clusterer_": 90, "clustering_algorithm": [79, 80, 96], "clustering_metr": 92, "clustermixin": [2, 378, 1052], "clusters_std": 342, "clyde": 1040, "cl\u00e9ment": [1044, 1048, 1050], "cm": [44, 46, 51, 52, 54, 59, 60, 62, 67, 68, 69, 74, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 101, 112, 114, 121, 124, 137, 143, 162, 167, 174, 175, 188, 221, 224, 225, 228, 233, 234, 235, 240, 243, 244, 248, 263, 264, 265, 290, 293, 294, 296, 300, 303, 305, 307, 308, 310, 312, 324, 329, 330, 334, 336, 337, 338, 340, 341, 342, 348, 349, 356, 373, 409, 701, 921, 1005, 1015, 1021], "cm2013": 408, "cm_bright": [68, 305, 312], "cm_displai": 240, "cm_piyg": 312, "cmap": [44, 45, 46, 51, 52, 54, 59, 60, 67, 68, 69, 71, 75, 76, 81, 82, 84, 85, 87, 88, 92, 112, 114, 121, 124, 131, 137, 143, 162, 167, 174, 175, 188, 194, 198, 204, 221, 224, 225, 226, 228, 233, 234, 235, 243, 244, 248, 263, 265, 290, 294, 296, 298, 299, 301, 303, 305, 307, 308, 310, 312, 329, 330, 334, 336, 337, 338, 339, 340, 341, 342, 345, 348, 349, 356, 701], "cmap_bold": [298, 301], "cmap_cv": 265, "cmap_data": 265, "cmap_light": [298, 301], "cmcsa": 52, "cmd": 374, "cmu": 903, "cname": 78, "cnb": 1007, "cnp": 377, "cnx": 1043, "co": [2, 44, 52, 54, 57, 59, 75, 76, 103, 152, 154, 176, 184, 187, 213, 234, 270, 285, 323, 333, 351, 352, 353, 357, 380, 414, 416, 450, 452, 454, 489, 513, 594, 703, 723, 768, 799, 1000, 1015, 1026, 1029, 1030, 1031], "co2": [170, 178, 184, 418, 498, 615, 619, 626, 627, 629, 1026, 1042], "co2_data": 176, "co2_kernel": 176, "coars": [44, 143, 382, 449, 462], "coarser": [143, 147], "coast": [51, 303], "coastlin": [51, 303, 373], "coca": 52, "cock": [155, 1044], "cockburn": 1037, "coclust": [58, 405, 452, 515], "cocoa": 1029, "code": [2, 31, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 370, 374, 375, 377, 379, 380, 385, 388, 390, 391, 394, 399, 402, 404, 407, 408, 415, 416, 443, 444, 448, 450, 460, 498, 528, 532, 533, 539, 540, 544, 545, 547, 548, 550, 568, 574, 584, 585, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 686, 687, 689, 690, 715, 836, 837, 838, 875, 882, 994, 1002, 1006, 1015, 1017, 1019, 1020, 1024, 1025, 1026, 1028, 1029, 1035, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "code_book_": 838, "code_init": [533, 547], "code_s": [287, 838, 1006], "codebas": [325, 359, 376, 377, 416, 1035, 1041], "codebook": [287, 568, 838], "codecov": 384, "codeofconduct": 376, "coder": [130, 544, 720], "codevig": 1041, "coef": [50, 88, 130, 186, 187, 194, 198, 204, 205, 207, 211, 215, 216, 217, 221, 227, 228, 253, 283, 307, 325, 348, 526, 650, 651, 653, 656, 657, 663, 664, 665, 666, 667, 673, 676, 678, 684, 685, 686, 687, 688, 689, 690, 691, 1009], "coef0": [192, 344, 346, 453, 537, 643, 644, 647, 779, 781, 910, 911, 912, 913, 914, 1003, 1020], "coef_": [47, 50, 54, 88, 116, 165, 166, 169, 186, 187, 194, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 215, 216, 217, 221, 227, 228, 247, 253, 283, 284, 317, 323, 338, 345, 348, 351, 359, 371, 378, 390, 411, 417, 466, 483, 484, 485, 551, 596, 597, 600, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 908, 909, 910, 911, 912, 913, 914, 988, 999, 1001, 1019, 1020, 1035, 1037, 1040, 1042, 1047, 1049, 1052, 1053], "coef_agglomeration_": 88, "coef_en_lr": 204, "coef_i": 187, "coef_init": [650, 651, 656, 657, 664, 665, 666, 667, 670, 671, 672, 680, 681, 682, 685, 688], "coef_l": 201, "coef_l1_lr": 204, "coef_l2_lr": 204, "coef_lar": 201, "coef_lasso": 201, "coef_lasso_": 207, "coef_multi_task_lasso_": 207, "coef_p": 201, "coef_path": [657, 667, 688], "coef_path_": [654, 655, 658, 659, 1001], "coef_path_continu": [657, 667, 688], "coef_path_lar": [657, 667, 688], "coef_pl": 201, "coef_positive_lar": 201, "coef_ridg": 197, "coef_selection_": 88, "coeff": 684, "coeff_diff": 199, "coeffeci": 1044, "coeffici": [2, 26, 47, 50, 74, 83, 92, 94, 110, 111, 114, 121, 124, 160, 166, 171, 184, 185, 186, 193, 197, 198, 199, 201, 204, 206, 207, 208, 209, 210, 214, 215, 227, 230, 253, 270, 284, 307, 317, 321, 322, 323, 344, 347, 351, 352, 353, 363, 372, 378, 390, 393, 410, 411, 413, 417, 418, 421, 431, 453, 466, 468, 474, 476, 477, 479, 480, 481, 482, 483, 484, 485, 498, 526, 528, 529, 533, 537, 539, 541, 544, 545, 550, 554, 556, 558, 560, 562, 564, 567, 570, 572, 585, 592, 596, 600, 612, 615, 618, 631, 639, 640, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 705, 707, 720, 723, 733, 738, 742, 747, 754, 757, 779, 781, 789, 790, 792, 796, 797, 800, 819, 831, 834, 841, 842, 851, 859, 866, 869, 881, 888, 908, 909, 910, 911, 912, 913, 914, 917, 919, 996, 999, 1001, 1019, 1020, 1026, 1035, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1052], "coefs_": [206, 307, 865, 866, 1009, 1040], "coefs_cf": 317, "coefs_enet": 201, "coefs_lar": 201, "coefs_lasso": 201, "coefs_no_cf": 317, "coefs_path": 663, "coefs_paths_": [663, 1045], "coefs_positive_enet": 201, "coefs_positive_lar": 201, "coefs_positive_lasso": 201, "coelho": [1036, 1038, 1039, 1043], "coelhudo": 1047, "cognit": 373, "cohen": [2, 720, 1043], "cohen_kappa_scor": [2, 1005, 1040, 1042], "coher": 408, "cohort": 158, "coin": [52, 54, 56, 60, 72, 75, 76, 77, 80, 87, 88, 90, 96, 100, 101, 124, 184, 408, 416, 442, 463, 1017, 1026], "coincid": [175, 214, 418], "col": [53, 58, 63, 65, 74, 78, 83, 89, 93, 97, 98, 103, 106, 141, 156, 176, 232, 249, 348, 513, 515], "col_compl": 58, "col_idx": 60, "col_idx_shuffl": 59, "col_ind": [423, 452, 454], "col_indic": 150, "col_nam": 53, "col_split": 53, "cola": 52, "cold": 290, "cole": 1044, "coleman": [1036, 1037], "colgat": [52, 56], "colin": [371, 1041], "collabor": 376, "collaps": [44, 188, 249, 310, 340, 388], "colleagu": 270, "collect": [2, 42, 47, 50, 52, 53, 58, 63, 106, 139, 150, 151, 158, 169, 176, 183, 190, 200, 206, 235, 242, 273, 277, 352, 353, 363, 371, 373, 380, 390, 394, 412, 413, 415, 416, 447, 465, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 571, 572, 584, 586, 587, 591, 592, 593, 594, 636, 733, 734, 742, 782, 787, 788, 791, 806, 810, 811, 813, 827, 975, 978, 994, 1000, 1001, 1005, 1011, 1016, 1025, 1029, 1037, 1047], "colleg": [0, 186], "college_degre": 186, "collid": 416, "collin": 1038, "collinear": [187, 190, 217, 230, 415, 569, 652, 673, 684, 881, 1001, 1035], "collis": [352, 353, 416, 585, 592], "collot": [1049, 1050], "colombia": [51, 303, 371, 500], "colon": 376, "coloni": 371, "color": [44, 47, 48, 49, 50, 51, 52, 53, 59, 62, 63, 64, 65, 68, 70, 71, 74, 76, 78, 80, 81, 82, 83, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 110, 111, 112, 113, 114, 117, 119, 121, 122, 123, 125, 127, 128, 129, 130, 135, 136, 141, 143, 144, 146, 149, 150, 151, 152, 153, 155, 157, 160, 162, 167, 171, 173, 174, 175, 176, 177, 178, 179, 180, 183, 187, 189, 190, 194, 195, 197, 198, 200, 201, 202, 203, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 226, 229, 230, 233, 234, 235, 237, 239, 243, 244, 245, 247, 250, 255, 256, 257, 258, 259, 260, 261, 264, 265, 269, 271, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 289, 292, 295, 296, 297, 298, 301, 302, 303, 305, 310, 311, 312, 314, 315, 316, 320, 326, 331, 332, 334, 338, 339, 340, 341, 342, 344, 346, 347, 348, 356, 357, 371, 373, 384, 408, 416, 495, 496, 508, 586, 587, 1019, 1021, 1040, 1045, 1047, 1052], "color_continuous_scal": 271, "color_intens": 49, "color_it": [256, 260, 261], "color_map": 334, "color_palett": [73, 136, 150, 260], "colorbar": [44, 51, 67, 76, 121, 131, 151, 167, 172, 174, 175, 177, 188, 232, 243, 259, 281, 310, 340, 701, 1047], "colorbarbas": 310, "colorblind": [73, 136, 150], "coloring_matrix": [110, 111], "colormap": [121, 179, 340, 701, 1048], "colors_": 78, "colors_list": 141, "colour": [258, 373, 416, 590, 1006], "colt": [730, 760, 1005], "colton": 997, "columbia": 0, "column": [2, 44, 48, 53, 59, 60, 94, 102, 105, 108, 142, 143, 144, 147, 150, 152, 155, 176, 182, 184, 186, 187, 188, 189, 190, 202, 212, 213, 216, 220, 230, 241, 248, 249, 250, 253, 260, 264, 270, 271, 281, 282, 284, 289, 307, 315, 316, 317, 321, 322, 323, 324, 326, 327, 351, 352, 353, 363, 370, 371, 373, 376, 378, 382, 385, 388, 389, 390, 405, 408, 409, 411, 413, 415, 416, 417, 420, 423, 452, 454, 465, 467, 468, 472, 473, 479, 488, 489, 490, 491, 492, 494, 496, 498, 502, 503, 504, 506, 507, 510, 511, 512, 513, 515, 517, 528, 533, 536, 539, 543, 544, 550, 557, 559, 560, 563, 564, 566, 567, 568, 569, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 614, 631, 634, 636, 637, 638, 650, 652, 656, 662, 664, 666, 668, 669, 673, 684, 689, 690, 701, 717, 722, 723, 733, 734, 742, 758, 767, 772, 773, 774, 777, 787, 788, 791, 792, 804, 807, 808, 818, 829, 834, 839, 842, 843, 844, 845, 846, 847, 848, 849, 868, 872, 873, 874, 875, 881, 882, 883, 887, 888, 889, 890, 892, 893, 894, 898, 899, 908, 910, 913, 916, 918, 925, 930, 934, 935, 940, 952, 967, 980, 981, 983, 991, 994, 995, 997, 1001, 1003, 1005, 1006, 1013, 1015, 1020, 1025, 1026, 1035, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "column_labels_": [59, 60, 405, 452, 454], "column_nam": 230, "column_or_1d": [2, 385, 1046, 1050], "column_result": 271, "column_stack": [77, 305, 312], "column_to_drop": 187, "column_tran": [230, 409], "column_transform": 327, "columnar": [370, 465, 1024], "columns_": [58, 405, 423, 452, 454], "columns_to_drop": 264, "columntransform": [2, 44, 103, 104, 188, 189, 212, 230, 249, 251, 253, 316, 322, 323, 324, 326, 368, 370, 388, 389, 399, 467, 468, 633, 873, 994, 995, 1031, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "columnwis": 413, "com": [52, 290, 371, 374, 376, 380, 381, 382, 384, 388, 408, 443, 536, 543, 675, 709, 1042, 1045], "coma": 1029, "comaniciu": [97, 408, 449], "comapar": 408, "comaprison": [614, 662, 913], "comb": 1049, "combat": [305, 413], "combin": [2, 20, 44, 52, 53, 59, 63, 65, 95, 103, 104, 106, 107, 108, 121, 127, 129, 130, 134, 136, 144, 145, 149, 150, 158, 171, 177, 182, 183, 184, 187, 198, 205, 212, 216, 229, 230, 236, 239, 241, 244, 270, 271, 279, 281, 282, 299, 306, 316, 321, 322, 324, 343, 344, 353, 356, 363, 368, 372, 373, 376, 381, 389, 390, 404, 405, 406, 408, 409, 412, 413, 414, 415, 416, 417, 418, 420, 421, 446, 465, 467, 468, 474, 476, 477, 480, 481, 482, 490, 498, 510, 511, 517, 523, 526, 528, 533, 539, 540, 542, 544, 549, 551, 562, 564, 567, 569, 570, 614, 618, 620, 625, 628, 634, 638, 647, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 670, 672, 676, 677, 678, 679, 680, 682, 683, 685, 688, 696, 705, 734, 792, 804, 807, 808, 815, 816, 829, 831, 835, 852, 867, 868, 869, 873, 881, 882, 883, 888, 908, 978, 994, 997, 998, 1001, 1005, 1006, 1008, 1011, 1015, 1018, 1019, 1021, 1022, 1026, 1029, 1035, 1040, 1043, 1046, 1047, 1048, 1050, 1051], "combinator": 814, "combined_featur": 107, "combsccod": 1049, "comcast": 52, "come": [83, 101, 112, 117, 126, 169, 171, 205, 244, 284, 319, 351, 352, 363, 365, 369, 373, 376, 377, 378, 380, 384, 388, 390, 394, 402, 407, 408, 412, 415, 416, 440, 451, 457, 473, 552, 709, 799, 825, 910, 913, 957, 994, 995, 999, 1002, 1004, 1008, 1011, 1020, 1035, 1046, 1049, 1051], "comedi": 879, "comfort": [89, 415], "command": [243, 363, 364, 374, 376, 380, 382, 384, 394, 416, 510, 1024, 1037], "comment": [81, 374, 375, 376, 377, 379, 380, 384, 488, 582, 1005], "commerc": 1029, "commerci": [412, 1029], "commit": [379, 380, 384, 1028, 1035, 1036, 1037, 1038], "committ": 1035, "commod": 1005, "common": [2, 53, 55, 56, 58, 124, 166, 169, 184, 185, 186, 216, 217, 265, 270, 277, 287, 321, 344, 351, 353, 358, 363, 370, 376, 378, 384, 386, 388, 389, 393, 394, 399, 405, 406, 408, 409, 412, 414, 417, 418, 448, 466, 468, 498, 577, 593, 636, 657, 676, 677, 705, 750, 757, 773, 805, 806, 809, 819, 821, 822, 823, 824, 825, 831, 834, 869, 871, 879, 880, 881, 886, 888, 893, 894, 896, 897, 898, 899, 925, 927, 954, 957, 994, 995, 1001, 1008, 1011, 1015, 1020, 1021, 1024, 1025, 1026, 1029, 1031, 1035, 1043, 1045, 1046, 1050], "common_nod": 358, "common_node_id": 358, "common_param": [91, 147, 150, 188, 245, 272, 273, 344], "commonli": [209, 212, 267, 283, 344, 369, 390, 408, 409, 418, 618, 762, 763, 801, 837, 880, 1002, 1003, 1005, 1006, 1008, 1051], "commun": [246, 369, 375, 381, 384, 390, 391, 408, 415, 540, 542, 549, 696, 714, 880, 995, 1002, 1008, 1015, 1019, 1024, 1028, 1029, 1043, 1044], "commut": [44, 53], "comp": [58, 116, 117, 124, 131, 308, 333, 351, 352, 353, 371], "comp_cov": [470, 471, 472, 473, 474, 475, 476, 477], "compact": [192, 310, 363, 373, 848, 849, 1021, 1037], "compani": [212, 230, 407, 408, 1029], "companion": [376, 1015], "companioni": 1035, "compar": [44, 45, 49, 53, 58, 59, 62, 63, 65, 71, 72, 73, 75, 76, 77, 79, 82, 83, 86, 88, 89, 90, 91, 92, 98, 101, 104, 105, 106, 107, 112, 113, 115, 117, 124, 128, 130, 134, 135, 136, 138, 143, 144, 145, 147, 149, 150, 151, 153, 155, 161, 169, 175, 182, 183, 184, 187, 188, 189, 190, 193, 195, 197, 198, 200, 201, 202, 205, 208, 212, 213, 215, 216, 218, 220, 222, 226, 229, 230, 232, 233, 236, 238, 241, 244, 247, 249, 250, 252, 257, 258, 262, 265, 267, 268, 269, 271, 273, 275, 277, 279, 281, 282, 283, 285, 287, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 304, 307, 309, 311, 314, 315, 317, 321, 344, 351, 352, 353, 357, 358, 359, 365, 371, 373, 376, 378, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 417, 418, 419, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 459, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 491, 498, 504, 506, 514, 516, 524, 526, 530, 533, 539, 541, 543, 547, 548, 553, 554, 563, 564, 565, 566, 567, 635, 643, 648, 649, 657, 659, 661, 662, 667, 670, 672, 680, 681, 688, 699, 709, 716, 719, 735, 742, 747, 790, 802, 804, 809, 818, 831, 834, 841, 850, 854, 857, 861, 865, 866, 868, 869, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 889, 893, 894, 895, 896, 897, 898, 899, 908, 909, 910, 912, 913, 994, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1026, 1035, 1037, 1042, 1043, 1048], "comparison": [48, 52, 54, 58, 61, 62, 63, 64, 66, 70, 72, 74, 76, 78, 84, 91, 92, 93, 94, 95, 97, 103, 111, 120, 122, 123, 125, 127, 131, 135, 137, 138, 141, 147, 150, 153, 157, 158, 163, 170, 176, 177, 178, 180, 184, 189, 197, 198, 199, 200, 201, 204, 205, 210, 212, 216, 227, 230, 231, 234, 235, 236, 237, 238, 242, 243, 257, 262, 264, 265, 266, 267, 274, 282, 284, 289, 299, 305, 312, 314, 315, 319, 321, 334, 337, 346, 350, 351, 352, 359, 371, 373, 390, 406, 408, 410, 411, 413, 417, 418, 438, 439, 443, 444, 446, 447, 448, 450, 463, 483, 484, 485, 489, 506, 514, 516, 517, 524, 527, 537, 543, 551, 552, 555, 566, 567, 584, 585, 591, 592, 593, 594, 609, 611, 614, 615, 619, 626, 629, 635, 643, 647, 663, 676, 692, 693, 694, 695, 696, 708, 742, 747, 783, 792, 804, 805, 806, 807, 809, 810, 818, 820, 821, 822, 823, 824, 825, 834, 843, 846, 850, 865, 866, 869, 881, 882, 886, 888, 889, 893, 894, 895, 896, 897, 898, 899, 908, 910, 911, 913, 914, 916, 994, 998, 999, 1002, 1005, 1007, 1008, 1011, 1020, 1026, 1032], "compat": [246, 273, 290, 320, 370, 374, 378, 379, 385, 386, 388, 390, 394, 399, 402, 416, 464, 470, 510, 568, 580, 592, 606, 613, 618, 619, 622, 623, 624, 626, 627, 636, 637, 638, 662, 663, 677, 679, 778, 782, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 852, 853, 868, 873, 881, 882, 920, 921, 927, 930, 945, 947, 967, 1002, 1008, 1010, 1024, 1025, 1029, 1031, 1035, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "compens": [113, 186, 188, 192, 212, 230, 271, 410, 413], "compet": [44, 187], "competit": [44, 147, 351, 415, 648, 1008], "compil": [155, 290, 353, 363, 364, 377, 378, 379, 384, 385, 388, 1024, 1035], "compl": 92, "complain": 1053, "complement": [2, 188, 280, 351, 636, 637, 806, 821, 824, 834, 843, 844, 845, 846, 847, 1012, 1027, 1031, 1043], "complementari": [44, 416], "complementnb": [2, 271, 351, 843, 844, 846, 847, 1007, 1043, 1047, 1048, 1050], "complet": [0, 2, 44, 73, 74, 75, 80, 83, 86, 92, 96, 117, 150, 153, 164, 166, 169, 184, 189, 190, 218, 238, 239, 246, 249, 264, 268, 315, 317, 319, 352, 359, 371, 376, 380, 381, 384, 388, 409, 412, 413, 415, 416, 442, 446, 450, 453, 463, 464, 465, 468, 497, 538, 539, 540, 541, 546, 548, 560, 571, 572, 584, 590, 591, 592, 594, 631, 632, 633, 634, 649, 653, 661, 675, 677, 708, 709, 719, 720, 721, 733, 735, 740, 741, 761, 790, 799, 836, 839, 842, 851, 867, 868, 869, 870, 937, 989, 999, 1001, 1005, 1006, 1008, 1020, 1021, 1024, 1026, 1035, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "completed_fac": 248, "completeness_scor": [2, 74, 83, 92, 320, 352, 408, 740, 741, 799, 1005], "complex": [43, 49, 50, 55, 59, 105, 141, 155, 168, 171, 176, 182, 184, 205, 216, 226, 229, 238, 245, 246, 249, 262, 268, 271, 274, 279, 311, 319, 322, 323, 327, 328, 340, 344, 353, 354, 358, 372, 376, 381, 388, 408, 409, 413, 415, 419, 441, 445, 448, 449, 451, 468, 490, 502, 503, 504, 516, 536, 543, 553, 559, 560, 561, 562, 564, 566, 567, 607, 634, 642, 660, 662, 680, 681, 738, 754, 804, 834, 836, 864, 868, 869, 873, 881, 888, 904, 908, 911, 914, 916, 917, 918, 919, 994, 995, 997, 998, 1000, 1002, 1004, 1006, 1011, 1015, 1018, 1025, 1026, 1027, 1029, 1031, 1036, 1038, 1044, 1045, 1048], "complexity_comput": [47, 50], "complexity_label": [47, 50], "compli": [376, 390, 945, 1025], "complianc": [0, 150], "compliant": [324, 376, 1053], "complic": [65, 246, 305, 382, 418, 698, 1008], "compon": [2, 11, 44, 45, 56, 80, 92, 96, 103, 106, 115, 116, 120, 122, 123, 125, 126, 128, 129, 131, 153, 161, 176, 184, 186, 198, 221, 232, 243, 244, 247, 255, 256, 257, 259, 260, 261, 263, 269, 271, 276, 290, 291, 292, 293, 301, 302, 308, 315, 321, 356, 363, 368, 371, 376, 378, 382, 385, 402, 404, 408, 409, 411, 416, 418, 420, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 504, 506, 517, 523, 528, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 699, 801, 802, 803, 804, 807, 808, 818, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 951, 952, 997, 1002, 1004, 1015, 1017, 1020, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1035, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "component_1": 260, "component_2": 260, "component_indices_": [643, 1048], "components_": [46, 55, 92, 117, 121, 123, 124, 131, 243, 244, 308, 315, 323, 390, 409, 413, 445, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 545, 546, 643, 857, 864, 900, 901, 997, 1017, 1039, 1041, 1047, 1050, 1053], "components_col": 106, "compos": [2, 44, 45, 63, 102, 103, 104, 108, 117, 137, 144, 155, 184, 187, 188, 189, 212, 214, 230, 241, 249, 251, 253, 284, 287, 316, 320, 322, 323, 324, 326, 327, 389, 399, 408, 409, 412, 465, 466, 467, 468, 517, 555, 616, 1004, 1006, 1026, 1035], "composit": [7, 36, 241, 320, 368, 412, 662, 792, 995, 1001, 1014, 1031, 1036], "compound": [44, 230, 416, 614, 616, 684, 728, 756, 1001], "compoundkernel": [2, 614, 1049], "comprehens": [344, 384, 416, 762, 763, 1003, 1029, 1043], "compress": [43, 51, 56, 100, 184, 287, 310, 371, 402, 408, 413, 416, 417, 656, 676, 696, 838, 881, 975, 978, 990, 1001, 1006, 1015, 1026, 1035, 1044], "compressed_raccoon_kmean": 87, "compressed_raccoon_uniform": 87, "compris": [103, 147, 268, 351, 352, 353, 371, 388, 413, 415, 517, 811, 1002], "compromis": [49, 65, 188, 363, 376, 651, 683, 1008, 1038], "comput": [0, 2, 28, 44, 46, 47, 51, 53, 54, 59, 64, 73, 75, 77, 78, 81, 86, 88, 91, 92, 94, 95, 103, 105, 111, 112, 113, 114, 122, 130, 138, 142, 145, 146, 147, 148, 149, 150, 168, 171, 176, 178, 179, 182, 187, 188, 189, 190, 192, 195, 196, 198, 199, 200, 201, 202, 212, 214, 216, 220, 226, 229, 230, 233, 236, 240, 242, 243, 245, 249, 250, 252, 264, 266, 268, 270, 271, 272, 273, 277, 279, 281, 290, 292, 294, 296, 297, 299, 300, 303, 310, 319, 323, 324, 327, 330, 332, 340, 344, 347, 351, 352, 353, 358, 364, 365, 370, 371, 373, 376, 378, 381, 382, 383, 385, 388, 389, 390, 393, 394, 402, 403, 404, 405, 406, 408, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 458, 460, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 518, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 585, 588, 589, 592, 593, 594, 596, 597, 602, 603, 606, 607, 608, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 729, 730, 731, 733, 734, 735, 738, 740, 742, 743, 744, 747, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 796, 797, 798, 800, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 865, 866, 873, 874, 877, 878, 883, 884, 885, 886, 887, 888, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 913, 915, 916, 917, 918, 919, 949, 950, 951, 952, 969, 970, 977, 979, 985, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "computation": [38, 54, 110, 121, 141, 146, 155, 171, 290, 344, 351, 362, 377, 388, 408, 409, 412, 413, 415, 418, 540, 636, 637, 675, 767, 804, 806, 807, 808, 818, 831, 1001, 1002, 1004, 1012, 1013, 1017, 1031, 1039], "compute_class_weight": [2, 390, 1038, 1049], "compute_corrected_ttest": 270, "compute_dist": [442, 446, 1047], "compute_full_tre": [442, 446, 1039], "compute_import": 1037, "compute_inverse_compon": [900, 901, 1017], "compute_inverse_transform": 1049, "compute_label": [443, 450], "compute_node_depth": 358, "compute_optics_graph": [2, 456, 457, 1052], "compute_sample_weight": [2, 1049], "compute_scor": [108, 128, 194, 195, 648, 649, 1044], "compute_sourc": 420, "computed_scor": 649, "con": [402, 592, 1004], "concat": [44, 182, 186, 202, 230, 881], "concaten": [2, 64, 71, 75, 84, 95, 102, 105, 113, 137, 151, 165, 179, 184, 194, 197, 205, 226, 227, 233, 239, 255, 259, 260, 266, 275, 277, 278, 279, 280, 295, 308, 314, 317, 330, 339, 343, 351, 409, 465, 468, 506, 511, 533, 539, 543, 544, 602, 785, 804, 867, 868, 870, 873, 881, 913, 1006, 1026, 1036], "concav": [327, 373], "concentr": [47, 49, 99, 119, 126, 135, 153, 176, 183, 184, 237, 254, 256, 261, 281, 300, 312, 331, 372, 376, 415, 444, 521, 801, 1004, 1011, 1026], "concentrations_prior": 255, "concept": [2, 113, 141, 145, 246, 279, 388, 408, 414, 416, 997, 1005, 1008, 1021, 1029], "conceptu": [373, 415, 1003], "concern": [38, 57, 72, 109, 115, 118, 120, 132, 134, 163, 170, 181, 184, 191, 193, 231, 254, 260, 264, 286, 288, 291, 304, 309, 328, 335, 350, 354, 363, 378, 402, 1002, 1017], "concis": [65, 212, 376, 381, 1046, 1048], "conclud": [135, 187, 195, 230, 270, 353, 359, 391, 868], "conclus": [44, 126, 187, 189, 212, 214, 270, 272, 359, 415], "concomit": [653, 1001], "concret": [216, 377, 391, 407, 417, 678, 679, 900, 901, 1001, 1019, 1024], "concurr": [390, 416, 970, 1047, 1049], "conda": [319, 320, 321, 322, 323, 324, 325, 326, 327, 364, 376, 377, 379, 380, 382, 384, 394, 395, 401, 402, 1021], "conda_prefix": 382, "condarc": 374, "condens": [192, 447], "condit": [2, 44, 52, 53, 63, 65, 114, 147, 184, 185, 187, 202, 205, 209, 214, 217, 230, 246, 250, 273, 322, 358, 382, 388, 393, 404, 405, 406, 407, 408, 410, 413, 415, 417, 452, 465, 472, 473, 474, 479, 498, 515, 525, 526, 538, 541, 542, 543, 545, 547, 549, 551, 552, 564, 631, 636, 637, 647, 654, 655, 656, 658, 659, 660, 674, 676, 677, 678, 679, 686, 687, 691, 701, 716, 721, 722, 740, 741, 799, 843, 844, 845, 846, 847, 866, 869, 872, 881, 882, 885, 889, 952, 976, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1015, 1021, 1026, 1031, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1053], "condition": [52, 65, 212, 406, 410, 762, 999], "condition2": 155, "conduct": [186, 270, 418, 1028, 1049], "conf": [47, 65, 380, 406, 412, 843, 1007, 1049], "confer": [264, 270, 371, 408, 413, 419, 440, 445, 451, 513, 537, 565, 700, 712, 730, 760, 864, 865, 866, 1005, 1011, 1017, 1021], "confid": [53, 62, 63, 64, 65, 150, 176, 178, 256, 270, 273, 332, 391, 406, 418, 640, 662, 663, 670, 672, 675, 678, 679, 680, 702, 706, 711, 724, 730, 731, 743, 744, 760, 793, 836, 875, 908, 910, 913, 1001, 1004, 1005, 1006, 1011, 1018, 1019, 1020, 1029, 1045], "config": [53, 364, 374, 376, 377, 384, 630, 1043], "config_context": [2, 253, 363, 364, 404, 630, 906, 1042, 1048, 1051], "configur": [2, 3, 47, 50, 65, 104, 105, 188, 246, 251, 253, 284, 317, 351, 362, 374, 376, 378, 382, 388, 390, 394, 399, 404, 409, 416, 417, 432, 443, 444, 446, 448, 450, 453, 463, 465, 469, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 568, 569, 570, 571, 572, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 634, 636, 639, 642, 643, 644, 645, 646, 692, 693, 694, 695, 696, 698, 699, 792, 804, 818, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 970, 971, 1002, 1005, 1015, 1020, 1024, 1031, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052], "confirm": [44, 53, 117, 138, 144, 147, 150, 189, 212, 214, 264, 273, 276, 279, 315, 353, 380, 994, 1015, 1043], "conflict": [374, 379, 380, 384, 394, 1042, 1043], "conform": [53, 376, 584, 632, 836, 837, 1005, 1024, 1025, 1042, 1048], "confound": [186, 187], "confus": [2, 69, 184, 240, 262, 264, 279, 329, 330, 351, 390, 469, 506, 635, 656, 701, 717, 719, 722, 733, 734, 742, 758, 788, 791, 834, 906, 913, 1026, 1035, 1036, 1040, 1044, 1045, 1047, 1048, 1049, 1050], "confusingli": 374, "confusion_matrix": [2, 69, 240, 263, 264, 327, 330, 701, 717, 758, 803, 831, 1005, 1036, 1041, 1042, 1045, 1046, 1048, 1052], "confusion_matrix_scor": 1005, "confusionmatrixdisplai": [2, 46, 69, 263, 322, 327, 329, 351, 635, 722, 1005, 1045, 1046, 1048, 1049, 1050], "congruenc": [658, 659, 660, 686, 687], "conjug": [270, 453, 463, 676, 678, 691, 699, 1001], "conjunct": [399, 408, 597, 810, 826, 827, 829, 830, 831, 832, 835, 971, 995, 1001, 1050], "connect": [2, 52, 75, 80, 82, 85, 88, 96, 100, 101, 374, 376, 385, 390, 410, 442, 446, 453, 463, 464, 588, 589, 699, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 1003, 1008, 1010, 1018, 1028, 1039, 1048, 1052], "connected_compon": 1042, "connectionist": [865, 866], "conner": 1048, "connor": [1043, 1048, 1052, 1053], "connossor": [1043, 1044], "conocophillip": 52, "conort": 1029, "conquer": 952, "conrad": [1035, 1036, 1050, 1053], "conroi": 1050, "consecut": [135, 145, 213, 388, 406, 412, 416, 444, 448, 450, 451, 453, 457, 460, 463, 539, 540, 541, 548, 605, 649, 670, 671, 672, 680, 681, 682, 801, 802, 809, 843, 844, 845, 846, 847, 865, 866, 994, 1015, 1043], "consensu": [2, 59, 60, 73, 375, 376, 391, 405, 408, 653, 675, 682, 683, 723, 1005], "consensus_scor": [2, 59, 60, 405, 1037], "consequ": [91, 128, 230, 270, 271, 310, 337, 359, 406, 407, 413, 415, 563, 564, 568, 659, 660, 995, 1001, 1005, 1013, 1021, 1044, 1046, 1051, 1053], "conserv": [51, 390, 585, 592, 900, 901, 1004, 1017], "consid": [0, 44, 52, 53, 54, 59, 63, 75, 89, 100, 104, 113, 121, 125, 127, 144, 147, 164, 168, 169, 183, 188, 205, 212, 214, 246, 264, 270, 273, 277, 281, 284, 290, 293, 296, 297, 310, 321, 327, 337, 344, 345, 347, 351, 359, 363, 364, 365, 368, 375, 376, 378, 382, 384, 388, 390, 391, 399, 402, 404, 407, 408, 413, 414, 415, 416, 417, 418, 419, 420, 439, 445, 447, 451, 458, 475, 510, 511, 523, 535, 543, 551, 552, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 589, 591, 592, 594, 596, 610, 611, 624, 635, 636, 637, 650, 656, 662, 663, 664, 666, 675, 683, 692, 693, 694, 696, 697, 698, 700, 704, 706, 709, 711, 713, 719, 730, 734, 738, 760, 790, 792, 798, 850, 851, 852, 854, 856, 858, 859, 860, 863, 865, 866, 871, 881, 882, 889, 903, 904, 913, 914, 916, 917, 918, 919, 929, 988, 994, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1038, 1039, 1043, 1047, 1048, 1050, 1051, 1052], "consider": [149, 150, 172, 175, 249, 265, 271, 277, 371, 376, 407, 418, 623, 804, 818, 826, 994, 1001, 1007, 1011, 1019, 1029, 1052], "consist": [2, 44, 47, 64, 69, 73, 90, 91, 103, 112, 119, 121, 141, 144, 150, 151, 158, 169, 174, 176, 179, 183, 190, 205, 212, 230, 245, 249, 276, 279, 307, 315, 319, 322, 347, 352, 359, 363, 369, 371, 373, 376, 378, 382, 383, 384, 385, 389, 390, 391, 406, 408, 410, 414, 415, 416, 426, 427, 430, 431, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 491, 499, 533, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 594, 615, 631, 632, 633, 634, 639, 642, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 678, 681, 682, 683, 691, 692, 693, 694, 695, 704, 739, 801, 802, 811, 836, 837, 838, 840, 841, 842, 843, 851, 852, 854, 856, 859, 860, 866, 871, 872, 873, 875, 879, 880, 883, 884, 886, 887, 889, 900, 901, 904, 908, 909, 911, 912, 914, 917, 919, 925, 934, 936, 959, 975, 978, 993, 994, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1015, 1018, 1020, 1021, 1023, 1025, 1029, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "consol": [143, 374], "consolid": [0, 390, 391, 1035], "consolidate_scor": 53, "consortium": [0, 1029], "constant": [2, 44, 130, 138, 150, 174, 177, 178, 183, 187, 200, 213, 214, 216, 230, 241, 246, 251, 273, 302, 306, 308, 311, 313, 320, 347, 349, 359, 368, 378, 385, 390, 405, 415, 418, 431, 447, 466, 483, 484, 485, 513, 515, 536, 540, 542, 549, 551, 552, 553, 554, 556, 558, 560, 562, 564, 567, 570, 572, 593, 609, 612, 615, 617, 631, 634, 636, 637, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 680, 681, 682, 683, 684, 691, 693, 697, 699, 725, 727, 728, 732, 736, 779, 781, 789, 803, 826, 841, 842, 851, 859, 865, 866, 873, 884, 887, 896, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 997, 999, 1001, 1002, 1005, 1007, 1008, 1015, 1019, 1021, 1031, 1038, 1043, 1045, 1047, 1048, 1049, 1051, 1053], "constant_": 554, "constant_valu": [418, 617, 621], "constant_value_bound": [418, 615, 617, 621], "constantini": 1051, "constantkernel": [2, 174, 180, 418, 615, 621, 625, 628], "constantli": [73, 212, 1029], "constitu": 373, "constitut": [84, 390, 412, 415, 451, 457, 591, 592, 594, 1009], "constrain": [26, 82, 121, 144, 150, 152, 188, 204, 283, 305, 320, 326, 338, 340, 369, 390, 408, 413, 415, 511, 563, 564, 639, 662, 663, 694, 698, 826, 833, 1001, 1004, 1039], "constrained_layout": [121, 188, 232, 316, 317, 324], "constraint": [89, 91, 101, 121, 134, 184, 201, 208, 216, 249, 250, 265, 306, 307, 308, 320, 376, 388, 413, 416, 488, 510, 511, 559, 560, 561, 562, 563, 564, 566, 567, 636, 639, 822, 823, 916, 917, 918, 919, 973, 994, 996, 1001, 1002, 1019, 1026, 1039, 1042, 1043, 1046, 1048, 1050, 1052], "constru": 416, "construct": [2, 44, 51, 103, 105, 135, 137, 139, 155, 230, 240, 246, 251, 253, 303, 311, 313, 320, 323, 370, 373, 378, 385, 390, 408, 409, 412, 413, 415, 416, 419, 433, 442, 443, 445, 446, 451, 453, 458, 464, 466, 468, 521, 537, 543, 546, 557, 558, 584, 590, 643, 692, 694, 695, 818, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 867, 868, 869, 870, 872, 913, 933, 935, 951, 952, 963, 967, 994, 995, 997, 1001, 1002, 1005, 1006, 1008, 1015, 1018, 1020, 1021, 1025, 1040, 1042, 1043, 1046, 1049], "construct_grid": [51, 303], "constructor": [31, 32, 105, 242, 364, 378, 390, 409, 416, 465, 468, 551, 552, 557, 569, 570, 571, 572, 584, 585, 591, 592, 600, 672, 680, 681, 804, 818, 850, 851, 852, 854, 856, 858, 859, 860, 867, 868, 869, 870, 994, 1006, 1015, 1020, 1025, 1035, 1036, 1038, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "consult": 1005, "consum": [2, 121, 359, 370, 378, 390, 399, 408, 412, 415, 450, 807, 808, 868, 869, 960, 961, 970, 1001, 1029, 1040, 1052], "consumpt": [48, 363, 390, 408, 536, 559, 560, 566, 567, 804, 818, 829, 830, 831, 916, 917, 918, 919, 970, 1035, 1037, 1041, 1043, 1044, 1049], "contact": [388, 1024], "contain": [2, 50, 58, 62, 65, 70, 76, 83, 90, 92, 103, 104, 127, 137, 139, 150, 151, 177, 187, 188, 190, 192, 204, 216, 230, 239, 246, 249, 250, 253, 260, 264, 268, 270, 276, 279, 280, 283, 289, 296, 297, 299, 310, 322, 330, 333, 351, 352, 369, 370, 371, 373, 376, 378, 380, 381, 382, 383, 384, 385, 388, 390, 402, 404, 406, 408, 409, 411, 412, 413, 415, 416, 417, 418, 420, 422, 432, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 498, 502, 504, 505, 506, 510, 511, 512, 516, 517, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 690, 692, 693, 694, 695, 696, 700, 701, 702, 704, 705, 706, 713, 716, 739, 740, 741, 776, 783, 784, 792, 798, 801, 802, 803, 804, 807, 808, 810, 818, 822, 823, 826, 827, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 930, 933, 934, 935, 955, 956, 959, 960, 967, 970, 971, 973, 994, 995, 997, 1003, 1006, 1009, 1011, 1013, 1015, 1016, 1018, 1021, 1024, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "container": 402, "container_fold": 505, "container_path": 505, "contamin": [49, 112, 113, 239, 249, 296, 297, 470, 565, 854, 1011, 1043, 1051, 1052], "content": [2, 7, 56, 315, 351, 353, 371, 376, 380, 382, 402, 416, 487, 505, 510, 511, 591, 592, 594, 675, 922, 1014, 1029, 1036, 1045], "context": [2, 92, 253, 264, 283, 290, 327, 363, 364, 370, 375, 377, 389, 390, 408, 409, 414, 415, 416, 418, 419, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 469, 473, 533, 537, 538, 539, 541, 544, 545, 546, 547, 548, 550, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 597, 605, 610, 611, 614, 630, 631, 634, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 854, 856, 858, 859, 861, 862, 867, 870, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 995, 1001, 1005, 1011, 1015, 1019, 1028, 1029, 1035, 1042, 1043, 1048, 1051], "contigu": [44, 60, 378, 388, 405, 412, 416, 444, 448, 450, 460, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 785, 823, 848, 849, 908, 910, 911, 912, 913, 914, 1020, 1038, 1045, 1049, 1053], "contin": [414, 718, 1015], "conting": [2, 718, 719, 735, 759, 1041], "contingency_matrix": [2, 408, 759, 1043], "continu": [0, 2, 53, 56, 58, 78, 119, 144, 171, 184, 188, 195, 213, 220, 230, 233, 236, 249, 250, 252, 256, 260, 261, 307, 309, 315, 316, 321, 322, 358, 364, 371, 374, 378, 379, 380, 381, 384, 388, 390, 391, 394, 408, 413, 415, 469, 494, 595, 598, 599, 602, 603, 610, 611, 612, 636, 650, 651, 656, 657, 661, 664, 665, 666, 667, 730, 760, 816, 818, 871, 873, 875, 877, 878, 887, 888, 889, 905, 906, 917, 945, 967, 994, 1001, 1002, 1005, 1006, 1008, 1009, 1015, 1021, 1025, 1026, 1029, 1032, 1035, 1037, 1038, 1043, 1048, 1049, 1050, 1052], "continuous_featur": 381, "contour": [49, 51, 71, 81, 82, 112, 143, 162, 174, 175, 177, 223, 224, 225, 226, 239, 244, 259, 296, 303, 338, 339, 341, 342, 344, 345, 373, 383, 635, 636, 1011, 1019], "contour_kw": 636, "contourf": [51, 143, 226, 244, 296, 303, 305, 312, 313, 334, 339, 345, 349, 635, 636], "contours_": [383, 636], "contract": [212, 230, 344, 364, 390, 1025], "contradict": 190, "contrari": [44, 54, 187, 233, 237, 249, 255, 273, 310, 351, 370, 408, 498, 546, 609, 806, 821, 889, 1001, 1007, 1011], "contrast": [129, 188, 214, 245, 249, 270, 272, 299, 315, 352, 390, 406, 408, 411, 415, 418, 450, 453, 463, 623, 647, 818, 864, 995, 998, 1000, 1001, 1005, 1008, 1010, 1013, 1015, 1018, 1019, 1021, 1045], "contrib": [325, 376, 378, 384, 388, 390, 408, 447, 1024, 1025, 1051], "contribut": [0, 54, 59, 148, 176, 198, 216, 279, 315, 373, 374, 379, 380, 384, 390, 391, 394, 413, 414, 415, 448, 450, 555, 556, 561, 562, 730, 733, 760, 999, 1005, 1008, 1013, 1020, 1024, 1025, 1028, 1029, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "contributor": [364, 379, 380, 381, 384, 388, 390, 1005, 1025, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "control": [38, 52, 71, 95, 125, 126, 141, 160, 176, 178, 198, 205, 209, 213, 216, 220, 242, 243, 271, 273, 287, 292, 320, 322, 344, 355, 357, 363, 364, 369, 372, 376, 378, 381, 384, 388, 390, 394, 407, 408, 411, 412, 413, 414, 417, 418, 433, 441, 450, 455, 472, 473, 479, 533, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 596, 597, 599, 618, 623, 629, 631, 636, 638, 643, 645, 646, 650, 651, 653, 654, 655, 656, 658, 659, 660, 676, 678, 680, 681, 686, 687, 691, 696, 705, 713, 801, 802, 804, 805, 806, 807, 808, 809, 810, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 834, 835, 838, 839, 842, 865, 866, 887, 889, 900, 901, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 922, 945, 970, 991, 994, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1024, 1025, 1027, 1031, 1035, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "convei": [68, 237, 312], "conveni": [53, 89, 216, 249, 368, 384, 388, 409, 412, 416, 418, 423, 444, 448, 450, 452, 454, 465, 490, 615, 680, 682, 703, 732, 789, 867, 868, 978, 995, 997, 1001, 1002, 1012, 1029, 1035], "convent": [2, 133, 150, 264, 270, 376, 378, 379, 380, 382, 390, 404, 426, 427, 430, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 470, 471, 472, 473, 474, 475, 476, 477, 510, 511, 533, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 549, 565, 568, 571, 572, 584, 585, 586, 591, 592, 594, 631, 632, 633, 634, 681, 692, 693, 694, 695, 722, 801, 802, 836, 837, 852, 854, 856, 860, 872, 880, 883, 884, 886, 889, 900, 901, 912, 945, 947, 1005, 1035, 1042, 1043, 1046, 1048, 1049, 1051, 1052], "convention": [338, 390, 904], "converg": [2, 56, 91, 95, 110, 111, 145, 147, 150, 171, 177, 206, 214, 220, 228, 258, 306, 307, 310, 315, 330, 365, 385, 390, 405, 408, 413, 416, 418, 420, 441, 444, 447, 448, 449, 450, 453, 455, 460, 461, 462, 463, 472, 473, 479, 483, 484, 485, 535, 537, 538, 539, 540, 541, 548, 573, 614, 648, 649, 650, 651, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 672, 676, 678, 680, 682, 686, 687, 691, 692, 694, 695, 698, 699, 801, 802, 857, 865, 866, 903, 904, 910, 995, 1000, 1001, 1002, 1004, 1009, 1019, 1035, 1038, 1039, 1040, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "converged_": [801, 802, 1053], "convergence_it": [441, 455], "convergencewarn": [2, 220, 227, 306, 307, 312, 385, 390, 801, 802, 1043, 1044, 1047], "convers": [2, 56, 147, 204, 351, 359, 365, 370, 376, 378, 384, 388, 390, 402, 416, 574, 863, 872, 880, 934, 935, 990, 1002, 1029, 1043, 1044, 1045, 1048, 1051], "convert": [2, 56, 71, 81, 100, 104, 124, 176, 190, 212, 232, 249, 252, 256, 257, 260, 261, 284, 303, 327, 358, 363, 370, 371, 385, 388, 390, 402, 416, 441, 444, 445, 448, 450, 451, 452, 453, 460, 465, 466, 498, 536, 543, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 584, 585, 591, 592, 593, 594, 596, 597, 609, 631, 632, 633, 634, 650, 656, 662, 663, 664, 666, 670, 671, 672, 674, 678, 680, 681, 682, 696, 750, 782, 803, 826, 863, 872, 873, 875, 879, 881, 882, 883, 885, 908, 916, 917, 918, 919, 932, 934, 935, 959, 989, 990, 994, 1001, 1002, 1003, 1005, 1015, 1016, 1020, 1021, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "convex": [130, 146, 147, 184, 193, 219, 232, 348, 352, 408, 410, 413, 421, 447, 453, 463, 474, 476, 477, 480, 481, 482, 662, 680, 696, 1001, 1002, 1008, 1009, 1019, 1026, 1048], "convinc": 187, "convolut": [46, 179], "convolv": 308, "coo": [390, 555, 556, 696, 875, 930, 934, 935, 1008, 1036, 1052], "coo_matrix": [54, 199, 453, 588, 589, 975, 978], "cook": [373, 496, 1035, 1041], "cookbook": [418, 626, 627], "cool": [416, 1035], "coolwarm": [265, 337], "cooman": 373, "coord": [588, 1006], "coordin": [2, 51, 52, 54, 126, 154, 175, 201, 232, 271, 303, 363, 371, 413, 418, 444, 448, 449, 450, 462, 472, 473, 479, 533, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 552, 588, 618, 650, 651, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 685, 686, 687, 688, 692, 693, 694, 697, 698, 710, 768, 773, 908, 1001, 1002, 1020, 1035, 1038, 1039, 1040, 1044, 1046, 1048, 1049, 1050], "cop": 52, "cope": [239, 365, 371, 1001], "copeland": [1043, 1044], "copi": [45, 52, 56, 80, 96, 108, 124, 138, 150, 182, 183, 187, 188, 189, 199, 206, 218, 228, 230, 233, 246, 290, 329, 330, 332, 334, 352, 356, 364, 373, 376, 378, 380, 381, 382, 388, 390, 433, 438, 441, 443, 444, 445, 447, 448, 450, 455, 460, 483, 484, 485, 486, 502, 504, 512, 534, 535, 536, 537, 543, 550, 555, 556, 561, 563, 564, 574, 593, 600, 610, 611, 614, 615, 632, 634, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 675, 676, 678, 683, 685, 688, 689, 690, 736, 773, 796, 804, 818, 848, 849, 863, 871, 874, 877, 878, 879, 880, 884, 885, 886, 888, 891, 893, 894, 895, 896, 897, 898, 899, 903, 904, 908, 910, 911, 912, 913, 914, 923, 932, 934, 935, 963, 975, 977, 978, 1015, 1020, 1021, 1025, 1035, 1038, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "copy_": 1035, "copy_cov": 550, "copy_gram": [686, 687, 690], "copy_x": [444, 448, 460, 537, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 676, 678, 683, 685, 686, 687, 688, 689, 1037, 1043, 1044], "copy_x_train": [614, 615], "copy_xi": 690, "copybutton": [376, 394, 401], "copyright": [0, 56], "corani": 270, "cordier": 1042, "core": [43, 50, 83, 89, 99, 135, 141, 143, 184, 324, 362, 364, 376, 379, 384, 390, 394, 402, 408, 413, 415, 416, 419, 445, 447, 450, 451, 456, 458, 498, 501, 540, 592, 597, 662, 663, 670, 672, 680, 843, 844, 845, 846, 847, 852, 860, 1001, 1008, 1011, 1020, 1025, 1026, 1027, 1029, 1031, 1037, 1039, 1040, 1042, 1045, 1049, 1050, 1051], "core_dist": [99, 456, 457, 458], "core_distances_": [99, 451, 456, 458], "core_sampl": 419, "core_sample_indices_": [83, 445], "core_samples_mask": 83, "corei": [1036, 1043, 1044], "corentin": 1049, "cori": 1040, "corneil": 1048, "corner": [51, 54, 64, 87, 186, 267, 271, 279, 280, 303, 326, 371, 376, 500, 920, 922, 1005, 1049], "cornerston": 1029, "cornflowerblu": [154, 207, 215, 222, 256, 258, 261, 277, 279, 295, 301, 357], "corollari": 378, "corona": 1048, "corpora": 413, "corpu": [55, 352, 353, 371, 413, 591, 592, 593, 594, 1036], "corr": [116, 190, 270], "corrcoef": [116, 131], "correct": [2, 31, 53, 64, 65, 91, 113, 135, 145, 179, 187, 198, 202, 212, 230, 255, 263, 264, 270, 277, 279, 287, 289, 340, 342, 359, 373, 376, 378, 380, 391, 404, 406, 408, 412, 413, 415, 416, 425, 431, 451, 457, 470, 475, 489, 503, 505, 639, 671, 680, 682, 707, 708, 712, 716, 717, 722, 725, 727, 728, 732, 733, 734, 738, 742, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 787, 788, 789, 791, 794, 795, 798, 800, 836, 837, 838, 845, 853, 879, 989, 1001, 1005, 1006, 1020, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "correct_covari": [470, 475], "corrected_std": 270, "corrected_var": 270, "correctli": [2, 164, 168, 212, 230, 246, 277, 279, 285, 300, 317, 331, 340, 376, 385, 390, 413, 415, 425, 438, 470, 495, 551, 552, 553, 555, 557, 559, 561, 563, 566, 569, 571, 614, 662, 670, 672, 678, 679, 680, 707, 798, 800, 803, 826, 836, 837, 838, 839, 843, 844, 845, 846, 847, 850, 855, 858, 865, 888, 903, 904, 908, 910, 911, 912, 913, 914, 916, 918, 953, 1002, 1005, 1008, 1009, 1015, 1020, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "correl": [2, 52, 65, 114, 116, 117, 131, 142, 148, 150, 152, 165, 168, 176, 184, 185, 186, 188, 189, 198, 202, 205, 208, 230, 270, 276, 289, 316, 320, 321, 332, 369, 372, 373, 381, 390, 393, 405, 410, 412, 417, 451, 458, 483, 484, 486, 495, 496, 502, 526, 566, 609, 612, 631, 638, 639, 640, 686, 687, 747, 761, 782, 783, 784, 834, 848, 849, 885, 886, 888, 897, 996, 1001, 1006, 1012, 1015, 1019, 1021, 1026, 1027, 1031, 1035, 1036, 1037, 1048, 1049], "correlation_coeffici": 612, "correlation_model": 1042, "correspond": [2, 51, 53, 54, 59, 64, 65, 69, 77, 87, 99, 110, 114, 123, 135, 138, 141, 142, 143, 151, 165, 168, 169, 172, 177, 180, 187, 202, 205, 209, 212, 213, 216, 221, 230, 240, 245, 246, 253, 260, 264, 269, 271, 273, 274, 279, 280, 284, 303, 315, 321, 322, 323, 352, 355, 356, 358, 359, 364, 370, 371, 372, 375, 376, 378, 380, 383, 384, 389, 390, 391, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 423, 429, 438, 440, 442, 446, 449, 452, 454, 460, 462, 464, 465, 468, 473, 483, 484, 485, 491, 492, 494, 495, 496, 497, 498, 536, 543, 546, 547, 548, 551, 552, 554, 557, 559, 561, 562, 563, 566, 585, 587, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 621, 632, 634, 636, 637, 639, 647, 650, 651, 652, 656, 662, 663, 664, 665, 666, 672, 673, 675, 676, 677, 678, 679, 680, 682, 684, 685, 686, 687, 691, 694, 695, 696, 698, 707, 714, 717, 728, 729, 738, 742, 746, 750, 756, 758, 778, 782, 786, 792, 793, 798, 800, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 829, 837, 839, 840, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 865, 866, 875, 878, 879, 881, 882, 885, 889, 897, 908, 909, 910, 913, 916, 917, 918, 919, 929, 939, 945, 961, 964, 979, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1019, 1020, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "correspondingli": 1052, "corri": 1046, "corrobor": 388, "corrupt": [45, 128, 198, 218, 229, 388, 864, 1001, 1013], "cort": [1046, 1047, 1050, 1051], "cortex": 413, "cos_transform": 44, "cosin": [2, 44, 76, 285, 290, 295, 368, 371, 390, 408, 413, 414, 442, 446, 451, 458, 537, 593, 594, 624, 700, 764, 765, 766, 769, 774, 775, 778, 782, 783, 784, 848, 849, 853, 880, 1008, 1021, 1031, 1045], "cosine_dist": [2, 404, 700, 766, 1008, 1041], "cosine_similar": [2, 344, 404, 764, 769, 1003, 1040], "cosinesimil": 290, "cost": [0, 44, 75, 124, 141, 150, 171, 184, 192, 232, 240, 244, 262, 272, 274, 277, 279, 284, 319, 327, 340, 352, 353, 354, 358, 376, 382, 384, 388, 407, 408, 415, 479, 498, 502, 539, 540, 541, 548, 553, 559, 560, 561, 562, 563, 566, 567, 605, 613, 614, 623, 631, 650, 651, 656, 657, 662, 664, 665, 666, 667, 672, 676, 678, 680, 682, 691, 692, 696, 704, 706, 722, 746, 788, 791, 803, 804, 826, 834, 869, 888, 906, 908, 909, 910, 913, 916, 917, 918, 919, 952, 997, 1001, 1002, 1005, 1008, 1018, 1019, 1020, 1026, 1027, 1031, 1041, 1044, 1045], "cost_complexity_pruning_path": [355, 916, 917, 918, 919], "costa": [1043, 1048], "costin": 1035, "costli": [105, 110, 142, 182, 264, 271, 348, 364, 377, 382, 408, 444, 631, 812, 814, 900, 901, 952, 1005, 1008, 1017, 1025], "costlier": 675, "costs_": [472, 473, 1051], "could": [44, 49, 53, 54, 65, 73, 78, 87, 104, 105, 121, 124, 136, 137, 144, 147, 150, 166, 171, 176, 183, 186, 187, 188, 212, 213, 216, 221, 230, 236, 244, 245, 246, 263, 264, 270, 283, 289, 298, 301, 322, 336, 337, 351, 355, 358, 365, 376, 382, 384, 390, 394, 402, 406, 412, 415, 416, 420, 475, 535, 540, 610, 611, 633, 675, 806, 811, 813, 995, 1001, 1002, 1012, 1013, 1015, 1020, 1025, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "couldn": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "count": [2, 24, 44, 53, 55, 63, 65, 77, 83, 87, 103, 119, 156, 157, 188, 212, 214, 230, 243, 253, 264, 279, 290, 320, 321, 352, 353, 371, 373, 380, 385, 390, 391, 406, 408, 413, 415, 416, 447, 450, 490, 498, 538, 546, 584, 591, 592, 593, 594, 597, 607, 621, 644, 701, 709, 719, 722, 733, 734, 742, 758, 787, 788, 790, 791, 843, 847, 848, 849, 857, 860, 871, 920, 922, 954, 969, 993, 994, 997, 1001, 1005, 1007, 1008, 1015, 1021, 1029, 1035, 1038, 1040, 1043, 1044, 1046, 1047, 1052], "count_nonzero": [47, 50, 363], "count_onli": [848, 849], "counter": [58, 135, 277, 408, 680, 681, 682, 1048], "counterpart": [994, 1002, 1020], "countri": [316, 498, 1002], "counts_": 1047, "countvector": [2, 55, 333, 353, 371, 381, 409, 413, 416, 465, 490, 538, 585, 592, 593, 594, 1035, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "coupl": [55, 86, 87, 89, 233, 370, 371, 376, 405, 406, 408, 417, 592, 914, 994, 1020], "cournapeau": [0, 398, 1035, 1038], "cours": [48, 49, 192, 284, 363, 376, 378, 407, 413, 416, 417, 995, 1000, 1001, 1029], "coursecentr": [408, 443], "courtesi": 376, "couvreur": [1044, 1045], "cov": [71, 114, 117, 137, 260, 376, 390, 394, 401, 411, 421, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 521, 534, 536, 543, 550], "cov_": [51, 114], "cov_class_1": 71, "cov_class_2": 71, "cov_init": 1051, "cov_test": 51, "cov_train": 51, "cov_typ": [257, 492], "covar": [255, 256, 261], "covari": [2, 49, 52, 66, 70, 111, 116, 128, 131, 149, 151, 171, 178, 215, 239, 254, 256, 258, 259, 260, 261, 277, 301, 326, 385, 390, 399, 408, 411, 413, 418, 421, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 506, 517, 521, 529, 534, 536, 543, 550, 551, 552, 565, 614, 615, 617, 626, 627, 635, 648, 649, 654, 658, 660, 686, 687, 690, 693, 697, 801, 802, 804, 823, 1004, 1011, 1015, 1026, 1027, 1030, 1031, 1035, 1037, 1038, 1039, 1040, 1042, 1044], "covariance_": [52, 71, 112, 114, 470, 471, 472, 473, 474, 475, 476, 477, 551, 552, 999, 1042], "covariance_correct": [470, 475], "covariance_eigh": [327, 543, 1053], "covariance_estim": [70, 551, 999, 1047], "covariance_prior": [261, 801], "covariance_prior_": 801, "covariance_reweight": [470, 475], "covariance_typ": [80, 256, 257, 259, 260, 261, 801, 802, 1051], "covariances_": [255, 256, 257, 260, 261, 801, 802, 1042], "cover": [0, 86, 192, 212, 230, 359, 368, 371, 376, 389, 639, 724, 798, 1005, 1006, 1023], "coverag": [2, 51, 53, 147, 150, 212, 230, 303, 371, 379, 404, 500, 631, 724], "coverage_error": [2, 1005, 1039, 1049], "coverage_fract": 147, "coverages_land": 51, "covertyp": [2, 369, 492, 1031], "covtyp": 192, "cow": 1036, "cowlei": 1045, "cowton": 1049, "cox": [310, 314, 884, 896, 1015, 1043, 1051], "cpo": 373, "cppflag": 374, "cpu": [0, 95, 271, 290, 324, 363, 364, 382, 384, 390, 394, 404, 416, 498, 565, 636, 651, 655, 657, 659, 662, 663, 665, 667, 669, 670, 672, 680, 683, 804, 818, 829, 830, 831, 852, 860, 901, 1005, 1040, 1049, 1050, 1052, 1053], "cpu_count": [78, 141, 290], "cpuexecutionprovid": 402, "cpython": [376, 377, 382, 1050], "craeton": 1053, "craft": 379, "craig": [1017, 1038, 1043], "crall": [1042, 1048], "crammer": [670, 671, 739, 1001, 1005, 1020], "crammer06a": [670, 671], "crammer_sing": [908, 1006, 1020, 1035], "cranenburgh": 1039, "crash": [52, 376, 402, 469, 898, 899, 906, 1015, 1039, 1043, 1051, 1052], "crawl": [523, 943], "craze": 1042, "crc": 1001, "creat": [2, 44, 45, 48, 51, 59, 60, 64, 65, 67, 69, 71, 73, 75, 77, 79, 80, 81, 83, 86, 92, 94, 96, 104, 105, 112, 117, 123, 126, 127, 137, 140, 143, 144, 145, 147, 151, 154, 168, 171, 173, 176, 177, 178, 180, 183, 186, 188, 194, 196, 199, 209, 213, 214, 224, 225, 234, 244, 246, 249, 250, 252, 260, 264, 265, 266, 268, 270, 280, 284, 298, 300, 301, 312, 314, 315, 319, 322, 323, 334, 336, 337, 341, 342, 345, 347, 348, 349, 353, 355, 359, 364, 371, 372, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 402, 406, 408, 409, 412, 414, 415, 416, 418, 439, 452, 454, 466, 467, 501, 517, 518, 519, 520, 548, 555, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 591, 592, 594, 600, 632, 634, 635, 636, 637, 701, 702, 704, 705, 706, 786, 793, 804, 806, 810, 814, 818, 822, 826, 827, 829, 830, 838, 869, 881, 910, 913, 916, 917, 918, 919, 923, 932, 955, 956, 963, 977, 989, 995, 1001, 1004, 1005, 1006, 1008, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1029, 1032, 1035, 1036, 1038, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "create_ax": 310, "create_species_bunch": 51, "createindex": 290, "creation": [378, 513, 514, 515, 517, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 660, 848, 849, 1029, 1042, 1043, 1044, 1048], "creativ": 370, "creator": [370, 373], "cred_int_df": 270, "cred_interv": 270, "credibl": 270, "credit": [371, 415, 1001, 1029], "credit_card": 264, "credit_gain": 264, "credit_gain_scor": 264, "crispinlogan": [1047, 1050, 1051, 1053], "cristian": 646, "cristina": 1047, "criteria": [91, 141, 184, 193, 202, 220, 260, 270, 384, 408, 417, 442, 467, 483, 484, 485, 503, 559, 560, 561, 562, 566, 567, 650, 656, 660, 662, 663, 675, 696, 869, 888, 908, 909, 916, 917, 918, 919, 995, 1004, 1009, 1019, 1026, 1038, 1043, 1046], "criterion": [65, 110, 111, 190, 200, 220, 260, 282, 320, 378, 385, 390, 408, 413, 442, 446, 450, 453, 460, 463, 534, 539, 541, 548, 555, 556, 559, 560, 561, 562, 566, 567, 568, 609, 631, 648, 649, 652, 660, 670, 671, 672, 673, 675, 676, 678, 680, 681, 682, 684, 695, 699, 714, 802, 831, 905, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1001, 1004, 1005, 1013, 1018, 1021, 1027, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "criterion_": [200, 202, 660], "critic": [370, 376, 389, 415, 696, 1002, 1005, 1013, 1020, 1029, 1046], "crockett": 1050, "crombach": 1037, "crop": [384, 1050], "cross": [2, 9, 30, 53, 54, 65, 71, 88, 91, 92, 104, 105, 107, 108, 110, 114, 117, 128, 141, 143, 144, 146, 147, 150, 159, 163, 166, 167, 169, 187, 188, 193, 198, 199, 200, 201, 207, 209, 212, 214, 220, 230, 247, 252, 257, 258, 260, 262, 267, 270, 271, 272, 274, 276, 277, 278, 279, 282, 284, 285, 287, 294, 308, 309, 311, 316, 319, 321, 326, 332, 340, 347, 357, 371, 376, 385, 388, 389, 390, 402, 403, 406, 409, 410, 413, 415, 416, 417, 418, 438, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 495, 503, 504, 506, 517, 543, 569, 570, 578, 596, 597, 600, 605, 609, 612, 646, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 690, 705, 706, 710, 717, 732, 745, 789, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 842, 850, 858, 868, 869, 873, 888, 889, 906, 908, 910, 913, 925, 959, 1004, 1005, 1008, 1009, 1013, 1015, 1020, 1021, 1025, 1026, 1027, 1029, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "cross_decomposit": [2, 115, 116, 117, 184, 247, 483, 484, 485, 486, 1006, 1026, 1039, 1040, 1042, 1043, 1044], "cross_val": 1035, "cross_val_predict": [2, 155, 266, 319, 399, 406, 412, 415, 438, 569, 570, 830, 831, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1052], "cross_val_scor": [2, 53, 128, 182, 183, 184, 262, 266, 275, 285, 325, 343, 359, 376, 388, 399, 412, 415, 473, 522, 578, 707, 746, 804, 829, 831, 850, 858, 916, 917, 994, 1005, 1026, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1047, 1048, 1051, 1052], "cross_valid": [2, 44, 53, 144, 150, 155, 187, 214, 246, 266, 273, 284, 287, 316, 326, 376, 389, 399, 578, 829, 830, 1005, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052], "crossentropi": 563, "crossvalid": [270, 285], "crowd": [384, 391, 1002, 1025], "crucial": [52, 150, 186, 216, 265, 363, 375, 376, 390, 391, 408, 418, 1020], "crude": 1046, "crunch": 382, "cruz": 179, "crypt": [58, 371], "cryptograph": 385, "cs_": 663, "cs_note": 417, "cs_point": 143, "csail": [408, 670, 671, 680, 845], "csc": [2, 363, 388, 390, 416, 529, 553, 555, 556, 674, 696, 875, 877, 883, 888, 891, 893, 899, 930, 934, 935, 967, 979, 980, 982, 983, 984, 985, 1008, 1015, 1043, 1044, 1046, 1049], "csc_matrix": [453, 559, 560, 565, 566, 567, 568, 885, 916, 917, 918, 919, 995, 1015, 1021, 1040], "csco": 52, "csgraph": [390, 1048], "csie": [192, 370, 488, 510, 511, 662], "csizsek": 1042, "csr": [2, 56, 327, 353, 363, 370, 371, 385, 388, 390, 416, 419, 444, 447, 448, 450, 451, 460, 499, 510, 525, 529, 555, 556, 559, 560, 566, 567, 568, 593, 634, 662, 696, 718, 772, 796, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 863, 871, 875, 877, 879, 880, 881, 883, 886, 887, 888, 891, 892, 893, 895, 898, 901, 916, 917, 918, 919, 930, 934, 935, 959, 967, 979, 980, 981, 982, 983, 984, 985, 986, 987, 1008, 1015, 1019, 1035, 1036, 1041, 1043, 1044, 1050, 1051, 1052], "csr_arrai": 986, "csr_matrix": [290, 320, 441, 445, 453, 498, 536, 546, 559, 560, 561, 562, 565, 566, 567, 568, 591, 596, 597, 718, 834, 863, 881, 883, 910, 911, 913, 914, 916, 917, 918, 919, 953, 959, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 1006, 1015, 1019, 1020, 1021, 1050], "css": 1047, "cst": 999, "cstride": 188, "csv": [52, 370, 373, 381, 1043, 1048], "csytraci": 1038, "ct": [54, 179, 253, 409, 465, 467, 468], "ctc": 179, "cttt": 179, "cube": [420, 535], "cubic": [112, 418], "cuda": [388, 404], "cue": 1004, "culprit": 388, "cultiv": 373, "cultur": 371, "cum_claim": [212, 230], "cum_exposur": 212, "cumsum": [146, 212, 230, 1042], "cumtim": 382, "cumul": [2, 146, 212, 230, 408, 730, 739, 760, 885, 897, 1015, 1019, 1042, 1044, 1045], "cumulated_claim": 212, "cumulated_claim_amount": 230, "cumulated_exposur": 212, "cumulated_sampl": 230, "cunha": [1036, 1037], "cup": [371, 1005], "cupi": [324, 327, 388, 404, 1052, 1053], "cupy_to_ndarrai": 404, "curat": [376, 379], "cure": 1001, "curic": [1043, 1044], "current": [0, 2, 7, 48, 81, 135, 176, 187, 230, 310, 319, 364, 365, 371, 374, 376, 377, 381, 385, 388, 390, 391, 404, 405, 408, 412, 415, 416, 417, 418, 441, 447, 451, 469, 470, 471, 472, 473, 474, 475, 476, 477, 534, 537, 543, 555, 556, 559, 560, 561, 562, 564, 566, 567, 568, 579, 594, 596, 614, 621, 630, 631, 634, 650, 671, 675, 679, 680, 681, 682, 792, 801, 802, 853, 857, 865, 866, 884, 896, 906, 916, 917, 918, 919, 922, 924, 925, 926, 971, 979, 994, 999, 1001, 1005, 1008, 1009, 1015, 1025, 1028, 1043, 1047, 1049, 1050, 1051], "current_count": 77, "current_month": 176, "current_sklearn_vers": 579, "current_sz_mb": 48, "currentcontrolset": 394, "currentmodul": 376, "curs": [351, 352, 408, 414, 1007, 1008], "cursor": [141, 271], "curv": [2, 30, 48, 51, 61, 62, 64, 73, 108, 110, 138, 140, 141, 146, 184, 193, 194, 203, 212, 230, 232, 234, 237, 238, 240, 242, 249, 250, 254, 255, 256, 257, 259, 260, 262, 264, 270, 280, 283, 306, 311, 319, 327, 344, 357, 383, 403, 407, 412, 414, 438, 439, 440, 504, 512, 517, 523, 527, 566, 636, 649, 662, 702, 704, 706, 710, 711, 712, 713, 731, 733, 745, 786, 788, 791, 792, 793, 801, 802, 810, 821, 827, 832, 834, 835, 846, 869, 888, 908, 913, 1001, 1002, 1004, 1005, 1011, 1021, 1026, 1027, 1029, 1031, 1032, 1037, 1038, 1041, 1045, 1047, 1048, 1049, 1050, 1051], "curvatur": 305, "cusick": 1045, "custom": [2, 15, 31, 42, 132, 166, 168, 184, 221, 250, 262, 264, 269, 271, 274, 277, 278, 282, 292, 297, 301, 319, 335, 337, 338, 340, 341, 343, 351, 353, 368, 371, 374, 378, 383, 384, 385, 388, 389, 390, 399, 402, 408, 409, 412, 418, 469, 490, 495, 496, 504, 506, 540, 542, 549, 551, 559, 560, 566, 567, 573, 575, 605, 634, 635, 694, 703, 717, 782, 804, 834, 872, 906, 913, 988, 999, 1005, 1008, 1024, 1025, 1026, 1029, 1031, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "custom_combin": 881, "custom_cv": 412, "custom_cv_2fold": 412, "custom_fnames_enc": 881, "custom_nam": 351, "custom_scor": 327, "custom_scorer_modul": 1005, "custom_scoring_funct": 1005, "custom_valu": [188, 636, 637], "customestim": 133, "customkernel": 622, "customvector": 416, "cut": [58, 79, 81, 99, 100, 168, 169, 184, 234, 262, 273, 287, 327, 332, 380, 388, 405, 407, 408, 447, 453, 454, 463, 498, 591, 594, 662, 695, 699, 820, 826, 831, 869, 888, 1015, 1026], "cut_dist": [89, 447], "cutler": [916, 917], "cutoff": [194, 958, 1015, 1044], "cutoffs_x0": 310, "cutoffs_x1": 310, "cv": [2, 44, 52, 53, 62, 63, 65, 88, 104, 105, 106, 110, 128, 141, 144, 146, 150, 160, 168, 182, 183, 187, 202, 211, 214, 246, 264, 266, 268, 269, 270, 271, 272, 273, 275, 276, 280, 284, 285, 287, 316, 324, 326, 327, 340, 347, 389, 390, 399, 406, 407, 412, 415, 417, 438, 473, 569, 570, 597, 605, 651, 655, 657, 659, 663, 665, 667, 669, 677, 679, 804, 806, 807, 808, 809, 810, 818, 819, 820, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 850, 858, 889, 916, 917, 994, 997, 1000, 1001, 1005, 1015, 1037, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1053], "cv_alpha": [655, 659], "cv_alphas_": [202, 655, 659, 1047], "cv_best_it": 146, "cv_clf": 146, "cv_color": 146, "cv_estim": 146, "cv_estimators_tut": 160, "cv_line": 146, "cv_mape_scor": 53, "cv_model": 187, "cv_result": [44, 53, 104, 141, 150, 168, 268, 269, 271, 273, 399, 818, 831, 1005], "cv_results_": [104, 105, 106, 114, 141, 160, 168, 260, 264, 268, 269, 270, 271, 274, 278, 281, 282, 292, 340, 473, 597, 677, 679, 804, 807, 808, 818, 826, 1041, 1045, 1047, 1048, 1053], "cv_results_ecoc": 287, "cv_results_lr": 214, "cv_results_ovo": 287, "cv_results_ovr": 287, "cv_results_qr": 214, "cv_results_tre": 287, "cv_results_tuned_model": 284, "cv_results_vanilla_model": 284, "cv_score": [146, 284], "cv_test_scor": 832, "cv_train_scor": 832, "cv_valu": 1043, "cv_values_": [677, 679, 1053], "cvc": 52, "cve": 1048, "cvx": 52, "cwitt": 1043, "cxx": 374, "cxxflag": 374, "cyan": [110, 138, 187, 301], "cybernet": 773, "cycl": [0, 16, 44, 78, 80, 84, 96, 121, 201, 256, 261, 277, 279, 322, 323, 376, 380, 399, 413, 582, 583, 631, 807, 808, 930, 994, 995, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "cycler": 74, "cyclic": [44, 650, 651, 656, 657, 664, 665, 666, 667, 1047], "cyclic_cossin_linear_pipelin": 44, "cyclic_cossin_linear_predict": 44, "cyclic_cossin_transform": 44, "cyclic_hour": 44, "cyclic_month": 44, "cyclic_spline_interactions_pipelin": 44, "cyclic_spline_linear_pipelin": 44, "cyclic_spline_linear_predict": 44, "cyclic_spline_poly_pipelin": 44, "cyclic_spline_poly_predict": 44, "cyclic_spline_transform": 44, "cyclic_weekdai": 44, "cyl": [51, 303], "cynthias13w": 1052, "cython": [42, 323, 363, 364, 374, 376, 379, 385, 388, 394, 401, 404, 408, 415, 510, 1015, 1016, 1019, 1020, 1024, 1025, 1035, 1038, 1039, 1041, 1047, 1050, 1051, 1052, 1053], "cython3": 374, "cythonx": 377, "c\u00e8sar": 1005, "d": [0, 2, 46, 47, 48, 50, 51, 52, 53, 55, 56, 68, 69, 73, 74, 78, 83, 84, 94, 95, 97, 104, 114, 119, 121, 124, 128, 130, 171, 179, 187, 212, 220, 228, 230, 237, 242, 243, 244, 245, 258, 269, 270, 278, 284, 289, 296, 297, 303, 307, 329, 330, 333, 340, 344, 345, 353, 370, 371, 373, 376, 378, 382, 388, 406, 408, 410, 411, 413, 415, 416, 418, 419, 445, 447, 448, 453, 461, 464, 489, 495, 505, 528, 536, 538, 559, 560, 567, 568, 584, 585, 593, 613, 618, 619, 623, 626, 627, 632, 648, 649, 652, 673, 674, 675, 684, 692, 693, 696, 697, 701, 703, 709, 712, 725, 726, 727, 728, 730, 760, 768, 782, 785, 792, 816, 843, 845, 847, 848, 849, 864, 875, 879, 881, 882, 884, 896, 901, 918, 919, 923, 945, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1013, 1015, 1017, 1020, 1021, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 53, "d1997": 415, "d2": [726, 727, 1005], "d2_absolute_error_scor": [2, 727, 1005, 1049], "d2_log_loss_scor": [2, 1005, 1053], "d2_pinball_scor": [2, 1005, 1049], "d2_pinball_score_08": 1005, "d2_tweedie_scor": [2, 404, 1005, 1048], "d2_tweedie_score_15": 1005, "d55e00": 255, "d81b60": 314, "d83": 373, "d_": [112, 408, 413, 652, 673, 684, 782, 1002, 1007], "d_c": 408, "d_chunk": 785, "d_fit": 692, "d_fix": 130, "d_m": 408, "d_multi": 130, "da": [371, 1050, 1051, 1053], "dae": 1001, "dagm": 997, "dagstuhl": 1005, "dai": [0, 44, 52, 53, 150, 176, 188, 213, 373, 376, 887, 1029, 1041, 1042, 1049, 1050], "daiki": 1039, "daili": [52, 150, 1029], "dakota": 1045, "dale": 1048, "dalla": 1043, "dalmia": [1041, 1042, 1043], "damag": 416, "damicelli": 1050, "damink": 1052, "daml": [408, 453, 463], "damp": [80, 408, 441, 455], "dan": [56, 1035, 1039, 1040, 1041, 1043, 1044], "danfrankj": 1039, "dang": [683, 1001, 1053], "danger": [213, 412], "dangi": 1052, "dangl": 56, "dangonite57": [1050, 1051], "daniel": [363, 889, 1015, 1029, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1052], "daniela": [1049, 1050], "danielgaerb": 1050, "danielsen": 1042, "danielweitzenfeld": 1038, "daniil": 1042, "danil": 1043, "dani\u00ebl": 1046, "danna": 1045, "danni": [1038, 1039, 1040], "dantzig": 347, "danylo": 1044, "dao": 1043, "daphn": 1046, "dare": 1045, "darioka": [1047, 1049, 1050], "dariu": [1042, 1043], "dark": [138, 187, 340, 371, 1052], "dark2": [63, 65, 233], "darkblu": 301, "darkorang": [111, 125, 129, 130, 213, 223, 235, 256, 257, 258, 261, 277, 279, 295, 301, 302, 331, 357], "darkorchid": 222, "darkr": [226, 296, 339], "darpa": 371, "darren": [1049, 1050], "darshan": 1047, "dart": 1024, "dartmouth": 0, "dasarathi": 373, "dasgupta": [416, 447, 902, 1017], "dash": [70, 112, 135, 146, 157, 171, 174, 176, 187, 208, 213, 214, 221, 224, 225, 249, 264, 270, 280, 342, 1019], "dashdot": [146, 171, 174, 249], "dask": [1025, 1043], "data": [0, 2, 10, 17, 23, 27, 37, 38, 39, 43, 46, 48, 51, 53, 54, 55, 58, 60, 63, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 90, 93, 94, 95, 96, 99, 102, 104, 105, 107, 111, 113, 119, 121, 124, 125, 127, 129, 131, 133, 135, 138, 140, 141, 143, 144, 146, 147, 152, 153, 154, 156, 158, 160, 162, 166, 170, 171, 172, 173, 175, 176, 178, 180, 182, 184, 187, 188, 193, 194, 197, 198, 201, 202, 203, 208, 210, 211, 212, 213, 214, 215, 218, 220, 221, 225, 226, 228, 229, 230, 232, 233, 234, 235, 236, 239, 242, 243, 244, 246, 248, 249, 250, 253, 255, 256, 257, 258, 259, 261, 263, 264, 268, 270, 272, 273, 274, 275, 278, 284, 285, 287, 289, 290, 294, 296, 298, 299, 300, 301, 303, 306, 307, 309, 311, 312, 313, 317, 319, 321, 323, 324, 325, 327, 330, 331, 333, 334, 336, 337, 339, 344, 345, 351, 356, 357, 358, 362, 364, 368, 369, 370, 371, 372, 373, 376, 378, 379, 382, 383, 384, 385, 389, 394, 396, 399, 402, 404, 405, 406, 407, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 432, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 515, 516, 517, 522, 523, 524, 525, 526, 528, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 614, 615, 621, 622, 626, 629, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 714, 715, 717, 721, 722, 724, 729, 731, 732, 733, 734, 735, 738, 740, 741, 742, 744, 745, 758, 759, 761, 765, 767, 768, 773, 782, 787, 788, 789, 791, 792, 793, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 925, 927, 928, 929, 930, 932, 933, 934, 935, 938, 939, 940, 949, 951, 952, 967, 970, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "data1010": 1040, "data_filenam": [503, 507], "data_hom": [487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 1042, 1051], "data_home_path": 501, "data_id": [45, 144, 176, 187, 212, 230, 240, 264, 284, 287, 316, 370, 498], "data_ind": 54, "data_max": 1040, "data_max_": [878, 1040], "data_min": 1040, "data_min_": [878, 1040], "data_nam": 394, "data_path": 48, "data_rang": 1040, "data_range_": [878, 1040], "data_sampl": 55, "data_set": 306, "data_size_mb": 353, "data_stream": 48, "data_test": [244, 264, 271, 351, 511], "data_test_size_mb": 351, "data_train": [244, 264, 271, 351, 511], "data_train_size_mb": 351, "data_transform": 643, "data_transpos": [1049, 1051], "data_unravel_indic": 54, "data_vers": 394, "databas": [48, 315, 363, 365, 371, 373, 408, 413, 415, 416, 419, 443, 445, 512, 557, 558, 901, 1017], "dataclass": 378, "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 44, 53, 63, 103, 104, 105, 135, 141, 144, 147, 152, 168, 176, 182, 186, 187, 189, 194, 198, 202, 216, 220, 230, 250, 253, 260, 268, 270, 271, 273, 281, 282, 284, 287, 315, 316, 317, 322, 323, 324, 347, 351, 352, 370, 371, 376, 378, 381, 390, 409, 415, 432, 443, 444, 446, 448, 450, 465, 467, 468, 469, 483, 484, 485, 486, 490, 491, 492, 494, 498, 502, 503, 504, 506, 507, 512, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 563, 564, 568, 569, 570, 571, 572, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 692, 693, 696, 804, 807, 808, 818, 834, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 930, 959, 975, 978, 993, 994, 995, 1025, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "datalim": 257, "datapoint": [44, 78, 86, 90, 175, 178, 244, 245, 249, 265, 270, 289, 418, 447, 504, 559, 560, 561, 562, 566, 567, 568, 615, 916, 917, 918, 919, 998], "dataset": [2, 38, 46, 47, 49, 50, 51, 54, 55, 56, 58, 59, 60, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 101, 104, 105, 106, 107, 108, 112, 113, 114, 117, 120, 123, 124, 125, 126, 128, 130, 131, 134, 136, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 179, 182, 183, 189, 190, 192, 193, 196, 199, 200, 201, 203, 204, 206, 209, 210, 211, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 234, 236, 237, 238, 240, 243, 245, 247, 248, 252, 253, 255, 257, 258, 259, 261, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 338, 340, 341, 342, 343, 345, 347, 348, 349, 352, 353, 354, 355, 358, 359, 364, 365, 379, 380, 382, 389, 390, 393, 394, 402, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 419, 420, 423, 428, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 470, 471, 474, 475, 476, 477, 479, 482, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 586, 587, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 632, 635, 636, 637, 638, 639, 642, 643, 644, 647, 649, 650, 651, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 712, 714, 715, 733, 759, 761, 791, 792, 796, 797, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 864, 865, 866, 868, 869, 872, 873, 881, 882, 886, 888, 890, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 934, 935, 939, 940, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "dataset_44063": 53, "dataset_nam": [249, 290], "datasets_nam": 249, "datastructur": [404, 1043, 1047], "datastuctur": 1052, "datatyp": [388, 465, 467, 1042, 1045], "date": [44, 103, 150, 176, 188, 371, 373, 376, 380, 391, 409, 1025], "daten": [451, 1043, 1044], "datenbergwerk": 1045, "datetim": [44, 56, 176, 188], "dauphin": 1037, "dave": [1035, 1042, 1043, 1049, 1051], "davi": [2, 475, 729, 1005, 1039], "david": [0, 113, 371, 398, 408, 415, 418, 463, 534, 538, 569, 570, 626, 627, 632, 729, 801, 905, 995, 1001, 1009, 1018, 1029, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "davidblnc": [1050, 1051], "davidleon123": 1053, "davies_bouldin_scor": [2, 408, 1043], "davis2006": 1005, "daw": [0, 398, 1035, 1036, 1037, 1038, 1039], "dawson": [1039, 1053], "dayn": [1050, 1051], "db": [83, 89, 408], "dbauer9": 1046, "dberenbaum": 1051, "dbg": 382, "dbpedia": 56, "dbpedia_resource_prefix_len": 56, "dbscan": [2, 72, 73, 74, 80, 89, 94, 97, 99, 184, 325, 331, 388, 390, 447, 451, 453, 456, 514, 708, 709, 721, 741, 797, 799, 860, 888, 1008, 1026, 1030, 1031, 1035, 1037, 1039, 1040, 1042, 1043, 1044, 1051, 1052], "dbscan_clust": 447, "dcc": 371, "dcg": [730, 760, 1005, 1042], "dcg_score": [2, 760, 1005, 1042, 1045], "dd": [51, 52, 153, 303, 500], "ddof": [270, 888, 899], "de": [52, 155, 373, 639, 692, 768, 1001, 1002, 1025, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "dea": [1049, 1050, 1051], "deactiv": [251, 370, 377, 382, 394, 409, 807, 808, 1049], "dead": 1053, "deadlock": 391, "deal": [63, 91, 104, 150, 182, 187, 198, 236, 284, 287, 344, 353, 376, 381, 409, 416, 417, 418, 475, 498, 707, 712, 767, 791, 874, 952, 1001, 1029, 1038, 1050, 1051], "dealloc": 1052, "dean": [155, 1043, 1049, 1051, 1053], "death": 371, "debian": [0, 363, 374, 382], "debias": 130, "deborah": [1041, 1042, 1052], "debug": [2, 359, 364, 377, 379, 382, 390, 393, 631, 907, 1043, 1047], "debugg": [379, 384], "dec": [213, 287, 681, 887, 912, 1020], "decad": [187, 1025], "decai": [176, 546, 865, 866, 952, 1005, 1019, 1039], "decal": 1047, "decemb": [113, 150, 176, 371, 668, 689, 690, 1035, 1043, 1045, 1047, 1048, 1050], "decent": [239, 269, 371, 1007], "deci": 279, "decid": [44, 51, 91, 94, 104, 145, 150, 261, 267, 270, 277, 371, 376, 391, 402, 407, 416, 418, 451, 458, 561, 562, 615, 639, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 675, 685, 688, 801, 850, 851, 852, 854, 856, 858, 859, 860, 871, 1004, 1011, 1029, 1048, 1051], "decil": [636, 1046], "deciles_hlines_": 636, "deciles_vlines_": 636, "decim": [63, 177, 472, 473, 921, 1042, 1043], "decis": [0, 2, 41, 44, 63, 65, 67, 68, 71, 77, 90, 92, 94, 125, 127, 129, 134, 137, 138, 139, 140, 145, 153, 154, 155, 157, 158, 162, 168, 169, 173, 175, 187, 193, 197, 203, 221, 222, 225, 227, 239, 240, 242, 247, 250, 262, 273, 274, 276, 277, 287, 298, 301, 305, 310, 311, 312, 315, 328, 332, 333, 336, 337, 338, 339, 340, 341, 342, 348, 349, 351, 363, 372, 373, 376, 378, 390, 402, 403, 406, 408, 415, 438, 470, 498, 502, 506, 514, 521, 538, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 596, 597, 613, 635, 636, 637, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 702, 704, 706, 707, 711, 722, 724, 730, 731, 739, 743, 744, 746, 760, 786, 788, 791, 792, 793, 798, 803, 804, 807, 808, 818, 820, 826, 831, 834, 836, 837, 839, 850, 855, 869, 888, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "decision_funct": [49, 51, 63, 65, 90, 137, 151, 162, 224, 225, 226, 240, 249, 264, 277, 284, 296, 297, 305, 312, 326, 338, 339, 340, 344, 345, 349, 378, 390, 406, 407, 415, 438, 470, 551, 552, 555, 557, 561, 563, 565, 569, 596, 597, 635, 636, 637, 662, 663, 670, 672, 678, 679, 680, 681, 702, 704, 706, 711, 724, 730, 731, 739, 743, 744, 746, 760, 786, 792, 793, 798, 803, 804, 807, 808, 818, 826, 829, 836, 837, 838, 839, 854, 855, 868, 875, 905, 908, 910, 912, 913, 927, 1001, 1005, 1011, 1012, 1019, 1020, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1052], "decision_function_shap": [319, 348, 910, 913, 1020, 1040, 1041, 1044, 1045], "decision_path": [358, 559, 560, 566, 567, 568, 916, 917, 918, 919, 1041, 1046], "decision_threshold": [264, 284], "decision_tre": [920, 921, 922, 1021], "decision_tree_learn": [916, 917, 1021], "decisionboundarydisplai": [2, 49, 67, 68, 71, 90, 137, 151, 156, 205, 221, 226, 273, 293, 298, 301, 315, 336, 337, 338, 339, 341, 342, 344, 356, 1049, 1050, 1052, 1053], "decisiontre": [143, 555, 1040], "decisiontreeclassifi": [2, 68, 135, 137, 143, 156, 274, 287, 325, 355, 356, 358, 378, 390, 407, 415, 555, 557, 559, 561, 563, 566, 635, 715, 810, 832, 917, 918, 920, 921, 922, 995, 1006, 1021, 1036, 1037, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "decisiontreeregressor": [2, 136, 138, 250, 311, 319, 325, 357, 381, 556, 558, 560, 561, 562, 564, 567, 636, 637, 916, 919, 921, 947, 995, 1006, 1021, 1036, 1037, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "declan": 1047, "declar": [90, 233, 246, 359, 376, 377, 382, 390, 444, 447, 448, 460, 472, 473, 479, 694, 698, 1042, 1046], "decod": [48, 303, 371, 390, 505, 571, 591, 592, 594, 1035, 1036], "decode_error": [48, 416, 505, 591, 592, 594, 1037], "decompos": [11, 121, 125, 138, 312, 536, 540, 713, 829, 952, 1000, 1001, 1005, 1022, 1030, 1031], "decomposit": [2, 9, 45, 46, 55, 56, 84, 92, 103, 105, 106, 107, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 153, 192, 232, 233, 235, 243, 244, 247, 248, 251, 269, 294, 299, 315, 323, 326, 327, 352, 365, 369, 382, 385, 390, 404, 405, 406, 409, 415, 420, 450, 452, 453, 454, 463, 483, 484, 485, 497, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 615, 654, 655, 656, 657, 658, 659, 660, 667, 668, 669, 676, 677, 678, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 801, 802, 857, 864, 867, 870, 886, 917, 951, 952, 1001, 1002, 1005, 1022, 1024, 1026, 1027, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "decompress": [402, 1035], "decor": [2, 188, 319, 376, 377, 378, 385, 810, 827, 941, 945, 947, 965, 971, 1045, 1048, 1051, 1053], "decoupl": [415, 1007], "decreas": [64, 75, 81, 89, 92, 100, 108, 150, 152, 168, 169, 187, 188, 190, 220, 242, 243, 272, 277, 305, 312, 315, 319, 355, 363, 365, 376, 406, 408, 415, 442, 446, 464, 523, 536, 537, 543, 559, 560, 561, 562, 563, 564, 566, 567, 568, 605, 639, 640, 641, 680, 681, 682, 710, 716, 731, 786, 793, 865, 866, 916, 917, 918, 919, 994, 996, 997, 1001, 1002, 1005, 1008, 1009, 1012, 1013, 1019, 1020, 1029, 1037, 1042, 1045, 1048], "dede00": [80, 96, 97], "dedic": [44, 268, 349, 374, 380, 382, 388, 391, 404, 408, 587, 676, 678, 691, 994, 1001, 1024, 1043, 1052], "deduc": 47, "deduct": 1009, "dedupl": 1039, "deeksha": 1047, "deem": [278, 279, 536, 1013, 1048], "deep": [212, 378, 390, 402, 415, 422, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 773, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1009, 1010, 1024, 1025, 1029, 1040, 1046, 1047, 1049], "deeper": [351, 1021], "deepest": [563, 564, 1046], "deeplook": 1045, "deeppink": 279, "def": [44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 63, 65, 70, 71, 73, 76, 77, 86, 89, 90, 92, 95, 103, 108, 119, 121, 123, 124, 128, 130, 133, 135, 138, 140, 144, 146, 147, 150, 155, 174, 177, 179, 180, 183, 190, 195, 200, 202, 205, 212, 213, 220, 221, 222, 230, 232, 233, 246, 247, 249, 255, 256, 257, 258, 260, 261, 264, 265, 268, 269, 270, 271, 273, 278, 281, 285, 290, 295, 297, 300, 303, 306, 308, 310, 312, 315, 316, 319, 327, 333, 336, 340, 344, 349, 351, 352, 353, 363, 371, 376, 378, 382, 383, 388, 409, 412, 416, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 510, 511, 535, 600, 604, 614, 615, 622, 785, 881, 941, 945, 947, 965, 1005, 1012, 1020], "default": [2, 44, 53, 55, 63, 67, 78, 81, 89, 93, 121, 127, 141, 165, 171, 182, 188, 194, 195, 202, 209, 212, 213, 230, 241, 243, 249, 251, 253, 258, 264, 265, 273, 279, 284, 289, 290, 310, 314, 317, 319, 320, 324, 326, 327, 344, 347, 348, 351, 352, 353, 355, 358, 359, 363, 364, 370, 371, 374, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 394, 399, 402, 406, 407, 408, 409, 412, 413, 415, 416, 417, 419, 420, 421, 422, 424, 425, 427, 429, 430, 431, 432, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 738, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 938, 940, 941, 943, 945, 946, 947, 951, 952, 953, 954, 955, 956, 957, 958, 967, 969, 970, 973, 974, 975, 977, 978, 979, 985, 988, 990, 991, 993, 994, 995, 997, 999, 1001, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "default_bas": [80, 96], "default_rng": 273, "default_scor": 381, "default_target_attribut": 370, "default_tim": [227, 258], "defaultdict": [50, 53, 63, 190, 273, 352, 353], "defazio": [662, 1001], "defens": 287, "defer": 376, "deffici": 1053, "defici": [552, 1002, 1019], "defin": [8, 28, 47, 52, 65, 71, 87, 89, 91, 100, 103, 104, 106, 117, 121, 126, 133, 135, 136, 155, 169, 171, 178, 179, 180, 188, 189, 190, 194, 213, 220, 229, 230, 239, 243, 246, 250, 252, 255, 260, 264, 270, 271, 273, 277, 279, 280, 281, 282, 284, 287, 290, 310, 320, 326, 327, 340, 344, 347, 351, 352, 363, 372, 375, 376, 377, 378, 382, 383, 385, 388, 389, 390, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 423, 424, 425, 427, 429, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 460, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 490, 521, 522, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 626, 627, 631, 632, 633, 634, 636, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 700, 701, 703, 712, 714, 715, 720, 725, 726, 727, 728, 729, 732, 735, 742, 745, 749, 750, 752, 754, 755, 757, 758, 761, 764, 770, 785, 789, 794, 795, 796, 797, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 869, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 895, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 938, 940, 943, 950, 962, 964, 988, 994, 995, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1025, 1031, 1032, 1037, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "definit": [2, 92, 113, 200, 212, 277, 290, 352, 376, 377, 378, 390, 393, 408, 410, 411, 413, 529, 531, 537, 615, 632, 696, 712, 722, 732, 750, 762, 801, 802, 994, 997, 999, 1001, 1003, 1005, 1008, 1019, 1023, 1031, 1039, 1043, 1050], "definitelyuncertain": 1041, "deflat": [187, 411, 420, 535], "defoi": 1048, "deform": [151, 260, 349], "degener": [119, 420, 441, 455, 535, 724, 1001, 1005, 1044, 1048, 1049], "degrad": [150, 188, 239, 310, 347, 352, 414, 782, 1013], "degre": [44, 71, 123, 137, 176, 182, 186, 187, 188, 192, 194, 198, 200, 202, 213, 216, 245, 251, 255, 256, 257, 260, 261, 270, 285, 308, 321, 322, 337, 344, 346, 413, 417, 447, 453, 500, 537, 543, 643, 644, 647, 660, 779, 801, 804, 854, 883, 887, 910, 911, 912, 913, 914, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1011, 1012, 1015, 1018, 1020, 1038, 1044, 1048, 1049, 1052], "degrees_of_freedom_": 801, "degrees_of_freedom_prior": 801, "degrees_of_freedom_prior_": 801, "dei": 1047, "deil": [1036, 1046, 1047], "dein": 416, "dekel": [670, 671, 1001], "del": [56, 382, 1047, 1048], "delai": [2, 376, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 804, 818, 829, 830, 1049, 1050, 1053], "delalleau": 1018, "delanou": 1046, "delattr": 1047, "delayed_funct": 970, "delbert": [74, 441, 455], "deleg": [90, 382, 432, 433, 613, 921, 993, 1039, 1041, 1047], "delet": [2, 105, 330, 332, 380, 381, 470, 475, 487], "delete_index": 330, "delete_indic": 330, "deleteri": 1042, "deli": 402, "deliber": 1001, "delimit": [376, 1011, 1050], "deliv": [363, 1029], "deliveri": 380, "dell": 52, "delong": [1047, 1048], "delta": [411, 453], "delta_": 1002, "delta_k": 411, "delteil": 1039, "delv": [865, 866], "demand": [146, 150, 390, 416, 804, 818, 829, 830], "demarc": 94, "demiraj": [1050, 1051], "demo": [53, 54, 57, 72, 73, 75, 76, 77, 80, 81, 87, 88, 90, 91, 93, 94, 95, 96, 98, 101, 151, 184, 190, 198, 218, 243, 258, 260, 271, 279, 315, 331, 351, 352, 378, 405, 408, 416, 419, 441, 442, 445, 447, 448, 449, 451, 452, 454, 455, 456, 459, 462, 504, 513, 514, 515, 543, 708, 709, 721, 723, 741, 797, 799, 869, 888, 889, 1026], "demo_param": 378, "demonstr": [47, 53, 58, 59, 60, 63, 69, 72, 76, 79, 89, 95, 103, 105, 135, 139, 145, 148, 166, 167, 179, 180, 184, 190, 205, 213, 246, 252, 253, 257, 261, 262, 266, 273, 276, 279, 285, 292, 295, 302, 309, 311, 312, 314, 317, 321, 328, 330, 331, 334, 338, 344, 348, 351, 352, 353, 357, 359, 365, 371, 372, 376, 381, 388, 399, 404, 408, 412, 415, 448, 504, 514, 522, 562, 701, 707, 717, 746, 802, 804, 851, 873, 904, 916, 994, 995, 999, 1005, 1006, 1007, 1008, 1015, 1018, 1021, 1023, 1026], "dem\u0161ar": 270, "den": [0, 398, 1036, 1037, 1042, 1043, 1044, 1047, 1048], "dendrit": [408, 714], "dendro": 190, "dendro_idx": 190, "dendrogram": [72, 101, 184, 190, 358, 408, 442, 446, 506, 1026, 1047], "denero": 739, "deng": [1039, 1040, 1041], "dengemann": 1036, "dengyong": 904, "deni": [1037, 1038, 1042, 1043, 1044, 1050, 1051], "denni": 1049, "denois": [43, 69, 84, 85, 87, 100, 120, 126, 184, 413, 498, 537, 539, 543, 587, 590, 834, 878, 1026], "denomin": [277, 415, 416, 421, 476, 593, 708, 761, 999], "denot": [167, 385, 390, 394, 406, 408, 412, 415, 591, 592, 594, 804, 810, 818, 827, 881, 882, 989, 994, 997, 1001, 1003, 1005, 1006, 1015, 1018, 1052], "dens": [52, 56, 89, 184, 193, 198, 201, 207, 323, 324, 333, 363, 385, 390, 408, 413, 415, 417, 444, 447, 448, 450, 465, 468, 498, 525, 526, 529, 536, 537, 546, 568, 610, 611, 633, 634, 656, 661, 662, 663, 670, 671, 672, 676, 677, 680, 681, 682, 691, 692, 693, 696, 697, 764, 765, 771, 783, 796, 865, 866, 873, 880, 881, 883, 885, 886, 887, 888, 897, 898, 899, 900, 901, 908, 909, 910, 911, 913, 914, 953, 975, 978, 995, 998, 1001, 1002, 1005, 1006, 1008, 1011, 1015, 1017, 1018, 1019, 1020, 1021, 1026, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "dense_lasso": 199, "dense_output": [765, 771, 901, 953, 1043], "denser": 445, "densif": 1044, "densifi": [390, 662, 663, 670, 671, 672, 680, 681, 682, 908, 995, 1037], "densiti": [2, 51, 83, 89, 94, 99, 108, 130, 167, 174, 184, 199, 212, 227, 230, 236, 239, 243, 254, 255, 261, 270, 276, 287, 291, 296, 297, 310, 340, 351, 371, 373, 385, 390, 408, 415, 419, 427, 445, 447, 449, 451, 453, 465, 468, 500, 504, 538, 543, 551, 552, 801, 802, 804, 848, 849, 853, 854, 901, 999, 1001, 1004, 1008, 1010, 1011, 1017, 1024, 1026, 1027, 1030, 1031, 1037, 1039, 1043, 1044, 1050, 1051], "density_": 901, "density_estim": [427, 927], "densitymixin": 2, "denton": 1037, "deodhar": 1047, "deoli": 1048, "depart": [179, 408], "depedend": 1052, "depend": [2, 26, 44, 45, 47, 53, 65, 73, 87, 108, 125, 141, 144, 147, 148, 150, 152, 155, 164, 168, 177, 182, 184, 185, 187, 190, 192, 195, 198, 230, 233, 238, 239, 245, 249, 260, 264, 270, 271, 275, 276, 277, 284, 290, 306, 310, 315, 321, 324, 327, 337, 344, 347, 352, 353, 359, 363, 364, 365, 369, 376, 378, 379, 384, 385, 388, 389, 390, 391, 393, 394, 401, 402, 404, 408, 410, 412, 413, 415, 416, 417, 418, 419, 439, 440, 441, 445, 447, 448, 450, 451, 453, 455, 458, 460, 461, 463, 465, 470, 485, 490, 491, 492, 495, 498, 502, 503, 504, 506, 507, 512, 536, 537, 543, 546, 553, 561, 562, 564, 591, 592, 593, 594, 605, 607, 610, 611, 615, 631, 636, 637, 642, 644, 652, 662, 663, 673, 675, 677, 680, 681, 682, 684, 691, 694, 695, 698, 699, 715, 733, 734, 742, 782, 785, 787, 788, 791, 796, 797, 801, 802, 823, 833, 850, 851, 852, 854, 856, 857, 858, 859, 860, 866, 867, 869, 881, 882, 885, 888, 902, 909, 910, 913, 917, 932, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1013, 1017, 1019, 1020, 1021, 1026, 1031, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1050, 1051, 1052], "dependabot": 1053, "dependen": 347, "depict": [135, 272, 415, 1004], "deploi": [264, 327, 363, 393, 402, 407, 1025, 1029], "deploy": [384, 402, 1024, 1025, 1029], "depot": 52, "deprec": [2, 16, 148, 190, 319, 322, 364, 378, 379, 380, 385, 390, 399, 438, 443, 446, 448, 451, 458, 460, 483, 484, 485, 486, 538, 540, 542, 555, 571, 572, 582, 583, 585, 631, 662, 663, 677, 679, 683, 696, 713, 746, 782, 783, 784, 786, 804, 807, 808, 818, 832, 833, 835, 855, 867, 868, 873, 905, 910, 913, 930, 932, 934, 935, 945, 947, 994, 995, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "deprecated_api_refer": 376, "deprecationwarn": 1045, "dept": 373, "depth": [44, 140, 144, 148, 151, 156, 287, 355, 357, 358, 363, 374, 376, 380, 389, 415, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 848, 849, 853, 916, 917, 918, 919, 920, 922, 958, 1010, 1011, 1021, 1037, 1038, 1046], "der": [696, 700, 1002, 1038, 1039, 1043], "derek": 1043, "deriv": [44, 58, 130, 131, 146, 176, 179, 189, 200, 202, 206, 213, 364, 371, 410, 412, 414, 415, 416, 418, 420, 442, 446, 447, 466, 493, 535, 609, 621, 626, 652, 673, 680, 684, 865, 866, 881, 887, 908, 909, 999, 1001, 1002, 1005, 1009, 1011, 1020, 1035, 1036, 1037, 1042, 1043, 1044, 1050], "deros": 1046, "derouich": 1035, "derweh": 1053, "desai": [1042, 1044, 1047, 1048, 1050, 1051], "desalvo": 994, "descamp": 1043, "descend": [143, 631, 1045], "descent": [2, 47, 54, 145, 184, 193, 200, 201, 239, 244, 296, 322, 339, 413, 415, 472, 473, 479, 489, 498, 505, 533, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 635, 643, 650, 651, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 672, 676, 678, 680, 681, 682, 685, 686, 687, 688, 691, 698, 834, 865, 866, 869, 908, 912, 978, 1002, 1009, 1011, 1020, 1026, 1027, 1031, 1035, 1038, 1039, 1040, 1042, 1044, 1046, 1048, 1049, 1050], "descr": [169, 369, 370, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 509, 512, 1043], "describ": [2, 44, 53, 90, 155, 187, 230, 244, 270, 279, 359, 363, 364, 369, 371, 373, 375, 376, 378, 381, 384, 390, 391, 405, 408, 410, 411, 412, 413, 415, 416, 463, 470, 474, 475, 492, 495, 497, 498, 499, 502, 503, 504, 505, 506, 507, 512, 518, 519, 520, 530, 610, 611, 649, 663, 672, 718, 801, 802, 843, 845, 881, 883, 952, 994, 997, 1000, 1001, 1004, 1005, 1007, 1011, 1019, 1020, 1021, 1028, 1043, 1045], "descript": [2, 53, 169, 187, 369, 370, 375, 376, 380, 381, 384, 390, 408, 416, 453, 463, 465, 468, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 509, 512, 546, 634, 680, 766, 769, 782, 1005, 1019, 1020, 1028, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "descriptor": [390, 510, 511], "deseri": 402, "deserv": [376, 382], "deshmukh": 1048, "deshpand": [1040, 1041], "design": [0, 2, 54, 59, 112, 135, 155, 174, 186, 187, 196, 246, 260, 264, 310, 358, 365, 370, 376, 381, 388, 389, 390, 391, 393, 394, 396, 401, 402, 408, 415, 417, 517, 530, 636, 637, 652, 669, 673, 680, 684, 689, 804, 822, 823, 843, 845, 995, 1001, 1002, 1005, 1006, 1015, 1024, 1029, 1037, 1044, 1053], "desir": [51, 62, 137, 169, 183, 212, 214, 310, 314, 327, 369, 376, 384, 396, 402, 405, 408, 411, 412, 413, 417, 505, 540, 542, 546, 549, 569, 596, 605, 606, 668, 674, 689, 690, 703, 712, 740, 848, 849, 853, 868, 873, 875, 878, 879, 881, 882, 884, 885, 889, 892, 894, 896, 897, 938, 973, 997, 999, 1002, 1008, 1015, 1019, 1020, 1021, 1035, 1043, 1044, 1045, 1048], "desislava": 1049, "desktop": 374, "despin": [277, 279, 704, 706], "despit": [65, 117, 177, 205, 210, 212, 230, 245, 299, 390, 399, 410, 631, 632, 634, 1001, 1008, 1029, 1043, 1044], "dessyvv": 1049, "destin": 1029, "destroi": [276, 416, 799, 877, 1015], "det": [2, 184, 252, 262, 279, 280, 376, 410, 517, 566, 702, 706, 731, 793, 834, 869, 888, 908, 950, 1026, 1047], "det_curv": [2, 267, 702, 786, 793, 1005, 1047, 1048, 1053], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 65, 91, 135, 136, 138, 142, 143, 148, 155, 184, 188, 200, 202, 216, 237, 241, 244, 245, 249, 251, 253, 261, 264, 268, 277, 284, 293, 296, 297, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 355, 357, 359, 363, 364, 365, 368, 369, 370, 371, 374, 376, 378, 380, 381, 382, 384, 388, 389, 390, 391, 394, 402, 404, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 432, 433, 438, 444, 445, 447, 448, 449, 451, 452, 453, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 473, 498, 506, 526, 533, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 550, 551, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 596, 597, 600, 605, 610, 611, 614, 618, 623, 626, 631, 632, 634, 635, 636, 638, 643, 644, 649, 650, 651, 655, 657, 659, 660, 661, 662, 663, 665, 667, 669, 670, 672, 675, 676, 677, 678, 679, 680, 682, 683, 691, 692, 693, 694, 695, 696, 697, 698, 699, 705, 709, 715, 717, 778, 782, 783, 784, 785, 802, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 846, 850, 851, 853, 854, 856, 858, 859, 861, 862, 864, 867, 868, 870, 872, 873, 885, 889, 897, 903, 904, 905, 906, 910, 913, 916, 917, 918, 919, 945, 970, 994, 995, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1018, 1021, 1027, 1028, 1029, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "detcurvedisplai": [2, 267, 322, 731, 1047, 1048, 1052, 1053], "detect": [2, 14, 43, 48, 50, 59, 71, 97, 99, 112, 113, 114, 142, 144, 151, 184, 196, 216, 226, 238, 252, 262, 264, 270, 273, 279, 280, 291, 310, 316, 327, 339, 371, 374, 376, 380, 388, 390, 406, 407, 408, 410, 412, 416, 430, 447, 450, 465, 467, 470, 471, 474, 475, 476, 477, 489, 490, 492, 494, 498, 512, 514, 517, 524, 539, 540, 541, 548, 565, 566, 591, 594, 599, 635, 643, 681, 702, 706, 731, 793, 834, 854, 858, 869, 878, 881, 882, 886, 887, 888, 908, 912, 997, 1001, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1035, 1038, 1041, 1042, 1043, 1045, 1047, 1048, 1050, 1051], "detection_error_tradeoff": 1005, "detector": [2, 371, 390, 436, 854], "determin": [2, 49, 51, 54, 58, 81, 89, 112, 135, 137, 141, 150, 167, 176, 187, 194, 195, 205, 209, 215, 270, 283, 310, 315, 344, 353, 358, 359, 375, 376, 378, 385, 389, 390, 405, 406, 408, 412, 413, 415, 416, 417, 418, 431, 438, 442, 443, 444, 446, 448, 450, 451, 457, 460, 461, 462, 466, 470, 471, 473, 474, 475, 476, 477, 483, 484, 485, 489, 492, 494, 497, 499, 505, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 539, 541, 544, 545, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 567, 569, 570, 572, 585, 586, 587, 591, 594, 597, 605, 610, 611, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 639, 640, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 691, 693, 694, 696, 697, 698, 711, 715, 727, 733, 734, 742, 787, 788, 789, 791, 792, 797, 804, 806, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 835, 839, 841, 842, 844, 851, 853, 854, 859, 864, 865, 866, 872, 873, 881, 882, 883, 885, 889, 897, 908, 909, 911, 914, 917, 919, 922, 950, 967, 973, 975, 978, 994, 997, 999, 1004, 1008, 1010, 1011, 1013, 1015, 1018, 1019, 1021, 1035, 1040, 1043, 1044, 1046, 1047, 1048], "determinist": [92, 147, 364, 372, 390, 408, 444, 448, 450, 452, 453, 454, 459, 460, 463, 553, 561, 562, 566, 567, 586, 587, 695, 699, 815, 816, 864, 916, 917, 927, 997, 1001, 1036, 1039, 1041, 1043, 1044, 1047, 1050, 1051], "detlefsen": 1049, "detomaso": 1042, "detriment": [47, 168, 284, 364, 417, 1001], "dev": [180, 187, 230, 275, 280, 374, 376, 380, 382, 384, 945, 947, 1005, 1029, 1042, 1047, 1050, 1051], "dev0": [374, 380, 1028], "dev514": 1049, "devansh": [1042, 1043], "devanshkyada27": 1052, "devashish": 1041, "devel": 374, "develop": [0, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 325, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 363, 371, 375, 376, 380, 382, 388, 390, 391, 393, 399, 402, 405, 410, 411, 415, 416, 422, 425, 432, 495, 804, 945, 947, 988, 1001, 1005, 1008, 1021, 1024, 1025, 1026, 1028, 1029, 1035, 1043, 1044, 1045, 1050, 1053], "developing_estim": 1026, "devi": 1047, "devianc": [2, 146, 149, 212, 230, 325, 415, 555, 560, 561, 563, 564, 567, 652, 673, 684, 725, 727, 728, 751, 753, 756, 917, 919, 1001, 1021, 1036, 1045, 1046, 1048, 1049, 1051], "deviant": [218, 1011], "deviat": [53, 59, 71, 95, 112, 138, 141, 142, 143, 145, 171, 176, 178, 180, 187, 194, 218, 249, 267, 268, 269, 270, 271, 273, 296, 297, 310, 315, 368, 372, 373, 381, 385, 390, 412, 415, 418, 451, 473, 503, 513, 514, 515, 516, 518, 519, 520, 524, 526, 527, 532, 554, 597, 615, 638, 648, 649, 675, 728, 756, 810, 827, 854, 855, 877, 878, 888, 897, 898, 899, 1001, 1005, 1011, 1015, 1041, 1042, 1043, 1046, 1047, 1048], "deviations_": 855, "devic": [412, 585, 1024, 1053], "devnani": 1047, "deweight": 954, "dexter": 1045, "dezub": 1042, "df": [44, 53, 63, 65, 150, 155, 186, 188, 194, 198, 212, 230, 260, 270, 314, 316, 326, 352, 381, 416, 467, 593, 594, 994, 995, 1052], "df_": 230, "df_freq": 230, "df_max_": [63, 65], "df_min_": [63, 65], "df_out": 326, "df_sev": 230, "df_std": 352, "df_test": [212, 230], "df_train": [212, 230], "dfrac": [1009, 1015], "dgemm": 363, "dgesdd": 382, "dhanshre": 1050, "dhillon": [2, 58, 405, 452, 454, 513], "dhingra": [1043, 1044, 1047, 1052], "di": [390, 408, 413, 533, 539, 668, 689, 690, 901, 1039, 1048], "dia": 1052, "diabet": [2, 47, 148, 158, 159, 169, 183, 184, 200, 202, 209, 266, 369, 415, 503, 656, 657, 804, 809, 829, 830, 831, 1013, 1026, 1031], "diadochokinet": 1050, "diag": [52, 114, 179, 257, 260, 413, 418, 534, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 801, 802, 1001, 1050], "diag_kind": [186, 187], "diagnos": [273, 373, 384, 393, 409], "diagnosi": [273, 373, 855], "diagnost": [190, 273, 369, 390, 407, 502, 716, 830, 831, 1005, 1013, 1024, 1025, 1031], "diagon": [2, 44, 63, 65, 76, 114, 116, 127, 230, 249, 257, 260, 261, 263, 340, 405, 408, 410, 418, 454, 472, 473, 479, 482, 513, 515, 529, 534, 552, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 654, 655, 658, 659, 660, 686, 687, 705, 719, 796, 801, 802, 852, 860, 997, 999, 1001, 1004, 1005, 1008, 1015, 1041, 1043, 1044, 1045], "diagram": [2, 63, 65, 104, 251, 320, 326, 378, 406, 408, 439, 440, 469, 906, 1015, 1046, 1047, 1052, 1053], "diamet": 408, "diamond": 258, "diaz": 1043, "dice": [451, 458, 703, 782, 783, 784, 1008], "dicedist": 703, "dichotomis": 1021, "dickerson": 1036, "dickson": 1042, "dico": 124, "dict": [49, 50, 51, 52, 56, 64, 75, 103, 106, 107, 141, 145, 147, 149, 210, 218, 239, 248, 257, 268, 269, 271, 274, 277, 279, 290, 294, 312, 316, 323, 333, 340, 344, 352, 353, 365, 368, 370, 378, 388, 390, 409, 412, 419, 420, 422, 426, 430, 432, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 498, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 715, 717, 766, 769, 775, 783, 784, 801, 802, 803, 804, 807, 808, 810, 815, 816, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 925, 939, 940, 945, 946, 958, 961, 964, 993, 994, 1005, 1015, 1031, 1035, 1041, 1042, 1051, 1052, 1053], "dict_count_vector": 353, "dict_init": [533, 539, 547, 548], "dict_kei": 630, "dict_learn": [2, 385, 533, 539, 548, 1036, 1043, 1045, 1048, 1049, 1051], "dict_learning_onlin": [2, 547, 1036, 1045, 1048, 1049, 1052], "dict_pos_code_estim": 121, "dict_pos_dict_estim": 121, "dict_pos_estim": 121, "dict_typ": 584, "dictat": 408, "dictionari": [2, 45, 46, 47, 48, 72, 85, 87, 120, 122, 150, 152, 184, 211, 246, 248, 264, 352, 353, 369, 370, 371, 378, 388, 390, 408, 416, 450, 465, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 509, 512, 528, 533, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 569, 570, 571, 572, 584, 585, 587, 590, 591, 592, 597, 636, 637, 638, 668, 689, 690, 705, 715, 717, 804, 807, 808, 815, 816, 818, 826, 831, 867, 872, 881, 916, 917, 918, 919, 923, 925, 939, 945, 946, 947, 961, 964, 994, 1001, 1005, 1020, 1026, 1030, 1031, 1035, 1043, 1046, 1047, 1048, 1049, 1050], "dictionarylearn": [2, 413, 539, 541, 542, 544, 545, 546, 547, 548, 1036, 1040, 1042, 1045, 1048, 1049, 1050, 1051], "dictlearn": 1040, "dictvector": [2, 48, 58, 103, 184, 350, 351, 352, 371, 416, 489, 585, 591, 592, 593, 594, 881, 1026, 1035, 1036, 1039, 1045, 1047, 1048, 1051, 1052], "did": [147, 171, 187, 190, 212, 220, 230, 264, 317, 371, 402, 631, 716, 823, 910, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050], "didact": [376, 1025], "didi": [1041, 1042, 1043, 1044], "didn": [246, 359, 390, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "die": 1002, "diebold": 270, "diederik": [865, 866, 1009, 1050], "diederikwp": 1050, "diego": [1036, 1037], "diegodlh": [1042, 1043], "diemert": [1029, 1037, 1038], "dietterich": [270, 838, 1006], "diff": [379, 1005], "diff_embed": 300, "differ": [2, 26, 44, 45, 47, 50, 52, 54, 55, 59, 62, 65, 67, 68, 71, 72, 73, 75, 77, 78, 79, 81, 82, 83, 86, 87, 89, 90, 91, 92, 94, 98, 99, 100, 101, 103, 104, 105, 107, 112, 116, 117, 119, 121, 123, 124, 126, 128, 129, 130, 135, 138, 140, 141, 143, 144, 145, 147, 149, 150, 155, 156, 157, 158, 160, 162, 164, 169, 170, 171, 172, 173, 176, 177, 178, 182, 183, 184, 186, 187, 189, 192, 194, 195, 199, 200, 201, 202, 204, 205, 212, 213, 214, 216, 217, 218, 219, 220, 229, 230, 232, 233, 234, 235, 237, 239, 241, 244, 245, 246, 249, 255, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 287, 289, 290, 293, 296, 297, 299, 305, 306, 309, 311, 312, 314, 315, 319, 327, 335, 336, 338, 339, 340, 342, 343, 347, 348, 351, 352, 353, 357, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 379, 380, 381, 383, 384, 385, 389, 390, 394, 396, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 433, 438, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 463, 465, 476, 479, 491, 495, 496, 498, 505, 506, 510, 511, 514, 516, 524, 539, 540, 541, 542, 548, 549, 551, 552, 557, 558, 565, 584, 585, 591, 592, 593, 594, 597, 615, 617, 618, 619, 623, 626, 627, 631, 635, 636, 637, 638, 642, 647, 648, 649, 651, 653, 655, 657, 659, 662, 665, 670, 671, 676, 678, 680, 681, 682, 684, 694, 696, 698, 702, 704, 705, 708, 709, 710, 711, 713, 719, 721, 722, 731, 732, 733, 734, 735, 738, 739, 741, 747, 761, 762, 763, 765, 782, 786, 787, 788, 790, 791, 793, 796, 797, 799, 802, 804, 806, 807, 808, 809, 810, 813, 818, 819, 820, 822, 823, 824, 826, 827, 829, 831, 832, 835, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 858, 861, 864, 868, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 889, 893, 894, 895, 896, 897, 898, 899, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 961, 968, 994, 995, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "difference_plot": 275, "differenti": [127, 277, 415, 418, 561, 562, 623, 626], "difficult": [89, 135, 187, 220, 249, 376, 384, 406, 413, 415, 555, 556, 561, 563, 564, 1000, 1002, 1004, 1008, 1010, 1012, 1021, 1029, 1035, 1049], "difficulti": [49, 65, 230, 310, 365, 376, 406, 865, 866, 1004, 1008], "diffus": 176, "digest": [376, 1050], "digg": [1029, 1042], "digicosm": 0, "digit": [2, 45, 52, 53, 66, 72, 75, 81, 85, 87, 90, 91, 93, 95, 96, 98, 105, 106, 124, 140, 159, 167, 184, 203, 204, 205, 219, 228, 231, 232, 234, 236, 243, 244, 258, 263, 268, 269, 272, 294, 299, 300, 304, 306, 307, 325, 328, 331, 352, 369, 376, 382, 408, 414, 415, 417, 442, 446, 448, 504, 543, 546, 551, 568, 662, 692, 693, 694, 695, 696, 701, 708, 709, 717, 721, 722, 741, 797, 799, 834, 850, 857, 864, 868, 869, 878, 888, 894, 901, 904, 913, 920, 921, 922, 1002, 1005, 1008, 1010, 1018, 1026, 1031, 1039], "digraph": 920, "dijkstra": [385, 692, 1002], "dilemma": 1000, "dillon": [1043, 1044, 1045], "dilut": [190, 373], "dilutedsauc": 1043, "dim": [221, 243, 298, 299, 301, 336, 337, 529, 703, 1052], "dim_reduction_method": 299, "dimens": [2, 38, 49, 52, 53, 55, 73, 76, 87, 114, 116, 121, 127, 173, 188, 198, 209, 210, 234, 236, 239, 243, 244, 250, 256, 257, 294, 295, 299, 313, 344, 351, 352, 353, 371, 373, 377, 390, 408, 413, 414, 418, 420, 443, 444, 446, 448, 449, 450, 453, 465, 466, 483, 484, 485, 495, 496, 517, 526, 527, 531, 532, 535, 543, 551, 585, 586, 587, 588, 590, 592, 600, 615, 623, 626, 645, 648, 663, 694, 695, 696, 698, 699, 703, 768, 829, 848, 849, 853, 867, 900, 901, 902, 910, 911, 912, 913, 914, 934, 935, 936, 967, 975, 978, 995, 997, 999, 1001, 1002, 1003, 1006, 1008, 1009, 1011, 1017, 1020, 1024, 1042, 1044, 1045, 1047], "dimension": [2, 11, 38, 46, 49, 50, 58, 68, 76, 80, 88, 89, 91, 92, 96, 102, 104, 106, 107, 116, 117, 119, 121, 127, 128, 129, 135, 140, 153, 171, 173, 174, 178, 184, 198, 213, 229, 231, 233, 234, 236, 239, 243, 244, 247, 256, 257, 291, 294, 298, 300, 312, 337, 344, 351, 359, 363, 368, 371, 372, 373, 376, 385, 390, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 446, 448, 450, 466, 470, 474, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 499, 502, 503, 504, 506, 507, 512, 517, 521, 534, 536, 537, 540, 541, 542, 543, 546, 549, 551, 565, 568, 575, 602, 610, 635, 644, 645, 646, 656, 692, 693, 694, 695, 696, 697, 698, 700, 703, 714, 729, 801, 802, 804, 834, 848, 849, 850, 853, 856, 857, 864, 868, 869, 872, 878, 883, 888, 900, 901, 902, 908, 912, 952, 990, 996, 997, 1000, 1001, 1006, 1007, 1011, 1017, 1018, 1019, 1020, 1021, 1026, 1027, 1029, 1030, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1047, 1050, 1051], "dimensionalityreduct": 373, "dimensionalityreductiondimension": 396, "diminish": 416, "dimitri": [1048, 1049, 1050, 1051, 1052], "dimmick": 373, "dinga92": 1053, "dingwal": 1042, "dionisi": 1049, "diop": 1045, "dipan": 1053, "direct": [52, 116, 117, 121, 123, 129, 169, 218, 255, 261, 267, 299, 308, 315, 340, 345, 374, 376, 377, 380, 384, 391, 394, 408, 411, 413, 416, 417, 453, 463, 472, 473, 479, 536, 543, 551, 591, 592, 594, 605, 645, 692, 857, 999, 1000, 1001, 1006, 1008, 1010, 1025, 1035, 1038], "direction": 1053, "direction_vector": 308, "directli": [0, 46, 58, 65, 81, 90, 104, 127, 140, 144, 169, 179, 198, 200, 212, 218, 230, 240, 275, 308, 310, 323, 326, 327, 353, 359, 363, 374, 376, 377, 378, 380, 382, 388, 389, 390, 391, 404, 405, 406, 408, 409, 410, 411, 412, 416, 418, 443, 453, 463, 465, 466, 470, 475, 529, 569, 570, 571, 572, 596, 600, 615, 624, 636, 647, 650, 651, 656, 657, 664, 665, 666, 667, 668, 681, 685, 688, 694, 778, 782, 785, 796, 797, 804, 807, 808, 818, 832, 833, 835, 851, 853, 867, 868, 869, 875, 885, 887, 890, 897, 994, 1001, 1003, 1008, 1010, 1012, 1015, 1020, 1021, 1035, 1043, 1044, 1046, 1047, 1048, 1051, 1052], "director": 1029, "directori": [0, 2, 48, 292, 370, 374, 376, 378, 380, 382, 384, 390, 394, 409, 442, 446, 451, 487, 493, 501, 868, 869, 1049], "direr": [1038, 1039, 1042, 1043], "dirichlet": [2, 43, 46, 184, 255, 256, 261, 265, 416, 489, 538, 540, 542, 591, 594, 801, 1024, 1026, 1030, 1031, 1035, 1040, 1041], "dirichlet_distribut": [255, 801, 1004, 1041], "dirichlet_process": [255, 261, 801, 1004, 1041], "disabl": [139, 246, 264, 317, 326, 351, 374, 376, 399, 416, 450, 461, 469, 539, 540, 541, 548, 561, 562, 563, 564, 613, 867, 885, 897, 906, 934, 935, 1015, 1041, 1044, 1048, 1050, 1053], "disadvantag": [413, 418, 1001, 1002, 1009, 1019, 1020, 1021], "disagre": [739, 1012], "disambigu": [376, 836, 905, 1018, 1050], "disappear": [1001, 1035], "disappoint": 44, "discard": [48, 89, 196, 273, 363, 405, 410, 417, 510, 511, 551, 600, 631, 634, 648, 881, 885, 897, 995, 1001, 1043, 1047, 1053], "disclaim": 1024, "disclos": 389, "disconnect": 1048, "discontinu": [44, 388], "discord": [376, 709, 1028], "discount": [2, 371, 408, 730, 760, 1042, 1045], "discounted_cumulative_gain": 730, "discourag": [216, 388, 394, 693], "discov": [352, 408, 413, 416, 419, 445, 449, 1050, 1053], "discoveri": [2, 270, 371, 382, 385, 408, 415, 417, 419, 445, 513, 557, 558, 565, 595, 598, 599, 601, 602, 603, 609, 724, 744, 787, 942, 943, 944, 1005, 1017, 1029, 1049, 1050], "discrep": [416, 1039], "discret": [2, 44, 68, 81, 119, 130, 135, 153, 170, 184, 188, 195, 212, 230, 250, 287, 305, 309, 313, 334, 365, 368, 371, 372, 376, 380, 389, 390, 408, 413, 416, 418, 439, 440, 449, 453, 461, 462, 463, 494, 516, 517, 524, 555, 561, 591, 592, 595, 598, 599, 602, 603, 610, 611, 614, 615, 616, 620, 621, 622, 661, 662, 804, 815, 826, 834, 843, 844, 847, 869, 873, 881, 882, 885, 888, 897, 908, 913, 917, 967, 994, 1001, 1002, 1003, 1005, 1006, 1008, 1021, 1024, 1026, 1031, 1037, 1040, 1048, 1049, 1050], "discrete_featur": [610, 611], "discrim": 212, "discrimin": [2, 12, 49, 50, 66, 110, 111, 112, 113, 114, 127, 129, 164, 166, 184, 192, 227, 233, 247, 260, 299, 373, 406, 415, 421, 476, 514, 551, 552, 568, 635, 787, 857, 994, 1002, 1005, 1008, 1019, 1021, 1026, 1027, 1031, 1038], "discriminant_analysi": [2, 68, 70, 71, 129, 233, 299, 359, 404, 538, 551, 552, 857, 999, 1006, 1035, 1038, 1039, 1040, 1041, 1042], "discriminatori": 406, "discuss": [44, 87, 92, 187, 202, 232, 237, 264, 273, 287, 351, 359, 365, 371, 373, 376, 381, 382, 384, 388, 390, 391, 407, 408, 410, 414, 415, 417, 418, 500, 686, 687, 850, 851, 856, 858, 859, 995, 999, 1001, 1002, 1005, 1008, 1015, 1022, 1025, 1028, 1038], "diseas": [47, 158, 183, 273, 373, 716, 1005], "disentangl": 1002, "disjoint": [406, 408, 409, 438, 708, 735, 759, 761, 1002], "disk": [46, 54, 371, 376, 381, 390, 402], "disp": [44, 67, 69, 137, 150, 151, 152, 263, 273, 283, 293, 315, 320, 326, 337, 342, 439, 635, 701, 704, 705, 857], "disp1": 636, "disp2": 636, "dispar": [694, 698, 1002], "dispatch": [104, 264, 390, 404, 469, 804, 818, 829, 830, 831, 906, 970, 971, 1031, 1050, 1053], "dispatch_next": 970, "dispatch_one_batch": 970, "dispers": [71, 284, 408, 714, 729, 1001], "displai": [2, 52, 63, 65, 71, 73, 81, 94, 104, 113, 114, 116, 117, 121, 141, 151, 152, 155, 182, 184, 187, 188, 201, 230, 238, 239, 249, 253, 259, 267, 271, 272, 277, 279, 280, 283, 285, 300, 316, 320, 321, 339, 356, 363, 376, 378, 379, 383, 385, 394, 396, 409, 413, 416, 417, 422, 439, 465, 468, 469, 498, 543, 566, 634, 635, 636, 662, 691, 701, 702, 704, 705, 706, 717, 722, 786, 793, 804, 810, 818, 827, 834, 868, 869, 881, 883, 888, 906, 913, 920, 921, 922, 942, 970, 991, 1005, 1009, 1024, 1026, 1031, 1044, 1046, 1047, 1049, 1050], "display_label": [46, 263, 701, 1047], "dispos": 994, "disproportion": 414, "disput": 141, "disregard": [390, 416, 431, 466, 483, 484, 485, 554, 556, 558, 560, 562, 564, 567, 570, 572, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 725, 726, 727, 728, 789, 841, 842, 851, 859, 866, 877, 878, 884, 885, 888, 893, 896, 897, 899, 909, 911, 914, 917, 919, 1005, 1043], "disrupt": [364, 374], "dissemin": 1024, "dissimilar": [235, 344, 390, 405, 453, 694, 698, 1002, 1041, 1051], "dissimilarity_matrix_": 694, "dist": [112, 233, 243, 380, 470, 471, 472, 473, 474, 475, 476, 477, 703, 767, 773, 848, 849], "dist_": [470, 475], "dist_embed": 300, "dist_linkag": 190, "dist_matrix": 453, "dist_matrix_": 692, "distanc": [2, 38, 75, 76, 89, 91, 94, 95, 99, 101, 109, 113, 126, 182, 184, 190, 199, 213, 215, 232, 234, 237, 243, 249, 290, 292, 293, 298, 300, 302, 303, 310, 315, 319, 323, 324, 344, 351, 352, 363, 373, 385, 388, 390, 405, 408, 410, 413, 414, 418, 419, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 456, 457, 458, 459, 460, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 540, 542, 549, 610, 611, 619, 623, 624, 626, 627, 632, 662, 663, 670, 672, 678, 679, 680, 681, 682, 692, 693, 694, 696, 697, 698, 699, 700, 703, 707, 729, 738, 762, 764, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 782, 783, 784, 785, 796, 797, 800, 804, 818, 837, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 887, 902, 906, 908, 910, 912, 913, 914, 916, 917, 918, 919, 995, 999, 1002, 1003, 1005, 1008, 1011, 1015, 1017, 1019, 1020, 1026, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "distance_matrix": 190, "distance_metr": [2, 782, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862], "distance_threshold": [77, 442, 446, 1044, 1047], "distancemetr": [2, 390, 414, 851, 1008, 1043, 1047, 1048, 1049, 1052], "distancemetric64": [848, 849], "distances_": [77, 442, 446, 1047], "distant": [408, 696, 713, 1008], "distil": 237, "distinct": [94, 205, 270, 331, 353, 371, 381, 390, 391, 412, 415, 416, 592, 805, 814, 822, 882, 883, 903, 904, 994, 1001, 1008, 1011, 1043], "distinguish": [44, 59, 76, 112, 119, 126, 214, 267, 287, 371, 390, 391, 418, 994, 1005, 1008, 1011], "distort": [38, 211, 243, 373, 406, 885, 897, 902, 1002, 1015, 1017], "distribut": [2, 26, 38, 43, 44, 48, 49, 50, 53, 59, 65, 71, 73, 75, 80, 86, 87, 89, 91, 96, 108, 111, 112, 113, 117, 119, 127, 135, 137, 147, 151, 164, 171, 180, 184, 186, 187, 188, 190, 192, 194, 205, 212, 214, 216, 234, 236, 239, 243, 249, 255, 260, 261, 264, 266, 270, 276, 278, 284, 287, 291, 295, 309, 310, 312, 315, 325, 329, 330, 345, 347, 363, 364, 369, 372, 373, 374, 376, 377, 381, 390, 406, 408, 410, 412, 413, 414, 420, 448, 450, 470, 471, 472, 473, 474, 475, 476, 477, 489, 500, 505, 517, 518, 519, 520, 521, 525, 534, 535, 538, 552, 553, 554, 565, 615, 629, 644, 646, 648, 649, 652, 662, 663, 673, 683, 684, 692, 693, 694, 696, 710, 712, 728, 756, 793, 801, 802, 808, 809, 816, 818, 822, 823, 834, 844, 847, 853, 857, 864, 871, 884, 885, 886, 887, 888, 896, 897, 898, 903, 904, 912, 923, 954, 994, 999, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1017, 1018, 1024, 1025, 1026, 1030, 1031, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "district": [183, 371], "distutils_use_sdk": 374, "ditenberg": 1042, "div": [249, 948], "dive": [117, 376, 382, 994], "diverg": [55, 146, 232, 237, 295, 540, 542, 549, 696, 864, 1002, 1004, 1005, 1010, 1012, 1042, 1043, 1048], "divers": [0, 390, 415], "divid": [73, 79, 121, 166, 176, 212, 249, 255, 352, 359, 372, 373, 405, 407, 408, 412, 413, 415, 470, 471, 472, 473, 474, 475, 476, 477, 514, 521, 536, 543, 680, 681, 682, 723, 730, 738, 742, 750, 760, 798, 800, 865, 866, 910, 913, 952, 955, 956, 994, 1002, 1004, 1005, 1008, 1015, 1019, 1021, 1035, 1042, 1043, 1046], "dividend": 1005, "divis": [323, 408, 416, 593, 594, 597, 716, 717, 733, 734, 742, 750, 787, 788, 791, 1005, 1039, 1043, 1044, 1047, 1051, 1052], "divisor": 1005, "divo": 1045, "divyanshu": 1048, "divyaprabha": 1046, "diwakar": 1049, "dixon": [773, 1045, 1046], "dizietasahi": 1045, "di\u1ec5n": 1050, "djipei": [1040, 1041], "dl": 680, "dlabal": 1039, "dll": 1049, "dlovel": 1043, "dmallia17": 1048, "dmitri": [1040, 1042, 1043, 1044, 1048, 1051, 1052], "dmitrij": 1039, "dmytro": 1048, "dn": [0, 1008], "dna": [388, 632, 995], "dnf": 394, "do": [0, 31, 44, 50, 53, 63, 65, 78, 89, 95, 101, 107, 125, 127, 130, 139, 142, 143, 147, 148, 150, 155, 166, 176, 182, 187, 188, 189, 212, 216, 230, 232, 234, 246, 247, 249, 261, 264, 265, 268, 271, 273, 283, 289, 290, 292, 296, 322, 326, 334, 337, 340, 344, 345, 347, 352, 353, 358, 359, 363, 364, 365, 371, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 390, 391, 402, 404, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 427, 451, 462, 465, 468, 505, 538, 540, 544, 546, 554, 557, 584, 585, 591, 592, 594, 605, 636, 637, 649, 650, 656, 659, 660, 662, 663, 670, 672, 680, 741, 767, 782, 786, 806, 821, 824, 840, 841, 845, 872, 873, 875, 882, 886, 888, 893, 894, 896, 897, 898, 899, 916, 917, 918, 919, 933, 978, 994, 997, 999, 1001, 1002, 1005, 1006, 1008, 1009, 1013, 1015, 1020, 1021, 1024, 1028, 1029, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "do_early_stopping_": [563, 564], "doc": [0, 44, 48, 53, 58, 351, 353, 364, 376, 380, 381, 384, 390, 394, 401, 416, 591, 592, 594, 782, 785, 796, 797, 831, 1035, 1039, 1049], "doc_environ": 384, "doc_it": 48, "doc_linux": 384, "doc_topic_distr": [538, 1042], "doc_topic_prior": [413, 538], "doc_topic_prior_": 538, "docker": [384, 402, 1048, 1049], "dock\u00e8": [1044, 1045, 1046, 1052, 1053], "docstr": [376, 378, 382, 390, 449, 462, 473, 703, 705, 941, 994, 1008, 1009, 1019, 1035, 1042, 1043, 1048, 1049, 1052], "doctest": [376, 390, 1035], "document": [2, 17, 43, 46, 50, 55, 57, 60, 73, 91, 92, 94, 95, 103, 104, 119, 121, 152, 196, 227, 243, 246, 247, 249, 271, 307, 326, 333, 347, 353, 363, 364, 365, 370, 371, 372, 374, 375, 377, 378, 379, 380, 381, 382, 384, 388, 390, 391, 394, 396, 399, 402, 405, 408, 413, 416, 419, 445, 448, 449, 450, 451, 454, 458, 465, 489, 490, 501, 503, 513, 523, 525, 538, 546, 566, 591, 592, 593, 594, 607, 613, 635, 643, 647, 662, 670, 672, 678, 680, 700, 701, 703, 707, 709, 721, 741, 762, 763, 773, 782, 783, 784, 797, 799, 804, 807, 808, 810, 818, 827, 838, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 869, 880, 908, 913, 930, 933, 935, 949, 970, 994, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1019, 1022, 1026, 1029, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "document_clust": 1041, "document_nam": 58, "doddington": 1005, "doe": [28, 44, 47, 48, 49, 52, 53, 62, 63, 68, 71, 76, 81, 87, 89, 91, 103, 105, 106, 117, 131, 135, 140, 141, 143, 144, 145, 149, 150, 155, 169, 177, 187, 188, 198, 205, 212, 218, 230, 232, 233, 234, 237, 239, 242, 243, 244, 246, 247, 249, 257, 258, 264, 265, 270, 272, 273, 277, 279, 280, 289, 290, 303, 310, 312, 314, 316, 317, 322, 323, 332, 333, 338, 340, 347, 349, 351, 352, 353, 357, 363, 364, 370, 374, 376, 377, 378, 380, 384, 389, 390, 396, 399, 402, 404, 406, 408, 409, 412, 413, 415, 416, 417, 418, 433, 441, 443, 447, 448, 450, 451, 455, 457, 468, 474, 480, 488, 501, 505, 510, 529, 537, 539, 540, 541, 546, 548, 551, 552, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 584, 585, 586, 591, 592, 594, 596, 597, 600, 605, 609, 614, 636, 642, 653, 654, 655, 658, 659, 660, 663, 675, 686, 687, 702, 704, 706, 711, 732, 733, 734, 738, 740, 742, 747, 782, 787, 788, 791, 792, 798, 804, 807, 808, 818, 865, 869, 870, 871, 873, 875, 877, 880, 881, 882, 885, 888, 889, 897, 900, 901, 905, 908, 909, 916, 917, 918, 919, 923, 934, 938, 945, 952, 955, 956, 957, 970, 988, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "doepk": 1042, "doesn": [48, 187, 212, 246, 256, 289, 307, 340, 384, 390, 394, 402, 408, 412, 416, 417, 421, 433, 476, 636, 637, 670, 672, 680, 720, 832, 835, 840, 850, 851, 865, 877, 878, 1004, 1005, 1021, 1039, 1052], "dog": [322, 323, 325, 326, 327, 585, 787, 889, 1015], "dohmatob": [1040, 1041, 1042], "dohri": [1052, 1053], "doi": [192, 212, 230, 376, 408, 680], "dok": [555, 556, 875, 1048], "dokato": 1042, "dolan": 371, "dollar": [187, 371], "dolmatov": 1045, "domain": [150, 212, 284, 390, 393, 412, 639, 725, 727, 728, 805, 806, 811, 812, 813, 1001, 1025], "domin": [141, 183, 190, 212, 217, 249, 279, 315, 371, 382, 406, 888, 1007, 1015, 1021, 1051], "domingo": [65, 792, 1005], "dominik": [1042, 1051], "don": [52, 65, 88, 150, 187, 233, 246, 247, 264, 270, 283, 290, 332, 337, 341, 363, 370, 376, 378, 380, 382, 384, 389, 394, 399, 407, 409, 416, 428, 650, 656, 836, 916, 917, 918, 919, 927, 968, 994, 1001, 1004, 1006, 1009, 1011, 1019, 1039, 1044, 1051, 1052, 1053], "don86": 1042, "donald": [371, 408, 729, 995], "donat": 240, "done": [0, 46, 48, 49, 51, 53, 55, 56, 58, 84, 86, 87, 124, 150, 166, 169, 176, 177, 187, 188, 192, 194, 198, 199, 216, 229, 245, 246, 260, 268, 271, 274, 279, 290, 313, 321, 351, 352, 353, 357, 359, 364, 370, 374, 376, 380, 383, 384, 385, 388, 390, 399, 408, 410, 412, 413, 415, 425, 431, 442, 443, 446, 451, 453, 473, 483, 484, 485, 486, 490, 537, 563, 564, 585, 609, 610, 611, 632, 634, 636, 638, 647, 648, 649, 663, 726, 745, 801, 802, 804, 818, 820, 823, 824, 826, 872, 886, 946, 989, 994, 995, 998, 1001, 1002, 1005, 1007, 1008, 1009, 1015, 1018, 1019, 1020, 1021, 1025, 1035, 1037, 1042, 1045, 1047, 1051], "dong": 1045, "donn": 1040, "donoho": [693, 697, 1002], "donor": 373, "donovan": 1041, "dor": 1043, "dorin": [97, 449], "dormagen": 1045, "dot": [2, 56, 70, 80, 83, 88, 91, 96, 110, 111, 112, 114, 116, 117, 122, 123, 124, 128, 130, 135, 138, 171, 172, 178, 179, 187, 196, 198, 205, 207, 208, 244, 256, 257, 259, 260, 264, 274, 336, 338, 344, 363, 378, 382, 385, 390, 405, 413, 416, 535, 540, 542, 549, 593, 594, 618, 650, 651, 654, 656, 657, 658, 661, 664, 665, 666, 667, 685, 688, 691, 765, 767, 880, 920, 953, 1003, 1007, 1015, 1019, 1020, 1044], "dot_data": [920, 1021], "dot_product": 953, "dotproduct": [2, 174, 175, 180, 418, 615, 629], "dotson": 1040, "doubl": [71, 141, 282, 376, 390, 413, 540, 542, 543, 549, 848, 849, 859, 988, 995, 1020, 1021, 1035, 1045, 1046], "doubt": [376, 377, 380, 1001, 1011, 1024], "doucet": 1049, "douetteau": 1029, "doug": [1036, 1037, 1047], "dougal": [1037, 1039, 1040, 1042, 1043, 1044, 1045], "dougla": 1043, "douillard": 1042, "doumouro": 1044, "douriez": [1045, 1046], "dowl": 1041, "down": [81, 82, 113, 135, 227, 228, 234, 243, 244, 246, 273, 287, 308, 310, 344, 359, 370, 379, 384, 390, 410, 413, 444, 451, 457, 593, 596, 597, 643, 653, 778, 782, 785, 877, 878, 883, 886, 887, 898, 910, 913, 920, 1001, 1043], "downarrow": 1007, "download": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 369, 371, 373, 374, 380, 381, 384, 396, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 512, 1021, 1031, 1039, 1040, 1043, 1047, 1048, 1049], "download_20newsgroup": 1039, "download_if_miss": [489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 1042], "download_url": 48, "downsampl": 124, "downsid": 353, "downstream": [44, 112, 317, 353, 416, 533, 536, 539, 543, 544, 609, 881, 1015, 1045], "downweight": [410, 538], "dowon": [1043, 1044], "dozen": [389, 418], "do\u0161ilovi\u0107": [1052, 1053], "dp": [256, 261], "dpgmm": [256, 261, 1035, 1039, 1041], "dpi": [223, 922, 1048], "dpy_debug": 382, "dqd": 382, "dr": [0, 373, 408, 1049], "draft": [376, 391], "drag": 396, "dragon": 1015, "drama": 416, "dramat": 365, "dramsch": 1045, "drastic": [171, 243, 278, 408, 412, 1008, 1018], "draw": [44, 47, 94, 180, 187, 250, 272, 277, 340, 383, 411, 413, 414, 415, 557, 558, 559, 560, 565, 566, 567, 568, 615, 638, 705, 810, 827, 920, 922, 1004, 1024, 1048, 1049], "drawback": [229, 997, 1000], "drawcoastlin": [51, 303], "drawcountri": [51, 303], "drawn": [47, 86, 112, 138, 168, 171, 180, 186, 250, 277, 294, 364, 372, 408, 414, 415, 418, 420, 470, 471, 472, 473, 474, 475, 476, 477, 517, 525, 535, 557, 558, 559, 560, 565, 566, 567, 568, 615, 631, 636, 645, 844, 900, 901, 918, 919, 1001, 1015, 1017, 1038], "drawstyl": [355, 704], "draxu": 1035, "drew": [1044, 1053], "drewhogg": 1050, "drewmjohnston": 1044, "drgfreeman": 1045, "driessen": [410, 470, 475, 1011], "drift": 1025, "drivag": [212, 230], "drive": [365, 413, 414, 551, 1019, 1029], "driven": [0, 190, 1029], "driver": [212, 230, 1050], "drop": [44, 45, 53, 104, 108, 117, 150, 176, 186, 187, 188, 190, 212, 216, 230, 249, 253, 264, 280, 316, 321, 324, 326, 352, 380, 384, 409, 413, 415, 465, 468, 569, 570, 571, 572, 634, 699, 704, 706, 786, 793, 867, 881, 887, 995, 1001, 1005, 1015, 1024, 1035, 1036, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "drop_binary_enc": 881, "drop_dupl": 282, "drop_enc": [881, 1015], "drop_first": 699, "drop_idx": 881, "drop_idx_": [881, 1046, 1050], "drop_intermedi": [704, 706, 786, 793, 1051], "drop_nul": [53, 176], "dropdown": [376, 994], "dropped_result": 144, "dropper": 144, "dror": 1044, "dross": 536, "dro\u017cd\u017c": 1038, "drskd": 1049, "druck": 1049, "drucker": [136, 415, 556], "drug": 1001, "dry": 188, "ds_ana": 1048, "ds_cnt": [68, 312, 313], "dschult": 56, "dscullei": 450, "dsouza": [1046, 1047, 1048, 1049], "dsquareindia": 1041, "dss": 1029, "dt": [84, 124, 156, 176, 415, 416, 1021], "dtreeviz": 1024, "dtype": [44, 48, 50, 51, 56, 83, 87, 99, 103, 104, 144, 146, 148, 149, 151, 172, 173, 174, 183, 214, 230, 255, 274, 278, 297, 303, 323, 325, 330, 358, 370, 371, 376, 378, 388, 390, 404, 409, 412, 415, 416, 423, 424, 426, 429, 443, 444, 448, 449, 450, 451, 452, 454, 460, 465, 467, 468, 470, 473, 475, 489, 490, 491, 492, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 516, 524, 544, 550, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 585, 588, 589, 591, 592, 594, 596, 597, 604, 605, 609, 631, 632, 633, 634, 636, 637, 644, 645, 648, 649, 650, 656, 660, 661, 664, 665, 666, 667, 668, 669, 675, 677, 679, 701, 703, 709, 718, 719, 735, 742, 745, 759, 790, 810, 829, 831, 832, 844, 848, 849, 851, 859, 873, 879, 881, 882, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 902, 910, 911, 912, 913, 914, 916, 917, 918, 919, 929, 931, 932, 934, 935, 959, 969, 975, 978, 979, 980, 981, 982, 985, 990, 991, 995, 1006, 1015, 1018, 1020, 1036, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dtype_exclud": [104, 467], "dtype_includ": [104, 144, 155, 249, 409, 467], "du": [0, 397, 398, 1035, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dua": 1044, "dual": [103, 105, 319, 347, 351, 416, 417, 472, 473, 479, 615, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 685, 688, 848, 849, 908, 909, 910, 913, 1020, 1037, 1046, 1049, 1051], "dual_coef_": [537, 647, 910, 911, 912, 913, 914, 1020, 1039], "dual_gap": [472, 473, 479, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688], "dual_gap_": [650, 651, 656, 657, 664, 665, 666, 667, 1048], "dualiti": [473, 1001], "dualtre": [848, 849], "duan": [1044, 1046], "duart": [1040, 1048, 1050, 1053], "dubai": 416, "duboi": [1041, 1043], "dubou": 1045, "dubourg": [0, 398, 1029, 1035, 1039], "duchesnai": [0, 398, 1035], "duck": [378, 390, 1045], "ducktyp": [1039, 1052], "duckworth": 1035, "ducout": 1049, "duda": [373, 999], "due": [49, 53, 64, 65, 87, 89, 94, 108, 135, 138, 171, 187, 188, 194, 198, 204, 210, 212, 214, 229, 230, 243, 249, 256, 278, 279, 284, 289, 290, 315, 316, 344, 347, 351, 352, 353, 376, 382, 388, 390, 394, 406, 407, 408, 412, 413, 415, 418, 444, 447, 448, 460, 537, 541, 545, 546, 576, 675, 804, 807, 808, 812, 814, 818, 829, 830, 833, 836, 840, 841, 873, 877, 878, 888, 995, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1019, 1020, 1025, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "dueck": [74, 441, 455], "dugnat": 1049, "duhaim": 1043, "dummi": [2, 135, 136, 212, 230, 246, 264, 273, 381, 403, 553, 554, 736, 881, 890, 927, 1006, 1015, 1021, 1031, 1036, 1038, 1039, 1040, 1042], "dummy_classifiers_misclassification_error": 135, "dummy_clf": [135, 553], "dummy_leaf_": 443, "dummy_regr": 554, "dummy_sev": 230, "dummybiclust": 423, "dummyclassifi": [2, 135, 264, 273, 554, 736, 1005, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1053], "dummyestim": [561, 562], "dummyregressor": [2, 212, 230, 553, 1005, 1006, 1036, 1038, 1039, 1042, 1043, 1045, 1048, 1049, 1053], "dumont": 1021, "dump": [2, 56, 402, 488, 848, 849], "dump_svmlight_fil": [2, 1035, 1036, 1040, 1050, 1052], "duong": [1052, 1053], "duplic": [364, 375, 376, 377, 390, 408, 419, 445, 449, 450, 517, 639, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 832, 879, 990, 1008, 1035, 1038, 1047, 1049, 1051, 1052], "dupont": 52, "dupr": [1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "dupr\u00e9": [0, 398, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "duqu": 1048, "durat": [44, 48, 212, 230, 249, 292, 353, 364, 970, 971, 1001], "duration_sec": 50, "duration_test": 351, "duration_train": 351, "dure": [0, 44, 45, 52, 53, 84, 89, 92, 105, 108, 117, 126, 139, 144, 145, 150, 152, 166, 171, 176, 187, 188, 190, 202, 205, 213, 220, 264, 268, 272, 284, 290, 321, 322, 344, 363, 365, 374, 376, 378, 381, 390, 391, 408, 409, 413, 415, 416, 418, 419, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 460, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 617, 618, 619, 621, 623, 624, 626, 627, 629, 631, 632, 633, 634, 636, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 704, 793, 801, 802, 803, 804, 807, 808, 818, 826, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 995, 997, 1001, 1002, 1008, 1015, 1017, 1021, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "duron": 1049, "duti": 391, "dutt": 1051, "dutta": [1052, 1053], "duv2014": 418, "duvenaud": [418, 626, 627], "dwight": 1050, "dx": [52, 54, 703], "dx_c": 1012, "dy": [52, 703], "dye": 1048, "dylan": [1042, 1045], "dynam": [52, 53, 188, 557, 558, 559, 560, 565, 566, 567, 568, 582, 583, 680, 681, 682, 1021, 1029, 1041, 1047, 1052], "dzi": 1053, "dziki": 1038, "d\u00b2": 230, "d\u00f6pfert": 1043, "e": [0, 26, 44, 48, 50, 51, 53, 63, 64, 65, 69, 71, 87, 89, 91, 95, 103, 110, 112, 113, 114, 116, 117, 124, 126, 127, 135, 138, 144, 146, 147, 150, 151, 160, 165, 168, 169, 179, 186, 187, 188, 192, 195, 198, 202, 203, 212, 213, 214, 216, 230, 232, 233, 245, 246, 264, 266, 270, 271, 273, 275, 276, 277, 285, 287, 289, 296, 303, 312, 315, 319, 321, 327, 347, 353, 357, 358, 359, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 388, 389, 390, 394, 399, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 438, 440, 442, 444, 445, 446, 448, 450, 451, 455, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 477, 483, 484, 485, 498, 500, 502, 503, 504, 505, 526, 535, 537, 538, 540, 542, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 580, 584, 585, 591, 592, 593, 594, 596, 597, 600, 606, 607, 608, 609, 610, 611, 612, 614, 615, 621, 626, 627, 632, 634, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 692, 694, 696, 698, 701, 703, 705, 708, 709, 712, 713, 732, 733, 734, 735, 742, 745, 746, 759, 767, 771, 782, 789, 792, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 817, 818, 822, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 864, 865, 866, 868, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 903, 904, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 923, 951, 952, 954, 958, 959, 961, 964, 979, 990, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1025, 1028, 1029, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "e0129126": 370, "e11": 371, "e2": [902, 1001], "e41a1c": [80, 96], "e501": [169, 351], "e_": 413, "each": [2, 28, 44, 47, 48, 50, 51, 52, 53, 55, 56, 59, 63, 64, 65, 69, 71, 73, 77, 79, 80, 82, 83, 87, 89, 92, 94, 95, 103, 104, 106, 108, 116, 117, 119, 121, 122, 126, 127, 128, 129, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 155, 156, 157, 158, 165, 169, 173, 175, 180, 182, 183, 186, 187, 188, 190, 192, 194, 199, 201, 202, 205, 207, 210, 212, 213, 214, 216, 217, 220, 227, 230, 233, 239, 240, 243, 244, 245, 246, 247, 249, 250, 251, 253, 255, 258, 260, 263, 264, 265, 266, 268, 270, 273, 275, 276, 279, 280, 284, 287, 289, 290, 293, 295, 299, 301, 303, 305, 306, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 334, 340, 344, 347, 352, 353, 355, 356, 358, 359, 363, 364, 365, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 385, 388, 389, 390, 399, 402, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 425, 426, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 521, 524, 525, 528, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 711, 712, 714, 717, 723, 729, 732, 733, 734, 742, 743, 749, 750, 752, 754, 755, 757, 758, 762, 763, 766, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 780, 782, 783, 784, 785, 787, 788, 789, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 925, 940, 947, 952, 954, 955, 960, 961, 980, 981, 982, 985, 994, 995, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1029, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "eager": 264, "eargl": 1049, "earl": 1038, "earli": [44, 47, 55, 80, 96, 134, 135, 141, 143, 184, 193, 200, 314, 320, 390, 415, 442, 446, 450, 464, 491, 498, 538, 539, 540, 541, 548, 555, 556, 561, 562, 563, 564, 631, 649, 660, 670, 671, 672, 680, 682, 696, 754, 834, 865, 866, 978, 1002, 1008, 1015, 1019, 1023, 1025, 1026, 1029, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052], "earlier": [141, 188, 216, 370, 376, 411, 839, 842, 1015, 1033, 1036, 1048, 1050], "earliest": [370, 1002], "early_exager": 1042, "early_exagger": 696, "early_stop": [141, 150, 188, 220, 305, 322, 351, 390, 415, 563, 564, 670, 671, 672, 680, 681, 682, 865, 866, 1019, 1043, 1046, 1049, 1050], "earn": [186, 187, 391], "earth": [234, 768, 1024], "eas": [105, 190, 260, 315, 376, 379, 382, 1001, 1019, 1024, 1025, 1029, 1046, 1047, 1049], "easi": [188, 220, 230, 258, 268, 270, 340, 351, 359, 371, 376, 382, 384, 388, 389, 402, 408, 415, 502, 506, 512, 875, 994, 1000, 1004, 1012, 1015, 1024, 1025, 1029, 1045, 1050, 1051], "easier": [80, 96, 100, 114, 144, 194, 201, 241, 249, 267, 268, 310, 340, 351, 359, 371, 376, 378, 381, 384, 388, 394, 410, 412, 469, 517, 906, 945, 1000, 1005, 1012, 1021, 1025, 1029, 1044, 1049], "easiest": [378, 384, 409, 1002], "easili": [44, 49, 68, 127, 166, 190, 215, 228, 244, 246, 250, 253, 270, 272, 279, 295, 312, 376, 378, 390, 391, 402, 409, 415, 416, 418, 450, 999, 1001, 1002, 1015, 1019, 1020, 1021, 1028, 1041], "easlii": 240, "ec": [310, 532], "ecat": 371, "echo": [374, 380], "eckert": 1040, "eckhart": 496, "eclf": [156, 157, 415], "eclf1": 571, "eclf2": 571, "eclf3": 571, "ecml": 0, "ecoc": 287, "ecolog": [51, 303, 371, 500], "econom": [186, 187, 270], "econometr": 1001, "econometrica": 1001, "ecosystem": [376, 384, 995, 1023, 1029], "ecuador": [51, 303, 371, 500], "ed": [139, 149, 408, 415, 522, 561, 562, 1017, 1035, 1042], "eddi": [1038, 1052, 1053], "eden": 1050, "edern": [1050, 1051], "edg": [52, 64, 81, 100, 124, 144, 167, 235, 277, 384, 390, 405, 408, 410, 454, 563, 564, 588, 589, 591, 592, 594, 801, 845, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 873, 921, 1015, 1018, 1029, 1041, 1043, 1046, 1049], "edge_model": 52, "edgecolor": [52, 62, 67, 68, 71, 78, 90, 94, 101, 119, 137, 143, 151, 153, 154, 156, 157, 162, 164, 172, 173, 175, 179, 188, 205, 214, 221, 224, 225, 226, 243, 244, 245, 247, 249, 255, 258, 270, 273, 285, 293, 296, 297, 298, 301, 305, 312, 313, 315, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 349, 356, 357, 635], "edit": [78, 373, 374, 375, 376, 380, 384, 388, 394, 532, 536, 838, 855, 999, 1001, 1006, 1012], "editor": [376, 388], "edm": 1001, "edoardo": [1050, 1052, 1053], "edouard": [0, 398, 1035], "edson": [1005, 1040], "edu": [46, 48, 56, 192, 287, 370, 371, 373, 408, 450, 488, 502, 504, 510, 511, 512, 536, 645, 648, 653, 662, 670, 671, 680, 683, 686, 687, 843, 845, 847, 857, 864, 901, 903, 916, 917, 1001, 1003], "eduardo": [1038, 1040, 1048, 1049], "educ": [186, 187, 326, 376, 498, 720, 1006], "edvardlindelof": 1045, "edward": [176, 618, 623, 626, 1038, 1043, 1044, 1045, 1046, 1050, 1053], "edwinensa": 1041, "edwinwenink": 1048, "eec": [450, 645], "ef": 1050, "eff": 1021, "effect": [44, 46, 65, 73, 75, 76, 81, 87, 91, 96, 99, 102, 106, 117, 119, 124, 126, 135, 145, 147, 149, 152, 160, 168, 171, 172, 176, 178, 184, 185, 187, 188, 190, 198, 206, 208, 212, 213, 214, 216, 217, 218, 229, 231, 234, 236, 242, 249, 253, 256, 260, 262, 264, 266, 270, 271, 272, 275, 278, 279, 284, 290, 302, 308, 309, 311, 314, 320, 328, 340, 344, 345, 347, 348, 349, 351, 352, 353, 357, 359, 364, 376, 381, 388, 390, 406, 408, 409, 413, 414, 415, 416, 418, 419, 438, 443, 444, 445, 447, 448, 450, 451, 466, 483, 484, 485, 491, 498, 502, 516, 526, 527, 535, 538, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 591, 592, 593, 594, 609, 612, 613, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 694, 695, 696, 705, 707, 757, 789, 801, 803, 805, 806, 809, 811, 813, 815, 822, 823, 826, 827, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 858, 859, 865, 866, 868, 871, 872, 873, 874, 875, 877, 878, 880, 884, 885, 886, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 934, 935, 952, 970, 978, 994, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1026, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "effective_learning_r": [865, 866], "effective_metric_": [850, 851, 852, 854, 856, 858, 859, 860, 1008], "effective_metric_params_": [850, 851, 852, 854, 856, 858, 859, 860], "effective_rank": [523, 526], "efficaci": 202, "effici": [38, 44, 45, 52, 54, 78, 81, 87, 89, 121, 136, 141, 145, 153, 192, 202, 206, 214, 220, 295, 327, 351, 363, 368, 370, 376, 378, 379, 381, 382, 388, 390, 402, 405, 408, 413, 414, 415, 418, 420, 443, 444, 447, 448, 450, 451, 453, 455, 458, 460, 462, 463, 498, 535, 536, 537, 540, 542, 543, 546, 565, 568, 576, 584, 585, 591, 592, 594, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 636, 637, 638, 642, 644, 659, 662, 663, 668, 670, 671, 672, 677, 679, 680, 681, 682, 683, 689, 690, 692, 730, 760, 767, 783, 784, 801, 802, 804, 818, 837, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 873, 885, 897, 901, 908, 917, 919, 952, 994, 997, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "efficiencywarn": [2, 863, 1050], "effort": [321, 376, 382, 1024, 1029, 1046, 1048], "efron": [373, 686, 687, 1001], "eg": 988, "egashira": 1050, "egehan": 1053, "egg": 1043, "egger": 1053, "egin": 408, "egli": [1042, 1052], "egor": 1047, "ehrenheim": [1042, 1043], "eib": [839, 1006], "eickenberg": [1035, 1037, 1038, 1039, 1040], "eig": 1042, "eig_tol": 1036, "eig_val": 255, "eig_vec": 255, "eigen": [453, 551, 677, 695, 699, 999, 1041, 1044], "eigen_solv": [52, 80, 81, 100, 232, 233, 413, 453, 463, 537, 692, 693, 695, 697, 699, 1002, 1036, 1045, 1048, 1049, 1050], "eigen_tol": [81, 453, 463, 695, 699, 1036, 1049, 1050], "eigendecompos": 413, "eigendecomposit": [463, 677, 695, 699, 874, 997], "eigenfac": [43, 55, 184, 248, 371, 413, 496, 543, 701, 717, 818, 834, 888, 913, 1022, 1026, 1035], "eigenface_titl": 46, "eigenmap": [232, 693, 695, 697, 699, 1030, 1031, 1036], "eigensolv": [413, 453, 463, 537, 546, 699, 1002], "eigenvalu": [260, 326, 405, 408, 410, 453, 463, 470, 471, 472, 473, 474, 475, 476, 477, 537, 543, 551, 677, 692, 693, 695, 697, 699, 874, 997, 1002, 1015, 1037, 1041, 1044, 1045, 1046, 1047], "eigenvalues_": [537, 1048], "eigenvector": [2, 43, 81, 117, 127, 184, 255, 408, 453, 463, 536, 537, 543, 552, 692, 693, 695, 699, 952, 1002, 1026, 1035, 1039, 1049], "eigenvector_centr": 56, "eigenvectors_": [537, 1048], "eigh": [71, 255, 256, 257, 260, 261, 413, 420, 535, 537, 1050, 1053], "eighteenth": 408, "eighth": [565, 1011], "eigsh": [413, 537, 1041, 1042], "eiler": 1015, "einsum": 300, "eitan": 1052, "either": [44, 50, 65, 104, 141, 143, 144, 187, 200, 203, 240, 249, 264, 265, 274, 279, 284, 295, 347, 358, 363, 364, 368, 371, 374, 376, 377, 378, 390, 399, 402, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 420, 443, 448, 453, 488, 498, 514, 526, 535, 536, 538, 546, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 585, 586, 587, 591, 592, 593, 594, 596, 597, 600, 605, 610, 611, 614, 615, 626, 631, 634, 636, 637, 654, 658, 660, 668, 680, 682, 686, 687, 694, 701, 702, 706, 710, 711, 716, 724, 728, 730, 731, 732, 733, 734, 739, 742, 743, 744, 756, 760, 773, 778, 782, 786, 787, 788, 789, 791, 792, 793, 798, 804, 807, 808, 810, 818, 827, 828, 829, 830, 831, 832, 833, 835, 838, 868, 898, 899, 905, 908, 909, 916, 917, 918, 919, 923, 961, 965, 993, 994, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1015, 1019, 1020, 1035, 1038, 1044, 1045, 1046, 1049, 1053], "ekaterina": [1041, 1042, 1043, 1044, 1046, 1051], "ekman": [1037, 1041], "el": [530, 1048, 1050, 1051], "elabonga": [1051, 1052], "elabor": 1006, "elad": [668, 689, 690], "elaps": [51, 82, 101, 141, 142, 363, 465, 468, 571, 572, 867, 868, 869, 870], "elapsed_tim": [47, 75, 101, 142, 155, 229], "elast": [2, 26, 184, 193, 198, 199, 202, 204, 207, 223, 246, 283, 472, 473, 479, 503, 526, 650, 651, 656, 661, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 686, 688, 994, 1005, 1019, 1026, 1027, 1031, 1035, 1040, 1044, 1045], "elastic_net": 223, "elastic_net_color": 223, "elastic_net_contour": 223, "elasticnet": [2, 47, 50, 196, 204, 278, 283, 363, 382, 388, 413, 651, 656, 661, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 1001, 1006, 1019, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1053], "elasticnetcv": [2, 198, 390, 399, 650, 656, 664, 665, 666, 667, 685, 1001, 1035, 1038, 1046, 1048, 1049, 1052, 1053], "elbo": 413, "eldar": [410, 421, 476], "eleanor": 1050, "elec2": 150, "electr": [52, 150, 373, 408], "electron": [58, 371, 373, 540, 542, 549, 631], "element": [2, 121, 138, 139, 149, 241, 263, 269, 277, 279, 320, 352, 355, 358, 373, 375, 376, 378, 385, 391, 405, 408, 412, 413, 415, 416, 419, 445, 447, 453, 465, 488, 510, 514, 516, 522, 524, 528, 529, 533, 539, 540, 542, 552, 559, 560, 561, 562, 566, 567, 568, 569, 570, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 621, 636, 637, 662, 663, 670, 671, 672, 680, 681, 682, 711, 721, 731, 738, 740, 750, 767, 773, 782, 786, 792, 793, 838, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 863, 865, 866, 871, 887, 888, 891, 895, 908, 913, 916, 917, 918, 919, 954, 955, 956, 975, 977, 978, 990, 999, 1001, 1005, 1006, 1009, 1012, 1015, 1016, 1017, 1021, 1029, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1051], "elementari": [902, 1017], "elementwis": [413, 540, 542, 549], "elena": 1042, "eleni": 1048, "eleph": 585, "elev": [101, 127, 188, 232, 236, 492], "eleven": 1025, "elfner": 1049, "elia": 1041, "eliaschiavon": 1050, "eliasi": [1050, 1051, 1052], "elicit": 1005, "elif": [47, 48, 195, 214, 247, 257, 295, 884], "elimin": [2, 18, 160, 163, 166, 169, 184, 265, 268, 269, 273, 275, 284, 294, 408, 412, 449, 504, 517, 596, 597, 600, 605, 662, 807, 808, 823, 868, 878, 990, 1005, 1026, 1027, 1029, 1031, 1035], "elisabeth": 1052, "elizabeth": [1042, 1044, 1047], "elkan": [65, 264, 320, 406, 438, 444, 448, 460, 680, 1041, 1045, 1046, 1048, 1049], "ell": [71, 255, 256, 257, 261, 405], "ell_": 1001, "ell_0": [1001, 1005], "ell_1": [413, 1001], "ell_2": 1001, "ella": 1017, "ellen": 1042, "elli": [1041, 1044], "elliot": [1052, 1053], "elliott": 1042, "ellips": [71, 239, 255, 256, 257, 260, 261, 1011], "ellipsoid": [49, 66, 70, 112, 113, 114, 184, 254, 255, 257, 258, 259, 260, 261, 551, 552, 635, 801, 802, 999, 1004, 1026], "ellipt": [91, 1001], "ellipticenvelop": [2, 49, 239, 471, 474, 475, 476, 477, 565, 1011, 1035, 1038, 1042, 1043, 1048], "eln": 1046, "elong": 408, "els": [2, 44, 48, 51, 52, 53, 58, 71, 77, 80, 83, 89, 90, 96, 114, 125, 138, 143, 144, 147, 148, 179, 187, 188, 190, 202, 205, 227, 230, 233, 239, 243, 245, 246, 247, 248, 249, 265, 270, 271, 274, 281, 290, 295, 303, 305, 306, 312, 319, 344, 351, 352, 358, 376, 380, 382, 415, 416, 418, 420, 428, 438, 450, 510, 522, 535, 571, 622, 629, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 676, 677, 678, 680, 683, 685, 686, 687, 688, 707, 713, 792, 798, 800, 807, 808, 834, 855, 872, 884, 887, 895, 908, 909, 923, 966, 968, 970, 991, 993, 1021], "elsewher": [390, 463, 464, 472, 473, 479], "eltermann": 1038, "elucid": 997, "elvezio": [653, 1001], "elvi": [1040, 1041, 1042], "em": [256, 257, 261, 444, 448, 460, 538, 801, 802, 1004, 1049], "emad": 1053, "email": [0, 351, 388, 391, 416, 843, 1007, 1029], "emami": 1049, "emanuel": 1036, "emb": [171, 233, 243, 299, 369, 370, 463, 699, 1002], "embark": [104, 189, 253, 319, 323, 324], "embed": [2, 27, 38, 72, 75, 80, 81, 89, 90, 96, 140, 171, 184, 231, 234, 236, 238, 290, 299, 329, 330, 390, 408, 442, 453, 463, 490, 504, 546, 551, 568, 585, 643, 692, 693, 694, 695, 696, 697, 698, 699, 700, 857, 869, 878, 900, 901, 902, 997, 1008, 1011, 1017, 1022, 1024, 1026, 1030, 1031, 1035, 1036, 1046, 1047, 1049], "embedding_": [235, 390, 692, 693, 694, 695, 696], "emerg": [408, 1029], "emeritu": 391, "emiko": 1049, "emil": 1049, "emili": [1046, 1047], "emilyxinyi": 1053, "emipr": 801, "emir": [1050, 1051], "emit": [1046, 1053], "emlearn": 1024, "emma": 1052, "emmanouil": 1049, "emmanuel": [1035, 1042, 1043, 1044, 1052], "emoji": 396, "emp_cov": [110, 112, 114, 479, 482], "emp_cov_contour": 112, "emp_mah": 112, "emphas": [187, 349, 382, 413, 1005], "emphasi": [349, 407, 411, 910, 911, 912, 913, 914, 1012, 1024], "empir": [2, 49, 53, 62, 63, 71, 72, 78, 79, 98, 109, 111, 112, 114, 150, 184, 195, 230, 276, 310, 406, 412, 415, 418, 448, 450, 461, 470, 471, 472, 475, 478, 479, 534, 536, 541, 543, 545, 551, 553, 567, 593, 606, 643, 653, 671, 675, 682, 683, 720, 725, 727, 728, 833, 843, 844, 845, 847, 855, 866, 889, 937, 978, 997, 999, 1005, 1007, 1009, 1015, 1017, 1019, 1026, 1030, 1031], "empirical_covari": [2, 110, 410, 479, 480, 482, 1051], "empiricalcovari": [2, 110, 112, 113, 410, 470, 474, 475, 476, 477, 1011], "emploi": [0, 52, 171, 245, 390, 410, 416, 451, 479, 585, 592, 1029, 1041], "employ": 187, "empti": [95, 103, 130, 224, 332, 363, 371, 380, 408, 420, 428, 484, 535, 563, 564, 634, 635, 815, 873, 913, 915, 923, 929, 934, 935, 941, 963, 964, 995, 1020, 1037, 1039, 1043, 1044, 1046, 1047, 1049, 1050, 1051], "emptyset": 1005, "emul": [187, 384], "en": [56, 62, 384, 533, 539, 598, 640, 668, 672, 675, 689, 690, 699, 709, 850, 851, 856, 857, 858, 859, 886, 902, 916, 917, 1001, 1005, 1020, 1021], "enabl": [2, 16, 53, 67, 84, 105, 150, 188, 220, 234, 246, 312, 320, 322, 323, 325, 326, 327, 348, 374, 376, 381, 384, 388, 390, 394, 399, 404, 408, 409, 413, 415, 416, 450, 465, 469, 536, 537, 543, 561, 562, 563, 564, 565, 582, 583, 593, 594, 605, 614, 801, 802, 804, 807, 829, 830, 831, 832, 833, 835, 868, 869, 881, 882, 905, 906, 908, 909, 910, 911, 912, 913, 914, 923, 964, 971, 995, 997, 1002, 1004, 1005, 1008, 1015, 1016, 1019, 1020, 1025, 1029, 1035, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "enable_cython_pairwise_dist": [469, 906], "enable_halving_search_cv": [2, 147, 281, 282, 321, 380, 807, 808, 994], "enable_hist_gradient_boost": [380, 1044], "enable_iterative_imput": [2, 182, 183, 380, 631, 995, 1044], "enable_metadata_rout": [246, 264, 326, 399, 438, 444, 445, 448, 450, 465, 466, 469, 473, 483, 484, 485, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 596, 597, 600, 605, 614, 615, 631, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 804, 805, 806, 807, 808, 811, 813, 818, 822, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 867, 868, 869, 871, 873, 874, 875, 880, 887, 888, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1051], "enable_my_experimental_featur": 380, "enblom": 1053, "enc": [311, 313, 323, 325, 881, 882, 1015], "enc_auto": 889, "enc_high_smooth": 889, "enc_low_smooth": 889, "encapsul": [383, 409, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919], "enclos": 994, "encod": [2, 44, 48, 51, 89, 104, 121, 140, 150, 155, 184, 187, 188, 189, 211, 212, 249, 264, 279, 284, 309, 311, 312, 313, 321, 323, 324, 340, 351, 353, 368, 370, 372, 381, 388, 390, 409, 412, 413, 415, 416, 418, 465, 488, 498, 505, 528, 533, 539, 541, 542, 544, 546, 547, 548, 550, 553, 563, 564, 568, 569, 571, 584, 591, 592, 594, 634, 652, 662, 663, 673, 676, 684, 739, 806, 811, 813, 831, 834, 868, 869, 871, 873, 875, 876, 879, 881, 882, 889, 892, 906, 925, 994, 995, 1001, 1002, 1005, 1007, 1008, 1010, 1019, 1024, 1026, 1031, 1036, 1037, 1043, 1047, 1049, 1050, 1051, 1052, 1053], "encoded_missing_valu": [155, 189, 882, 1015, 1049, 1050], "encodings_": [325, 889, 1015], "encompass": [390, 451, 457, 557, 558, 1002], "encount": [364, 374, 394, 402, 408, 415, 416, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 563, 564, 584, 843, 844, 845, 847, 881, 979, 1015, 1019, 1024, 1028, 1029, 1043, 1046], "encourag": [187, 201, 216, 305, 340, 375, 376, 388, 1020, 1024, 1053], "encrypt": 1024, "encyclopedia": 1005, "end": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 374, 376, 378, 388, 390, 391, 394, 399, 405, 408, 409, 411, 415, 451, 457, 469, 489, 490, 510, 511, 539, 548, 559, 560, 561, 562, 566, 567, 568, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 665, 666, 667, 685, 686, 687, 688, 804, 807, 808, 818, 825, 829, 866, 868, 906, 916, 917, 918, 919, 956, 958, 988, 994, 997, 1001, 1002, 1004, 1005, 1015, 1017, 1019, 1024, 1029, 1040, 1042, 1045, 1048, 1049], "end_": 48, "end_bodi": 48, "end_d": 48, "end_idx": [52, 235], "end_reut": 48, "end_titl": 48, "end_top": 48, "endian": 1047, "endo": 1048, "endpoint": [54, 311, 343, 639], "enemi": 376, "energi": [52, 150, 384, 864, 1010], "enet": [198, 283], "enet_path": [2, 201, 390, 650, 651, 656, 664, 665, 666, 1037, 1039, 1048], "enet_tol": [472, 473, 479, 1040], "enforc": [44, 52, 71, 87, 121, 150, 176, 207, 299, 363, 376, 410, 413, 415, 425, 431, 510, 529, 533, 539, 541, 544, 545, 547, 548, 550, 559, 560, 563, 564, 566, 567, 872, 887, 916, 917, 918, 919, 934, 935, 995, 1002, 1037, 1043, 1045, 1047, 1051], "enforce_estimator_tags_i": 1045, "eng": 1043, "engag": [382, 391], "engemann": [1037, 1038, 1042], "engin": [43, 76, 140, 144, 150, 176, 184, 188, 213, 363, 370, 373, 408, 414, 416, 465, 498, 564, 643, 677, 705, 825, 831, 866, 867, 869, 872, 873, 878, 881, 883, 887, 995, 997, 1005, 1015, 1026, 1041], "english": [55, 58, 351, 352, 353, 381, 416, 591, 592, 594, 1024, 1025, 1048], "enh": 380, "enhanc": [121, 216, 375, 376, 380, 388, 390, 408, 1005, 1033, 1034, 1035, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "enjoi": [78, 264], "enough": [2, 44, 53, 65, 73, 80, 96, 141, 143, 150, 171, 182, 188, 189, 202, 212, 244, 247, 249, 264, 283, 314, 353, 359, 374, 376, 378, 380, 391, 406, 408, 410, 412, 415, 569, 570, 592, 804, 807, 808, 810, 818, 832, 952, 994, 999, 1002, 1004, 1011, 1015, 1020, 1024, 1029, 1041, 1051, 1052], "enrich": 344, "ensembl": [2, 44, 47, 50, 53, 64, 65, 68, 90, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 182, 183, 188, 189, 190, 212, 233, 239, 248, 249, 251, 252, 264, 267, 282, 287, 289, 312, 316, 319, 320, 321, 322, 323, 324, 325, 326, 351, 356, 357, 359, 363, 380, 381, 389, 390, 399, 402, 406, 408, 412, 417, 438, 506, 517, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 636, 637, 639, 662, 706, 807, 808, 826, 834, 838, 839, 869, 872, 881, 912, 916, 918, 919, 943, 994, 1005, 1006, 1011, 1012, 1021, 1024, 1026, 1027, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "ensemble_clf": 139, "ensemble_jaccard_scor": 289, "ensembleregressorsensembl": 396, "ensur": [0, 53, 59, 77, 91, 114, 119, 135, 141, 142, 150, 190, 212, 233, 264, 265, 273, 307, 358, 359, 363, 364, 376, 378, 381, 382, 391, 394, 399, 404, 406, 408, 409, 412, 420, 470, 535, 536, 543, 615, 631, 700, 709, 786, 792, 793, 829, 901, 934, 935, 945, 947, 952, 959, 970, 1001, 1002, 1005, 1015, 1021, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "ensure_2d": [934, 935], "ensure_all_finit": [782, 932, 934, 935], "ensure_min_featur": [934, 935], "ensure_min_sampl": [934, 935], "ensure_non_neg": 935, "entail": [264, 389, 886, 888, 1019], "enter": [377, 380, 408, 443, 1012], "entertain": 1001, "entic": 187, "entir": [69, 182, 212, 220, 264, 308, 310, 320, 344, 358, 359, 370, 377, 390, 402, 408, 412, 414, 416, 473, 494, 536, 591, 592, 593, 594, 651, 655, 657, 659, 662, 663, 665, 667, 669, 670, 672, 680, 686, 687, 738, 800, 826, 836, 837, 840, 865, 867, 868, 881, 893, 894, 896, 897, 898, 899, 927, 973, 995, 1005, 1015, 1019, 1021, 1044, 1045], "entireti": 390, "entiti": [391, 730, 760], "entitl": [284, 293, 407, 448, 615, 850, 997], "entri": [0, 108, 150, 155, 183, 264, 266, 319, 352, 359, 376, 380, 382, 384, 389, 390, 405, 406, 408, 413, 415, 418, 464, 465, 468, 473, 498, 533, 534, 539, 547, 548, 563, 564, 591, 594, 597, 613, 615, 624, 636, 642, 644, 651, 655, 657, 659, 660, 663, 665, 667, 668, 669, 677, 679, 686, 687, 689, 690, 703, 708, 711, 713, 716, 719, 720, 722, 730, 733, 734, 735, 738, 739, 742, 747, 760, 762, 763, 787, 789, 792, 793, 796, 797, 817, 832, 848, 849, 856, 857, 858, 859, 860, 879, 885, 897, 990, 994, 995, 1001, 1005, 1008, 1015, 1020, 1025, 1042, 1045, 1046, 1048, 1052], "entropi": [2, 51, 65, 251, 282, 303, 321, 329, 330, 359, 371, 404, 408, 415, 420, 500, 535, 559, 566, 610, 611, 662, 721, 740, 741, 745, 799, 916, 918, 1001, 1002, 1005, 1009, 1021, 1037, 1039, 1043, 1044, 1049, 1051, 1052], "entrypoint_to_bug_reproduc": 377, "enumer": [44, 48, 50, 51, 52, 54, 55, 56, 58, 63, 65, 67, 68, 73, 75, 76, 77, 78, 79, 80, 84, 89, 93, 94, 95, 96, 99, 103, 111, 113, 114, 117, 122, 124, 130, 138, 141, 145, 146, 148, 149, 150, 160, 173, 175, 180, 190, 195, 197, 204, 212, 233, 234, 237, 239, 244, 248, 249, 255, 256, 257, 258, 260, 261, 264, 265, 272, 273, 279, 280, 295, 299, 300, 302, 308, 312, 313, 329, 330, 332, 334, 338, 340, 346, 347, 351, 356, 371, 372, 561, 562, 566, 567, 785, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825], "env": [374, 384, 394, 395], "environ": [0, 3, 363, 371, 373, 374, 376, 378, 379, 382, 388, 394, 395, 404, 409, 501, 1025, 1029, 1031, 1042, 1043, 1052], "environment": [51, 198, 230], "environmenterror": 1051, "eom": 447, "eoss": 0, "ep": [68, 80, 81, 83, 89, 99, 201, 235, 243, 388, 408, 419, 445, 451, 456, 472, 473, 479, 635, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 685, 686, 687, 688, 694, 698, 718, 745, 860, 900, 901, 902, 1017, 1050, 1051], "epanechnikov": [295, 414, 848, 849, 853], "ephemer": 384, "ephrem": 1050, "epimorph": 1052, "epistem": 53, "epoch": [227, 390, 538, 670, 671, 672, 680, 681, 682, 865, 866, 1019, 1042, 1043, 1048], "epp": [408, 708], "eps_": [664, 666], "eps_rang": 243, "epsilon": [2, 89, 99, 197, 235, 245, 325, 346, 413, 447, 456, 647, 653, 671, 680, 682, 750, 865, 866, 909, 911, 914, 998, 1001, 1005, 1009, 1019, 1020, 1035], "epsilon_": 846, "epsilon_i": 1005, "epsilon_insensit": [671, 680, 682, 909, 1001, 1019], "epsilon_valu": 197, "eq": [264, 421, 476, 725, 727, 728, 855], "equal": [44, 51, 52, 64, 71, 73, 75, 87, 94, 112, 117, 123, 135, 147, 174, 187, 213, 214, 223, 229, 250, 257, 260, 263, 268, 270, 279, 300, 312, 316, 340, 342, 348, 352, 371, 372, 376, 378, 390, 405, 406, 408, 412, 413, 415, 416, 421, 438, 441, 442, 443, 444, 446, 448, 450, 455, 460, 461, 464, 470, 475, 480, 481, 505, 514, 517, 521, 534, 535, 536, 541, 543, 545, 546, 551, 552, 553, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 591, 596, 597, 600, 602, 603, 610, 611, 629, 632, 633, 636, 637, 638, 639, 641, 645, 646, 653, 662, 663, 675, 703, 722, 724, 733, 787, 791, 792, 798, 800, 804, 805, 807, 808, 817, 818, 822, 829, 836, 840, 841, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 865, 866, 871, 872, 873, 880, 883, 886, 887, 888, 889, 891, 898, 905, 908, 909, 915, 916, 917, 918, 919, 940, 952, 979, 985, 999, 1001, 1005, 1006, 1008, 1009, 1011, 1015, 1019, 1020, 1021, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "equat": [2, 65, 347, 376, 408, 413, 415, 559, 560, 561, 562, 566, 567, 568, 593, 631, 662, 663, 686, 687, 691, 767, 888, 916, 917, 918, 919, 995, 1002, 1005, 1010, 1043], "equi": 1004, "equiangular": 1001, "equidist": [144, 696], "equip": 1029, "equiv": [997, 1020], "equival": [44, 55, 71, 89, 91, 144, 151, 168, 171, 176, 187, 198, 205, 230, 260, 279, 290, 315, 344, 353, 359, 363, 382, 385, 389, 390, 402, 408, 409, 410, 411, 412, 413, 415, 417, 418, 442, 444, 445, 446, 447, 448, 450, 451, 458, 465, 470, 475, 511, 536, 543, 560, 563, 564, 565, 566, 567, 591, 594, 617, 620, 623, 625, 628, 650, 651, 652, 656, 658, 662, 663, 670, 671, 672, 673, 676, 680, 681, 684, 687, 691, 692, 697, 712, 713, 727, 738, 746, 751, 752, 753, 765, 774, 783, 784, 801, 802, 807, 808, 812, 814, 839, 842, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 871, 877, 878, 880, 883, 884, 885, 886, 888, 896, 898, 899, 938, 950, 990, 994, 999, 1001, 1002, 1003, 1005, 1011, 1015, 1019, 1020, 1021, 1043, 1044, 1045, 1046, 1048, 1049, 1052], "er": 572, "era": 1025, "eras": [561, 562, 650, 656, 662, 664, 666, 670, 671, 672, 680, 681, 682, 865, 866], "ereg": [158, 415], "eren": [0, 1037, 1038], "eric": [1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "ericellwang": [1048, 1049], "erich": [451, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1053], "erick": 1040, "erik": [371, 1029, 1038], "eriksson": 1042, "erin": [287, 1047], "erlbaum": 264, "erling": 1040, "ermolaevpa": [1049, 1050], "ernst": [415, 559, 560, 567, 568, 918, 919], "err": [56, 116, 125, 135], "err_cov_emp_ful": 113, "err_cov_emp_pur": 113, "err_cov_mcd": 113, "err_loc_emp_ful": 113, "err_loc_emp_pur": 113, "err_loc_mcd": 113, "errno": 394, "erron": [112, 113, 413, 1001, 1036, 1043, 1047], "error": [2, 15, 26, 31, 44, 45, 47, 53, 54, 56, 65, 108, 110, 111, 113, 125, 130, 134, 138, 141, 142, 144, 146, 148, 150, 171, 182, 184, 186, 187, 198, 202, 206, 208, 209, 212, 214, 217, 218, 219, 226, 230, 242, 245, 246, 252, 261, 262, 264, 266, 270, 271, 275, 279, 280, 285, 287, 296, 297, 323, 326, 339, 347, 351, 352, 364, 373, 374, 376, 378, 379, 380, 381, 385, 388, 390, 399, 402, 406, 408, 409, 410, 412, 413, 415, 416, 417, 438, 444, 445, 448, 450, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 505, 517, 526, 533, 535, 538, 539, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 578, 593, 595, 598, 599, 601, 602, 603, 609, 614, 615, 633, 636, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 692, 693, 694, 696, 697, 700, 702, 705, 706, 713, 715, 716, 724, 725, 727, 731, 744, 747, 748, 749, 750, 751, 752, 754, 755, 757, 768, 782, 786, 792, 793, 794, 795, 803, 804, 805, 806, 807, 808, 810, 811, 813, 818, 822, 826, 827, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 858, 859, 860, 863, 865, 866, 867, 868, 869, 871, 873, 874, 875, 880, 881, 882, 887, 888, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 932, 933, 934, 935, 938, 967, 988, 991, 993, 994, 995, 996, 998, 999, 1000, 1002, 1006, 1009, 1013, 1015, 1019, 1020, 1021, 1026, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "error_": [533, 545], "error_i": [141, 271], "error_norm": [111, 113, 470, 471, 472, 473, 474, 475, 476, 477], "error_on_new": 633, "error_r": 139, "error_scor": [804, 807, 808, 810, 818, 827, 830, 831, 832, 835, 994, 1039, 1043, 1047, 1050], "error_x": [141, 271], "errorbar": [73, 95, 106, 111, 113, 168, 177, 178, 292, 332, 343, 810, 827], "errorbar_": [810, 827], "errorbar_kw": [810, 827], "errorbarcontain": [810, 827], "errors_coef": 216, "errors_lines_": 705, "erwan": 1052, "erwin": 1038, "escal": 391, "escalant": 1005, "escalera": 1005, "escap": [1048, 1050], "eschibli": 1047, "eschlbeck": 1049, "esp": [408, 1035], "especi": [44, 48, 53, 89, 90, 144, 147, 150, 187, 205, 212, 246, 324, 352, 359, 364, 370, 376, 384, 388, 390, 406, 408, 416, 444, 450, 503, 540, 559, 560, 561, 562, 566, 567, 568, 650, 651, 652, 654, 656, 657, 658, 662, 663, 664, 665, 666, 667, 673, 684, 699, 709, 750, 843, 844, 845, 846, 847, 916, 917, 918, 919, 1001, 1007, 1008, 1015, 1029, 1038, 1043, 1047, 1048, 1049], "espinoza": [1036, 1037], "essenc": [610, 611, 747, 1002, 1005], "essenti": [0, 270, 324, 374, 408, 412, 413, 511, 1005, 1008, 1025, 1029, 1043], "est": [155, 187, 205, 227, 246, 248, 264, 284, 312, 321, 359, 402, 415, 564, 739, 873, 957, 994, 1005, 1015, 1019, 1046, 1047], "est1": [390, 636], "est2": [390, 636], "est_freq": 230, "est_idx": 312, "est_sev": 230, "establish": [384, 388, 391, 995], "estefania": 1049, "ester": [408, 419, 445], "estev": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "estim": [2, 4, 7, 8, 13, 16, 26, 30, 31, 32, 36, 44, 46, 47, 48, 49, 50, 51, 52, 53, 62, 64, 65, 67, 70, 71, 73, 74, 80, 83, 88, 89, 90, 91, 92, 95, 97, 104, 105, 106, 107, 116, 117, 121, 122, 123, 128, 130, 134, 135, 139, 140, 141, 142, 143, 145, 147, 149, 150, 152, 155, 156, 157, 158, 167, 168, 169, 170, 171, 172, 174, 176, 178, 180, 181, 182, 186, 187, 193, 196, 198, 200, 202, 203, 205, 208, 209, 212, 214, 216, 217, 219, 220, 229, 230, 238, 239, 240, 245, 251, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 297, 301, 310, 312, 322, 323, 325, 327, 343, 344, 347, 352, 353, 355, 356, 357, 363, 364, 365, 368, 374, 376, 379, 380, 383, 384, 385, 386, 394, 399, 402, 403, 406, 407, 408, 411, 413, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 491, 492, 494, 497, 498, 500, 503, 504, 526, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 580, 582, 583, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 691, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 711, 712, 715, 716, 717, 720, 722, 724, 725, 727, 728, 730, 731, 732, 733, 734, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 820, 822, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 897, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 924, 925, 926, 927, 928, 933, 934, 935, 937, 939, 940, 943, 945, 946, 947, 948, 957, 960, 961, 962, 964, 988, 992, 993, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "estimate_bandwidth": [2, 80, 97, 408, 449, 462], "estimated_coef": [650, 651, 656, 664, 665, 666, 685, 686, 687], "estimator_": [215, 246, 284, 428, 555, 556, 557, 558, 559, 560, 565, 566, 567, 568, 596, 597, 600, 675, 803, 826, 905, 988, 1050], "estimator__alpha": 147, "estimator__max_depth": [390, 994], "estimator_alpha": 143, "estimator_check": [2, 319, 378, 390, 945, 946, 947, 1042, 1043, 1045, 1046, 1049, 1050, 1051, 1053], "estimator_checks_gener": [2, 945], "estimator_conf": 50, "estimator_config": 50, "estimator_dict": 220, "estimator_errors_": [135, 555, 556], "estimator_html_repr": [2, 378, 409, 1025, 1046, 1047, 1048, 1049, 1052], "estimator_modul": 378, "estimator_nam": [50, 220, 378, 383, 439, 579, 702, 704, 706, 933], "estimator_samples_": 1046, "estimator_typ": [425, 426, 427, 430, 431, 927], "estimator_weights_": [135, 555, 556], "estimatorcheckfailedwarn": [2, 945], "estimatorcv": 390, "estimators_": [142, 143, 205, 227, 247, 319, 390, 415, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 836, 837, 838, 839, 840, 841, 842, 1036, 1042, 1049], "estimators_early_stop": 145, "estimators_features_": [557, 558, 565], "estimators_samples_": [557, 558, 559, 560, 565, 566, 567, 568, 1041, 1043, 1046, 1052], "est\u00e8v": [0, 397, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "est\u00e8vc": 1053, "esuli": [1042, 1047], "esvhd": 1044, "et": [0, 2, 51, 110, 111, 135, 149, 200, 303, 371, 373, 405, 408, 410, 413, 415, 416, 417, 452, 500, 521, 522, 530, 537, 543, 546, 565, 686, 687, 723, 724, 843, 845, 865, 866, 901, 951, 952, 1001, 1002, 1005, 1011, 1015, 1017, 1020, 1021, 1043, 1051], "eta": [413, 538, 680, 681, 682, 1009, 1019, 1040], "eta0": [672, 680, 681, 682, 1019], "eta_0": 1019, "etc": [2, 144, 212, 230, 265, 274, 275, 327, 359, 363, 365, 376, 378, 381, 388, 389, 390, 399, 402, 405, 409, 412, 416, 490, 505, 529, 559, 560, 566, 567, 672, 680, 696, 722, 775, 804, 818, 839, 842, 872, 883, 916, 917, 918, 919, 920, 922, 934, 935, 945, 994, 995, 999, 1005, 1008, 1024, 1025, 1029, 1035, 1042, 1044, 1045], "eth": 1045, "ethan": [1038, 1041], "ethic": 150, "etiquett": 376, "etl": [1025, 1029], "euclidean": [2, 38, 76, 91, 92, 199, 243, 249, 290, 293, 298, 319, 324, 344, 352, 405, 408, 413, 414, 415, 416, 418, 441, 442, 445, 446, 447, 451, 453, 458, 461, 464, 533, 539, 547, 548, 592, 619, 623, 626, 627, 680, 682, 694, 696, 699, 700, 703, 766, 767, 773, 774, 775, 776, 782, 783, 784, 785, 796, 797, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 902, 995, 999, 1003, 1006, 1008, 1017, 1039, 1042, 1043, 1044, 1045, 1051, 1052], "euclidean_dist": [2, 235, 243, 378, 404, 451, 455, 458, 692, 698, 766, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 1035, 1040, 1043, 1044, 1052], "euclideandist": 703, "eugen": [373, 1036, 1041], "eunji": 1043, "eunseop": 1045, "euro": 327, "europ": [416, 1015], "european": [730, 760, 1005], "eustach": [1029, 1037, 1038], "eval_and_print_metr": 333, "eval_gradi": [179, 418, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "evalml": 1024, "evalu": [2, 28, 30, 44, 45, 46, 50, 51, 62, 69, 72, 74, 78, 79, 83, 89, 98, 104, 105, 124, 135, 141, 142, 144, 145, 147, 150, 164, 165, 174, 184, 188, 190, 192, 195, 202, 214, 219, 230, 238, 262, 263, 267, 268, 269, 270, 273, 275, 276, 277, 279, 281, 282, 284, 285, 289, 297, 299, 303, 310, 315, 317, 321, 325, 326, 333, 340, 344, 351, 359, 369, 371, 378, 382, 390, 393, 409, 416, 417, 418, 448, 450, 465, 467, 489, 492, 494, 495, 498, 511, 522, 538, 553, 563, 564, 565, 569, 570, 594, 597, 605, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 635, 636, 637, 638, 651, 657, 663, 677, 679, 701, 703, 705, 706, 707, 708, 709, 715, 717, 718, 719, 721, 722, 730, 731, 740, 741, 746, 758, 759, 760, 761, 790, 799, 801, 802, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 834, 835, 839, 845, 848, 849, 854, 866, 868, 869, 875, 878, 881, 882, 886, 887, 888, 893, 894, 896, 897, 898, 899, 910, 913, 916, 937, 945, 978, 997, 1001, 1003, 1007, 1008, 1011, 1012, 1013, 1016, 1019, 1021, 1024, 1026, 1029, 1030, 1031, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "evaluate_everi": 538, "evaluate_model_and_stor": 316, "evaluation_std": 352, "evaluations_std": 352, "evelyn": 1053, "even": [38, 44, 53, 54, 65, 76, 78, 86, 108, 117, 124, 141, 147, 177, 187, 188, 189, 202, 212, 213, 220, 230, 236, 237, 245, 246, 256, 276, 287, 310, 312, 314, 315, 334, 347, 352, 353, 359, 365, 371, 375, 376, 377, 378, 380, 381, 384, 388, 390, 402, 406, 408, 409, 410, 412, 413, 415, 416, 418, 442, 444, 446, 447, 448, 449, 450, 460, 462, 534, 537, 559, 560, 561, 562, 566, 567, 585, 592, 597, 631, 632, 634, 643, 662, 663, 699, 704, 709, 716, 747, 765, 771, 778, 782, 785, 790, 792, 831, 868, 869, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 916, 917, 918, 919, 945, 952, 973, 994, 995, 997, 999, 1001, 1004, 1005, 1008, 1010, 1011, 1013, 1015, 1017, 1019, 1020, 1021, 1029, 1042, 1043, 1044, 1047, 1049, 1052], "evenli": [2, 48, 75, 86, 147, 190, 216, 265, 416, 956], "event": [0, 44, 212, 230, 273, 406, 408, 591, 592, 640, 843, 939, 1001, 1006, 1007, 1024, 1029, 1041], "eventu": [7, 258, 408, 417, 596, 1029], "ever": [141, 154, 385, 415, 1029], "everi": [44, 121, 150, 176, 182, 210, 213, 233, 245, 256, 261, 279, 322, 326, 359, 371, 376, 378, 380, 384, 390, 406, 408, 410, 412, 413, 416, 441, 455, 510, 533, 538, 541, 547, 559, 561, 562, 563, 564, 566, 593, 594, 606, 650, 651, 653, 656, 657, 663, 664, 665, 666, 667, 668, 669, 670, 672, 676, 677, 678, 679, 680, 689, 690, 691, 696, 700, 758, 775, 783, 784, 817, 857, 916, 918, 920, 922, 940, 998, 1000, 1005, 1006, 1007, 1015, 1021, 1029, 1035, 1039, 1041, 1044, 1048, 1052], "everingham": 1005, "everingham2010": 1005, "everybodi": [370, 376], "everyon": [376, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "everyth": [329, 359, 380, 382, 388, 402, 465, 959, 1024, 1025, 1035], "everywher": 390, "evgeni": 1046, "evid": [276, 351, 384, 408, 412, 413, 415, 648, 801, 1004], "evol": 1005, "evolut": [48, 50, 282, 363, 365], "evolv": [385, 1050], "ex": [374, 377, 394, 1039, 1040], "exact": [45, 47, 114, 126, 141, 176, 188, 216, 244, 264, 290, 326, 359, 363, 364, 370, 376, 378, 384, 385, 388, 389, 390, 408, 415, 417, 433, 483, 484, 485, 489, 498, 536, 537, 543, 563, 564, 642, 646, 650, 696, 804, 818, 829, 830, 831, 910, 913, 994, 997, 1001, 1002, 1011, 1015, 1019, 1020, 1042, 1043, 1045], "exactli": [104, 135, 186, 194, 198, 206, 212, 216, 261, 264, 278, 311, 347, 376, 378, 384, 405, 408, 412, 413, 416, 421, 447, 454, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 517, 528, 593, 594, 619, 680, 682, 707, 709, 767, 805, 822, 829, 997, 1001, 1002, 1003, 1005, 1006, 1021, 1035, 1041, 1042, 1048], "exagger": [75, 187, 696, 1002], "examin": [165, 382, 384, 408, 857], "exampl": [2, 31, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 393, 394, 401, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 423, 424, 426, 427, 429, 430, 433, 434, 435, 437, 440, 457, 458, 460, 462, 464, 472, 479, 481, 482, 486, 487, 488, 495, 499, 505, 507, 508, 509, 510, 511, 518, 519, 520, 530, 531, 533, 547, 548, 549, 550, 557, 574, 575, 580, 586, 588, 589, 595, 598, 599, 601, 604, 606, 612, 616, 620, 624, 625, 628, 630, 633, 640, 641, 642, 646, 654, 655, 658, 664, 665, 667, 671, 679, 687, 689, 690, 691, 698, 699, 700, 703, 712, 714, 715, 718, 719, 720, 724, 725, 727, 728, 729, 730, 732, 734, 735, 737, 740, 743, 744, 747, 748, 751, 755, 758, 760, 762, 763, 764, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 787, 795, 798, 800, 811, 812, 813, 814, 815, 816, 817, 828, 840, 842, 844, 848, 849, 858, 859, 860, 862, 863, 870, 871, 874, 876, 879, 890, 891, 893, 895, 896, 898, 899, 900, 903, 907, 909, 910, 918, 919, 920, 921, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 948, 950, 951, 952, 953, 954, 955, 958, 959, 966, 967, 968, 969, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1029, 1031, 1032, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "example_funct": 376, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1035, "example_gaussian_process_plot_gp_regress": 1035, "exampleclassifi": 246, "exampleestim": 376, "exampleregressor": 246, "examples_pattern": 376, "exampletransform": 246, "exc": 988, "exce": [116, 289, 320, 418, 443, 517, 605, 653, 662, 1044, 1047, 1049], "exceed": [807, 808, 1041], "excel": [153, 370, 376, 415, 694, 698, 1001, 1029], "except": [2, 51, 80, 87, 124, 133, 141, 150, 220, 227, 239, 246, 278, 290, 303, 306, 307, 310, 312, 324, 369, 376, 378, 379, 381, 388, 390, 399, 402, 405, 409, 412, 413, 415, 416, 418, 431, 461, 466, 469, 483, 484, 485, 511, 556, 558, 559, 560, 562, 564, 566, 567, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 615, 631, 634, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 691, 715, 782, 811, 841, 842, 848, 849, 851, 854, 859, 865, 866, 872, 886, 888, 906, 909, 911, 914, 917, 919, 933, 945, 946, 956, 988, 990, 994, 1001, 1005, 1020, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1053], "exception": 230, "excerpt": [46, 1017], "excess": [216, 447, 1015, 1042], "exchang": [402, 1028], "excit": 1042, "exclud": [48, 58, 186, 310, 376, 380, 390, 447, 465, 467, 733, 734, 742, 787, 788, 791, 817, 825, 883, 979, 1005, 1008, 1044, 1051], "exclus": [364, 388, 390, 413, 415, 631, 632, 634, 806, 821, 824, 994, 1001, 1005, 1006, 1029, 1042, 1046], "exec": 388, "execut": [65, 182, 198, 202, 245, 275, 364, 374, 376, 382, 402, 404, 408, 413, 419, 444, 462, 804, 810, 818, 827, 829, 830, 831, 832, 835, 853, 970, 971, 1015, 1018, 1026, 1037, 1040, 1043], "exemplar": [408, 441, 455], "exemplari": [156, 157], "exemplifi": 390, "exercis": [2, 106, 143, 153, 173, 175, 222, 225, 305, 306, 334, 345, 348, 349, 365, 373, 376, 503, 504, 506, 507, 656, 657, 662, 804, 809, 850, 913, 1026, 1038], "exhaust": [2, 271, 319, 320, 321, 322, 323, 324, 325, 326, 327, 363, 373, 381, 389, 403, 408, 415, 804, 807, 808, 818, 898, 899, 901, 1001, 1031], "exhibit": [172, 217, 344, 393, 412, 413, 415, 418, 1013], "exist": [48, 49, 53, 56, 58, 87, 230, 270, 307, 310, 344, 370, 375, 378, 379, 382, 388, 390, 391, 394, 402, 408, 412, 413, 415, 416, 423, 428, 433, 438, 444, 445, 448, 450, 452, 454, 466, 469, 483, 484, 485, 493, 501, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 588, 592, 593, 600, 606, 614, 615, 636, 637, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 702, 704, 706, 766, 769, 773, 803, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 881, 882, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 988, 997, 1002, 1004, 1005, 1009, 1011, 1012, 1015, 1029, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "exist_ok": 48, "exit": [105, 290, 380, 384, 469], "exp": [2, 81, 88, 100, 130, 138, 147, 172, 198, 222, 295, 300, 303, 320, 321, 325, 344, 406, 408, 409, 414, 420, 453, 466, 523, 535, 538, 619, 620, 626, 645, 763, 770, 780, 865, 866, 884, 999, 1001, 1003, 1007, 1008, 1009, 1018, 1019, 1020], "exp10": 187, "exp_dirichlet_component_": 538, "exp_dist_embed": 300, "expand": [44, 83, 99, 241, 316, 320, 359, 368, 378, 415, 445, 451, 501, 559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919, 1005, 1036, 1043, 1044, 1051], "expand_frame_repr": 230, "expans": [44, 182, 321, 451, 883, 1044], "expect": [44, 45, 50, 53, 62, 73, 80, 87, 117, 119, 126, 135, 138, 140, 142, 144, 147, 150, 166, 167, 171, 177, 184, 185, 189, 199, 204, 212, 213, 214, 216, 220, 230, 243, 246, 249, 250, 256, 257, 260, 261, 264, 277, 290, 315, 347, 351, 352, 359, 363, 364, 376, 378, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 399, 404, 406, 408, 409, 410, 412, 415, 416, 417, 431, 465, 466, 468, 469, 470, 483, 484, 485, 498, 525, 534, 538, 540, 543, 554, 556, 557, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 570, 572, 574, 577, 591, 592, 594, 598, 600, 609, 615, 631, 636, 637, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 678, 679, 682, 683, 699, 708, 709, 720, 739, 792, 798, 804, 818, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 858, 859, 860, 861, 866, 869, 874, 881, 882, 885, 888, 889, 898, 899, 906, 908, 909, 910, 911, 912, 913, 914, 917, 919, 929, 945, 946, 967, 994, 1001, 1004, 1005, 1007, 1011, 1015, 1019, 1020, 1021, 1026, 1028, 1031, 1035, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "expected_anomaly_fract": 249, "expected_failed_check": [945, 946, 947], "expected_i": 147, "expected_n_anomali": 249, "expected_ri": 709, "expected_to_fail": [577, 945], "expected_to_fail_reason": [577, 945], "expectedli": 351, "expens": [0, 90, 141, 155, 171, 186, 188, 240, 267, 279, 340, 344, 351, 352, 353, 365, 382, 390, 408, 409, 412, 415, 416, 450, 469, 510, 804, 807, 808, 818, 831, 906, 908, 1002, 1004, 1015, 1020, 1029, 1039], "experi": [31, 135, 174, 178, 186, 187, 188, 189, 192, 214, 264, 287, 315, 347, 352, 353, 364, 370, 376, 378, 379, 391, 412, 517, 732, 789, 1001, 1006, 1017, 1023, 1024, 1029], "experienc": 376, "experiment": [2, 147, 182, 183, 212, 281, 282, 321, 322, 327, 378, 379, 386, 388, 390, 399, 412, 498, 551, 582, 583, 631, 700, 807, 808, 974, 994, 995, 1001, 1004, 1005, 1024, 1025, 1031, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1053], "expert_r": 409, "expertis": [375, 376, 388], "expit": [146, 203, 415, 563, 1001, 1042], "explain": [2, 44, 45, 52, 65, 90, 106, 116, 117, 129, 147, 171, 176, 177, 188, 189, 212, 230, 239, 246, 261, 280, 316, 327, 351, 352, 364, 376, 378, 388, 402, 404, 411, 413, 418, 495, 523, 526, 536, 543, 546, 551, 629, 652, 660, 673, 684, 725, 726, 727, 728, 732, 789, 1001, 1008, 1021, 1023, 1046, 1048, 1049], "explained_vari": [352, 1005], "explained_variance_": [117, 536, 543, 546, 1042], "explained_variance_ratio": 1041, "explained_variance_ratio_": [106, 129, 327, 352, 413, 536, 543, 546, 551, 1038, 1041], "explained_variance_scor": [2, 1005, 1038, 1042, 1049], "explan": [65, 117, 246, 363, 375, 376, 406, 416, 994, 1004, 1006, 1021, 1024, 1029, 1038], "explic": 1017, "explicit": [44, 150, 184, 188, 192, 238, 246, 284, 344, 363, 364, 365, 375, 377, 388, 390, 391, 399, 409, 416, 422, 473, 501, 503, 504, 543, 553, 554, 635, 642, 643, 645, 680, 804, 805, 812, 852, 860, 868, 908, 913, 968, 997, 999, 1001, 1005, 1015, 1021, 1024, 1026, 1035, 1039, 1044, 1045, 1048, 1052], "explicitli": [44, 81, 142, 171, 178, 182, 183, 213, 242, 246, 326, 344, 353, 359, 364, 370, 372, 376, 377, 378, 380, 388, 390, 399, 402, 404, 412, 416, 418, 537, 551, 552, 582, 583, 600, 631, 652, 662, 663, 673, 684, 713, 731, 786, 792, 793, 807, 808, 839, 842, 848, 849, 874, 898, 899, 993, 994, 995, 997, 999, 1001, 1002, 1005, 1007, 1008, 1015, 1029, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1053], "explod": 316, "exploit": [63, 289, 402, 1006, 1025, 1038], "exploit_incremental_learn": [810, 832], "explor": [53, 73, 138, 139, 150, 190, 236, 237, 249, 264, 271, 272, 278, 279, 287, 317, 321, 340, 352, 359, 370, 373, 375, 382, 408, 415, 473, 804, 807, 815, 889, 994, 1001, 1002, 1004, 1010, 1012, 1015, 1029, 1041], "exploratori": [187, 1029], "explos": [804, 818, 829, 830, 831], "expm1": 108, "expon": [418, 620, 680, 681, 682, 816, 865, 866, 883, 994], "exponenti": [2, 81, 108, 171, 176, 295, 300, 414, 415, 418, 450, 538, 556, 561, 618, 623, 626, 643, 647, 762, 763, 848, 849, 853, 865, 866, 883, 997, 1001, 1005, 1020, 1042, 1048], "export": [2, 374, 377, 378, 394, 920, 921, 1021, 1024, 1044], "export_graphviz": [2, 1021, 1040, 1042, 1048, 1050, 1051, 1053], "export_text": [2, 1021, 1044, 1051], "expos": [2, 169, 246, 283, 287, 322, 324, 364, 369, 373, 378, 390, 399, 406, 409, 415, 417, 418, 438, 465, 555, 556, 563, 564, 569, 570, 571, 572, 596, 597, 605, 615, 803, 804, 807, 808, 818, 826, 837, 838, 839, 840, 841, 842, 923, 1001, 1005, 1007, 1024, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "exposur": [212, 230, 1001], "express": [44, 47, 52, 53, 135, 141, 171, 176, 187, 270, 271, 316, 321, 337, 344, 353, 370, 371, 376, 377, 382, 388, 402, 408, 413, 414, 415, 416, 451, 457, 458, 591, 592, 594, 720, 792, 804, 810, 818, 827, 829, 830, 831, 832, 835, 855, 997, 1001, 1005, 1009, 1015, 1016, 1021, 1043], "expsinesquar": [2, 171, 176, 180, 418], "exstrac": 1005, "ext": 650, "extend": [32, 53, 89, 90, 101, 133, 213, 259, 264, 277, 340, 373, 374, 388, 390, 406, 408, 413, 415, 500, 635, 662, 724, 825, 837, 840, 841, 873, 875, 892, 908, 909, 912, 923, 997, 1005, 1006, 1020, 1025, 1027, 1031, 1040, 1041, 1042, 1043, 1045, 1050], "extens": [277, 279, 295, 363, 364, 370, 371, 374, 377, 379, 380, 384, 385, 388, 402, 408, 413, 498, 505, 536, 745, 945, 954, 1002, 1004, 1005, 1023, 1024, 1029, 1035, 1041, 1048, 1049, 1051, 1052], "extent": [2, 49, 92, 173, 174, 175, 243, 348, 441, 537, 700, 801, 1005], "extercond": 144, "extern": [160, 171, 264, 365, 369, 373, 376, 378, 381, 388, 390, 405, 408, 416, 417, 418, 596, 614, 615, 721, 741, 799, 1001, 1004, 1005, 1008, 1021, 1025, 1031, 1043, 1047], "exterqu": [144, 155], "extmath": [2, 258, 351, 385, 454, 949, 950, 951, 952, 953, 954, 1035, 1036, 1041, 1042, 1045, 1049, 1050, 1052], "extr": 48, "extra": [2, 81, 143, 150, 248, 290, 326, 353, 374, 375, 377, 390, 402, 415, 416, 439, 444, 448, 460, 465, 534, 559, 560, 568, 593, 594, 704, 705, 706, 829, 852, 918, 919, 941, 1004, 1005, 1008, 1035, 1038, 1040, 1041, 1043, 1048, 1050], "extra_cflag": 382, "extra_tre": [918, 919], "extract": [2, 17, 43, 44, 46, 48, 51, 52, 56, 84, 89, 102, 103, 104, 105, 116, 121, 141, 165, 184, 227, 262, 269, 270, 275, 278, 308, 333, 343, 351, 353, 359, 368, 371, 373, 382, 385, 388, 408, 409, 412, 413, 451, 453, 456, 457, 463, 465, 489, 490, 495, 496, 505, 506, 533, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 586, 587, 591, 592, 594, 596, 597, 600, 602, 635, 722, 792, 804, 818, 845, 867, 868, 913, 925, 952, 961, 968, 994, 1002, 1006, 1010, 1015, 1019, 1024, 1026, 1029, 1031, 1035, 1036, 1044, 1047], "extract_dbscan": 408, "extract_patches_2d": [2, 84, 124, 416, 590, 1043], "extract_scor": 273, "extractal": 48, "extractor": [212, 308, 365, 371, 390, 416, 505, 584, 585, 591, 592, 594, 994, 1035], "extran": 376, "extrapol": [44, 171, 194, 213, 242, 273, 887, 1005, 1015, 1021, 1048, 1050], "extratre": [143, 153, 363, 1038], "extratreeclassifi": [2, 559, 568, 919, 995, 1006, 1021, 1039, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "extratreeregressor": [2, 560, 565, 568, 918, 995, 1006, 1011, 1021, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "extratreesclassifi": [2, 143, 153, 415, 417, 560, 566, 568, 918, 919, 995, 1006, 1038, 1039, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "extratreesregressor": [2, 248, 415, 559, 567, 568, 918, 919, 995, 1006, 1038, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "extrem": [2, 147, 212, 214, 248, 249, 283, 310, 317, 332, 352, 376, 379, 407, 408, 413, 559, 560, 566, 567, 568, 636, 637, 683, 728, 756, 918, 919, 920, 922, 1005, 1007], "extrema": 999, "exxon": 52, "ey": [112, 113, 257, 261, 340, 371, 536, 543, 552], "eyast": 1049, "ezebunandu": 1047, "ezeiza": 768, "ezri": 1048, "f": [0, 2, 44, 45, 47, 51, 52, 53, 55, 56, 58, 59, 64, 67, 69, 73, 79, 82, 83, 86, 87, 89, 92, 98, 101, 104, 108, 117, 124, 135, 138, 141, 142, 144, 145, 147, 150, 155, 156, 161, 163, 165, 168, 169, 171, 177, 178, 180, 184, 186, 187, 188, 189, 190, 192, 198, 199, 202, 204, 205, 209, 212, 213, 214, 216, 222, 226, 233, 243, 245, 246, 249, 253, 260, 264, 268, 270, 271, 272, 273, 276, 277, 279, 280, 282, 283, 284, 290, 293, 305, 306, 307, 312, 315, 316, 319, 321, 323, 325, 326, 327, 329, 330, 339, 344, 347, 351, 352, 353, 359, 371, 376, 377, 378, 382, 384, 388, 402, 406, 409, 413, 415, 416, 417, 418, 488, 510, 511, 533, 534, 539, 540, 568, 584, 585, 586, 590, 595, 598, 599, 601, 602, 603, 607, 608, 609, 610, 611, 612, 621, 631, 636, 639, 662, 700, 717, 727, 730, 733, 734, 760, 787, 788, 791, 792, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 832, 833, 835, 865, 866, 870, 879, 882, 883, 887, 888, 889, 915, 923, 934, 935, 988, 997, 1000, 1009, 1012, 1013, 1015, 1019, 1026, 1037, 1043, 1044, 1045, 1047, 1049], "f0_c0": 889, "f0_c1": 889, "f0_c2": 889, "f0e442": 255, "f1": [2, 63, 333, 412, 717, 733, 734, 742, 787, 826, 1005, 1006, 1039, 1051], "f1_c0": 889, "f1_c1": 889, "f1_c2": 889, "f1_macro": [412, 1005, 1039], "f1_micro": [1005, 1039], "f1_sampl": 1005, "f1_score": [2, 63, 277, 333, 371, 407, 742, 1005, 1035, 1037, 1038, 1039, 1040, 1044, 1045, 1051, 1052], "f1_weight": [1005, 1039], "f2": [380, 1006], "f2001": 1005, "f2006": 1005, "f3": 1006, "f4": 500, "f401": [101, 127, 188, 232, 234], "f781bf": [76, 80, 96, 97], "f7bd01": 76, "f_": [415, 639, 734, 1005], "f_0": 152, "f_1": [152, 1005], "f_beta": 1005, "f_classif": [2, 165, 166, 343, 417, 595, 598, 599, 601, 602, 603, 607, 609, 612], "f_i": 406, "f_idx": 152, "f_j": [406, 1013], "f_m": 415, "f_n": 277, "f_p": 277, "f_regress": [2, 88, 164, 417, 595, 598, 599, 601, 602, 603, 607, 608, 612, 1038, 1042, 1049, 1052], "f_score": 277, "f_statist": [608, 609], "f_test": 164, "fa": [2, 120, 130, 131, 184, 382, 413, 474, 477, 534, 543, 804, 830, 1026], "fa_estim": 121, "fa_scor": 128, "fab": [1029, 1045, 1046], "fabia": [405, 723], "fabian": [0, 398, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1052], "fabiana": 1046, "fabio": 1041, "fabisch": [0, 398, 1037, 1038, 1039, 1041], "fabrizio": 1050, "face": [2, 43, 45, 55, 72, 85, 87, 120, 124, 126, 128, 130, 131, 184, 192, 238, 243, 369, 376, 380, 408, 413, 415, 420, 450, 473, 495, 496, 497, 523, 534, 535, 539, 541, 542, 543, 545, 560, 587, 661, 677, 701, 717, 818, 834, 851, 888, 913, 937, 1008, 1021, 1022, 1026, 1031, 1035, 1043], "face_id": 248, "facecolor": [52, 64, 71, 94, 121, 137, 162, 179, 232, 247, 270, 297, 312, 338, 341, 344, 345, 346], "faces_cent": 121, "facial": 371, "facil": [1004, 1024], "facilit": [363, 390, 402, 1024, 1025, 1041, 1044], "fact": [44, 51, 58, 63, 113, 117, 135, 145, 147, 189, 243, 253, 287, 289, 370, 383, 388, 390, 404, 411, 413, 414, 415, 416, 653, 672, 674, 708, 999, 1001, 1008, 1015, 1019, 1020, 1025, 1029, 1049], "facto": 1045, "factor": [2, 11, 43, 46, 49, 64, 68, 80, 81, 87, 89, 96, 116, 120, 126, 130, 153, 184, 187, 226, 237, 239, 249, 264, 281, 282, 290, 291, 305, 306, 310, 312, 321, 323, 339, 363, 364, 372, 376, 382, 385, 390, 405, 408, 415, 416, 418, 441, 443, 455, 470, 472, 473, 474, 475, 477, 479, 489, 506, 516, 517, 529, 534, 537, 538, 540, 542, 543, 546, 547, 548, 549, 551, 552, 563, 564, 565, 591, 594, 600, 617, 653, 654, 655, 658, 659, 660, 686, 687, 696, 723, 787, 804, 807, 808, 830, 854, 888, 902, 904, 912, 951, 952, 994, 1001, 1002, 1008, 1015, 1018, 1022, 1026, 1030, 1031, 1035, 1036, 1038, 1039, 1041, 1049, 1051], "factoranalysi": [2, 121, 128, 131, 413, 546, 1036, 1038, 1047, 1049], "factori": [2, 95, 264, 270, 416, 927, 929, 974, 1005], "facundo": [1046, 1049], "fagan": 1044, "fail": [2, 44, 88, 100, 122, 128, 179, 194, 198, 216, 246, 270, 319, 364, 374, 376, 379, 384, 391, 394, 411, 412, 441, 473, 475, 577, 680, 681, 682, 715, 865, 866, 924, 926, 933, 945, 946, 947, 994, 1002, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "failur": [184, 185, 187, 208, 376, 384, 394, 577, 661, 789, 834, 934, 935, 945, 1026, 1028, 1029, 1048, 1049, 1053], "fair": [52, 65, 415, 694, 698, 837, 1006, 1029], "fairer": 359, "fairli": [114, 146, 234, 306, 384, 408, 561, 562, 703, 1006], "faith": 345, "fake": 416, "falak": 1044, "fall": [26, 31, 53, 147, 150, 178, 269, 270, 376, 408, 416, 433, 447, 448, 510, 511, 731, 732, 798, 885, 897, 957, 1004, 1005, 1015, 1044], "fallback": [391, 394, 836, 837, 1005], "fals": [2, 44, 45, 47, 48, 50, 51, 54, 55, 59, 60, 62, 64, 65, 69, 70, 71, 75, 78, 80, 81, 82, 89, 98, 101, 103, 104, 105, 111, 113, 119, 125, 129, 130, 135, 141, 142, 144, 147, 148, 150, 158, 160, 171, 176, 177, 178, 179, 187, 188, 189, 190, 194, 195, 198, 199, 209, 212, 213, 217, 218, 220, 228, 230, 232, 235, 246, 247, 249, 253, 255, 264, 267, 270, 273, 274, 277, 278, 279, 280, 281, 282, 283, 285, 290, 294, 300, 303, 306, 307, 310, 311, 316, 317, 319, 321, 322, 323, 324, 326, 327, 331, 340, 342, 344, 347, 348, 351, 352, 370, 376, 377, 378, 381, 390, 399, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 421, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 510, 511, 512, 514, 515, 517, 525, 526, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 698, 699, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 722, 723, 730, 731, 732, 733, 734, 735, 742, 747, 758, 760, 765, 767, 771, 773, 778, 782, 786, 787, 788, 789, 791, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 818, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 932, 933, 934, 935, 945, 953, 965, 966, 967, 969, 970, 974, 975, 976, 978, 985, 990, 991, 993, 994, 995, 1001, 1005, 1008, 1015, 1019, 1020, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "false_": 640, "false_discovery_r": 598, "famili": [2, 46, 264, 363, 365, 390, 408, 411, 413, 416, 417, 595, 598, 599, 601, 602, 603, 609, 865, 866, 884, 896, 1001, 1015, 1019, 1039, 1049], "familiar": [376, 414, 1043], "famou": [371, 373, 415, 1020], "famous": 1007, "fan": [0, 364, 391, 397, 1020, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fanci": 416, "fancybox": 346, "fanelli": [1050, 1051], "fang": [662, 1042, 1043], "fanni": 1045, "fantasi": 1010, "fantast": 1029, "faouzi": [1045, 1046], "faq": [0, 384, 412, 696, 1002, 1015], "far": [63, 94, 114, 144, 172, 178, 187, 188, 212, 230, 264, 340, 344, 351, 353, 376, 385, 418, 724, 888, 979, 1010, 1011, 1020, 1029], "farach": 997, "farahsae": 1043, "farawai": 1008, "fare": [104, 189, 253, 323, 1039, 1040], "fargo": 52, "farhan": 1051, "farlei": [0, 398, 1035], "farouk": [1043, 1044], "farther": 729, "farthest": 408, "fashion": [2, 47, 140, 145, 220, 279, 364, 390, 405, 406, 408, 413, 415, 555, 559, 560, 561, 562, 566, 567, 568, 605, 631, 834, 857, 872, 875, 881, 892, 916, 917, 918, 919, 975, 995, 1001, 1005, 1015, 1021, 1044], "fast": [2, 53, 65, 96, 192, 198, 202, 227, 228, 244, 245, 311, 353, 363, 371, 376, 385, 402, 408, 410, 412, 413, 415, 416, 420, 447, 448, 470, 475, 510, 534, 535, 537, 540, 542, 546, 549, 566, 567, 568, 591, 592, 594, 636, 637, 644, 662, 663, 676, 678, 691, 703, 804, 818, 829, 830, 840, 841, 848, 849, 853, 864, 952, 973, 997, 1001, 1004, 1007, 1008, 1010, 1011, 1021, 1024, 1029, 1035, 1036, 1041, 1042, 1045, 1046], "fast_dict": 1045, "fast_dot": 1042, "fast_logdet": [2, 385], "fast_svd": 1035, "faster": [38, 47, 58, 75, 98, 106, 121, 140, 141, 144, 145, 147, 150, 169, 188, 192, 199, 212, 214, 227, 228, 230, 245, 249, 264, 290, 292, 307, 320, 322, 323, 327, 351, 352, 353, 363, 370, 376, 384, 385, 390, 402, 408, 413, 417, 418, 420, 444, 448, 450, 452, 453, 454, 463, 510, 533, 534, 535, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 561, 562, 563, 564, 565, 647, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 676, 678, 688, 691, 695, 699, 730, 760, 782, 783, 784, 848, 849, 850, 853, 858, 865, 866, 883, 885, 887, 897, 901, 952, 973, 994, 998, 1001, 1006, 1008, 1009, 1012, 1017, 1019, 1020, 1021, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fastest": [91, 268, 353, 448, 674, 676, 678, 691, 951, 952, 1004], "fastest_top_recall_high_precision_index": 268, "fastica": [2, 120, 184, 211, 413, 534, 537, 543, 1026, 1035, 1037, 1043, 1049, 1050, 1053], "fastkmean": 450, "fastmcd": [410, 470, 475], "fastnc": 864, "fat": [523, 526], "fatima": [1049, 1052], "fato": 1048, "fauchereau": 1048, "fault": [384, 1043, 1045, 1047], "faulti": [215, 1035], "faust": 1053, "favor": [45, 114, 141, 255, 261, 388, 410, 415, 677, 679, 734, 812, 814, 867, 994, 1013, 1037, 1039, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "favorit": [376, 388, 1029], "favour": [796, 1002, 1004, 1044], "fawcett": [792, 793, 1005], "fazlul": 1037, "fbach": [533, 539], "fbeta_scor": [2, 733, 746, 787, 1005, 1037, 1038, 1039, 1040, 1045, 1051], "fc": [49, 295, 371], "fc2009": 1005, "fcd116": 119, "fcharra": 1050, "fcluster": 190, "fcostin": 1035, "fd": 48, "fdr": 595, "feasibl": [376, 877, 878, 888], "feast": 409, "feat": [48, 50, 380, 416], "feat0": [241, 320], "feat1": [241, 320, 416], "feat2": [241, 320, 416], "feat3": [241, 320, 416], "feat_idx": 631, "featur": [2, 8, 16, 17, 18, 24, 26, 33, 43, 45, 46, 47, 48, 50, 51, 55, 58, 59, 63, 64, 65, 67, 68, 69, 70, 72, 78, 84, 92, 94, 97, 102, 103, 104, 105, 106, 112, 113, 117, 119, 121, 123, 125, 128, 129, 131, 134, 136, 139, 141, 143, 147, 149, 154, 155, 156, 158, 160, 161, 164, 166, 171, 172, 173, 176, 177, 179, 182, 183, 185, 186, 187, 188, 193, 195, 197, 198, 199, 202, 203, 205, 209, 211, 212, 213, 214, 216, 217, 220, 221, 227, 228, 229, 233, 238, 241, 243, 248, 249, 252, 253, 262, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 289, 293, 294, 295, 298, 299, 301, 304, 305, 307, 309, 310, 313, 317, 318, 320, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 340, 344, 347, 350, 353, 356, 357, 358, 359, 368, 369, 370, 371, 372, 373, 374, 378, 379, 381, 383, 384, 385, 388, 389, 390, 391, 393, 394, 396, 402, 406, 408, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 424, 429, 431, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 582, 583, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 617, 618, 619, 622, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 689, 690, 691, 692, 693, 694, 695, 696, 701, 705, 706, 707, 717, 725, 726, 727, 728, 745, 746, 749, 750, 752, 762, 763, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 785, 789, 792, 794, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 934, 935, 949, 969, 979, 980, 981, 985, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "feature_0": 921, "feature_1": [635, 921], "feature_2": 635, "feature_all_": 845, "feature_count_": [843, 845, 847], "feature_extract": [2, 48, 55, 58, 81, 82, 84, 85, 88, 100, 103, 124, 184, 271, 333, 350, 351, 352, 353, 365, 371, 408, 409, 416, 465, 546, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 881, 1003, 1035, 1036, 1037, 1038, 1041, 1042], "feature_import": 148, "feature_importances_": [142, 148, 169, 189, 190, 390, 415, 417, 555, 556, 559, 560, 561, 562, 566, 567, 568, 596, 597, 600, 916, 917, 918, 919, 1037, 1040, 1044], "feature_index": 416, "feature_indices_": 1043, "feature_log_prob_": [843, 844, 845, 847], "feature_map": [244, 310], "feature_map__n_compon": 244, "feature_map_fouri": 244, "feature_map_nystroem": [244, 643], "feature_nam": [55, 58, 131, 142, 148, 152, 169, 187, 189, 221, 250, 284, 293, 310, 319, 320, 321, 326, 337, 351, 356, 369, 371, 381, 409, 465, 491, 492, 494, 498, 502, 503, 504, 506, 507, 512, 585, 635, 636, 637, 889, 920, 921, 922, 1013, 1021, 1051], "feature_name_combin": [881, 1051], "feature_names_": 584, "feature_names_in": 1049, "feature_names_in_": [253, 317, 322, 378, 390, 429, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 631, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 993, 1048, 1049, 1050, 1051, 1053], "feature_names_out": [424, 429, 443, 444, 446, 448, 450, 465, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 568, 569, 570, 571, 572, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 1049, 1052], "feature_rang": [308, 878, 894, 1015, 1037, 1047], "feature_select": [2, 88, 104, 105, 107, 163, 164, 165, 166, 167, 168, 169, 184, 253, 321, 323, 343, 359, 390, 399, 409, 417, 584, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 994, 1026, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "feature_selector": 169, "feature_to_plot": 207, "feature_union": 1051, "featureagglomer": [2, 85, 88, 441, 442, 1022, 1038, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "featureforg": 1029, "featurehash": [2, 48, 58, 103, 184, 350, 351, 352, 365, 371, 416, 489, 584, 591, 592, 593, 594, 881, 1026, 1036, 1041, 1042, 1043, 1049, 1050], "featureheash": 353, "features_": [633, 995], "features__pca__n_compon": 107, "features__univ_select__k": 107, "features_idx": 310, "features_info": 188, "features_nam": [186, 1042], "features_samples_ratio": 70, "featureselector": 604, "featuresshould": 396, "featuretool": 1024, "featureunion": [2, 7, 44, 107, 368, 390, 399, 465, 633, 870, 995, 1025, 1029, 1031, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "featurewis": [2, 884], "feb": [74, 441, 455], "februari": [0, 410, 474, 1005, 1036, 1040, 1052], "fed": [48, 155, 359, 371, 416, 994, 1010, 1015, 1046], "feda": [1043, 1044], "feder": 1024, "federico": [1037, 1038, 1043, 1044, 1049], "federicopisanu": 1045, "feed": [48, 117, 213, 246, 353, 371, 374, 381, 388, 408, 416, 746, 881, 1006], "feedback": [267, 375, 376, 377, 391, 1024, 1028, 1043], "feedforward": [865, 866], "feedstock": 380, "feel": [65, 183, 310, 375, 376, 384, 408, 447, 1021], "feel_temp": 188, "feghali": 1052, "fei": [565, 1011], "feld": [1039, 1051], "feldbauer": [1043, 1044, 1045, 1046, 1049], "feldman": [1037, 1042, 1043, 1044, 1045], "felip": [1048, 1049, 1050, 1051], "felix": [1037, 1042, 1043, 1045, 1047, 1048, 1049], "femal": [104, 381, 881, 882, 1015], "fenc": 381, "feng": [1045, 1047, 1048, 1049], "fenil": 1048, "fenx": 1043, "ferdman": 1052, "ferenc": 1029, "fernand": [1043, 1049, 1050], "fernandez": 1044, "fernando": [1040, 1047], "fern\u00e1ndez": 1049, "ferrando": 1045, "ferrari": 1043, "ferreira": [1043, 1048, 1049], "ferri": [417, 1005], "ferria": 1042, "ferrin": 1049, "ferriss": 1042, "ferr\u00e9": 1049, "ferr\u00edn": 1046, "fetal": 249, "fetch": [2, 52, 56, 155, 187, 230, 264, 284, 369, 370, 371, 376, 380, 381, 384, 413, 493, 498, 557, 558, 559, 560, 565, 566, 567, 568, 591, 592, 594, 1043, 1051], "fetch_": 1042, "fetch_20newsgroup": [2, 55, 58, 103, 271, 333, 351, 352, 353, 371, 490, 1040, 1045, 1053], "fetch_20newsgroups_vector": [2, 47, 227, 243, 371, 1035, 1045, 1047, 1052, 1053], "fetch_california_h": [2, 141, 145, 182, 183, 310, 321, 371, 389, 409, 1044, 1046, 1053], "fetch_covtyp": [2, 192, 249, 321, 371, 1044, 1047, 1049, 1053], "fetch_fil": [2, 53], "fetch_kddcup99": [2, 249, 371, 1042, 1043, 1044, 1047, 1048, 1053], "fetch_lfw_pair": [2, 371, 1040, 1050, 1053], "fetch_lfw_peopl": [2, 46, 371, 1050, 1053], "fetch_mldata": 1043, "fetch_olivetti_fac": [2, 84, 121, 248, 371, 1043, 1044, 1045, 1053], "fetch_openml": [2, 44, 45, 53, 104, 108, 144, 150, 155, 176, 187, 188, 189, 212, 220, 228, 230, 240, 249, 253, 264, 284, 287, 289, 290, 307, 316, 319, 323, 326, 370, 380, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "fetch_rcv1": [2, 371, 1040, 1044, 1053], "fetch_species_distribut": [2, 51, 303, 1044, 1053], "fetcher": [369, 1040, 1042, 1051], "feth": 1035, "feurer": [1038, 1043], "fevott": [413, 540, 542, 549], "few": [0, 47, 55, 58, 75, 81, 86, 125, 144, 150, 174, 177, 178, 202, 210, 212, 214, 230, 245, 246, 255, 272, 273, 277, 302, 307, 310, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 347, 353, 363, 371, 372, 373, 376, 378, 389, 391, 399, 402, 405, 406, 408, 412, 413, 415, 417, 418, 438, 450, 563, 564, 659, 696, 699, 901, 952, 1001, 1002, 1004, 1005, 1008, 1009, 1018, 1020, 1021, 1029, 1041, 1051, 1053], "fewer": [44, 54, 64, 89, 135, 143, 145, 212, 363, 377, 408, 417, 418, 449, 462, 543, 597, 700, 838, 956, 1001, 1006, 1008, 1040, 1041, 1042], "fewest": [269, 631], "ff": 384, "ff0000": [68, 298, 305], "ff3333": 119, "ff7216": 119, "ff7f00": [80, 96, 239], "ff9c34": [93, 98], "ffaaaa": 298, "ffc107": 314, "fft": 644, "fhaselbeck": 1047, "fhoang7": 1044, "fhr": 249, "fi": 879, "fibins": [1043, 1044], "fidel": 54, "fidor": 1051, "fiedler": 1041, "fiegel": [1047, 1048, 1050], "field": [230, 373, 378, 405, 408, 409, 416, 465, 500, 503, 621, 1001, 1003, 1012, 1020, 1028, 1036], "fifth": [245, 998], "fig": [44, 45, 47, 48, 49, 50, 53, 55, 63, 65, 67, 71, 78, 79, 87, 89, 91, 94, 98, 100, 106, 110, 112, 117, 121, 126, 127, 131, 135, 141, 142, 144, 145, 147, 148, 150, 152, 153, 155, 157, 174, 180, 182, 188, 190, 192, 195, 200, 204, 205, 207, 208, 209, 210, 212, 213, 216, 220, 225, 227, 230, 232, 233, 234, 235, 236, 237, 240, 242, 249, 250, 260, 264, 265, 266, 267, 270, 271, 272, 273, 276, 279, 280, 281, 283, 284, 289, 290, 292, 294, 295, 303, 306, 307, 310, 311, 312, 314, 315, 316, 319, 323, 324, 337, 344, 346, 347, 348, 349, 351, 352, 353, 355, 372, 383], "fig1": 101, "fig2": 101, "figaspect": 314, "fight": [75, 216, 1029], "fignum": 345, "figsiz": [44, 45, 46, 50, 52, 53, 54, 55, 63, 64, 65, 67, 68, 69, 71, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 96, 98, 99, 100, 106, 108, 112, 114, 116, 117, 119, 121, 124, 125, 126, 127, 130, 131, 135, 137, 138, 144, 145, 146, 147, 148, 150, 153, 155, 156, 164, 173, 175, 179, 180, 182, 183, 187, 188, 190, 192, 194, 195, 198, 203, 205, 207, 209, 210, 211, 212, 213, 214, 216, 218, 220, 223, 226, 228, 230, 232, 233, 234, 236, 237, 239, 240, 242, 244, 247, 248, 249, 250, 255, 257, 258, 261, 264, 265, 266, 267, 272, 273, 274, 277, 279, 280, 283, 284, 285, 289, 290, 292, 293, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 323, 324, 329, 331, 338, 340, 344, 345, 346, 347, 348, 349, 351, 352, 353, 372, 922], "figur": [46, 47, 48, 50, 52, 54, 62, 63, 64, 65, 68, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 90, 92, 93, 95, 96, 97, 98, 99, 101, 110, 114, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 137, 138, 146, 147, 148, 149, 150, 153, 154, 158, 160, 162, 164, 165, 168, 172, 173, 174, 175, 178, 179, 183, 187, 188, 189, 190, 194, 198, 201, 203, 206, 207, 211, 213, 214, 218, 223, 227, 228, 229, 234, 235, 236, 239, 243, 244, 245, 247, 248, 250, 255, 257, 258, 261, 263, 269, 274, 275, 285, 295, 299, 300, 303, 305, 308, 310, 312, 313, 317, 319, 321, 329, 330, 331, 338, 340, 345, 356, 357, 376, 408, 414, 415, 416, 418, 439, 635, 636, 701, 702, 704, 705, 706, 810, 827, 922, 994, 998, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1019, 1020, 1021, 1048], "figure_": [69, 188, 250, 319, 321, 383, 439, 635, 636, 701, 702, 704, 705, 706, 810, 827], "figure_titl": 144, "filali": 1043, "file": [2, 48, 52, 53, 69, 363, 364, 365, 370, 371, 373, 374, 379, 380, 381, 382, 388, 402, 409, 413, 488, 493, 495, 496, 498, 505, 510, 511, 536, 582, 583, 591, 592, 594, 920, 1008, 1021, 1026, 1028, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "file_1": 505, "file_2": 505, "file_42": 505, "file_43": 505, "file_44": 505, "file_id": 370, "file_path": 493, "filenam": [2, 48, 56, 333, 371, 376, 382, 402, 489, 493, 502, 505, 506, 509, 591, 592, 594, 1035, 1040, 1043, 1044], "filesystem": [384, 394, 1048], "filho": 406, "filip": [1052, 1053], "filipj8": [1042, 1043], "fill": [71, 143, 160, 189, 265, 295, 356, 390, 409, 413, 517, 529, 540, 542, 549, 590, 634, 920, 922, 995, 1008, 1021], "fill_between": [53, 147, 150, 160, 171, 176, 178, 180, 194, 195, 230, 270, 272, 273, 274, 280, 810, 827], "fill_between_": [810, 827], "fill_between_kw": [810, 827], "fill_betweenx": 94, "fill_diagon": [190, 235], "fill_legend": 230, "fill_valu": [183, 241, 251, 320, 422, 425, 431, 432, 631, 634, 1015, 1043, 1051, 1052], "fillna": [230, 249], "filo": [1035, 1038], "filter": [2, 18, 48, 55, 81, 82, 106, 218, 230, 268, 270, 292, 351, 364, 371, 382, 385, 408, 416, 449, 489, 490, 505, 591, 594, 598, 599, 600, 601, 602, 603, 778, 843, 943, 969, 1007, 1008, 1045], "filter_param": 778, "filtered_cv_result": 268, "filterwarn": [80, 96, 227, 306, 307, 376, 1015], "final": [2, 44, 53, 64, 65, 71, 76, 78, 89, 103, 104, 112, 114, 117, 126, 135, 136, 138, 140, 144, 145, 148, 155, 158, 166, 176, 183, 186, 188, 190, 192, 194, 198, 200, 202, 209, 212, 214, 229, 230, 233, 239, 253, 259, 264, 268, 276, 287, 290, 316, 317, 319, 320, 340, 344, 363, 365, 371, 374, 376, 377, 378, 380, 389, 390, 405, 406, 408, 409, 412, 415, 416, 417, 438, 443, 448, 449, 453, 460, 463, 465, 538, 557, 558, 569, 570, 572, 597, 631, 651, 657, 663, 675, 683, 694, 698, 723, 804, 836, 837, 868, 869, 905, 908, 994, 995, 997, 1001, 1002, 1005, 1008, 1011, 1012, 1015, 1018, 1029, 1040, 1043, 1044, 1045, 1046, 1048], "final_estim": [155, 319, 415, 569, 570], "final_estimator_": [569, 570], "final_lay": 415, "final_layer_gbr": 415, "final_layer_rfr": 415, "final_step": 78, "financ": [264, 1006], "financi": [0, 52, 408, 415, 1001], "find": [2, 44, 45, 46, 52, 56, 65, 76, 81, 82, 83, 86, 87, 89, 91, 99, 106, 112, 113, 121, 123, 125, 126, 131, 145, 155, 171, 177, 188, 198, 200, 202, 214, 220, 232, 234, 236, 237, 242, 249, 260, 264, 269, 270, 271, 281, 283, 293, 298, 299, 300, 315, 319, 325, 327, 342, 343, 344, 347, 351, 352, 355, 364, 373, 374, 376, 377, 378, 381, 382, 385, 388, 389, 390, 391, 396, 405, 407, 408, 410, 411, 413, 415, 416, 417, 419, 442, 445, 446, 447, 451, 452, 453, 454, 463, 533, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 560, 567, 585, 592, 614, 615, 651, 654, 657, 658, 659, 660, 662, 663, 675, 680, 692, 711, 733, 734, 742, 786, 787, 788, 791, 792, 798, 803, 804, 818, 826, 850, 851, 852, 854, 856, 858, 859, 860, 881, 882, 887, 900, 901, 902, 916, 917, 919, 931, 951, 952, 954, 994, 995, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1011, 1015, 1019, 1020, 1021, 1023, 1028, 1029, 1035, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1053], "findal": 353, "fine": [44, 73, 143, 205, 216, 228, 261, 268, 344, 357, 373, 380, 390, 416, 447, 952, 1008, 1011, 1020, 1025, 1045], "finer": [44, 53, 73, 292, 340, 364, 408, 412, 994, 1008, 1045], "finfo": [235, 472, 473, 479, 609, 654, 655, 658, 659, 660, 686, 687, 1050], "finish": [169, 258, 1002], "finit": [65, 255, 261, 363, 371, 390, 469, 540, 553, 585, 609, 612, 614, 615, 662, 732, 782, 789, 801, 829, 906, 932, 933, 934, 935, 1001, 1004, 1005, 1029, 1042, 1043, 1047, 1049, 1050], "finn": [1043, 1044], "firefox": 1015, "fireplac": 144, "fireplacequ": 144, "firm": [52, 408], "first": [0, 2, 44, 45, 47, 48, 51, 53, 56, 59, 63, 64, 67, 68, 69, 71, 75, 89, 90, 92, 95, 98, 99, 100, 101, 103, 104, 105, 108, 112, 116, 117, 126, 127, 129, 135, 136, 140, 142, 143, 144, 145, 146, 148, 150, 152, 155, 156, 157, 158, 165, 166, 169, 171, 172, 173, 176, 177, 178, 179, 183, 186, 187, 188, 190, 192, 194, 196, 202, 210, 213, 214, 220, 221, 226, 233, 236, 243, 244, 246, 247, 248, 250, 252, 253, 257, 261, 264, 265, 270, 272, 273, 277, 279, 281, 282, 283, 287, 289, 290, 292, 295, 299, 300, 301, 305, 307, 310, 312, 315, 316, 317, 320, 321, 330, 333, 336, 337, 340, 342, 351, 352, 353, 355, 356, 358, 359, 364, 365, 370, 371, 373, 374, 375, 376, 378, 380, 381, 382, 384, 388, 390, 402, 405, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 420, 444, 447, 448, 451, 460, 461, 465, 473, 484, 488, 489, 491, 492, 494, 496, 499, 502, 504, 506, 510, 511, 512, 530, 535, 536, 540, 543, 555, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 585, 587, 591, 592, 593, 594, 596, 597, 604, 614, 615, 621, 625, 628, 635, 636, 637, 638, 650, 656, 663, 670, 672, 678, 680, 692, 699, 702, 703, 704, 706, 716, 720, 740, 746, 767, 768, 786, 798, 801, 802, 807, 808, 809, 810, 811, 816, 818, 825, 827, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 873, 881, 885, 886, 887, 889, 890, 897, 898, 910, 913, 916, 917, 918, 919, 921, 923, 929, 930, 934, 935, 936, 945, 954, 956, 971, 975, 978, 990, 993, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1015, 1016, 1019, 1020, 1021, 1029, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "first_img_data": 509, "first_pca_compon": 315, "first_quart": 130, "first_week": 150, "firstli": [124, 363, 388, 661], "fisach": 1041, "fiscal": 0, "fischer": [1040, 1041], "fischler": 1001, "fischoff": 1047, "fish": 322, "fisher": [373, 415, 506, 640], "fisher1958": 415, "fisher_transform": 640, "fit": [2, 23, 26, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 60, 62, 63, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 121, 123, 124, 125, 126, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 184, 186, 187, 188, 189, 190, 192, 193, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 235, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 287, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 303, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 351, 352, 355, 356, 358, 363, 365, 368, 371, 373, 376, 379, 381, 382, 385, 388, 390, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 511, 512, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 578, 580, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 698, 701, 702, 704, 705, 706, 714, 715, 727, 736, 739, 754, 792, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 927, 928, 943, 961, 964, 988, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fit_": 1048, "fit_algorithm": [121, 533, 539, 1050, 1051], "fit_and_evalu": 352, "fit_and_plot_model": 315, "fit_and_scor": 220, "fit_data": 60, "fit_dur": 290, "fit_ecoc": 1039, "fit_grid_point": 1046, "fit_intercept": [47, 194, 195, 199, 209, 217, 226, 239, 278, 317, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 908, 909, 915, 1001, 1019, 1039, 1043, 1044, 1045, 1047, 1048, 1049], "fit_inverse_transform": [45, 126, 537, 1044], "fit_ovo": 1039, "fit_ovr": 1039, "fit_param": [246, 390, 432, 438, 443, 446, 466, 534, 536, 539, 541, 544, 545, 551, 557, 558, 569, 570, 571, 572, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 634, 639, 642, 643, 644, 645, 646, 669, 675, 810, 827, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 852, 857, 860, 864, 867, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 900, 901, 964, 1042, 1045, 1046, 1047, 1049, 1051, 1052, 1053], "fit_path": [654, 658, 659, 660, 686, 687], "fit_predict": [58, 90, 91, 94, 239, 249, 297, 378, 390, 408, 426, 430, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 470, 565, 613, 681, 796, 797, 801, 802, 854, 860, 868, 912, 928, 1011, 1040, 1043, 1044, 1048, 1050, 1052], "fit_prior": [371, 843, 844, 845, 847], "fit_status_": [910, 911, 912, 913, 914], "fit_tim": [53, 92, 144, 202, 220, 272, 412, 831, 832], "fit_times_nb": 272, "fit_times_svm": 272, "fit_transform": [44, 45, 46, 50, 52, 55, 58, 80, 83, 86, 87, 92, 96, 122, 125, 127, 131, 153, 192, 204, 228, 230, 232, 233, 234, 235, 236, 237, 242, 243, 246, 247, 253, 290, 294, 306, 310, 311, 315, 316, 317, 319, 322, 324, 325, 326, 327, 340, 351, 352, 353, 359, 368, 371, 378, 381, 382, 390, 404, 409, 413, 416, 417, 424, 432, 443, 444, 446, 448, 450, 465, 467, 469, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 694, 695, 696, 700, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 928, 995, 997, 1001, 1006, 1008, 1015, 1016, 1017, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1053], "fitfailedwarn": [2, 804, 807, 808, 810, 818, 827, 830, 831, 832, 835], "fitted_transform": 465, "fitter": 1021, "fitting_weight": 399, "fitzgerald": 1043, "fitzk": 1029, "five": [150, 256, 264, 330, 333, 371, 533, 541, 547, 1002, 1008, 1020, 1029, 1035], "five_imag": 416, "fix": [2, 44, 48, 59, 63, 71, 81, 104, 130, 140, 141, 143, 148, 150, 171, 172, 176, 179, 187, 190, 198, 214, 230, 249, 261, 273, 283, 305, 319, 320, 321, 322, 323, 324, 325, 326, 327, 352, 363, 364, 370, 372, 374, 375, 376, 380, 384, 388, 390, 391, 399, 408, 409, 412, 413, 415, 416, 418, 453, 463, 473, 506, 514, 533, 539, 542, 544, 550, 551, 561, 562, 566, 567, 591, 594, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 634, 657, 667, 672, 674, 688, 691, 695, 699, 711, 789, 801, 818, 825, 850, 851, 853, 856, 858, 859, 875, 878, 892, 916, 917, 927, 952, 971, 994, 1001, 1004, 1005, 1008, 1015, 1025, 1033, 1034, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "fixed_classes_uniform_labelings_scor": 73, "fixed_vocabulary_": [591, 594], "fixedthresholdclassifi": [2, 264, 407, 826, 1053], "fixm": [380, 390], "fixtur": [364, 376], "fkaren27": 1049, "flach": [406, 1005], "flach2008": 1005, "flach2015": 1005, "flag": [246, 249, 326, 374, 376, 377, 379, 399, 404, 465, 614, 615, 631, 677, 679, 732, 789, 924, 925, 1020, 1041, 1045, 1046, 1048, 1049, 1050, 1051], "flair": 1007, "flak": 1050, "flake8": 582, "flanagan": [1044, 1045], "flander": 1053, "flat": [2, 79, 121, 188, 232, 233, 234, 268, 408, 415, 416, 441, 447, 449, 462, 511, 1012, 1035, 1036, 1051], "flat_grid": 244, "flatnonzero": [130, 200, 269, 278, 279, 785], "flatten": [55, 69, 235, 244, 268, 314, 337, 348, 382, 504, 571, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 857], "flatten_transform": [571, 1042], "flatter": [44, 63], "flavanoid": [49, 373], "flaviomorelli": 1045, "flavor": [376, 1008], "flavour": 415, "flaw": [390, 415], "flaxman": [1037, 1039], "fledg": [365, 416], "fleet": 44, "fleme": 1050, "flennerhag": 1043, "fletcher": [1001, 1035, 1039], "flexibl": [44, 63, 144, 182, 212, 283, 311, 337, 353, 383, 388, 402, 412, 418, 678, 908, 909, 994, 999, 1001, 1005, 1009, 1015, 1024, 1029, 1044, 1048], "flier": 50, "flip": [125, 585, 746, 952, 1007, 1039, 1048], "flip_i": 517, "flip_sign": 952, "float": [2, 47, 50, 52, 77, 81, 82, 87, 94, 95, 99, 100, 101, 104, 124, 162, 179, 187, 199, 203, 235, 264, 269, 270, 274, 278, 347, 353, 363, 370, 371, 376, 385, 390, 404, 407, 408, 409, 416, 417, 419, 420, 421, 425, 427, 431, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 586, 587, 591, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 614, 615, 617, 618, 619, 620, 621, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 763, 770, 773, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 818, 821, 824, 826, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 868, 871, 874, 875, 881, 882, 884, 886, 888, 889, 890, 891, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 931, 932, 934, 935, 938, 949, 950, 967, 979, 985, 990, 995, 1005, 1006, 1008, 1009, 1015, 1020, 1021, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "float16": 1044, "float32": [56, 146, 235, 308, 324, 364, 371, 376, 377, 378, 390, 402, 404, 559, 560, 561, 562, 565, 566, 567, 568, 596, 597, 644, 645, 662, 703, 767, 873, 916, 917, 918, 919, 932, 980, 981, 982, 1021, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "float64": [51, 53, 54, 146, 148, 149, 281, 323, 324, 364, 370, 376, 377, 378, 390, 416, 421, 459, 472, 473, 476, 479, 480, 481, 498, 499, 510, 511, 518, 519, 520, 522, 533, 539, 541, 544, 545, 547, 548, 550, 584, 585, 592, 594, 600, 645, 652, 654, 655, 658, 659, 660, 661, 662, 667, 673, 674, 677, 679, 684, 686, 687, 691, 698, 703, 710, 711, 712, 713, 714, 716, 720, 721, 723, 724, 725, 727, 729, 730, 733, 734, 735, 739, 740, 741, 742, 743, 744, 747, 752, 757, 759, 760, 787, 788, 790, 791, 792, 797, 798, 799, 818, 873, 881, 882, 889, 901, 910, 911, 913, 914, 917, 919, 929, 932, 934, 950, 975, 978, 980, 981, 982, 1020, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "float_info": 58, "floch": 1052, "floor": 54, "floor_x": 54, "flore": 1048, "florian": [1029, 1035, 1039, 1041, 1045, 1052], "florin": 1053, "flow": 378, "flowchart": [396, 412], "flower": [127, 129, 279, 508, 509, 1005, 1024], "floyd": [371, 692, 1002], "floydsoft": 1039, "fluctuat": [52, 94, 150, 212, 277, 1043], "flush": 220, "fly": [146, 381, 510, 511, 585, 1035, 1037, 1044], "flyingdutchman23": 1048, "flyingimmidev": 1035, "flynn": [1048, 1050], "fmax": 230, "fmi": [408, 735], "fmin_l_bfgs_b": [614, 615], "fmt": [95, 223], "fn": [327, 408, 716, 722, 733, 734, 735, 786, 787, 788, 791, 1005, 1006], "fn_c": 279, "fna": 373, "fnlwgt": [326, 498], "fnr": [267, 702, 731], "fo": 416, "focu": [44, 49, 121, 135, 171, 261, 300, 363, 381, 406, 415, 555, 556, 561, 563, 564, 682, 1002, 1008, 1015, 1024, 1025, 1028], "focus": [63, 110, 202, 287, 371, 376, 388, 1002, 1015, 1024], "fokow": 1052, "fold": [2, 44, 101, 110, 141, 143, 146, 160, 168, 187, 202, 257, 264, 265, 266, 268, 270, 271, 273, 280, 284, 317, 332, 347, 359, 371, 376, 379, 380, 389, 390, 399, 407, 408, 417, 438, 473, 495, 538, 569, 570, 597, 605, 651, 655, 657, 659, 663, 665, 667, 669, 677, 679, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 889, 910, 913, 994, 1001, 1005, 1015, 1020, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1052], "folder": [2, 105, 371, 374, 376, 380, 384, 394, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 505, 1008], "folkman": 1042, "folloni": 1046, "follow": [0, 26, 44, 47, 58, 64, 65, 69, 73, 88, 89, 91, 97, 101, 104, 105, 119, 121, 130, 135, 138, 147, 148, 152, 164, 176, 177, 182, 186, 187, 188, 189, 190, 194, 196, 198, 200, 202, 210, 212, 213, 227, 230, 240, 246, 247, 249, 261, 264, 270, 279, 280, 284, 287, 310, 316, 317, 319, 320, 322, 323, 324, 327, 337, 347, 351, 352, 353, 355, 358, 359, 363, 364, 370, 371, 373, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 423, 425, 427, 429, 430, 431, 432, 438, 442, 444, 446, 447, 448, 449, 450, 454, 462, 463, 464, 465, 466, 469, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 517, 536, 540, 542, 543, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 635, 637, 638, 650, 656, 662, 663, 674, 675, 684, 696, 698, 703, 709, 713, 717, 722, 792, 823, 845, 850, 851, 852, 854, 856, 858, 859, 860, 867, 871, 872, 873, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 906, 908, 909, 913, 916, 917, 918, 919, 923, 930, 945, 947, 951, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1032, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "folwarczn\u00fd": 1052, "fonari": [1047, 1048], "fond": 1029, "fondat": 1029, "font": [147, 202, 226, 244, 920, 922], "font_manag": [113, 296, 339], "font_prop": 113, "font_siz": 314, "fontdict": [55, 75], "fontnam": [920, 1048], "fontproperti": [113, 296, 339], "fontsiz": [45, 48, 50, 55, 71, 84, 94, 124, 143, 164, 174, 175, 177, 180, 188, 195, 203, 211, 223, 233, 234, 258, 265, 274, 275, 276, 281, 282, 308, 314, 346, 922], "fontweight": [94, 208], "foo": [378, 584, 1009], "food": [0, 373], "foot": 1023, "footer": [55, 103, 271, 351, 352, 371, 489, 490], "footnot": [1012, 1024], "footprint": [321, 324, 363, 365, 408, 413, 543, 557, 558, 559, 560, 565, 566, 567, 568, 1037, 1040, 1041, 1046, 1047, 1050], "fopenmp": [374, 377], "foral": [408, 418, 617], "forbid": [408, 415], "forbidden": [188, 415], "forc": [135, 171, 216, 283, 290, 314, 370, 374, 403, 412, 415, 451, 458, 465, 468, 498, 609, 612, 650, 651, 656, 657, 661, 664, 665, 666, 667, 676, 677, 678, 685, 688, 691, 758, 782, 785, 826, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 910, 911, 912, 913, 914, 932, 934, 935, 1015, 1031, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1051], "force_all_finit": [782, 932, 934, 935, 1046, 1049], "force_alpha": [843, 844, 845, 847, 1050], "force_finit": [609, 612, 732, 789, 1005, 1049], "force_int_remainder_col": [465, 468], "force_writ": [934, 935, 1053], "ford": 52, "forecast": [43, 44, 147, 150, 170, 178, 184, 214, 270, 406, 407, 418, 493, 498, 564, 615, 619, 626, 627, 629, 705, 746, 749, 750, 752, 794, 825, 830, 831, 834, 1005, 1024, 1026], "foreground": [76, 100], "foreman": 1042, "forese": 388, "forest": [2, 14, 51, 65, 68, 134, 140, 143, 145, 146, 148, 149, 150, 151, 153, 155, 158, 182, 184, 185, 192, 239, 267, 269, 271, 303, 321, 351, 357, 359, 369, 389, 390, 406, 417, 464, 465, 491, 492, 498, 500, 517, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 634, 638, 804, 809, 834, 841, 868, 882, 912, 916, 917, 918, 994, 995, 1006, 1013, 1021, 1026, 1027, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1052], "forest_import": 142, "forestclassifi": 1040, "forestcov": 249, "forg": [319, 320, 321, 322, 323, 324, 325, 326, 327, 364, 377, 379, 380, 384, 394, 395], "forget": [188, 359, 364, 370, 380, 388, 413, 1002], "forget_factor": [413, 540], "forgiv": 738, "forina": 373, "fork": [374, 376, 384, 388], "forkserv": 388, "form": [2, 44, 49, 58, 69, 78, 94, 101, 121, 158, 178, 179, 184, 187, 245, 246, 261, 270, 329, 359, 370, 373, 376, 378, 380, 390, 391, 405, 408, 411, 412, 413, 414, 415, 416, 418, 420, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 460, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 689, 691, 692, 693, 694, 695, 696, 697, 703, 801, 802, 803, 804, 807, 808, 809, 812, 814, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 940, 945, 946, 947, 961, 964, 994, 996, 998, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1011, 1015, 1020, 1024, 1041, 1045, 1047], "formal": [390, 391, 408, 415, 848, 849, 1002, 1005, 1006, 1009], "format": [2, 48, 51, 52, 53, 60, 92, 95, 103, 112, 121, 130, 138, 143, 146, 148, 160, 164, 165, 192, 195, 199, 212, 230, 253, 265, 275, 277, 278, 281, 285, 294, 295, 298, 299, 314, 319, 327, 346, 355, 358, 363, 369, 375, 376, 378, 379, 384, 385, 389, 390, 402, 409, 412, 415, 416, 432, 443, 444, 446, 448, 450, 451, 453, 460, 465, 469, 483, 484, 485, 486, 488, 490, 498, 499, 500, 510, 511, 512, 525, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 553, 559, 560, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 650, 656, 662, 663, 664, 666, 670, 671, 672, 680, 681, 682, 692, 693, 696, 701, 715, 717, 724, 743, 744, 755, 772, 795, 796, 837, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 895, 900, 901, 906, 908, 920, 934, 935, 958, 966, 970, 980, 981, 982, 983, 984, 985, 995, 1005, 1008, 1013, 1015, 1016, 1019, 1021, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1052, 1053], "format_func": 295, "formatter_result": 92, "former": [52, 353, 407, 415, 416, 567, 806, 813, 822, 1007, 1035, 1041, 1044], "formerli": [216, 1036, 1039, 1041, 1042], "formul": [135, 171, 180, 205, 216, 279, 376, 408, 410, 413, 416, 418, 421, 476, 551, 552, 559, 566, 654, 655, 658, 659, 660, 662, 663, 669, 674, 767, 773, 802, 910, 913, 916, 918, 1001, 1005, 1006, 1009, 1015, 1027, 1031, 1052], "formula": [110, 111, 405, 408, 410, 421, 474, 476, 518, 519, 520, 593, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 680, 682, 708, 733, 734, 759, 768, 825, 994, 999, 1001, 1005, 1010, 1011, 1015, 1019, 1040, 1042, 1044], "forrest": [1046, 1047], "forsal": [58, 353, 371], "forsyth": 1043, "forth": 384, "fortin": [1035, 1037, 1038, 1039], "fortran": [420, 543, 650, 651, 656, 657, 664, 665, 666, 667, 669, 685, 688, 689, 690, 934, 935, 1035, 1038, 1039, 1043], "fortun": [382, 415, 1048, 1049], "forward": [47, 135, 169, 246, 321, 363, 376, 399, 402, 417, 510, 511, 541, 545, 555, 561, 562, 605, 672, 689, 690, 868, 872, 1001, 1025, 1047], "foster": [0, 1043], "fouchet": 1041, "found": [0, 46, 53, 58, 59, 60, 131, 142, 168, 171, 177, 216, 247, 264, 268, 271, 272, 273, 283, 315, 319, 322, 324, 325, 340, 353, 363, 365, 370, 373, 375, 376, 378, 388, 390, 391, 402, 405, 407, 408, 411, 412, 413, 415, 416, 418, 433, 442, 445, 446, 460, 473, 559, 560, 561, 562, 566, 567, 591, 593, 614, 615, 632, 640, 651, 655, 657, 659, 665, 667, 669, 675, 676, 678, 680, 682, 691, 692, 716, 723, 804, 807, 808, 818, 826, 845, 850, 851, 857, 879, 881, 882, 916, 917, 918, 919, 923, 931, 988, 992, 994, 997, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1015, 1019, 1020, 1021, 1025, 1035, 1038, 1039, 1042, 1043, 1045, 1049, 1052], "foundat": [0, 155, 264, 376, 406, 1008], "founder": 1029, "fouqu": 1035, "fouquet": [1051, 1052], "four": [65, 165, 179, 192, 197, 213, 257, 258, 264, 330, 337, 372, 376, 390, 559, 566, 723, 916, 918, 940, 1001, 1003, 1004, 1005, 1015, 1023], "fourier": [2, 24, 244, 642, 643, 644, 645, 646, 762, 763, 997], "fourier_approx_svm": 244, "fourier_scor": 244, "fourier_tim": 244, "fournier": 1044, "fourth": 143, "fowkl": [408, 735], "fowlk": [735, 1041], "fowlkes_mallows_scor": [2, 408, 1005, 1041, 1043], "fox": [327, 416, 1051], "fp": [48, 264, 327, 408, 716, 722, 733, 734, 735, 786, 787, 788, 791, 1005], "fp_c": 279, "fpgawesom": 1049, "fpr": [2, 51, 240, 249, 264, 267, 279, 280, 383, 595, 599, 702, 706, 710, 731, 793, 1005, 1032, 1035, 1051], "fpr_a": 279, "fpr_b": 279, "fpr_grid": 279, "fpr_score": 264, "fr": [533, 539, 662, 668, 689, 690, 762, 763, 1003, 1005], "fraa\u00df": 1052, "frac": [64, 112, 113, 135, 270, 277, 279, 322, 405, 406, 408, 410, 413, 414, 415, 416, 418, 431, 464, 466, 483, 484, 485, 556, 558, 560, 562, 564, 567, 570, 572, 615, 619, 623, 626, 627, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 682, 683, 684, 700, 733, 734, 759, 773, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 997, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1019, 1020, 1021], "frac12": [415, 997], "fractal": 373, "fraction": [2, 44, 63, 65, 147, 150, 212, 220, 230, 264, 277, 347, 352, 406, 412, 415, 439, 440, 450, 451, 457, 458, 517, 529, 559, 560, 561, 562, 566, 567, 568, 593, 596, 605, 670, 671, 672, 675, 680, 681, 682, 707, 725, 726, 727, 728, 738, 798, 800, 806, 810, 832, 833, 847, 875, 910, 911, 912, 916, 917, 918, 919, 970, 1001, 1005, 1008, 1012, 1013, 1015, 1020, 1021, 1025, 1036, 1037, 1038, 1049, 1052], "fragil": 659, "fragment": [89, 124, 384], "frame": [44, 104, 127, 150, 176, 188, 212, 264, 316, 371, 376, 388, 391, 490, 491, 492, 494, 498, 502, 503, 504, 506, 507, 512, 1047], "frameon": [47, 218], "framework": [270, 363, 388, 390, 402, 408, 641, 692, 801, 1001, 1002, 1009, 1025, 1029, 1035, 1041], "fran": [1047, 1048, 1049], "franc": 768, "francesco": [1047, 1050], "franci": [538, 662, 1001, 1041], "francia": 1049, "francidona": 1045, "francisco": [416, 1017], "franck": [1050, 1052, 1053], "franco": 1045, "francoi": [1035, 1048], "francoisgoupil": 1049, "frank": [270, 839, 1006, 1040, 1044, 1045], "frankhui": 1043, "franki": 1048, "franz": 1043, "franziska": 1046, "fran\u00e7oi": [0, 360, 1038], "fraud": [264, 327, 1001, 1029], "fraudul": [264, 1001, 1029], "fraudulent_accept": 264, "fraudulent_refus": 264, "fred": [1035, 1048], "freder": 1045, "frederick": 1048, "fredrik": 1043, "free": [0, 45, 65, 89, 176, 177, 183, 211, 260, 310, 370, 375, 376, 377, 384, 388, 394, 416, 453, 612, 675, 864, 914, 994, 997, 1001, 1005, 1025, 1043], "freebsd": 379, "freedom": [44, 123, 176, 200, 202, 204, 270, 543, 660, 801, 1001, 1038], "freeland": 1050, "freestand": 378, "freez": [380, 394, 402, 613, 1029, 1043], "frei": [74, 441, 455, 1045], "freija": 1043, "freita": [1040, 1042, 1043], "frellwan": 1048, "fremtpl2": 230, "fremtpl2freq": 230, "fremtpl2sev": 230, "french": 230, "freq": [198, 353], "frequenc": [58, 65, 171, 188, 198, 207, 212, 243, 320, 321, 351, 352, 353, 371, 388, 406, 412, 413, 415, 416, 417, 553, 559, 561, 562, 563, 566, 591, 592, 593, 594, 607, 662, 663, 668, 670, 672, 678, 679, 680, 689, 690, 837, 872, 881, 882, 908, 910, 913, 916, 918, 940, 1001, 1002, 1007, 1015, 1019, 1021, 1037, 1039, 1040, 1046, 1053], "frequent": [73, 135, 183, 273, 279, 280, 284, 352, 373, 376, 416, 553, 593, 634, 858, 881, 882, 885, 897, 995, 997, 1005, 1019, 1025, 1053], "frequentist": 530, "fresh": [540, 1025, 1045], "fresh_restart": 540, "fresh_restarts_max_it": 540, "freund": [415, 555, 556], "fri": [44, 150, 188, 371], "frid": [1029, 1038], "friedman": [2, 138, 139, 149, 269, 410, 412, 415, 479, 518, 519, 520, 522, 560, 561, 562, 567, 596, 597, 838, 855, 916, 917, 919, 999, 1001, 1006, 1012, 1021], "friedman2001": 415, "friedman2002": 415, "friedman_ms": [560, 561, 562, 567, 917, 919, 1021, 1051, 1052], "friend": [422, 1039], "friendli": [121, 364, 376, 384, 413, 901, 1017, 1018, 1024, 1025], "fring": [86, 408], "fritsch": [0, 398, 1035, 1036, 1038], "fritzk": 1050, "fro": [413, 540, 542, 549, 697, 1001], "fro_2": [665, 667], "frobeniu": [55, 124, 444, 448, 460, 470, 471, 472, 473, 474, 475, 476, 477, 533, 539, 540, 542, 547, 548, 549, 1001, 1042], "frobenius_norm": 692, "from": [0, 2, 38, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 963, 965, 966, 967, 968, 969, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "from_dtyp": [44, 144, 264, 326, 388, 415, 563, 564, 1052], "from_estim": [46, 49, 63, 65, 67, 68, 71, 90, 137, 140, 150, 151, 152, 156, 188, 205, 221, 226, 245, 250, 252, 263, 264, 267, 272, 273, 277, 280, 283, 293, 298, 301, 315, 319, 320, 321, 322, 324, 325, 326, 327, 336, 337, 338, 339, 341, 342, 344, 356, 383, 406, 439, 635, 636, 637, 701, 702, 704, 705, 706, 722, 731, 786, 788, 791, 792, 793, 810, 827, 1000, 1005, 1012, 1032, 1048, 1049, 1050, 1051, 1052, 1053], "from_predict": [44, 53, 69, 108, 155, 187, 249, 266, 277, 279, 322, 329, 351, 383, 439, 635, 701, 702, 704, 705, 706, 722, 731, 786, 788, 791, 792, 793, 1005, 1032, 1048, 1049, 1050, 1051, 1052, 1053], "frombuffer_empti": 1042, "fromkei": [271, 923], "fromnumer": 382, "front": 1042, "frontal": 371, "frontend": 382, "frontier": [49, 226, 296, 339, 1011], "frozen": [2, 64, 264, 438, 613], "frozen_clf": 613, "frozenestim": [2, 64, 264, 378, 406, 407, 438], "frsi": 1043, "fruit": [376, 1006], "fr\u00e9minvil": [1052, 1053], "fs1995": 415, "ftfy": 416, "ftorres16": [1049, 1050], "ftp": [373, 686, 687], "ftwo_scor": [746, 1005], "fu": [662, 1039], "fuck": [1047, 1048], "fuction": 988, "fuent": [1036, 1037], "fugled": 1052, "fujikawa": 1042, "fukatani": 1042, "fulfil": [376, 408, 415, 804, 807, 808, 818, 868, 872, 1001], "full": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 363, 364, 365, 369, 371, 374, 376, 378, 381, 384, 388, 390, 391, 394, 404, 408, 410, 412, 413, 416, 422, 425, 431, 432, 442, 446, 448, 450, 460, 489, 490, 493, 494, 498, 499, 502, 503, 504, 505, 506, 507, 509, 512, 537, 539, 543, 552, 561, 562, 569, 570, 636, 652, 654, 658, 662, 663, 673, 684, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 801, 802, 815, 845, 940, 994, 1001, 1004, 1007, 1008, 1012, 1015, 1018, 1025, 1035, 1039, 1041, 1043, 1045, 1046, 1048, 1049, 1051, 1052, 1053], "full_data": 194, "full_lik": 99, "full_model": 292, "full_scor": 183, "fulli": [53, 80, 89, 142, 147, 363, 370, 371, 376, 390, 408, 414, 415, 417, 444, 448, 559, 560, 566, 567, 916, 917, 918, 919, 920, 922, 995, 1001, 1010, 1018, 1024, 1048, 1049], "fullpap": 1018, "fultz": 1048, "fun": [420, 535, 1029], "fun_arg": [420, 535], "func": [51, 108, 187, 195, 230, 303, 376, 409, 466, 703, 872, 1015, 1039, 1041, 1043, 1044, 1052, 1053], "func_metr": 632, "func_min": [614, 615], "funcformatt": 295, "function": [2, 4, 28, 44, 45, 46, 47, 48, 53, 55, 59, 60, 65, 73, 81, 87, 88, 89, 91, 93, 100, 103, 108, 121, 124, 126, 127, 130, 133, 141, 144, 145, 146, 147, 148, 149, 150, 160, 165, 168, 169, 171, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 188, 190, 193, 194, 197, 198, 205, 206, 208, 210, 212, 213, 218, 219, 220, 225, 228, 229, 230, 232, 240, 242, 245, 246, 249, 250, 252, 253, 260, 262, 264, 268, 270, 271, 272, 273, 278, 279, 283, 285, 287, 290, 305, 308, 310, 317, 319, 320, 322, 323, 325, 327, 332, 334, 337, 338, 339, 340, 341, 342, 344, 347, 349, 351, 352, 356, 359, 363, 364, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 388, 389, 390, 394, 399, 402, 404, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 423, 425, 427, 430, 431, 432, 438, 441, 444, 445, 446, 448, 449, 451, 453, 455, 458, 459, 460, 461, 462, 465, 466, 469, 470, 472, 473, 475, 479, 489, 490, 492, 494, 497, 498, 499, 505, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 574, 578, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 610, 611, 612, 614, 615, 619, 623, 624, 626, 627, 631, 632, 635, 636, 637, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 702, 703, 704, 706, 707, 708, 710, 715, 716, 720, 723, 725, 726, 727, 728, 732, 736, 738, 739, 742, 744, 745, 746, 754, 759, 761, 765, 766, 767, 769, 772, 775, 778, 782, 783, 784, 785, 786, 787, 789, 793, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 880, 884, 885, 886, 887, 888, 889, 892, 894, 897, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 932, 941, 943, 944, 945, 946, 951, 952, 963, 964, 970, 971, 974, 975, 978, 979, 988, 993, 994, 995, 996, 998, 1000, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1021, 1024, 1025, 1026, 1027, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "functiontransform": [2, 44, 103, 140, 212, 230, 333, 402, 465, 466, 1015, 1040, 1041, 1043, 1048, 1049, 1050, 1052], "functool": 230, "fundament": [73, 83, 113, 205, 352, 380, 388, 389, 411, 498, 540, 542, 549, 712, 1001, 1005], "funder": 0, "fung": 412, "funnel": [46, 495, 496], "furlanello": 747, "furrer": 1052, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 63, 78, 104, 110, 117, 121, 138, 143, 145, 168, 171, 176, 187, 189, 194, 198, 232, 237, 246, 264, 267, 270, 271, 277, 324, 340, 352, 358, 363, 376, 388, 390, 402, 407, 408, 410, 413, 415, 416, 418, 445, 453, 463, 517, 534, 537, 585, 618, 626, 632, 662, 663, 670, 671, 672, 680, 681, 682, 695, 699, 741, 778, 782, 785, 796, 797, 844, 850, 851, 858, 859, 886, 888, 908, 910, 913, 952, 1004, 1005, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1044, 1048], "furthermor": [44, 53, 73, 141, 188, 189, 249, 250, 252, 290, 351, 352, 363, 365, 383, 408, 413, 415, 416, 564, 593, 609, 623, 708, 740, 759, 761, 799, 908, 1001, 1013, 1038, 1042], "fuse": [377, 1041, 1051], "fusion": 388, "futur": [0, 53, 176, 213, 252, 322, 325, 376, 380, 384, 390, 391, 402, 412, 416, 498, 536, 639, 974, 1006, 1020, 1021, 1029, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "futurewarn": [376, 384, 1042, 1043, 1044, 1046, 1048, 1051, 1052], "fuxin": 646, "fw": 692, "fwe": 595, "f\u00e9lix": [1035, 1037, 1038, 1039, 1043], "g": [0, 26, 44, 48, 50, 52, 62, 63, 64, 65, 69, 87, 89, 99, 103, 114, 117, 128, 135, 138, 146, 147, 172, 173, 174, 179, 183, 186, 187, 197, 201, 212, 213, 214, 216, 230, 237, 245, 246, 255, 264, 270, 274, 275, 281, 289, 296, 315, 327, 332, 346, 347, 353, 359, 363, 368, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 388, 390, 399, 402, 404, 406, 408, 410, 412, 413, 415, 416, 417, 418, 420, 438, 444, 445, 448, 450, 465, 466, 483, 484, 485, 505, 530, 533, 535, 536, 538, 539, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 591, 592, 593, 594, 596, 597, 600, 607, 614, 615, 621, 626, 627, 634, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 694, 696, 701, 724, 732, 742, 744, 767, 782, 789, 792, 803, 805, 806, 807, 808, 810, 811, 813, 822, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 855, 857, 858, 859, 860, 864, 865, 866, 868, 871, 873, 874, 875, 878, 880, 881, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 951, 952, 964, 994, 995, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1019, 1020, 1021, 1025, 1028, 1029, 1035, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "g0g0gadget": 1045, "g2015": 1012, "g_": 408, "g_i": [415, 653], "g_j": [652, 673, 684], "ga": 0, "gaaca": 179, "gaatattaggccga": 388, "gabor": 1049, "gabriel": [1043, 1044, 1045, 1048, 1049], "gael": [0, 397, 1023, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "gaido": 1044, "gaidon": 1035, "gain": [2, 87, 150, 234, 277, 290, 292, 327, 330, 351, 352, 358, 375, 382, 384, 388, 415, 498, 534, 559, 563, 564, 566, 730, 760, 801, 802, 837, 916, 918, 1006, 1010, 1018, 1021, 1038, 1042, 1045], "gain_matrix": 264, "galleri": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 371, 376, 378, 390, 394, 401, 1026, 1035, 1039, 1042], "galli": 1047, "gallopoulo": 413, "galvez": 1040, "gambl": 52, "gameiro": 1049, "gamma": [2, 44, 45, 46, 47, 49, 51, 68, 69, 126, 156, 162, 192, 226, 239, 244, 245, 268, 270, 272, 275, 281, 321, 329, 330, 332, 334, 337, 339, 340, 343, 344, 346, 349, 411, 413, 415, 418, 453, 537, 564, 623, 624, 643, 644, 645, 647, 648, 649, 652, 684, 689, 695, 728, 751, 756, 763, 770, 779, 780, 781, 801, 815, 818, 903, 904, 905, 910, 911, 912, 913, 914, 994, 997, 1001, 1003, 1018, 1020, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1049, 1050, 1051], "gamma_": [537, 1051], "gamma_0": [255, 261], "gamma_2d_rang": 340, "gamma_bound": 624, "gamma_k": 411, "gamma_rang": 340, "gammaregressor": [2, 230, 320, 323, 684, 1001, 1046, 1049, 1050], "gandenberg": 1044, "ganesh": [1040, 1052], "ganevgv": 1045, "gangesh": 1047, "gangwar": 1042, "ganiev": [1040, 1041, 1042], "ganssl": 1042, "gap": [44, 53, 150, 371, 412, 472, 473, 479, 591, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 825, 916, 917, 918, 919, 1001, 1002, 1043, 1047, 1049], "garagecar": [144, 155], "garagefinish": 144, "garagetyp": 155, "garageyrblt": 108, "garbag": 1047, "garcia": 1048, "garc\u00eda": [1044, 1045, 1050], "gardin": 370, "gardner": [1043, 1044], "garg": [1045, 1046], "gargsya": 1045, "gari": [371, 1042], "garret": 1039, "garreta": [1037, 1038], "garrett": 1039, "garri": 373, "garriga": [276, 412, 833], "gasmi": 1049, "gasquez": 1042, "gate": [373, 1048], "gather": [323, 325, 384, 391, 408, 1015, 1029], "gatsbi": 1018, "gaug": 187, "gaull": 768, "gaurav": [1043, 1044, 1045, 1046, 1047, 1049], "gauravahlawat": [1043, 1044], "gaussian": [2, 8, 20, 29, 44, 45, 47, 49, 65, 67, 68, 71, 80, 81, 82, 89, 91, 95, 99, 110, 111, 112, 113, 114, 119, 122, 123, 124, 130, 136, 137, 143, 147, 151, 153, 162, 183, 194, 197, 198, 200, 203, 222, 223, 224, 225, 239, 243, 245, 257, 258, 281, 295, 300, 303, 305, 313, 314, 334, 337, 344, 345, 349, 368, 372, 378, 381, 390, 408, 410, 413, 414, 420, 453, 470, 471, 472, 473, 474, 475, 476, 477, 498, 506, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 527, 532, 534, 546, 551, 552, 555, 565, 614, 615, 617, 618, 619, 621, 622, 623, 626, 627, 629, 631, 647, 648, 676, 681, 684, 707, 728, 745, 756, 780, 801, 802, 804, 818, 843, 844, 845, 846, 847, 848, 849, 853, 884, 888, 896, 900, 901, 902, 999, 1001, 1002, 1003, 1011, 1026, 1027, 1029, 1030, 1031, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1049], "gaussian_filt": [54, 81, 82, 88], "gaussian_process": [2, 67, 68, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 390, 418, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 647, 1006, 1026, 1038, 1041, 1042], "gaussianhmm": 1035, "gaussianmixtur": [2, 80, 91, 256, 257, 258, 259, 260, 261, 414, 801, 1004, 1041, 1043, 1044, 1048, 1049, 1051, 1053], "gaussiannb": [2, 62, 63, 65, 68, 157, 272, 359, 406, 415, 438, 571, 843, 844, 845, 847, 869, 999, 1006, 1007, 1039, 1040, 1041, 1043, 1048, 1051], "gaussiannois": 378, "gaussianprocessclassifi": [2, 67, 68, 172, 173, 174, 175, 179, 390, 418, 615, 623, 624, 626, 627, 1006, 1041, 1043, 1045, 1049], "gaussianprocessregressor": [2, 171, 176, 177, 178, 179, 180, 418, 614, 617, 618, 619, 620, 621, 625, 628, 629, 647, 1006, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "gaussianrandomproject": [2, 901, 1017, 1036, 1049, 1051, 1052], "gauthier": 1049, "gauz": 1043, "gave": [65, 406, 804, 807, 808, 818, 875], "gavin": [632, 995], "gaynor": 402, "ga\u00ebl": [391, 1029], "gb": [158, 415, 555, 637], "gbc": 359, "gbdt": [140, 188, 264, 319, 320, 325, 381, 415], "gbdt_appli": 140, "gbdt_cst": 320, "gbdt_leaves_yield": 140, "gbdt_model": 140, "gbdt_no_cst": [152, 320], "gbdt_pipelin": 155, "gbdt_with_monotonic_cst": 152, "gbdt_with_monotonic_cst_df": 152, "gbm": [146, 415, 1038], "gbm_early_stop": 145, "gbm_full": 145, "gbp": 1029, "gbr": 147, "gbr_l": 147, "gbrt": [44, 53, 212, 415], "gbrt_mean_poisson": 53, "gbrt_median": 53, "gbrt_percentile_5": 53, "gbrt_percentile_95": 53, "gbrt_predict": 44, "gbt": 363, "gc": 50, "gca": [48, 80, 96, 117, 123, 174, 217, 221, 223, 239, 252, 274, 298, 300, 311, 336, 338, 341, 342, 1012, 1032], "gcc": [374, 377, 382, 388], "gcf": [48, 1012], "gcv": [677, 679], "gcv_mode": [677, 1037], "gd": [52, 158], "gdb": [377, 379, 1028], "gdex1": 1045, "ge": [52, 996, 1007, 1047], "ge0": 1021, "gear": 1023, "gebremichael": [1050, 1051], "gedeck": 1042, "geevarghes": 1050, "gefel": 1005, "gegr": 416, "gei": 1037, "geiger": [1052, 1053], "geist": 373, "gelavizh": 1046, "gelder": 1046, "gemm": 1053, "gen": 785, "gen_batch": [2, 385, 956], "gen_cov": 112, "gen_even_slic": [2, 212, 385, 955], "gender": [251, 881, 1015], "gender_femal": 881, "gender_mal": 881, "gene": [179, 370, 405, 452, 515, 596, 597, 855, 888], "gener": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 99, 103, 104, 105, 106, 107, 108, 111, 113, 116, 117, 118, 121, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 169, 172, 173, 174, 175, 176, 179, 182, 183, 186, 187, 188, 189, 190, 192, 196, 197, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 353, 355, 356, 357, 358, 363, 364, 368, 369, 371, 373, 377, 378, 379, 380, 381, 382, 384, 385, 388, 389, 402, 405, 406, 408, 412, 414, 416, 417, 418, 420, 424, 429, 431, 438, 441, 444, 447, 448, 450, 453, 455, 459, 460, 461, 463, 465, 466, 468, 470, 473, 475, 483, 484, 485, 489, 492, 494, 497, 498, 499, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 538, 540, 542, 543, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 614, 615, 618, 619, 622, 623, 624, 626, 627, 631, 632, 633, 634, 636, 637, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 689, 690, 693, 694, 695, 696, 697, 698, 699, 705, 708, 710, 721, 725, 727, 728, 741, 747, 761, 782, 785, 789, 797, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 840, 841, 842, 848, 849, 851, 853, 854, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 900, 901, 908, 909, 910, 911, 913, 914, 917, 919, 920, 921, 922, 945, 946, 947, 951, 952, 955, 956, 969, 973, 975, 978, 993, 994, 995, 997, 999, 1000, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1017, 1018, 1020, 1021, 1026, 1027, 1028, 1029, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "generalis": [792, 1005], "generaliz": [344, 415], "generate_data": [47, 70], "generate_dataset": 50, "generate_missing_valu": 150, "generate_onli": [945, 1045], "generate_synthetic_data": 54, "generickernelmixin": [179, 1045], "genericunivariateselect": [2, 417, 598, 599, 601, 602, 603, 605, 1049, 1051, 1052], "generos": 376, "genesi": [1049, 1051], "genet": 1024, "genoa": 373, "genom": [59, 515, 1024], "genotyp": 370, "gensim": 1024, "gentil": [373, 1047], "gentli": 413, "genvalen": [1047, 1048, 1049, 1050, 1051], "geodes": [232, 692, 1002], "geoff": [839, 1006], "geoffrei": [865, 866, 1009, 1046, 1047, 1048, 1049, 1051], "geograph": [44, 51, 303, 371, 500], "geometr": [123, 408, 692, 708, 735, 761, 1002, 1043], "geometri": [75, 408, 1002, 1008], "geomspac": 325, "georg": [371, 408, 1041, 1047, 1048, 1049, 1050], "georgi": [1043, 1046], "georgiamaydai": 1050, "geospati": [303, 414], "geovan": [1048, 1049], "geq": [243, 406, 413, 415, 1001, 1005, 1015, 1019, 1020], "ger": 416, "gerhard": 371, "german_credit": 264, "germer": [1050, 1051], "geroldcsend": 1048, "geron": [1043, 1048, 1049], "gerstein": 515, "gertrud": 1042, "gertz": 451, "gervai": [1037, 1038], "gesa": 1047, "gesdd": 952, "gesvd": 952, "get": [2, 3, 44, 45, 49, 52, 53, 56, 58, 73, 86, 90, 122, 126, 147, 150, 157, 166, 169, 171, 176, 177, 182, 187, 188, 189, 190, 206, 214, 227, 230, 232, 246, 247, 268, 271, 272, 274, 278, 281, 283, 287, 290, 295, 303, 311, 319, 326, 330, 333, 337, 340, 342, 345, 349, 351, 353, 355, 357, 364, 369, 370, 371, 374, 376, 377, 378, 379, 381, 382, 383, 390, 394, 402, 404, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 422, 423, 424, 429, 431, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 699, 703, 725, 726, 727, 728, 730, 736, 737, 746, 760, 767, 768, 773, 789, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 942, 943, 944, 951, 952, 957, 963, 994, 1000, 1001, 1002, 1004, 1005, 1015, 1018, 1019, 1020, 1021, 1025, 1032, 1035, 1038, 1041, 1043, 1046, 1048, 1049, 1052], "get_adjacency_matrix": 56, "get_arrai": [848, 849], "get_bin_se": 449, "get_cmap": [63, 65, 345], "get_color": 47, "get_config": [2, 469, 785, 906, 971, 1050], "get_covari": [534, 536, 543], "get_data": [510, 511], "get_data_hom": [2, 48], "get_depth": [916, 917, 918, 919, 1044], "get_feature_nam": [322, 1043, 1044, 1046, 1047, 1048], "get_feature_names_out": [2, 55, 58, 187, 189, 322, 351, 352, 353, 371, 378, 390, 409, 416, 424, 429, 432, 443, 444, 446, 448, 450, 465, 468, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 568, 569, 570, 571, 572, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 1015, 1048, 1049, 1050, 1051, 1052, 1053], "get_figur": 135, "get_full_scor": 183, "get_height": [48, 145], "get_impute_it": 183, "get_impute_knn_scor": 183, "get_impute_mean": 183, "get_impute_zero_scor": 183, "get_indic": [58, 423, 452, 454], "get_initial_mean": 258, "get_legend_handles_label": [150, 205, 245, 272, 277], "get_lin": 306, "get_metadata_rout": [246, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 962, 963, 964, 1005, 1052], "get_metr": 703, "get_minibatch": 48, "get_n_cal": [848, 849], "get_n_leav": [916, 917, 918, 919, 1044], "get_n_split": [390, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825], "get_nam": 312, "get_output_feature_nam": 1049, "get_param": [271, 379, 390, 418, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1045, 1046, 1047, 1049, 1050], "get_precis": [470, 471, 472, 473, 474, 475, 476, 477, 534, 536, 543], "get_redirect": 56, "get_routing_for_object": [2, 246, 961], "get_scor": [2, 326, 390, 737, 1042, 1051], "get_scorer_nam": [2, 407, 736, 1005, 1049, 1052], "get_scores_for_imput": 183, "get_shap": [58, 423, 452, 454], "get_stop_word": [591, 592, 594], "get_submatrix": [423, 452, 454], "get_subplotspec": 383, "get_support": [165, 169, 321, 584, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 1037], "get_tag": 2, "get_tree_stat": [848, 849], "get_untrusted_typ": 402, "get_width": [48, 145], "get_x": [48, 145], "get_xaxi": [255, 300, 310], "get_xlim": [112, 208, 217, 310], "get_xticklabel": 281, "get_yaxi": [300, 310], "get_ybound": 87, "get_ylim": [208, 283, 310, 311], "getattr": [44, 48, 264, 310, 378, 390, 1051], "getgaurav2": 1045, "getmoredataget": 396, "gettempdir": 1008, "getter": [470, 471, 472, 473, 474, 475, 476, 477, 596, 597, 600], "geurt": [415, 557, 558, 559, 560, 567, 568, 918, 919], "gewili": [1050, 1051], "gh": 376, "ghahramani": 903, "gharibi": 1045, "ghg": 1041, "ghislain": 1047, "gholdman1": 1046, "ghorai": 1043, "ghosh": [0, 398, 408, 1035, 1036, 1052, 1053], "gia": 1046, "giancarlo": 1049, "gianr": 1050, "gibb": [864, 1010, 1024], "gideon": 1045, "giessel": 1041, "gigant": [1043, 1045, 1050, 1051], "gijsber": 1049, "gil": [363, 364, 377, 1038, 1043, 1044, 1047, 1048, 1052], "gilad": 1029, "gilberto": 1043, "gilbertson": [1049, 1050], "gilch": 1042, "gile": [1038, 1039], "gill": [0, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "gilliam": 1042, "gilmor": 1039, "gim": 1047, "gini": [65, 190, 212, 230, 251, 282, 321, 555, 556, 559, 560, 561, 562, 566, 567, 568, 792, 916, 917, 918, 919, 994, 1013, 1021, 1043, 1044, 1051, 1052], "gionanidi": 1049, "giorgio": [1040, 1041, 1042], "giorgiop": 1040, "giotto": 1024, "giovanni": [1041, 1043], "gist": [376, 384, 1028], "git": [374, 378, 380, 382, 384, 1028, 1035, 1051, 1053], "github": [0, 290, 374, 375, 379, 380, 381, 382, 384, 388, 390, 391, 402, 404, 696, 1023, 1024, 1028, 1045], "githubusercont": 52, "gitter": [1042, 1043], "giudic": 1047, "giusepp": [1043, 1044], "give": [2, 44, 52, 53, 54, 62, 63, 75, 80, 83, 94, 96, 98, 104, 108, 123, 146, 171, 176, 180, 182, 187, 188, 202, 204, 212, 213, 214, 239, 261, 264, 267, 272, 279, 292, 296, 299, 308, 322, 323, 327, 333, 363, 365, 371, 373, 375, 376, 378, 382, 384, 388, 389, 390, 391, 396, 402, 405, 406, 408, 409, 410, 413, 415, 416, 418, 420, 433, 447, 448, 450, 452, 460, 473, 498, 501, 505, 535, 540, 551, 552, 553, 554, 559, 560, 566, 567, 568, 596, 597, 600, 610, 611, 642, 651, 665, 669, 680, 724, 734, 740, 743, 798, 804, 807, 808, 818, 829, 830, 831, 833, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 885, 886, 888, 889, 897, 1001, 1005, 1008, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1029, 1035, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1051], "given": [2, 8, 31, 47, 50, 51, 53, 65, 67, 73, 83, 92, 94, 110, 116, 122, 126, 141, 150, 151, 153, 155, 171, 178, 187, 188, 198, 209, 212, 213, 216, 230, 233, 239, 243, 244, 246, 248, 249, 250, 264, 266, 270, 271, 272, 273, 279, 284, 293, 296, 297, 298, 312, 316, 322, 327, 352, 353, 357, 358, 363, 365, 371, 375, 376, 378, 382, 384, 385, 388, 390, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 425, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 457, 459, 460, 461, 462, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 485, 488, 498, 503, 505, 507, 525, 535, 538, 540, 541, 542, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 591, 592, 593, 594, 596, 597, 604, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 636, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 691, 692, 694, 695, 701, 702, 703, 704, 705, 706, 708, 709, 710, 716, 718, 721, 722, 724, 728, 730, 731, 738, 740, 741, 744, 756, 759, 760, 762, 763, 768, 778, 782, 785, 786, 788, 791, 792, 793, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 816, 818, 822, 826, 827, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 894, 895, 897, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 927, 938, 939, 940, 960, 961, 963, 988, 992, 994, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "gkevinyen5418": 1043, "gkf": 412, "gkiasta": 1048, "gl": 373, "glad": 376, "glanc": [287, 375], "glaser": [1043, 1044], "glass": 371, "glasso": [410, 479], "glaxosmithklin": 52, "gleb": [1048, 1050, 1051, 1052], "glemaitr": [1044, 1045, 1047], "glen": 1048, "glenn": 1041, "glennfrutiz": 1049, "glibc": 384, "glm": [212, 230, 320, 652, 673, 684, 1001, 1035, 1046], "glm_freq": 230, "glm_pure_premium": 230, "glm_sev": 230, "glmnet": [650, 651, 1035], "glob": 48, "global": [2, 3, 48, 50, 78, 91, 121, 212, 232, 233, 253, 279, 307, 320, 359, 363, 364, 382, 388, 390, 408, 418, 443, 453, 463, 469, 593, 630, 636, 692, 695, 696, 699, 711, 733, 734, 742, 787, 788, 791, 792, 822, 889, 904, 906, 974, 994, 1002, 1005, 1011, 1015, 1021, 1029, 1043, 1050], "global_dtyp": 364, "global_random_se": 364, "globular": [96, 408], "glorot": [865, 866], "glossari": [2, 359, 376, 378, 382, 419, 420, 438, 441, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 465, 468, 470, 473, 475, 489, 492, 494, 497, 499, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 586, 587, 597, 605, 610, 611, 614, 615, 631, 636, 638, 643, 644, 645, 646, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 696, 697, 698, 699, 705, 778, 782, 785, 797, 801, 802, 804, 805, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 850, 851, 853, 854, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 870, 873, 885, 889, 897, 900, 901, 903, 904, 908, 909, 910, 913, 916, 917, 918, 919, 951, 952, 975, 978, 994, 995, 1001, 1043], "glu": 373, "glushchenkov": 1049, "gl\u00f2ria": [1048, 1050], "gm": 802, "gmil": 371, "gmm": [80, 92, 93, 184, 254, 256, 259, 260, 261, 506, 514, 802, 823, 1004, 1026, 1035, 1036, 1039, 1040, 1041], "gmm_": 1036, "gmm_bic_scor": 260, "gmmgmm": 396, "gmmhmm": [1035, 1036], "gnb": [62, 63, 65, 157, 415, 571, 1007], "gnb_isoton": 63, "gnb_sigmoid": 63, "gnu": 374, "go": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 371, 376, 380, 381, 385, 391, 394, 409, 413, 415, 417, 444, 563, 564, 724, 887, 929, 955, 956, 1015, 1021, 1025, 1046], "goadrich": 1005, "goal": [50, 56, 59, 65, 86, 91, 117, 150, 182, 188, 192, 212, 227, 230, 248, 249, 264, 267, 268, 351, 364, 365, 371, 378, 381, 382, 390, 391, 393, 399, 413, 417, 544, 550, 593, 596, 743, 1005, 1008, 1010, 1011, 1019, 1020, 1021, 1029, 1043], "god": 351, "godbol": 787, "goe": [44, 73, 140, 187, 358, 376, 415, 472, 473, 479, 559, 560, 566, 567, 568, 916, 917, 918, 919, 1015, 1019], "goetz": [1042, 1043], "goh": 1052, "gohlk": 1040, "goix": [0, 1039, 1041, 1042, 1043, 1044], "gold": [70, 207, 213, 215, 218, 222, 226, 229, 256, 261, 277, 296, 339, 382], "goldbaum": 1053, "goldberg": [857, 1008], "goldfarb": 1001, "goldman": 52, "goldstein": [188, 1012], "goldszmidt": 1017, "gollonet": [0, 398], "goltermann": 1047, "golub": [536, 846, 888], "golubin": 1042, "gome": [1048, 1049, 1053], "gomez": [1043, 1050, 1052], "gommer": [1038, 1041, 1042, 1050, 1051, 1053], "goncalo": [1042, 1043], "gone": [1035, 1036], "gonthier": 1046, "goo": 373, "good": [44, 49, 59, 63, 65, 76, 80, 81, 83, 86, 87, 89, 92, 107, 113, 117, 130, 141, 143, 146, 147, 150, 172, 176, 182, 187, 198, 202, 212, 213, 218, 227, 237, 239, 243, 246, 249, 256, 258, 263, 264, 270, 276, 283, 308, 315, 316, 321, 327, 329, 334, 340, 352, 359, 363, 364, 365, 375, 377, 378, 379, 382, 384, 388, 390, 405, 406, 408, 410, 412, 413, 415, 416, 417, 418, 438, 440, 445, 536, 561, 563, 564, 593, 634, 644, 651, 652, 660, 662, 663, 665, 673, 684, 694, 698, 727, 735, 746, 768, 833, 902, 927, 952, 994, 1000, 1001, 1002, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1025, 1029, 1041], "goodby": 376, "goodman": [1035, 1040], "googl": [0, 56, 388, 408, 443, 952, 1023, 1035], "gool": 1005, "gorb": 1047, "gordon": [1041, 1045, 1047, 1049], "gorelli": [1043, 1044, 1048, 1050, 1053], "gorgolewski": [0, 398, 1035, 1038], "gorinevski": 1001, "gorodkin": 747, "gorro\u00f1o": [1046, 1048, 1049], "got": [177, 277, 359, 381, 553, 653, 669, 1048, 1050, 1052], "gotten": [1001, 1015], "gou": 408, "gouillart": 1035, "goupil": [0, 360], "gov": [56, 373], "govern": [187, 359, 363, 376, 390, 1029], "govin": 1041, "go\u0144da": 1050, "gp": [174, 179, 418, 614, 615, 626, 1041], "gp_fix": 172, "gp_opt": 172, "gpapadok": [1045, 1049], "gpassino": 1039, "gpc": [2, 67, 68, 137, 143, 153, 162, 170, 176, 177, 179, 184, 222, 223, 224, 225, 245, 259, 305, 313, 334, 345, 349, 506, 614, 615, 617, 618, 623, 624, 626, 627, 707, 745, 1026, 1027, 1031, 1045], "gpc_rbf_anisotrop": 173, "gpc_rbf_isotrop": 173, "gperftool": 379, "gplearn": 1024, "gpr": [2, 170, 171, 172, 178, 180, 184, 498, 614, 615, 617, 618, 619, 620, 625, 626, 627, 628, 629, 1026, 1027, 1031, 1045], "gpr_model": 180, "gprof": 379, "gpu": [324, 327, 404, 1009, 1025, 1052], "gr": 901, "grab": 376, "gracefulli": [1038, 1039], "grad": [382, 1029], "gradd": 382, "grade": 1005, "gradi": 1045, "gradient": [2, 14, 47, 53, 81, 100, 104, 134, 135, 136, 139, 140, 142, 152, 155, 158, 176, 177, 178, 184, 189, 190, 193, 195, 200, 209, 214, 235, 239, 244, 269, 271, 296, 306, 310, 311, 314, 316, 323, 326, 339, 390, 407, 408, 418, 453, 463, 467, 468, 489, 491, 498, 503, 505, 522, 555, 556, 561, 562, 563, 564, 566, 567, 589, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 635, 636, 638, 639, 643, 652, 653, 662, 663, 672, 673, 676, 678, 680, 681, 682, 684, 691, 696, 698, 699, 745, 746, 752, 754, 794, 804, 807, 808, 809, 825, 831, 834, 864, 865, 866, 869, 881, 882, 912, 978, 1002, 1005, 1008, 1009, 1010, 1011, 1024, 1026, 1027, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1050, 1052], "gradient_boost": [140, 1037, 1038, 1044], "gradientboost": 1040, "gradientboostingclassifi": [2, 140, 146, 149, 312, 359, 388, 555, 563, 636, 637, 1006, 1012, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "gradientboostingclassifier__learning_r": 312, "gradientboostingregressor": [2, 47, 145, 147, 148, 155, 158, 363, 381, 388, 556, 564, 636, 637, 1001, 1005, 1006, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "gradual": [216, 865, 866, 945, 947, 1019], "graduat": 373, "graham": [1040, 1041], "grai": [46, 54, 81, 82, 84, 85, 87, 121, 124, 149, 210, 212, 230, 243, 247, 248, 277, 307, 373, 413, 495, 496, 504, 523, 1046], "grain": [44, 68, 73, 205, 244, 261, 312, 382, 416, 447, 1025], "gram": [2, 184, 193, 246, 378, 413, 416, 490, 526, 550, 591, 592, 593, 594, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 685, 686, 687, 688, 689, 690, 771, 994, 1001, 1015, 1020, 1026, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1049], "gram_test": 1020, "gram_train": 1020, "gramfort": [0, 121, 391, 397, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "grammar": 376, "grant": [0, 249, 264, 376], "grape": 409, "graph": [2, 56, 63, 75, 80, 81, 100, 101, 179, 232, 267, 290, 292, 332, 363, 376, 379, 390, 405, 410, 419, 442, 445, 446, 453, 454, 458, 463, 464, 472, 473, 479, 513, 588, 589, 692, 695, 696, 699, 786, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 863, 904, 958, 1002, 1005, 1008, 1010, 1018, 1021, 1024, 1029, 1035, 1042, 1043, 1045, 1048, 1050], "graph_laplacian": 1042, "graph_lasso": [479, 1043], "graph_model": 292, "graph_shortest_path": [385, 1048], "graphic": [8, 58, 113, 188, 333, 351, 352, 353, 371, 382, 408, 410, 413, 796, 797, 801, 838, 920, 1005, 1006, 1012, 1024], "graphical_lasso": [2, 385, 472, 473, 1043, 1051], "graphicallasso": [2, 114, 410, 470, 471, 473, 474, 475, 476, 477, 479, 1043, 1051], "graphicallassocv": [2, 52, 114, 399, 410, 472, 474, 475, 476, 477, 479, 1043, 1047, 1049, 1051, 1053], "graphlasso": [472, 1040, 1043], "graphlassocv": [473, 1037, 1043], "graphviz": [920, 1021], "grasp": [284, 1020, 1025], "grassberg": [610, 611], "grate": 1029, "graviton": 384, "gray_r": [69, 124, 174, 233, 308, 329, 330], "grayscal": 69, "greasemonkei": 384, "great": [89, 186, 187, 210, 359, 376, 388, 413, 768, 1025, 1029, 1035, 1042], "greater": [63, 119, 135, 137, 187, 229, 244, 249, 258, 264, 276, 289, 296, 297, 355, 363, 381, 390, 406, 407, 408, 411, 415, 442, 446, 447, 450, 453, 464, 473, 538, 543, 559, 560, 561, 562, 563, 564, 566, 567, 568, 596, 597, 600, 614, 615, 632, 644, 646, 668, 670, 671, 675, 680, 681, 682, 696, 713, 716, 724, 739, 740, 743, 746, 792, 799, 801, 802, 838, 850, 851, 858, 859, 865, 866, 871, 886, 898, 902, 905, 908, 909, 916, 917, 918, 919, 952, 973, 994, 1000, 1001, 1002, 1005, 1006, 1011, 1015, 1020, 1021, 1038, 1043, 1046, 1048, 1049, 1050, 1052], "greater_is_bett": [147, 327, 746, 1005], "greatest": [89, 394, 408, 875, 1043], "greatli": [210, 244, 324, 376, 384, 453, 1008, 1021, 1041, 1049], "greedi": [169, 415, 417, 448, 450, 461, 561, 562, 605, 1001, 1021], "greedili": [117, 169, 408, 412, 417, 461], "greek": [52, 56, 60, 72, 87, 100, 124, 184, 408, 463, 1026], "green": [64, 113, 119, 138, 152, 157, 171, 192, 237, 306, 311, 315, 320, 326, 390, 1006, 1043, 1044, 1046, 1047], "greenhal": 1043, "greg": [1029, 1041, 1042, 1044, 1045], "gregori": [1041, 1045, 1046, 1047, 1048], "gregorystrubel": 1048, "gregov": 1043, "grei": [45, 280, 310, 347, 371], "grep": 376, "greyscal": 308, "grid": [2, 46, 48, 50, 51, 59, 63, 64, 65, 78, 88, 95, 104, 105, 106, 107, 110, 114, 143, 153, 164, 166, 168, 175, 184, 186, 187, 188, 202, 230, 237, 244, 245, 246, 250, 255, 260, 262, 264, 267, 269, 271, 274, 275, 277, 282, 289, 292, 294, 295, 303, 308, 312, 313, 315, 337, 339, 340, 346, 351, 371, 378, 383, 388, 390, 403, 409, 412, 414, 415, 416, 449, 462, 465, 473, 500, 504, 517, 524, 635, 636, 637, 651, 654, 657, 658, 660, 663, 665, 667, 680, 717, 732, 746, 789, 792, 804, 807, 808, 815, 818, 820, 834, 835, 868, 913, 998, 1000, 1005, 1008, 1012, 1025, 1026, 1031, 1035, 1038, 1039, 1040, 1042, 1043, 1049, 1051, 1052, 1053], "grid_encod": 313, "grid_model": 292, "grid_posit": [63, 65], "grid_resolut": [188, 321, 338, 635, 636, 637], "grid_scores_": [1041, 1047, 1048], "grid_search": [107, 141, 251, 260, 268, 278, 326, 409, 1037, 1038, 1039, 1040, 1041, 1042], "grid_siz": [51, 95, 303, 371, 500], "grid_to_graph": [2, 82, 85, 88, 408, 416, 1048], "grid_tograph": 1038, "grid_valu": [188, 637, 1012, 1051], "gridsearch": [88, 110, 281], "gridsearchcv": [2, 44, 88, 102, 104, 106, 107, 110, 128, 141, 184, 245, 251, 260, 262, 264, 268, 269, 270, 271, 275, 278, 281, 287, 292, 294, 308, 312, 321, 325, 326, 340, 344, 359, 364, 378, 388, 390, 399, 404, 409, 412, 415, 418, 422, 504, 522, 542, 543, 578, 602, 610, 657, 707, 746, 815, 818, 868, 878, 908, 916, 994, 1001, 1005, 1009, 1019, 1020, 1026, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053], "gridsiz": 243, "gridspec": [63, 65, 99, 255, 383], "gridspecfromsubplotspec": 383, "griffith": [1043, 1044], "grigorev": 1040, "grigorio": 738, "grime": [693, 697, 1002], "grinsztajn": 1052, "grisel": [0, 391, 397, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "griva": [1049, 1050], "grlivarea": 144, "grobler": [0, 398, 1035, 1036, 1037, 1038], "groceryheist": 1048, "groenen": [694, 698, 1002], "grok": 488, "groothui": [631, 995], "grother": 373, "ground": [2, 28, 59, 69, 76, 83, 91, 92, 95, 110, 114, 117, 124, 151, 179, 198, 207, 212, 213, 249, 261, 273, 352, 390, 408, 707, 708, 709, 712, 716, 717, 718, 719, 721, 722, 725, 727, 728, 730, 732, 733, 734, 738, 740, 741, 742, 743, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 787, 788, 789, 790, 791, 794, 795, 799, 800, 1005, 1018, 1043], "ground_truth": [89, 297], "group": [0, 2, 52, 73, 76, 89, 92, 94, 157, 188, 190, 212, 233, 246, 261, 265, 316, 326, 331, 352, 358, 371, 378, 381, 390, 391, 399, 408, 414, 415, 416, 433, 447, 497, 591, 592, 594, 597, 722, 792, 804, 805, 806, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 835, 881, 882, 918, 919, 945, 947, 1001, 1002, 1004, 1005, 1006, 1015, 1021, 1022, 1024, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052, 1053], "group_1": 881, "group_2": 881, "group_3": 881, "group_by_dynam": 176, "group_df": 220, "group_kfold": 805, "group_prior": 265, "groupbi": [44, 150, 188, 220, 230], "groupkfold": [2, 265, 275, 326, 399, 412, 597, 809, 810, 811, 812, 813, 822, 827, 829, 830, 831, 832, 835, 1041, 1048], "groupshufflesplit": [2, 265, 412, 1041], "grow": [44, 53, 75, 192, 198, 292, 347, 353, 363, 388, 404, 410, 415, 416, 559, 560, 561, 562, 566, 567, 568, 814, 848, 849, 916, 917, 918, 919, 994, 1005, 1008, 1021, 1029, 1038, 1039], "grower": [150, 415, 563, 564], "grown": [373, 415, 555, 556, 557, 558, 559, 560, 566, 567, 916, 917, 918, 919, 1021], "growth": [1005, 1040, 1041], "grumman": 52, "grusak": 1045, "gryllo": [1040, 1043], "gryze": [1037, 1040], "grzegorz": [1042, 1045], "gs_time": 281, "gsh": 281, "gsh_time": 281, "gsiisg": 1050, "gsk": 52, "gss": [412, 806], "gt": [69, 376, 380, 396], "gu": [1046, 1047, 1049], "guan": 1045, "guangguo": 1041, "guarante": [47, 48, 65, 112, 113, 150, 187, 220, 243, 289, 290, 310, 352, 359, 365, 370, 376, 384, 385, 402, 408, 412, 413, 416, 447, 538, 649, 662, 663, 672, 676, 678, 680, 682, 691, 698, 806, 821, 824, 848, 849, 886, 888, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 915, 934, 935, 997, 1001, 1002, 1004, 1008, 1013, 1017, 1021, 1045, 1053], "gubri": [1043, 1044], "gudmalwar": 1047, "gued": 1053, "guerin": [1041, 1042], "guess": [56, 135, 143, 412, 415, 416, 534, 540, 542, 543, 549, 792, 1005, 1019], "guestrin": 415, "guha": 1050, "gui": [1036, 1046], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 53, 63, 65, 89, 102, 121, 141, 180, 184, 187, 188, 200, 232, 277, 296, 297, 300, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 374, 375, 376, 381, 382, 383, 384, 389, 390, 391, 396, 399, 409, 415, 419, 420, 421, 422, 425, 431, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 948, 1005, 1006, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1045, 1052, 1053], "guidanc": [388, 418], "guidelin": [2, 26, 375, 379, 381, 382, 384, 408, 415], "guiel": 496, "guilherm": 1038, "guillaum": [0, 397, 1029, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "guillem": [1044, 1045, 1050], "guillemot": [0, 1041, 1042], "guillermo": 1049, "guiniol": 1042, "guitar": 1050, "guitton": 1047, "guiweb": 1048, "gulati": [1040, 1041, 1042], "gun": [58, 371], "gunduz": 1053, "gunesbayir": [1050, 1051], "gunnar": [537, 952], "guo": 1048, "guoci": 1042, "gupta": [902, 1017, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "gustafson": [1050, 1051], "gustav": 1041, "gustavo": [1043, 1044, 1049], "gutierrez": 1045, "guttman": 698, "guyon": [517, 596, 597, 1005], "guyon2015": 1005, "gwulf": [1039, 1040], "gyeongja": 1053, "gz": [48, 380, 394, 510, 511], "gzip": 1035, "g\u00e9ron": 1043, "g\u00f3rski": [1046, 1047], "g\u00f6khan": [45, 413, 537], "g\u00f6n\u00fcl": 1053, "g\u00fcnther": [1048, 1052], "h": [45, 46, 53, 92, 121, 122, 135, 136, 153, 173, 187, 257, 295, 298, 305, 312, 323, 334, 336, 353, 373, 382, 406, 408, 410, 413, 414, 415, 416, 419, 445, 521, 534, 537, 540, 542, 549, 555, 569, 570, 585, 593, 610, 611, 693, 697, 708, 712, 761, 843, 847, 848, 849, 854, 864, 879, 888, 997, 999, 1001, 1002, 1003, 1005, 1007, 1009, 1010, 1019, 1021, 1041, 1046, 1050, 1051, 1052], "h1998": 415, "h2009": 1012, "h4dr1en": 1045, "h5py": 370, "h_": 1001, "h_i": [413, 1010], "h_init": 382, "h_j": 1010, "h_l": 999, "h_m": 415, "h_pad": [121, 143, 356], "h_samples_": 864, "ha": [0, 44, 45, 48, 51, 52, 53, 63, 67, 71, 73, 80, 84, 89, 90, 91, 94, 107, 112, 113, 117, 121, 133, 140, 143, 145, 147, 148, 150, 152, 157, 167, 168, 171, 176, 177, 178, 183, 187, 188, 189, 190, 192, 206, 212, 213, 214, 218, 229, 230, 232, 239, 243, 245, 246, 249, 250, 253, 255, 256, 258, 260, 261, 264, 265, 268, 269, 270, 273, 274, 276, 281, 282, 289, 293, 296, 297, 298, 300, 307, 310, 311, 313, 315, 319, 320, 321, 322, 323, 325, 327, 329, 332, 340, 344, 345, 346, 351, 358, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 384, 385, 388, 389, 390, 391, 394, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 420, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 495, 496, 499, 500, 510, 511, 518, 528, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 623, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 691, 692, 693, 694, 695, 696, 699, 715, 717, 724, 726, 745, 767, 778, 782, 783, 784, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 818, 822, 825, 826, 827, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 925, 933, 934, 935, 954, 973, 989, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1025, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "haan": 1044, "haar": [54, 1052], "haas": 1045, "habchi": 1045, "haberland": [1050, 1051], "haberth\u00fcr": 1042, "hack": [48, 50], "had": [44, 49, 82, 147, 150, 176, 246, 310, 316, 322, 359, 376, 377, 384, 399, 416, 419, 445, 995, 1005, 1029, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1050], "hadamard": 378, "haddad": 1042, "hadrien": [1042, 1045], "hadshirt": 1045, "haenel": 1038, "haesun": [1047, 1050, 1051], "hafner": 1048, "hagai": 801, "hagberg": 56, "hahn": [1042, 1043], "haiat": 1047, "haidar": [1048, 1049], "hailei": [1045, 1046], "hain": 371, "haitz": [1046, 1048, 1049], "hakaa1": [1042, 1043], "hal": [549, 662, 762, 763, 1003], "halchenko": [0, 398, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1051], "hale": [1037, 1049], "half": [2, 44, 62, 124, 150, 244, 248, 268, 270, 282, 371, 372, 413, 415, 464, 524, 564, 596, 600, 605, 774, 867, 875, 917, 1005, 1008, 1021], "half_cal": 600, "half_selector": 600, "halfbath": 144, "halford": [1043, 1050, 1051], "halkidi": 408, "halko": [413, 537, 543, 546, 951, 952], "hall": [1001, 1042, 1046], "hallock": 1041, "halpert": [696, 1002], "halv": [2, 164, 184, 262, 274, 278, 346, 403, 517, 566, 582, 804, 807, 808, 913, 1026, 1031, 1047], "halvic": 1047, "halvinggridsearchcv": [2, 281, 282, 321, 399, 404, 582, 808, 994, 1047, 1049, 1050, 1052, 1053], "halvingrandomsearchcv": [2, 147, 282, 321, 399, 404, 582, 807, 994, 1047, 1049, 1050, 1051, 1052, 1053], "halwai": 1041, "ham": [2, 47, 451, 458, 584, 703, 707, 713, 738, 745, 782, 783, 784, 800, 1008], "hamada": 1047, "hamdi": [1052, 1053], "hammerbach": 1039, "hamming_loss": [2, 47, 707, 800, 1005, 1037, 1041, 1044], "hammingdist": 703, "hammoudeh": 1044, "hamoumi": 1048, "hampu": 1039, "hamzeh": [0, 1038, 1039], "han": [408, 443, 451, 458, 1035, 1043, 1044, 1048], "hancock": 1045, "hand": [45, 66, 85, 87, 117, 123, 124, 126, 141, 147, 164, 167, 176, 184, 187, 188, 205, 206, 216, 219, 236, 242, 243, 245, 246, 249, 263, 264, 267, 272, 279, 284, 294, 329, 330, 340, 357, 363, 370, 371, 373, 376, 378, 382, 384, 389, 413, 414, 415, 417, 425, 431, 504, 647, 701, 717, 792, 834, 889, 913, 994, 998, 1001, 1005, 1007, 1009, 1013, 1018, 1020, 1026, 1029], "handbook": [724, 744, 1005], "handi": [83, 104, 352, 353, 377, 1051], "handk": 1051, "handl": [0, 2, 44, 49, 104, 141, 144, 148, 150, 151, 155, 192, 198, 205, 245, 246, 264, 272, 277, 279, 287, 289, 290, 297, 316, 319, 326, 351, 353, 358, 363, 368, 370, 376, 377, 378, 385, 388, 390, 415, 416, 418, 498, 546, 580, 584, 585, 591, 592, 594, 614, 639, 650, 651, 656, 662, 663, 664, 665, 666, 672, 679, 680, 682, 685, 724, 792, 872, 881, 882, 908, 909, 913, 920, 924, 953, 961, 964, 1002, 1005, 1006, 1007, 1008, 1011, 1013, 1020, 1021, 1024, 1025, 1029, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "handle_data": 48, "handle_endtag": 48, "handle_starttag": 48, "handle_unknown": [44, 104, 140, 144, 155, 188, 189, 241, 249, 251, 253, 316, 320, 323, 881, 882, 1015, 1039, 1043, 1047, 1048], "handler": 1046, "handler_map": 297, "handlerpathcollect": 297, "handletextpad": 356, "handpick": 239, "handprint": 373, "handwritten": [52, 72, 81, 86, 91, 93, 95, 98, 140, 167, 184, 231, 232, 234, 236, 243, 258, 268, 300, 307, 308, 329, 330, 352, 369, 408, 415, 448, 504, 543, 546, 551, 568, 692, 693, 694, 695, 696, 708, 709, 721, 741, 797, 799, 857, 869, 878, 888, 901, 1002, 1008, 1026, 1031], "hang": [376, 1045, 1046], "hank": 1038, "hanmin": [0, 398, 1042, 1043, 1044, 1045, 1046], "hann": 1035, "hanna": [1039, 1040, 1046], "hannah": [1045, 1047, 1049], "hannel": [1043, 1044], "hansen": 1043, "hansin": [1049, 1050], "hanu\u0161": 1052, "hanxiang": [683, 1001], "hao": [1046, 1047, 1049, 1050], "haoi": 1052, "haoran": 1043, "haoyin": [1046, 1048, 1049], "happen": [2, 45, 65, 140, 200, 264, 310, 316, 352, 359, 363, 364, 374, 375, 376, 378, 380, 381, 382, 388, 390, 391, 394, 402, 408, 410, 412, 415, 438, 517, 574, 662, 789, 886, 888, 908, 945, 1001, 1005, 1006, 1020, 1025, 1043, 1047, 1048, 1050, 1051, 1052, 1053], "happi": [187, 264, 388, 391, 822, 823], "haqu": [1037, 1038, 1039], "harabasz": [2, 714], "harabaz": 1041, "hard": [49, 212, 239, 243, 270, 272, 365, 375, 388, 390, 407, 408, 413, 416, 536, 543, 571, 680, 910, 911, 912, 913, 914, 1001, 1018, 1020, 1021, 1025, 1044, 1045], "hardcod": [441, 455, 1043], "harder": [279, 280, 314, 371, 375, 378, 384, 388, 408, 517, 563, 564], "hardest": 396, "hardin": 113, "hardli": [89, 610, 611], "hardwar": [58, 333, 353, 363, 364, 371, 374, 388, 394, 402, 404, 1024, 1049, 1050], "hare": 1001, "harfouch": 1051, "harikrishnan": 1037, "harizo": [1041, 1042], "harm": [351, 378, 416, 799], "harmanan": [1052, 1053], "harmon": [44, 73, 352, 408, 537, 543, 733, 734, 740, 787, 799, 1005], "haroldfox": [1043, 1044], "harper": 1042, "harri": [1039, 1041, 1047, 1048], "harsanyi": 1051, "harsh": [425, 438, 470, 551, 552, 553, 555, 557, 559, 561, 563, 566, 569, 571, 614, 662, 670, 672, 678, 679, 680, 803, 826, 836, 837, 838, 839, 843, 844, 845, 846, 847, 850, 855, 858, 865, 903, 904, 908, 910, 913, 916, 918, 1045, 1047, 1050], "harshit5674": 1050, "hart": [373, 999, 1043], "hartong": 1046, "harutaka": 1048, "harwar": 388, "has_fit_paramet": [2, 385], "hasan": 1050, "hasattr": [80, 90, 96, 114, 133, 143, 230, 243, 305, 312, 351, 390, 423, 427, 433, 965, 1045], "haseeb": [1048, 1049], "hash": [2, 48, 53, 134, 184, 352, 353, 363, 365, 368, 376, 379, 388, 415, 516, 546, 559, 568, 584, 585, 592, 644, 843, 969, 997, 1026, 1031, 1036, 1039, 1042], "hashabl": [390, 876, 879, 1016], "hashcode55": 1041, "hasher": [153, 353, 416], "hashingvector": [2, 48, 353, 365, 416, 490, 591, 593, 594, 1036, 1042, 1043, 1044, 1045, 1048], "hashlib": 48, "hasil": 1039, "hasn": 399, "hassaan": [1043, 1044], "hassan": 1048, "hassen": 1035, "hassoun": 1050, "hasti": [2, 135, 138, 139, 149, 200, 269, 373, 412, 415, 521, 522, 555, 561, 562, 632, 660, 725, 727, 728, 838, 855, 901, 916, 917, 995, 999, 1001, 1006, 1012, 1017, 1019, 1021], "hat": [113, 130, 266, 270, 295, 322, 374, 406, 410, 414, 415, 996, 1001, 1002, 1005, 1007, 1009], "hathidara": 1047, "hatwar": [1043, 1044], "hauck": 1041, "hausamann": [1043, 1044], "haussler": 179, "hav": 396, "have": [0, 2, 26, 44, 45, 47, 48, 49, 51, 52, 53, 54, 62, 63, 64, 65, 73, 75, 78, 79, 81, 82, 84, 87, 89, 91, 94, 96, 98, 99, 104, 110, 112, 117, 119, 126, 135, 142, 143, 144, 145, 147, 150, 165, 166, 169, 171, 172, 176, 177, 178, 183, 186, 187, 188, 189, 190, 192, 194, 198, 212, 213, 214, 216, 230, 236, 239, 241, 246, 247, 249, 250, 256, 257, 258, 260, 263, 264, 270, 271, 273, 276, 277, 283, 284, 285, 287, 290, 292, 293, 296, 297, 310, 315, 316, 317, 319, 321, 322, 326, 330, 331, 332, 337, 343, 344, 345, 347, 351, 352, 358, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 494, 496, 497, 498, 510, 511, 516, 525, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 691, 692, 693, 694, 695, 696, 703, 708, 709, 715, 716, 719, 724, 730, 735, 740, 760, 761, 762, 763, 786, 789, 790, 796, 799, 801, 802, 803, 804, 807, 808, 809, 810, 815, 818, 822, 826, 827, 829, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 934, 936, 938, 940, 952, 979, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "havelabeleddatado": 396, "haversin": [2, 303, 414, 703, 766, 768, 1008, 1044, 1047], "haversine_dist": [2, 766, 1044], "haversinedist": 703, "hawaii": 176, "haxbi": 0, "haya": 1049, "hayashi": 1043, "hbgt": 150, "hd": 52, "hdb": [89, 447], "hdbscan": [2, 72, 80, 83, 99, 184, 243, 419, 445, 514, 888, 995, 1024, 1026, 1030, 1031, 1051, 1052, 1053], "hdbscan_min_cluster_s": 80, "hdbscan_min_sampl": 80, "hdf5": 370, "hdl": 373, "hdmetor": 1041, "he": [376, 730, 760, 865, 866, 898, 899, 1005, 1042, 1049, 1050], "head": [0, 53, 64, 104, 176, 187, 200, 202, 230, 253, 260, 316, 319, 324, 376, 384, 397, 413, 1029, 1040, 1041, 1050, 1051, 1052, 1053], "head_width": 64, "header": [55, 103, 271, 351, 352, 371, 374, 416, 489, 490, 804, 807, 808, 818], "heali": 408, "health": 327, "heap": 451, "heapq": 464, "heard": 376, "heart": 249, "heat": [155, 340, 408, 453, 463, 699], "heatingqc": 155, "heatmap": [188, 190, 194, 198, 281, 324, 340, 636, 1012], "heatmap_kw": 636, "heatmaps_": 636, "heavei": 1043, "heavi": [214, 388, 405, 1025], "heavier": [130, 410, 1001], "heavili": [202, 363, 364, 376, 384, 653, 659, 782, 1022], "heavy_rain": [44, 188], "hebei": 408, "hedlund": 1051, "hedyati": 1039, "hee": [1042, 1045], "heer": 1046, "hegd": 1052, "heidelberg": [176, 408, 413, 537, 700, 730, 760, 1005], "height": [48, 55, 87, 124, 144, 145, 169, 310, 316, 326, 351, 414, 447, 495, 496, 508, 589], "heikki": 1017, "heilman": [1039, 1040], "held": [44, 48, 104, 128, 148, 189, 220, 257, 273, 278, 289, 412, 415, 561, 562, 563, 564, 705, 804, 807, 808, 818, 865, 866, 878, 994, 995, 1004, 1013], "helder": [1039, 1048, 1049], "heldout": 219, "heldout_scor": 146, "heli": 1042, "hello": [376, 384, 965, 969], "helloifeven": 965, "helm": 1053, "helmu": 1039, "help": [0, 42, 44, 49, 51, 89, 103, 107, 126, 131, 188, 198, 230, 232, 264, 271, 273, 283, 287, 308, 337, 340, 353, 359, 363, 364, 376, 377, 378, 379, 380, 381, 382, 384, 385, 390, 391, 393, 402, 408, 409, 412, 416, 418, 432, 538, 580, 631, 654, 658, 669, 689, 690, 696, 718, 844, 916, 917, 918, 919, 995, 999, 1000, 1002, 1004, 1005, 1007, 1009, 1015, 1016, 1021, 1023, 1024, 1025, 1028, 1029, 1041, 1042, 1043, 1046, 1049, 1053], "helper": [45, 46, 124, 230, 281, 369, 378, 379, 389, 412, 469, 578, 906, 993, 1035, 1042, 1043, 1044, 1048], "helvetica": [920, 922], "heme": 1052, "hempstalk": 1042, "henc": [73, 94, 105, 187, 216, 243, 264, 279, 340, 351, 352, 363, 371, 378, 380, 382, 390, 394, 408, 412, 415, 416, 488, 510, 541, 543, 544, 545, 565, 593, 647, 650, 656, 664, 666, 676, 691, 708, 709, 713, 719, 735, 761, 790, 799, 820, 823, 824, 843, 844, 845, 846, 847, 883, 961, 1002, 1004, 1005, 1006, 1011, 1012, 1015, 1025, 1042, 1043, 1046, 1047, 1049], "hendrik": [0, 398, 1035, 1038, 1039, 1040, 1041], "henri": [1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "henrymooresc": [1049, 1050], "hepe": [683, 1001], "here": [44, 48, 49, 52, 53, 54, 56, 62, 65, 91, 92, 100, 110, 114, 119, 123, 124, 126, 128, 129, 131, 135, 138, 141, 144, 148, 150, 155, 166, 169, 171, 179, 180, 187, 188, 189, 192, 194, 198, 202, 206, 212, 216, 218, 227, 228, 230, 232, 234, 239, 244, 246, 249, 250, 256, 257, 258, 263, 264, 267, 268, 270, 272, 273, 275, 277, 279, 280, 282, 283, 284, 287, 290, 292, 299, 302, 306, 307, 308, 312, 315, 321, 323, 326, 329, 331, 340, 344, 347, 349, 353, 355, 357, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 381, 382, 384, 388, 389, 399, 402, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 421, 438, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 465, 473, 476, 538, 540, 541, 545, 546, 565, 569, 570, 571, 572, 584, 585, 587, 591, 594, 597, 605, 613, 632, 634, 651, 655, 657, 659, 665, 667, 669, 677, 679, 693, 695, 699, 703, 716, 730, 760, 798, 803, 804, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 835, 844, 848, 849, 872, 880, 883, 886, 889, 900, 901, 911, 970, 994, 997, 1001, 1002, 1003, 1004, 1005, 1008, 1011, 1015, 1017, 1018, 1019, 1020, 1024, 1025, 1028, 1029, 1035, 1043, 1048], "hereaft": 391, "hereund": 1011, "herilalaina": [1042, 1043, 1045], "hermano": [1050, 1051], "hermida": [1044, 1048], "hernandez": 1005, "hern\u00e1ndez": 1005, "hero": [410, 421, 476], "herrou": 1049, "hershei": 1005, "hertel": 1052, "herv": 1039, "hervieu": 1035, "herv\u00e9": 1039, "heryanto": 1042, "hesit": 376, "hessian": [232, 233, 234, 415, 563, 564, 652, 662, 663, 673, 684, 693, 697, 1001, 1009, 1030, 1031, 1050], "hessian_tol": [693, 697], "heterogen": [44, 48, 49, 62, 89, 102, 104, 184, 188, 212, 253, 315, 319, 353, 368, 370, 388, 465, 489, 543, 584, 594, 717, 868, 872, 908, 1002, 1012, 1015, 1024, 1026, 1031, 1039, 1043, 1045, 1046, 1053], "heteroscedast": [121, 128, 147, 214, 413, 884, 896], "heteroschedast": 1005, "heuer": 1038, "heurist": [52, 55, 146, 249, 351, 364, 408, 417, 450, 453, 462, 463, 510, 511, 539, 541, 548, 680, 681, 682, 695, 699, 807, 808, 910, 911, 912, 913, 914, 939, 1002, 1003, 1008, 1019, 1021, 1029, 1035, 1036, 1040, 1044, 1047, 1048], "hexbin": 243, "hexdigest": 48, "hgbdt": 141, "hgbdt_model": 188, "hgbdt_model_without_interact": 188, "hgbdt_preprocessor": 188, "hgbt": [141, 150, 415], "hgbt_cst": 150, "hgbt_no_cst": 150, "hgbt_quantil": 150, "hhu": [653, 1044], "hi": [0, 409, 1005], "hibon": 1042, "hida": [1050, 1051], "hidden": [44, 188, 307, 308, 376, 384, 405, 413, 864, 865, 866, 1009, 1010, 1024, 1035, 1046], "hidden_layer_s": [188, 250, 305, 307, 865, 866, 1009], "hide": [53, 79, 376, 384, 843, 844, 845, 846, 847, 1038, 1043, 1051], "hideaki": 1049, "hierarch": [2, 54, 60, 72, 75, 76, 80, 81, 86, 87, 88, 90, 91, 184, 190, 236, 323, 358, 390, 416, 442, 444, 446, 447, 506, 514, 516, 524, 532, 549, 735, 861, 888, 1022, 1026, 1030, 1031, 1035, 1038, 1039, 1051], "hierarchi": [77, 190, 376, 451, 457, 464, 1010], "higgin": [1052, 1053], "high": [0, 38, 44, 49, 51, 52, 63, 65, 68, 73, 76, 80, 83, 89, 91, 96, 99, 107, 112, 113, 123, 124, 138, 140, 141, 142, 147, 148, 150, 151, 153, 171, 177, 183, 186, 188, 189, 190, 198, 208, 213, 214, 216, 226, 232, 233, 234, 239, 243, 255, 261, 268, 272, 276, 277, 296, 297, 305, 307, 312, 314, 315, 316, 317, 325, 332, 337, 339, 340, 351, 352, 357, 363, 371, 373, 376, 381, 384, 385, 388, 389, 405, 406, 407, 408, 412, 414, 415, 416, 417, 418, 445, 448, 450, 451, 453, 470, 483, 484, 485, 555, 556, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 648, 674, 675, 683, 693, 696, 697, 730, 735, 746, 750, 760, 793, 796, 812, 814, 848, 849, 853, 882, 883, 887, 889, 910, 912, 913, 916, 917, 918, 919, 973, 994, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1011, 1013, 1015, 1017, 1020, 1021, 1022, 1024, 1025, 1035, 1036, 1038, 1039, 1043, 1046, 1047, 1048, 1049, 1050], "high_cardin": 316, "high_cardinality_featur": 316, "high_i": 208, "high_precision_cv_result": 268, "high_recall_cv_result": 268, "high_x": 208, "higher": [44, 53, 91, 112, 124, 128, 135, 138, 140, 141, 147, 151, 167, 171, 173, 178, 179, 187, 188, 189, 192, 205, 209, 212, 213, 216, 230, 236, 237, 261, 263, 264, 268, 270, 273, 285, 295, 315, 340, 344, 352, 353, 357, 359, 363, 371, 374, 378, 405, 407, 408, 410, 415, 417, 418, 419, 445, 449, 450, 472, 479, 511, 534, 541, 545, 550, 555, 556, 559, 560, 561, 562, 563, 564, 566, 567, 568, 575, 591, 594, 610, 611, 623, 631, 635, 639, 641, 650, 651, 656, 657, 664, 665, 666, 667, 680, 682, 683, 708, 728, 732, 756, 789, 801, 804, 807, 808, 810, 818, 825, 827, 832, 835, 854, 857, 883, 900, 901, 902, 908, 909, 910, 911, 912, 913, 914, 921, 997, 1001, 1002, 1004, 1005, 1008, 1012, 1015, 1019, 1020, 1036, 1041, 1043, 1050, 1052], "highest": [2, 56, 64, 114, 165, 169, 216, 268, 270, 281, 321, 351, 376, 388, 406, 408, 412, 415, 417, 438, 557, 559, 566, 595, 598, 599, 601, 602, 603, 606, 607, 609, 639, 641, 730, 760, 798, 801, 804, 807, 808, 818, 905, 916, 954, 994, 1001, 1005, 1006, 1009, 1019, 1021, 1047], "highest_protocol": 402, "highli": [44, 49, 65, 105, 112, 113, 123, 131, 151, 198, 208, 217, 264, 270, 273, 279, 306, 344, 352, 363, 364, 376, 382, 388, 406, 408, 412, 415, 416, 453, 463, 498, 565, 675, 696, 816, 818, 864, 1001, 1005, 1008, 1009, 1011, 1019, 1020, 1023, 1024], "highlight": [44, 55, 89, 104, 112, 119, 133, 139, 140, 142, 152, 169, 171, 172, 177, 182, 183, 188, 189, 192, 205, 212, 213, 214, 230, 241, 246, 250, 251, 252, 253, 264, 265, 282, 284, 292, 314, 316, 332, 351, 353, 376, 380, 381, 384, 388, 418, 444, 447, 448, 465, 468, 491, 492, 498, 503, 504, 506, 514, 517, 523, 526, 540, 543, 563, 564, 566, 567, 569, 602, 605, 632, 634, 636, 638, 644, 650, 652, 656, 662, 673, 684, 692, 701, 705, 706, 721, 722, 736, 746, 752, 782, 792, 799, 803, 804, 805, 807, 808, 810, 818, 826, 827, 830, 831, 834, 850, 852, 869, 873, 878, 881, 882, 883, 887, 888, 889, 905, 906, 908, 913, 916, 917, 947, 1002, 1005, 1013, 1015, 1020, 1026, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "highlight_min": [147, 202], "higuera": 370, "hila": 408, "hilbert": [217, 874, 997, 1015], "hilferti": 112, "hill": [408, 449, 462, 1045], "him": 416, "himanshu": [1046, 1049], "hind": 1049, "hinder": 1045, "hing": [2, 63, 219, 222, 224, 278, 337, 338, 342, 344, 390, 670, 680, 739, 908, 915, 1001, 1019, 1020], "hinge_loss": [2, 344, 1005, 1039, 1047, 1048], "hinrich": 413, "hint": [187, 363, 377, 381, 399, 449, 1005], "hinton": [696, 857, 864, 865, 866, 1002, 1008, 1009, 1010], "hintz": 1041, "hiramatsu": 1052, "hirofumi": [1046, 1047], "hirsch": 1043, "hirschberg": [408, 721, 741, 799], "hirzel": 1048, "hist": [44, 63, 65, 87, 108, 137, 141, 212, 214, 243, 249, 264, 276, 295, 310, 314, 316, 323, 326, 415], "hist_drop": 144, "hist_n": 144, "hist_nbin": 310, "hist_no_interact": 324, "hist_one_hot": 144, "hist_ordin": 144, "hist_quantil": 323, "hist_x0": 310, "hist_x1": 310, "histgradientboost": 1047, "histgradientboostingclassifi": [2, 140, 141, 264, 319, 320, 321, 322, 324, 326, 364, 388, 402, 561, 566, 636, 637, 995, 1024, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "histgradientboostingregressor": [2, 44, 47, 53, 136, 141, 144, 147, 148, 150, 152, 155, 182, 188, 212, 316, 319, 320, 321, 322, 324, 325, 326, 388, 415, 562, 567, 636, 637, 639, 995, 1012, 1024, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "histgradientboostingregressor__interaction_cst": 188, "histgradientboostingregressor__max_depth": 144, "histgradientboostingregressor__max_it": 144, "histogram": [2, 53, 63, 65, 87, 134, 136, 144, 145, 147, 148, 152, 184, 212, 220, 243, 269, 271, 276, 295, 310, 321, 323, 325, 326, 406, 491, 498, 561, 562, 563, 564, 566, 567, 636, 646, 746, 752, 762, 763, 794, 804, 809, 825, 831, 834, 997, 1003, 1015, 1026, 1030, 1031, 1047, 1050, 1052], "histor": [52, 212, 264, 1002, 1025], "histori": [52, 380, 561, 562, 1035], "hit": [214, 382], "hitesh": 1047, "hjortkj\u00e6r": 1049, "hkey_local_machin": 394, "hline": 123, "hlle": 1002, "hmasdev": 1049, "hmc": 52, "hmm": [1035, 1036, 1037, 1038, 1040], "hmmlearn": 1024, "hn": 382, "hnyk": [1041, 1042], "ho": [415, 557, 558, 1005, 1040, 1043, 1044, 1049], "hoang": [1044, 1045], "hobson": 1041, "hoc": [168, 169, 184, 262, 264, 273, 287, 327, 332, 390, 407, 498, 662, 820, 826, 831, 869, 888, 1026], "hochberg": [598, 1041, 1042], "hochreit": [405, 723], "hockei": [58, 371], "hoctor": 1047, "hoda1394": 1047, "hoenig": 1035, "hoesli": 415, "hoffman": [413, 538, 1040, 1047], "hogan": 1043, "hoh": 1043, "hold": [0, 48, 53, 64, 65, 212, 216, 246, 264, 271, 358, 369, 376, 377, 378, 390, 406, 408, 412, 415, 416, 418, 505, 559, 563, 566, 592, 636, 637, 638, 740, 804, 807, 808, 818, 844, 875, 876, 881, 882, 889, 892, 916, 918, 995, 999, 1005, 1009, 1019, 1020, 1021, 1043, 1047, 1053], "holdgraf": 1043, "holdselig": 416, "hole": [184, 231, 232, 237, 532, 696, 697, 1026, 1049], "holger": 1042, "holidai": 44, "holm": [839, 1006, 1052], "holman": 1050, "holmstr\u00f6m": 1037, "holohan": [1050, 1052], "holt": [0, 398, 1035], "holub": 536, "home": [0, 2, 7, 52, 155, 371, 374, 384, 394, 487, 493, 501, 683, 1029], "homebrew": [379, 394], "homepag": [371, 532, 1021], "homm": 1050, "homo": 92, "homogen": [2, 73, 74, 75, 80, 81, 83, 89, 92, 352, 371, 388, 390, 410, 415, 418, 447, 618, 708, 721, 735, 740, 741, 761, 799, 1002, 1003, 1005, 1044], "homogeneity_completeness_v_measur": [2, 408, 1044], "homogeneity_scor": [2, 74, 83, 92, 352, 408, 721, 740, 799, 1005], "homomorph": 1024, "homoscedast": [128, 242, 314, 1005, 1043], "homoschedast": 1005, "honda": 52, "honei": 999, "hong": [1041, 1043, 1047, 1048, 1049, 1051, 1053], "hongh": 1043, "hongkahjun": 1042, "honglu": 1045, "hongshaoyang": 1050, "honl": [1047, 1048], "honolulu": 1005, "hood": [402, 1001, 1020], "hoover": [1040, 1041, 1042, 1044], "hope": [31, 45, 177, 230, 390, 1044], "hopefulli": [273, 384, 1035], "hopfensperg": [1052, 1053], "hopper": 1040, "horizont": [67, 121, 232, 244, 310, 313, 381, 390, 465, 517, 701, 705], "horizontal_distance_to_hydrologi": 492, "horizontalalign": [52, 64, 68, 76, 80, 96, 239, 255, 305, 312], "hornik": 639, "hornstein": 1050, "horrel": 1042, "hoshia": 1049, "hossein": [1043, 1044, 1045], "host": [0, 141, 325, 371, 376, 380, 384, 385, 493, 901, 1051], "hot": [2, 44, 104, 140, 155, 187, 212, 279, 311, 312, 316, 321, 340, 390, 415, 416, 553, 568, 584, 652, 662, 663, 673, 684, 871, 873, 875, 876, 879, 881, 882, 889, 1001, 1015, 1043, 1049, 1050], "hot_r": [52, 310], "hotel": 1029, "hotspot": 382, "hour": [44, 150, 187, 188, 376, 382, 498, 1002, 1023], "hour_co": 44, "hour_df": 44, "hour_sin": 44, "hour_workday_interact": 44, "hourli": [44, 150, 187], "hourly_wag": 186, "hous": [2, 108, 145, 155, 182, 183, 310, 321, 369, 491, 1031], "house_pric": [108, 155], "houseag": [310, 321, 371, 491], "household": 371, "housestyl": [144, 155], "hover": 326, "hover_data": [141, 271], "how": [0, 44, 45, 47, 48, 49, 50, 53, 59, 60, 63, 64, 65, 69, 70, 73, 84, 85, 86, 87, 91, 94, 102, 103, 104, 107, 110, 112, 117, 130, 135, 136, 139, 143, 144, 145, 147, 148, 150, 153, 155, 166, 167, 178, 184, 187, 188, 189, 190, 192, 196, 201, 202, 203, 205, 209, 213, 214, 215, 216, 219, 220, 226, 230, 236, 237, 241, 244, 246, 248, 249, 250, 252, 261, 264, 265, 266, 268, 270, 271, 272, 277, 279, 280, 282, 284, 285, 289, 290, 292, 293, 294, 296, 297, 302, 307, 315, 317, 320, 321, 322, 325, 326, 337, 338, 340, 343, 344, 347, 351, 352, 355, 357, 358, 363, 364, 365, 371, 374, 375, 377, 378, 379, 381, 384, 389, 390, 391, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 432, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 506, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 626, 627, 631, 632, 633, 634, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 708, 724, 761, 796, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 988, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1011, 1012, 1013, 1015, 1017, 1018, 1020, 1021, 1023, 1025, 1029, 1031, 1035, 1037, 1040, 1046, 1049, 1050, 1051], "howel": 1042, "howev": [0, 44, 45, 47, 53, 54, 62, 63, 65, 73, 82, 83, 87, 89, 94, 105, 108, 110, 114, 116, 126, 128, 138, 140, 141, 144, 147, 148, 155, 166, 169, 171, 176, 177, 188, 189, 196, 202, 212, 216, 233, 236, 237, 239, 245, 246, 249, 264, 270, 277, 283, 284, 285, 287, 289, 290, 295, 306, 310, 321, 327, 344, 347, 351, 352, 357, 359, 363, 364, 365, 370, 371, 373, 375, 376, 378, 382, 384, 388, 390, 399, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 441, 444, 448, 450, 452, 455, 460, 498, 510, 534, 543, 553, 569, 584, 585, 586, 592, 609, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 636, 637, 642, 647, 659, 660, 676, 691, 696, 699, 704, 767, 769, 804, 806, 807, 808, 818, 821, 824, 831, 835, 836, 847, 865, 866, 871, 880, 881, 886, 910, 911, 913, 930, 957, 973, 994, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1044, 1045, 1047, 1048, 1051], "hoyer": [413, 1038], "hp": 52, "hpq": 52, "hrishikesh": [1036, 1037], "hristo": [1043, 1050], "hsiang": [662, 1039], "hsieh": 1041, "hspace": [46, 54, 55, 80, 96, 121, 230, 239, 255, 257, 258, 261, 295, 321, 330, 337], "hstack": [54, 70, 78, 157, 165, 237, 248, 265, 343, 412, 867], "hsuan": 1040, "ht2001": 1005, "htf": 415, "htm": [916, 917], "html": [2, 44, 48, 104, 192, 251, 371, 373, 376, 377, 379, 380, 384, 409, 412, 416, 422, 488, 510, 511, 662, 843, 847, 945, 947, 948, 1003, 1024, 1025, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "htmledit": [843, 847, 1003], "htmlparser": 48, "htsedebenham": 1050, "http": [44, 46, 48, 52, 53, 56, 62, 104, 192, 212, 220, 228, 230, 237, 284, 287, 289, 290, 307, 370, 371, 373, 374, 376, 380, 381, 382, 384, 388, 390, 394, 408, 412, 417, 443, 450, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 510, 511, 512, 532, 533, 536, 539, 543, 598, 640, 645, 648, 653, 662, 668, 670, 671, 672, 675, 680, 683, 686, 687, 689, 690, 696, 699, 709, 725, 727, 728, 762, 763, 773, 843, 845, 847, 850, 851, 856, 857, 858, 859, 864, 886, 901, 902, 903, 916, 917, 945, 947, 1001, 1003, 1005, 1018, 1021, 1045], "hu": [1040, 1043, 1045], "hua": [565, 1011], "huang": [371, 662, 1041, 1046], "huangk10": 1046, "huard": 1035, "huber": [26, 197, 222, 415, 562, 653, 680, 682, 1019, 1035, 1037, 1038, 1047], "huberlossfunct": 1048, "huberregressor": [2, 88, 171, 184, 193, 210, 216, 217, 218, 317, 526, 674, 675, 676, 682, 683, 1001, 1026, 1041, 1042, 1043, 1044], "hubert": [408, 709, 719, 790], "hubert1985": 709, "hue": [127, 150, 260, 270, 315, 373], "huerta": 1045, "hug": [0, 169, 397, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "huge": [214, 217, 363, 382, 631, 1038], "hugh": [883, 1037, 1048], "hugo": [371, 1041, 1046, 1047, 1048, 1049], "hugorichard": 1047, "hugu": 1039, "hui": [200, 540, 542, 549, 660, 1001], "huiginn": 1035, "huilgolkar": [1036, 1037], "hujiahong726": 1051, "hull": 1052, "humahn": 1050, "human": [121, 188, 376, 408, 413, 865, 866, 1005, 1012, 1044], "humid": [188, 1012], "hunan": 1043, "hundr": [78, 146, 233, 314, 371, 412, 415, 563, 564, 1002, 1046], "hunt": 1050, "hunter": 1044, "hurt": [363, 536, 1043], "husak": 1049, "huszar": 1029, "hut": [696, 1002, 1040, 1042, 1045], "huynh": [1045, 1047], "hv": 416, "hvassard": 1049, "hwan": 1046, "hwang": 1041, "hybrid": [447, 653, 1024], "hye": 1046, "hyper": [2, 44, 65, 104, 141, 263, 264, 270, 275, 308, 340, 359, 378, 388, 389, 390, 403, 412, 415, 417, 469, 648, 649, 808, 816, 818, 864, 906, 1000, 1001, 1005, 1008, 1019, 1020, 1024, 1031, 1035, 1049], "hyperband": 994, "hyperbol": [344, 646, 865, 866, 1003, 1009], "hypercub": [239, 517], "hyperlink": 1037, "hyperparamet": [2, 104, 106, 107, 150, 171, 172, 178, 179, 182, 184, 188, 194, 198, 202, 226, 230, 239, 249, 262, 264, 268, 273, 275, 281, 282, 292, 308, 351, 378, 390, 408, 412, 413, 415, 418, 504, 537, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 647, 657, 663, 669, 677, 680, 732, 789, 804, 818, 913, 994, 999, 1000, 1001, 1004, 1005, 1007, 1009, 1011, 1019, 1025, 1026, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "hyperparameter_baseline_similar": 179, "hyperparameter_grid": 326, "hyperparameter_length_scal": 619, "hyperplan": [137, 174, 184, 193, 221, 247, 273, 335, 336, 337, 338, 339, 340, 344, 345, 514, 635, 662, 663, 670, 672, 678, 679, 680, 681, 908, 910, 912, 913, 1019, 1020, 1026], "hyperplane_handl": 205, "hyperplane_label": 205, "hyperspher": 372, "hypothes": 1001, "hypothesi": [147, 270, 276, 412, 694, 698, 833, 1002], "hypothet": 65, "hyunjin": 1035, "hyvarinen": [420, 535], "h\u00e9lion": 1046, "i": [0, 2, 8, 31, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 299, 300, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 338, 339, 340, 344, 345, 347, 348, 349, 351, 352, 353, 355, 356, 357, 359, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 389, 390, 391, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 951, 952, 954, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 973, 974, 975, 976, 978, 979, 985, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "i_ax": 290, "i_dataset": [80, 96, 239], "i_j": 1013, "iain": [373, 1001], "iampat": 1043, "ian": [1037, 1039, 1044, 1045, 1047, 1050, 1051, 1053], "iasoon": 1049, "ibay": 1035, "ibieta": 1048, "ibm": [52, 58, 333, 353, 371], "ibn": 1035, "ibnukhsein": 1052, "ibraheem": 1044, "ibrahima": 1045, "ibraim": [1040, 1041, 1042], "ib\u00e1\u00f1ez": [1043, 1044, 1047], "ic": [48, 287, 321, 370, 373, 393, 502, 504, 512, 636, 637, 1031, 1047, 1048], "ica": [11, 123, 420, 1021, 1030, 1031], "ica_estim": 121, "icann": 700, "icassp": 1005, "icdm": [565, 1011], "icdmw": 408, "ice_lines_kw": 636, "icml": [63, 65, 406, 408, 416, 438, 440, 843, 845, 864, 1005, 1007, 1019, 1023], "icml03": 845, "icon": [326, 378], "icyblad": 1042, "id": [2, 46, 53, 230, 303, 358, 370, 371, 376, 384, 410, 412, 416, 422, 496, 497, 498, 920, 922, 947, 1043, 1044, 1047], "id3": [1027, 1031], "idea": [45, 87, 112, 113, 141, 169, 176, 187, 213, 232, 264, 295, 340, 355, 363, 364, 376, 381, 382, 410, 411, 412, 413, 414, 415, 417, 610, 611, 1001, 1002, 1005, 1008, 1011, 1023, 1029], "ideal": [212, 214, 230, 264, 267, 270, 277, 279, 280, 359, 375, 376, 377, 378, 380, 381, 384, 388, 390, 406, 407, 730, 760, 994, 1004, 1019, 1020, 1025, 1028], "idelberg": 1052, "ident": [53, 58, 98, 146, 208, 212, 230, 239, 243, 334, 351, 371, 378, 390, 405, 408, 409, 410, 412, 418, 421, 439, 440, 453, 465, 466, 474, 476, 477, 480, 481, 482, 489, 505, 553, 561, 562, 566, 567, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 647, 683, 684, 703, 708, 709, 740, 789, 799, 806, 809, 819, 820, 823, 824, 850, 851, 857, 865, 866, 872, 873, 885, 897, 916, 917, 998, 999, 1002, 1005, 1008, 1009, 1020, 1039, 1043, 1044, 1045, 1049, 1053], "identif": [371, 376, 408, 499, 994], "identifi": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 371, 375, 376, 381, 390, 407, 408, 409, 412, 415, 416, 447, 451, 458, 488, 498, 510, 511, 557, 558, 559, 560, 565, 566, 567, 568, 609, 647, 653, 703, 716, 778, 833, 854, 855, 873, 903, 904, 994, 1001, 1005, 1011, 1018, 1029, 1042, 1044, 1049, 1050], "idf": [2, 55, 58, 243, 351, 352, 353, 371, 413, 523, 546, 591, 592, 593, 594, 847, 855, 880, 994, 1003, 1007, 1015, 1035], "idf_": [416, 593, 594, 1043], "idier": [413, 540, 542, 549], "idiom": 382, "idl": 1046, "ido": [1050, 1051], "idpol": 230, "idx": [51, 58, 89, 130, 137, 141, 143, 150, 156, 180, 188, 190, 198, 211, 212, 221, 233, 264, 356, 409, 412], "idx_a": 279, "idx_avg_max_test_scor": 283, "idx_b": 279, "idx_r": 211, "idx_sort": 212, "idxmax": 347, "idxmin": 268, "ie": [76, 100, 122, 441, 708, 1001, 1015], "ieee": [97, 111, 113, 373, 408, 410, 417, 421, 449, 476, 536, 565, 668, 689, 690, 729, 773, 1001, 1005, 1011], "ieeexplor": 773, "ieic": [540, 542, 549], "iem": 662, "if_binari": [187, 253, 881, 1015, 1046], "if_delegate_has_method": [1048, 1049], "iff": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 879], "iforest": 249, "iforest_kw": 249, "iglesi": 1050, "ignacio": 1038, "ignor": [2, 44, 46, 48, 56, 80, 83, 89, 96, 104, 135, 140, 144, 152, 155, 188, 200, 212, 227, 241, 246, 251, 253, 261, 306, 307, 315, 316, 320, 323, 344, 352, 364, 376, 378, 380, 382, 390, 394, 399, 408, 409, 415, 416, 426, 427, 430, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 461, 462, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 505, 510, 511, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 584, 585, 586, 591, 592, 593, 594, 600, 605, 606, 613, 614, 615, 631, 632, 633, 634, 636, 637, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 711, 715, 717, 718, 730, 733, 734, 742, 759, 760, 767, 773, 778, 782, 787, 788, 791, 792, 801, 802, 803, 805, 806, 807, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 900, 901, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 979, 988, 993, 1001, 1002, 1005, 1007, 1011, 1015, 1020, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "ignore_attribut": 370, "ignore_error": 88, "ignore_implicit_zero": [885, 897], "ignore_ti": [730, 760], "ignore_warn": [220, 312, 1041], "ignored_new_col": 409, "ignorerevsfil": 376, "igor": [1041, 1042, 1048], "ih": 295, "ii": [51, 122, 188, 219, 265, 373, 416, 585, 586, 592, 642, 670, 671, 871, 880, 1001, 1015, 1023, 1052], "iid": 1043, "iii": [1049, 1052], "iijima": 1044, "iinfo": 1050, "ij": [270, 300, 405, 408, 413, 540, 542, 549, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 1001, 1002, 1005, 1007, 1010, 1015, 1020], "ijcnn": 1005, "ijcv": 1005, "ijet": 408, "ik": [1001, 1005], "ikeda": 1047, "ikko": 1048, "il": [50, 668, 689, 690, 1001, 1005], "ilambharathi": [1038, 1039], "ili": [1051, 1052], "ilic": 1048, "ilion": 1049, "iliya": 1050, "iljin": [1050, 1051], "ill": [76, 114, 217, 472, 473, 479, 654, 655, 658, 659, 660, 686, 687, 1001, 1004, 1045], "illustr": [49, 53, 61, 62, 64, 68, 70, 86, 90, 91, 103, 104, 107, 108, 110, 112, 117, 119, 123, 135, 138, 149, 150, 152, 154, 155, 164, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 184, 186, 188, 189, 192, 202, 212, 214, 216, 220, 222, 223, 225, 226, 229, 230, 232, 233, 235, 237, 239, 241, 242, 244, 245, 246, 248, 259, 264, 270, 277, 282, 284, 291, 299, 313, 315, 318, 319, 321, 327, 332, 340, 341, 345, 347, 348, 349, 352, 353, 359, 363, 373, 376, 378, 381, 384, 389, 407, 411, 413, 415, 416, 517, 614, 615, 617, 618, 619, 623, 626, 627, 857, 994, 1001, 1005, 1008, 1011, 1017, 1018, 1019, 1020, 1024, 1026, 1029], "iloc": [44, 150, 155, 187, 188, 230, 270, 293], "ilya": [1042, 1053], "im": [121, 131, 281, 294], "im_": 701, "im_kw": [701, 1049], "imacul": 1041, "imag": [2, 43, 46, 54, 59, 60, 69, 72, 75, 76, 77, 80, 81, 85, 88, 90, 92, 96, 101, 103, 120, 121, 126, 167, 175, 184, 204, 233, 241, 244, 248, 268, 299, 307, 308, 320, 329, 330, 368, 369, 371, 373, 376, 381, 384, 390, 394, 401, 407, 408, 413, 442, 446, 453, 463, 495, 496, 497, 498, 504, 505, 508, 509, 536, 537, 539, 543, 586, 587, 588, 589, 590, 610, 611, 695, 701, 742, 834, 878, 1001, 1005, 1006, 1008, 1010, 1017, 1021, 1024, 1026, 1029, 1031, 1035, 1038, 1043, 1044, 1048, 1050, 1051], "image_height": [586, 587, 590], "image_index": [329, 330], "image_nam": 508, "image_patch": 590, "image_reconstruct": 590, "image_s": 590, "image_shap": [121, 248], "image_width": [586, 587, 590], "imagebox": 233, "imageio": 370, "imagenet": [865, 866], "images_restor": 85, "imagin": [122, 171, 246, 344, 412, 413, 416, 1001], "imamura": 1049, "imbal": [263, 273, 284, 412, 711, 733, 734, 742, 787, 788, 791, 792, 1005], "imbalanc": [212, 264, 273, 277, 279, 284, 352, 388, 406, 412, 707, 712, 791, 805, 809, 845, 1005, 1007, 1013, 1024], "imbert": [1042, 1044, 1047, 1049, 1052, 1053], "img": [45, 84, 100, 508, 589], "img_height": 586, "img_to_graph": [2, 81, 100, 416, 1038, 1048], "img_width": 586, "immanuel": [0, 1035, 1036, 1040], "immedi": [89, 376, 388, 804, 818, 829, 830, 1043], "immens": 1029, "immensu": 1043, "immers": [694, 698], "immobil": 44, "immut": 402, "imp": 995, "imp_mean": [631, 634], "impact": [52, 53, 63, 72, 73, 78, 79, 98, 108, 135, 165, 184, 186, 187, 188, 195, 214, 216, 230, 249, 263, 264, 287, 293, 315, 324, 347, 352, 359, 363, 364, 369, 388, 391, 406, 408, 413, 448, 450, 538, 542, 549, 593, 670, 671, 672, 676, 678, 680, 681, 682, 696, 798, 804, 807, 808, 818, 831, 848, 849, 850, 851, 885, 897, 908, 909, 937, 952, 975, 978, 994, 1004, 1012, 1020, 1026, 1042, 1045, 1048], "imped": 384, "imperfect": [732, 789, 1005, 1037], "imperfectli": [707, 738, 1005], "implant": 60, "implement": [2, 13, 31, 46, 47, 53, 54, 56, 81, 90, 113, 121, 141, 150, 183, 190, 192, 198, 202, 209, 226, 230, 232, 239, 245, 246, 264, 268, 270, 279, 287, 289, 290, 292, 295, 313, 319, 320, 321, 322, 323, 325, 351, 353, 363, 364, 365, 370, 371, 373, 374, 376, 377, 378, 381, 382, 384, 385, 390, 394, 399, 404, 405, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 438, 443, 444, 445, 447, 448, 449, 450, 451, 476, 495, 498, 510, 534, 535, 536, 537, 538, 540, 543, 544, 545, 555, 556, 557, 559, 560, 563, 564, 565, 569, 574, 585, 591, 592, 594, 596, 600, 604, 614, 615, 636, 637, 644, 645, 649, 650, 657, 661, 662, 663, 667, 668, 672, 675, 676, 678, 679, 680, 681, 682, 688, 689, 690, 691, 692, 695, 696, 699, 711, 715, 724, 739, 742, 746, 782, 786, 792, 793, 801, 803, 804, 807, 808, 810, 818, 822, 823, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 850, 851, 853, 856, 858, 859, 864, 865, 866, 868, 890, 898, 899, 905, 908, 909, 910, 911, 912, 913, 914, 951, 952, 961, 964, 969, 973, 975, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1015, 1017, 1018, 1021, 1022, 1024, 1025, 1027, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "impli": [44, 171, 187, 352, 353, 413, 415, 418, 475, 575, 585, 614, 615, 626, 739, 938, 1001, 1002, 1046], "implic": [359, 376], "implicit": [2, 212, 390, 415, 416, 574, 686, 687, 999, 1004, 1024, 1044], "implicitli": [353, 385, 415, 600, 636, 637, 850, 858, 887, 995, 997, 1012, 1015, 1020, 1053], "import": [2, 16, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 371, 372, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 393, 394, 395, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 965, 966, 967, 968, 969, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1026, 1029, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1053], "importance_gett": [417, 596, 597, 600, 1047], "importances_mean": [142, 148, 189, 190, 319, 638, 1013], "importances_std": [142, 638, 1013], "important_word": 58, "importantli": [44, 54, 122, 177, 188, 192, 310, 376, 408, 1053], "importerror": [51, 87, 124, 290, 303, 384], "importlib": 1048, "impos": [75, 91, 152, 201, 207, 216, 316, 388, 408, 413, 415, 416, 529, 661, 1001], "imposs": [147, 353], "impract": 913, "impress": 1029, "improp": [390, 1042], "improv": [0, 31, 44, 62, 63, 70, 110, 111, 114, 126, 131, 135, 136, 141, 143, 145, 146, 147, 149, 150, 155, 165, 183, 187, 192, 199, 212, 220, 230, 264, 271, 273, 287, 290, 293, 308, 315, 325, 343, 344, 352, 359, 364, 374, 379, 381, 382, 384, 385, 388, 390, 391, 402, 413, 415, 417, 450, 451, 533, 534, 536, 539, 540, 541, 543, 544, 545, 548, 556, 559, 560, 561, 562, 563, 564, 566, 567, 614, 615, 647, 656, 668, 670, 671, 672, 676, 677, 678, 679, 680, 682, 689, 691, 696, 733, 734, 787, 788, 791, 792, 857, 865, 866, 882, 884, 896, 916, 917, 919, 952, 994, 999, 1001, 1002, 1005, 1008, 1009, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "improvis": [51, 303], "impur": [148, 190, 358, 393, 415, 417, 555, 556, 559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919, 920, 922, 1021, 1031, 1040, 1041, 1042, 1043], "imput": [2, 104, 150, 155, 189, 241, 251, 253, 320, 323, 368, 380, 389, 390, 399, 409, 415, 491, 503, 567, 583, 631, 632, 633, 634, 643, 649, 676, 830, 851, 869, 933, 935, 1024, 1026, 1031, 1037, 1038], "imputation_const": 251, "imputation_mean": 251, "imputation_ord": [631, 1045], "imputation_sequence_": 631, "impute_estim": 182, "impute_scor": 183, "imran": [1037, 1038, 1039], "imread": 69, "imshow": [45, 46, 54, 69, 76, 81, 82, 84, 85, 87, 88, 92, 114, 121, 124, 131, 173, 174, 175, 179, 190, 204, 228, 233, 248, 281, 294, 308, 329, 330, 340, 348, 370, 636, 701, 1049], "in1d": 1042, "in_bodi": 48, "in_titl": 48, "in_top": 48, "in_topic_d": 48, "inaccess": 89, "inact": [353, 370, 376], "inadvert": [186, 390], "inadvis": 402, "inappropri": [371, 412, 418, 713, 825], "inbuilt": 412, "inc": [0, 269, 995, 1017, 1029], "incap": 89, "incentiv": 380, "incept": 1025, "includ": [0, 11, 18, 44, 69, 71, 89, 112, 141, 144, 145, 146, 186, 187, 189, 198, 212, 216, 230, 246, 271, 287, 290, 306, 310, 322, 323, 325, 340, 345, 351, 353, 359, 363, 364, 370, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 390, 391, 394, 402, 405, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 445, 447, 451, 457, 467, 470, 471, 472, 473, 474, 475, 476, 477, 490, 491, 492, 498, 502, 503, 504, 506, 507, 512, 536, 543, 559, 566, 576, 613, 636, 642, 650, 651, 656, 664, 665, 666, 669, 685, 692, 693, 701, 717, 733, 734, 739, 741, 742, 775, 787, 788, 791, 799, 804, 806, 807, 808, 817, 818, 821, 824, 831, 834, 856, 858, 859, 860, 881, 882, 883, 887, 905, 908, 909, 916, 918, 920, 922, 934, 935, 938, 940, 943, 945, 946, 947, 961, 994, 1001, 1004, 1005, 1006, 1008, 1009, 1015, 1019, 1020, 1021, 1024, 1025, 1028, 1029, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "include_bia": [44, 194, 285, 883, 887, 1049], "include_boundari": [938, 1049], "include_self": [75, 80, 101, 699, 861, 862, 1039], "include_valu": 701, "inclus": [0, 376, 378, 384, 451, 457, 758, 790, 1005, 1006, 1035, 1049], "incom": [310, 371, 441], "incoming_count": 56, "incompat": [498, 995, 1043, 1044], "incomplet": [376, 394, 404, 408, 709, 799, 995, 1002, 1039, 1041], "inconsist": [2, 390, 402, 416, 510, 511, 579, 910, 913, 938, 1011, 1020, 1031, 1035, 1040, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "inconsistentversionwarn": [2, 402, 1051], "incorpor": [325, 376, 409, 415, 1004, 1024, 1029], "incorrect": [135, 186, 332, 359, 376, 408, 610, 611, 636, 637, 738, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "incorrectli": [196, 277, 415, 416, 555, 561, 563, 738, 744, 1005, 1036, 1041, 1043, 1044, 1046, 1051], "incr_mean_variance_axi": [2, 1041, 1047], "increas": [2, 44, 47, 55, 64, 73, 79, 89, 91, 92, 95, 108, 124, 135, 136, 138, 141, 143, 145, 150, 152, 165, 169, 171, 176, 187, 188, 192, 195, 197, 204, 212, 213, 214, 216, 230, 237, 243, 257, 264, 270, 271, 272, 277, 283, 284, 305, 311, 312, 315, 321, 327, 330, 340, 347, 352, 353, 355, 363, 364, 365, 375, 384, 385, 390, 406, 408, 410, 413, 415, 416, 419, 441, 445, 447, 453, 464, 472, 473, 479, 534, 538, 555, 556, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 631, 639, 640, 641, 649, 654, 655, 658, 659, 660, 662, 663, 670, 671, 672, 680, 681, 682, 686, 687, 689, 690, 696, 710, 711, 716, 782, 786, 793, 807, 808, 837, 856, 858, 859, 860, 863, 865, 866, 882, 908, 916, 917, 918, 919, 952, 994, 996, 1000, 1001, 1002, 1004, 1005, 1008, 1015, 1019, 1020, 1021, 1029, 1035, 1037, 1040, 1044, 1046, 1047, 1050, 1053], "increasing_": 639, "increasing_bool": 640, "increment": [2, 105, 120, 126, 127, 128, 129, 184, 273, 380, 382, 443, 448, 464, 506, 535, 536, 537, 538, 541, 543, 546, 605, 650, 662, 670, 810, 832, 840, 841, 843, 844, 845, 846, 847, 877, 878, 888, 908, 909, 979, 1001, 1007, 1026, 1038, 1039], "incrementalpca": [2, 125, 365, 413, 535, 537, 541, 543, 546, 1039, 1042, 1043, 1045, 1046, 1049], "incur": [64, 623, 908, 1020, 1043], "ind": [54, 78, 146, 157, 352, 848, 849], "inde": [45, 47, 63, 65, 71, 75, 76, 87, 89, 92, 114, 117, 126, 135, 138, 168, 169, 171, 187, 189, 194, 198, 200, 202, 212, 214, 272, 273, 277, 279, 287, 290, 310, 315, 347, 352, 359, 363, 375, 381, 389, 390, 391, 408, 410, 415, 569, 570, 1001, 1015, 1019, 1049], "indecisiveus": [1046, 1047], "indefinit": 380, "indent": [378, 970], "independ": [2, 33, 53, 63, 65, 73, 81, 122, 123, 125, 140, 143, 178, 188, 205, 248, 249, 270, 273, 275, 279, 289, 310, 317, 319, 352, 359, 363, 364, 372, 389, 390, 394, 402, 405, 406, 408, 409, 410, 411, 412, 416, 420, 450, 465, 489, 505, 517, 518, 519, 520, 522, 534, 535, 537, 539, 541, 542, 548, 549, 553, 554, 607, 610, 611, 629, 644, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 708, 709, 721, 740, 741, 759, 761, 799, 806, 833, 837, 839, 841, 842, 880, 884, 885, 886, 888, 892, 893, 894, 895, 897, 898, 899, 902, 910, 911, 912, 913, 914, 994, 997, 999, 1001, 1002, 1005, 1006, 1007, 1010, 1012, 1015, 1020, 1021, 1030, 1031, 1035, 1036, 1041, 1043, 1045, 1050], "inder128": 1045, "inderjeet": 1046, "inderjit": [405, 454], "indeterminaci": 546, "index": [2, 52, 55, 56, 73, 74, 75, 76, 77, 83, 84, 92, 105, 135, 140, 142, 150, 166, 182, 186, 187, 189, 190, 212, 216, 230, 250, 253, 256, 257, 261, 265, 268, 269, 270, 271, 273, 281, 282, 283, 284, 290, 310, 315, 316, 317, 323, 327, 329, 330, 352, 353, 371, 373, 374, 376, 378, 380, 385, 388, 390, 405, 409, 412, 413, 415, 416, 423, 444, 448, 449, 450, 451, 452, 454, 455, 458, 460, 461, 465, 468, 505, 511, 559, 560, 561, 562, 566, 567, 568, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 621, 636, 637, 644, 701, 708, 709, 716, 720, 722, 735, 742, 761, 783, 784, 790, 792, 798, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 834, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 881, 916, 917, 918, 919, 925, 956, 975, 978, 983, 984, 1005, 1007, 1008, 1009, 1019, 1021, 1024, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "index_alpha_path_a": 200, "index_alpha_path_b": 200, "index_map": 56, "indexerror": [1043, 1044], "indexhash": 644, "indexhash_": 644, "indian": 371, "indic": [2, 52, 58, 59, 63, 64, 93, 94, 100, 108, 117, 121, 127, 135, 140, 145, 176, 179, 183, 186, 188, 234, 243, 246, 263, 264, 272, 273, 276, 277, 290, 303, 329, 330, 333, 351, 352, 353, 358, 364, 371, 376, 377, 378, 380, 384, 385, 388, 390, 404, 405, 406, 408, 410, 412, 413, 415, 416, 419, 423, 428, 438, 441, 445, 451, 452, 453, 454, 456, 457, 458, 461, 465, 468, 473, 488, 510, 511, 513, 514, 515, 525, 534, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 624, 631, 632, 633, 634, 636, 637, 643, 650, 651, 654, 655, 656, 657, 658, 659, 665, 667, 669, 677, 679, 686, 687, 694, 696, 698, 700, 707, 711, 716, 717, 722, 723, 724, 726, 729, 732, 733, 734, 735, 738, 742, 743, 744, 745, 758, 775, 782, 783, 784, 785, 787, 788, 789, 791, 792, 796, 797, 798, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 841, 842, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 872, 875, 879, 881, 889, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 924, 925, 930, 934, 935, 940, 956, 967, 968, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 995, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1016, 1019, 1020, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "indicator_": [631, 632, 634], "indicator_matrix_": 1040, "indigo": 229, "indirect": [273, 377, 390], "indirectli": [230, 344], "indispens": 1029, "indistinguish": 310, "individu": [2, 44, 81, 94, 112, 134, 136, 138, 154, 155, 164, 167, 180, 184, 185, 187, 190, 209, 212, 230, 240, 249, 250, 264, 273, 275, 289, 319, 326, 327, 344, 347, 364, 377, 378, 380, 383, 385, 390, 393, 399, 405, 409, 412, 415, 416, 438, 453, 463, 465, 498, 503, 505, 511, 557, 558, 561, 562, 564, 565, 567, 569, 570, 571, 572, 606, 612, 614, 636, 637, 647, 649, 661, 662, 663, 672, 675, 676, 677, 678, 679, 680, 681, 682, 691, 716, 723, 732, 738, 754, 755, 789, 794, 795, 804, 818, 836, 840, 841, 843, 844, 845, 846, 847, 866, 869, 877, 878, 880, 881, 882, 885, 887, 888, 893, 894, 895, 908, 909, 1005, 1006, 1015, 1020, 1026, 1031, 1036, 1039, 1041, 1047, 1049, 1051], "indptr": [56, 290, 358, 979, 980, 981, 982, 983, 984, 985, 986, 987, 1043, 1051], "induc": [26, 64, 90, 187, 198, 204, 206, 210, 213, 227, 245, 249, 347, 353, 405, 413, 415, 447, 450, 541, 545, 555, 559, 560, 561, 562, 566, 567, 568, 647, 730, 760, 881, 916, 917, 918, 919, 998, 1005, 1019], "induct": [44, 72, 133, 147, 179, 184, 390, 408, 415, 422, 442, 514, 566, 631, 635, 903, 904, 965, 988, 1001, 1018, 1026, 1037], "inductive_learn": 90, "inductivecluster": 90, "industri": [408, 1024], "ineffect": [314, 406, 1015, 1043, 1044], "ineffici": [2, 415, 444, 576, 836, 837, 1008, 1010], "inequ": [358, 390, 408, 444, 448, 460, 703, 1002, 1003, 1008], "inertia": [91, 95, 352, 408, 444, 448, 450, 453, 460, 461, 463, 464, 1046], "inertia_": [92, 95, 98, 444, 448, 450, 1046], "inf": [108, 174, 300, 385, 408, 418, 447, 451, 456, 457, 458, 462, 472, 473, 479, 555, 556, 561, 562, 596, 597, 600, 609, 610, 611, 623, 631, 639, 641, 652, 653, 654, 656, 673, 675, 676, 680, 681, 682, 684, 691, 732, 734, 750, 782, 789, 793, 864, 873, 880, 932, 933, 934, 935, 950, 1005, 1015, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "infant": 1015, "infeas": [1001, 1008, 1010], "infer": [26, 184, 185, 187, 208, 256, 260, 261, 270, 356, 370, 378, 388, 402, 412, 413, 493, 498, 510, 511, 517, 536, 538, 540, 542, 549, 551, 552, 555, 561, 562, 636, 639, 661, 713, 726, 727, 745, 789, 801, 802, 810, 827, 834, 844, 855, 882, 889, 903, 904, 916, 917, 918, 919, 967, 995, 1001, 1004, 1005, 1010, 1015, 1018, 1021, 1024, 1025, 1026, 1036, 1040, 1041, 1046, 1049, 1052], "inferencesess": 402, "inferenti": 90, "inferior": [442, 446, 1046], "infin": [2, 270, 347, 543, 686, 687, 716, 829, 915, 933, 1008], "infinit": [65, 213, 255, 273, 344, 363, 418, 447, 626, 627, 782, 801, 932, 934, 935, 997, 1004, 1015, 1020, 1043, 1045, 1048, 1049, 1050, 1052, 1053], "inflammatori": 371, "inflat": [91, 186, 187, 189, 408, 412, 1005, 1015], "inflect": 272, "influenc": [43, 49, 53, 112, 113, 135, 184, 187, 197, 245, 255, 278, 310, 317, 340, 344, 347, 357, 359, 365, 410, 413, 415, 431, 441, 455, 466, 483, 484, 485, 490, 503, 556, 558, 560, 562, 564, 567, 570, 572, 615, 632, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 680, 682, 683, 738, 754, 834, 841, 842, 850, 851, 858, 859, 866, 885, 886, 897, 909, 911, 914, 917, 919, 934, 994, 999, 1000, 1001, 1008, 1011, 1015, 1019, 1020, 1026, 1029, 1038, 1043, 1044], "influenti": [216, 352, 1029], "info": [2, 46, 78, 104, 121, 187, 188, 246, 264, 268, 373, 375, 380, 390, 416, 465, 498, 563, 564, 960], "inform": [2, 3, 44, 45, 48, 51, 52, 53, 54, 63, 65, 70, 71, 73, 74, 83, 87, 92, 100, 101, 103, 104, 117, 141, 142, 163, 165, 166, 168, 171, 176, 184, 187, 188, 190, 192, 193, 194, 195, 198, 213, 216, 227, 229, 230, 246, 250, 257, 258, 260, 264, 265, 267, 270, 271, 272, 275, 277, 279, 283, 293, 296, 297, 300, 317, 322, 326, 343, 347, 351, 352, 353, 356, 358, 359, 363, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 384, 388, 389, 390, 391, 399, 402, 405, 407, 412, 413, 415, 416, 417, 418, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 494, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 512, 517, 526, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 610, 611, 612, 613, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 699, 701, 705, 708, 709, 719, 730, 734, 747, 759, 760, 761, 790, 792, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 927, 961, 988, 993, 995, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1019, 1021, 1025, 1026, 1028, 1029, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "informatik": 1005, "informed": 1005, "infrastructur": [307, 325, 1024, 1025], "infrequ": [881, 882, 889, 1005, 1035, 1049, 1050, 1051], "infrequent_categories_": [323, 325, 881, 882, 889, 1015], "infrequent_if_exist": [881, 1015], "infrequent_sklearn": [881, 1015], "infti": [230, 418, 623, 1001, 1015, 1042], "ing": 416, "ingela": 1049, "ingest": 416, "ingredi": 418, "ingrid": 1045, "inher": [131, 208, 359, 408, 413, 565, 995, 997, 999, 1000, 1002, 1006], "inherit": [246, 376, 378, 389, 390, 422, 580, 680, 928, 943, 945, 957, 1001, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052], "inhibit": [419, 445], "inhomogen": [418, 618], "ini": 258, "init": [2, 55, 78, 92, 93, 95, 98, 188, 195, 232, 233, 235, 236, 237, 258, 290, 352, 378, 384, 408, 413, 415, 444, 448, 450, 452, 454, 460, 461, 540, 542, 549, 550, 561, 562, 636, 637, 694, 696, 698, 857, 1002, 1035, 1044, 1047, 1049, 1050, 1051], "init_": [561, 562], "init_param": [255, 258, 261, 801, 802], "init_s": [95, 352, 450], "init_size_": 1047, "init_tim": 258, "initi": [0, 47, 52, 56, 72, 78, 79, 91, 92, 94, 97, 98, 113, 148, 156, 157, 158, 172, 177, 184, 187, 195, 206, 227, 232, 233, 237, 254, 257, 270, 290, 321, 331, 340, 352, 359, 364, 371, 376, 378, 384, 385, 388, 390, 408, 413, 415, 417, 418, 420, 443, 444, 448, 449, 450, 451, 452, 453, 454, 460, 461, 462, 463, 514, 517, 533, 534, 535, 539, 540, 542, 545, 547, 548, 549, 550, 555, 556, 561, 562, 565, 596, 610, 611, 614, 615, 623, 624, 631, 644, 649, 650, 651, 652, 656, 657, 662, 664, 665, 666, 667, 670, 671, 672, 673, 675, 680, 681, 682, 684, 685, 688, 694, 695, 696, 698, 699, 801, 802, 838, 857, 864, 865, 866, 904, 937, 951, 952, 973, 978, 979, 997, 1001, 1002, 1004, 1009, 1010, 1011, 1019, 1021, 1024, 1026, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "initial_imputer_": 631, "initial_strategi": 631, "initial_theta": [614, 615], "initialis": [121, 540, 542, 549, 1035, 1043, 1044], "initializedcheck": 377, "inject": [249, 371, 415], "inki": 1041, "inli": [239, 1001, 1011], "inlier": [112, 151, 215, 239, 249, 310, 390, 410, 430, 470, 565, 675, 681, 854, 885, 897, 911, 912, 914, 1001, 1011, 1042, 1043, 1048], "inlier_mask": 215, "inlier_mask_": [215, 675], "inlier_plot": 112, "inliers_mask": 113, "inlin": [223, 376, 377, 1021], "inner": [65, 126, 147, 150, 271, 275, 289, 331, 363, 416, 444, 516, 585, 592, 613, 622, 652, 673, 684, 779, 781, 997, 1005, 1015, 1020, 1036, 1039, 1049, 1052], "inner_clf": 1005, "inner_cv": [275, 326], "inner_it": 382, "inner_max_num_thread": 972, "inner_numb": 331, "inner_stat": 1049, "inner_stats_": 1049, "inpaint": 413, "inplac": [2, 230, 249, 282, 455, 483, 484, 485, 486, 863, 871, 874, 877, 878, 880, 884, 885, 886, 888, 977, 980, 981, 982, 986, 987, 1044], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 385], "inplace_csr_row_normalize_l1": [2, 385], "inplace_csr_row_normalize_l2": [2, 385], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 44, 46, 50, 65, 68, 70, 106, 121, 125, 143, 147, 148, 177, 178, 179, 187, 188, 192, 194, 212, 215, 216, 220, 227, 230, 242, 243, 245, 246, 253, 265, 283, 287, 294, 295, 307, 311, 312, 313, 314, 319, 322, 324, 327, 340, 344, 348, 353, 370, 373, 376, 379, 381, 385, 386, 388, 389, 390, 402, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 420, 426, 429, 430, 431, 432, 433, 438, 439, 440, 441, 442, 443, 446, 449, 450, 451, 455, 458, 459, 462, 465, 466, 468, 469, 470, 472, 473, 483, 484, 485, 490, 505, 511, 518, 519, 520, 522, 526, 530, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 615, 624, 626, 631, 632, 633, 634, 635, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 689, 690, 691, 692, 693, 694, 696, 697, 700, 701, 702, 703, 704, 705, 706, 725, 726, 727, 728, 732, 749, 750, 752, 754, 755, 757, 758, 765, 771, 775, 776, 778, 782, 783, 784, 785, 789, 794, 795, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 895, 896, 900, 901, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 925, 927, 928, 929, 931, 932, 933, 934, 935, 936, 940, 945, 947, 949, 951, 961, 963, 964, 968, 977, 979, 985, 986, 987, 990, 991, 993, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "input_featur": [194, 378, 390, 424, 429, 443, 444, 446, 448, 450, 465, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 568, 569, 570, 571, 572, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 1051], "input_nam": [933, 935, 967, 1049], "input_tag": 927, "input_typ": [353, 416, 585], "inputtag": [2, 927], "inria": [0, 662, 1035], "insensit": [245, 647, 680, 682, 792, 909, 998, 1019, 1020, 1035], "insepar": 373, "insert": [94, 187, 212, 388, 408, 488, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 923], "insid": [2, 56, 58, 64, 188, 214, 246, 270, 331, 340, 365, 370, 371, 378, 382, 399, 408, 416, 438, 444, 445, 448, 450, 466, 483, 484, 485, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 591, 592, 593, 594, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 961, 964, 1012, 1029, 1052], "insight": [44, 47, 187, 188, 201, 213, 214, 230, 264, 307, 310, 351, 358, 406, 407, 804, 807, 808, 818, 831, 1012, 1021, 1029], "inspect": [2, 44, 49, 67, 68, 71, 90, 95, 137, 142, 148, 150, 151, 152, 156, 166, 171, 176, 177, 187, 189, 190, 205, 221, 226, 250, 264, 270, 273, 282, 293, 298, 301, 315, 319, 320, 321, 322, 324, 326, 336, 337, 338, 339, 341, 342, 344, 351, 356, 364, 378, 390, 408, 409, 415, 416, 465, 555, 556, 559, 560, 561, 562, 566, 567, 568, 635, 636, 637, 638, 837, 868, 869, 916, 917, 918, 919, 945, 992, 1005, 1006, 1009, 1012, 1013, 1020, 1024, 1026, 1031, 1038], "inspir": [111, 152, 188, 230, 376, 388, 415, 563, 564, 939, 995, 1044], "instabl": [75, 187, 300, 418, 453, 537, 541, 545, 699, 1042, 1045, 1048], "instal": [87, 253, 290, 319, 320, 321, 322, 323, 324, 325, 326, 327, 363, 364, 376, 377, 379, 380, 382, 384, 388, 389, 395, 401, 402, 404, 408, 416, 453, 463, 498, 695, 699, 1021, 1042, 1043, 1044, 1048, 1049], "instanc": [2, 44, 48, 50, 53, 62, 64, 65, 87, 90, 92, 138, 150, 166, 183, 188, 189, 198, 241, 246, 249, 264, 266, 268, 279, 281, 282, 301, 319, 326, 334, 336, 337, 343, 344, 351, 352, 353, 362, 363, 364, 370, 371, 373, 374, 375, 376, 378, 381, 382, 384, 385, 388, 390, 394, 399, 402, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 422, 432, 433, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 492, 494, 497, 498, 499, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 580, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 624, 631, 632, 633, 634, 636, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 711, 724, 733, 734, 742, 775, 778, 782, 783, 784, 785, 787, 788, 791, 792, 793, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 934, 935, 937, 945, 946, 947, 951, 952, 960, 961, 962, 963, 973, 974, 975, 978, 988, 989, 993, 994, 995, 1001, 1002, 1005, 1007, 1008, 1011, 1013, 1015, 1019, 1020, 1021, 1025, 1031, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instanci": 1044, "instant": [207, 376], "instantan": 510, "instanti": [105, 174, 322, 379, 399, 415, 451, 569, 570, 605, 634, 804, 807, 808, 810, 818, 827, 829, 830, 831, 832, 833, 835, 941, 1011, 1035, 1043, 1047, 1051], "instead": [0, 44, 45, 46, 53, 59, 87, 89, 90, 91, 104, 126, 138, 152, 166, 169, 171, 212, 214, 227, 230, 236, 249, 261, 266, 267, 271, 272, 283, 289, 295, 310, 319, 320, 321, 322, 323, 340, 342, 344, 351, 353, 358, 359, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 384, 385, 388, 389, 390, 399, 402, 404, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 431, 438, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 457, 460, 466, 468, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 511, 512, 535, 537, 538, 540, 542, 543, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 592, 593, 610, 611, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 634, 636, 639, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 691, 694, 696, 698, 711, 713, 750, 778, 782, 783, 784, 786, 787, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 816, 818, 820, 822, 823, 824, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 869, 870, 871, 873, 874, 875, 880, 881, 886, 887, 888, 898, 899, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 922, 940, 945, 947, 952, 961, 979, 994, 995, 997, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1015, 1019, 1020, 1021, 1024, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "institut": [0, 264, 373, 1008], "instruct": [363, 376, 377, 378, 379, 380, 381, 384, 388, 389, 390, 505, 591, 592, 594, 1028, 1035], "instrument": [52, 122, 186], "insuffici": [393, 1004], "insur": [184, 193, 212, 407, 465, 498, 554, 652, 673, 684, 710, 749, 754, 756, 834, 869, 872, 873, 881, 888, 1001, 1026], "int": [48, 50, 53, 54, 56, 73, 80, 96, 113, 138, 146, 150, 151, 161, 162, 172, 173, 174, 180, 183, 186, 196, 204, 206, 212, 230, 237, 239, 245, 249, 255, 264, 265, 268, 269, 270, 290, 295, 297, 303, 317, 330, 353, 371, 376, 378, 388, 390, 406, 409, 412, 416, 419, 420, 423, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 610, 611, 614, 615, 621, 631, 632, 633, 634, 635, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 711, 713, 717, 730, 731, 733, 734, 735, 738, 742, 760, 761, 773, 778, 782, 783, 784, 785, 786, 787, 788, 791, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 930, 934, 935, 937, 938, 951, 952, 954, 955, 956, 958, 969, 973, 975, 978, 983, 984, 1001, 1012, 1035, 1041, 1045, 1046], "int32": [249, 290, 317, 376, 390, 444, 448, 450, 452, 454, 460, 910, 911, 912, 913, 914, 969, 1020, 1044, 1050, 1051, 1052], "int64": [54, 358, 390, 416, 426, 443, 449, 451, 498, 516, 517, 521, 588, 591, 644, 650, 651, 656, 657, 669, 718, 719, 722, 748, 798, 844, 873, 902, 932, 959, 990, 1006, 1043, 1046, 1048, 1050, 1051, 1052], "int64dtyp": 1052, "intact": 881, "integ": [2, 44, 56, 87, 104, 187, 212, 230, 320, 321, 359, 363, 370, 371, 373, 378, 381, 385, 389, 390, 408, 409, 412, 413, 415, 416, 433, 438, 463, 465, 468, 473, 488, 498, 500, 503, 504, 505, 507, 510, 511, 514, 516, 517, 521, 524, 552, 561, 562, 563, 564, 565, 569, 570, 574, 585, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 636, 637, 648, 655, 659, 663, 669, 677, 679, 680, 682, 703, 718, 739, 804, 806, 807, 808, 809, 811, 813, 818, 819, 820, 823, 824, 826, 828, 831, 839, 842, 844, 847, 848, 849, 873, 881, 882, 887, 888, 889, 892, 902, 904, 916, 917, 918, 919, 930, 967, 968, 969, 973, 995, 1001, 1006, 1008, 1015, 1018, 1020, 1021, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "integr": [0, 53, 78, 104, 166, 179, 202, 307, 321, 364, 374, 378, 379, 380, 382, 384, 390, 394, 413, 418, 447, 719, 759, 790, 979, 1004, 1012, 1029, 1036, 1038, 1039, 1047, 1048, 1052], "intel": [1005, 1024], "intelex": [394, 1024], "intellectu": 186, "intellig": [97, 264, 373, 408, 415, 449, 557, 558, 642, 700, 729, 838, 865, 866, 1006, 1017, 1025, 1029], "intend": [91, 92, 125, 213, 253, 344, 351, 376, 377, 383, 388, 390, 408, 412, 469, 585, 677, 703, 877, 878, 888, 906, 925, 1000, 1001, 1005, 1009, 1016, 1024], "intens": [100, 124, 290, 373, 377, 388, 390, 413, 444, 448, 460, 610, 611, 636, 637, 806, 994, 1012, 1029, 1043], "intention": 65, "inter": [2, 76, 142, 359, 415, 720], "interact": [2, 43, 148, 150, 184, 212, 237, 241, 271, 320, 375, 377, 378, 380, 382, 388, 390, 391, 402, 409, 561, 562, 563, 564, 636, 637, 883, 887, 994, 997, 1001, 1002, 1003, 1010, 1012, 1015, 1023, 1025, 1037, 1042, 1049, 1050], "interaction_cst": [188, 324, 415, 563, 564, 1050], "interaction_onli": [44, 883, 1001, 1015], "interactiveshellapp": 382, "intercept": [124, 205, 209, 221, 229, 348, 390, 483, 484, 485, 551, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 883, 887, 890, 908, 909, 915, 1001, 1003, 1005, 1010, 1019, 1020, 1038, 1040, 1044, 1045], "intercept_": [197, 203, 205, 221, 247, 338, 345, 348, 390, 483, 484, 485, 551, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 908, 909, 910, 911, 912, 913, 914, 999, 1001, 1019, 1020, 1035, 1042, 1047, 1049, 1052], "intercept_hidden_": 864, "intercept_init": [670, 671, 672, 680, 682], "intercept_sc": [206, 662, 663, 908, 909, 915, 1001, 1020], "intercept_visible_": 864, "intercepts_": [865, 866, 1009], "interchang": [1024, 1052], "interclass": 76, "interdepend": 517, "interest": [0, 44, 46, 53, 78, 80, 84, 89, 96, 100, 105, 135, 147, 155, 166, 176, 182, 187, 188, 189, 202, 212, 213, 214, 230, 233, 244, 263, 264, 267, 270, 271, 273, 279, 284, 287, 327, 340, 347, 352, 358, 363, 371, 373, 376, 378, 381, 382, 384, 388, 391, 407, 408, 410, 413, 416, 418, 495, 496, 502, 506, 512, 650, 651, 908, 995, 1001, 1002, 1005, 1010, 1011, 1012, 1025, 1029, 1035, 1052], "interestingli": [110, 169, 1015], "interfac": [2, 43, 135, 184, 369, 370, 377, 378, 380, 385, 388, 390, 412, 418, 419, 442, 446, 451, 498, 555, 703, 804, 807, 808, 818, 868, 869, 894, 989, 994, 1008, 1020, 1024, 1025, 1029, 1035, 1037, 1040, 1041, 1043, 1044, 1049, 1051], "interfer": [326, 1045], "interim": 1042, "interior": [674, 1001, 1050], "interleav": [2, 372, 388, 524], "intermedi": [44, 47, 86, 89, 140, 147, 249, 340, 388, 416, 561, 562, 623, 868, 1005, 1047, 1053], "intern": [0, 44, 64, 104, 114, 126, 141, 145, 148, 150, 160, 172, 182, 184, 212, 246, 264, 284, 290, 292, 309, 316, 331, 353, 359, 364, 371, 373, 378, 382, 385, 388, 390, 399, 404, 405, 408, 412, 413, 415, 416, 417, 418, 419, 438, 440, 445, 466, 469, 513, 536, 537, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 596, 597, 614, 615, 644, 647, 650, 656, 672, 676, 680, 682, 700, 712, 735, 738, 762, 763, 787, 834, 848, 849, 864, 865, 866, 868, 869, 873, 887, 889, 903, 904, 906, 908, 909, 910, 913, 916, 917, 918, 919, 1001, 1002, 1003, 1005, 1008, 1011, 1015, 1017, 1020, 1021, 1026, 1029, 1035, 1038, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "internet": [371, 381, 1015], "interop": 1024, "interoper": [402, 418, 1025], "interp": [279, 280, 340], "interp1d": [657, 667, 688], "interp_tpr": 280, "interpol": [44, 54, 69, 76, 84, 85, 88, 92, 114, 121, 124, 175, 178, 184, 193, 194, 204, 228, 242, 248, 279, 285, 294, 295, 302, 308, 330, 340, 418, 639, 649, 657, 667, 676, 688, 704, 711, 851, 859, 869, 883, 887, 996, 1001, 1005, 1015, 1026, 1042, 1047], "interpret": [44, 65, 150, 169, 178, 184, 185, 186, 188, 205, 212, 213, 217, 228, 230, 263, 270, 272, 273, 284, 308, 311, 314, 321, 351, 353, 363, 374, 376, 377, 382, 384, 385, 390, 393, 406, 408, 409, 414, 416, 453, 465, 466, 468, 498, 543, 574, 615, 643, 647, 657, 676, 677, 695, 696, 699, 705, 733, 757, 762, 763, 787, 796, 797, 810, 819, 831, 832, 834, 837, 869, 881, 888, 999, 1001, 1005, 1006, 1012, 1013, 1015, 1021, 1024, 1026, 1035, 1036, 1040, 1043, 1048, 1049, 1050], "interquartil": [249, 886, 898], "interquartile_rang": 886, "interrog": 416, "interrupt": 1001, "intersect": [271, 337, 405, 408, 742], "interv": [2, 53, 65, 134, 150, 178, 184, 198, 212, 213, 214, 230, 270, 371, 390, 406, 412, 415, 418, 439, 440, 518, 519, 520, 559, 560, 562, 564, 566, 567, 639, 640, 642, 681, 746, 752, 754, 808, 825, 834, 871, 873, 887, 910, 911, 912, 938, 997, 1001, 1005, 1015, 1021, 1026, 1042, 1046], "intervent": [89, 187], "intl": [65, 412], "intp": [423, 452, 454], "intra": [44, 591, 594, 796, 797], "intract": [90, 413, 1002, 1010], "intric": [216, 514], "intricaci": 376, "intrins": [194, 390, 413, 415, 1008, 1013, 1019, 1047], "introduc": [44, 110, 112, 113, 126, 150, 168, 184, 189, 194, 198, 205, 216, 238, 243, 246, 249, 251, 277, 324, 325, 353, 372, 374, 376, 378, 380, 381, 384, 388, 390, 399, 406, 408, 410, 412, 413, 415, 416, 432, 442, 443, 444, 446, 448, 450, 460, 465, 469, 483, 484, 485, 486, 498, 506, 517, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 557, 558, 568, 569, 570, 571, 572, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 662, 668, 689, 690, 692, 693, 696, 834, 852, 857, 860, 864, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 902, 906, 999, 1001, 1004, 1007, 1008, 1011, 1015, 1017, 1019, 1020, 1026, 1035, 1036, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "introduct": [168, 230, 268, 376, 407, 412, 413, 416, 593, 792, 793, 843, 847, 1001, 1003, 1005, 1007, 1023, 1030, 1031], "introductori": [147, 170, 171, 176, 177, 179, 180, 184, 238, 418, 615, 626, 1026, 1029], "introspect": [44, 46, 104, 382, 561, 562, 592, 1015], "intrus": 371, "intuit": [44, 53, 68, 80, 86, 96, 126, 135, 138, 144, 164, 171, 187, 188, 213, 214, 234, 239, 271, 287, 295, 312, 315, 337, 340, 344, 352, 376, 390, 406, 408, 410, 412, 414, 649, 786, 787, 788, 791, 879, 908, 910, 911, 913, 914, 997, 1001, 1002, 1005, 1006, 1012, 1015, 1016, 1020, 1029, 1035], "inv": [110, 114, 306], "inv_kw_arg": 872, "invalid": [2, 48, 212, 390, 447, 581, 675, 716, 778, 993, 1001, 1005, 1041, 1043, 1045, 1046, 1048, 1049, 1051], "invalidparametererror": 1005, "invalu": 1029, "invari": [76, 373, 390, 408, 418, 618, 693, 751, 822, 823, 1001, 1002, 1005, 1020, 1025, 1043, 1046, 1047, 1048], "invent": 1008, "inventor": 1007, "inventori": 1029, "invers": [2, 8, 52, 88, 109, 110, 111, 135, 184, 260, 277, 279, 293, 340, 352, 353, 368, 390, 409, 411, 412, 413, 415, 416, 420, 446, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 529, 535, 536, 537, 541, 543, 545, 559, 563, 566, 592, 593, 594, 632, 648, 649, 662, 663, 670, 672, 678, 679, 680, 681, 682, 684, 728, 747, 756, 801, 802, 850, 851, 858, 859, 865, 866, 868, 872, 875, 881, 882, 884, 900, 901, 908, 909, 910, 913, 914, 916, 918, 940, 999, 1001, 1005, 1008, 1009, 1015, 1019, 1020, 1026, 1030, 1031, 1035, 1038, 1043, 1046, 1047, 1049, 1053], "inverse_components_": [900, 901, 1017, 1049], "inverse_func": [108, 187, 409, 466, 872, 1015, 1043, 1053], "inverse_transform": [45, 85, 88, 126, 166, 294, 352, 399, 413, 416, 446, 466, 483, 484, 485, 535, 536, 537, 540, 541, 542, 543, 545, 546, 584, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 634, 804, 807, 808, 818, 868, 872, 873, 875, 876, 877, 878, 879, 881, 882, 884, 885, 886, 888, 900, 901, 1015, 1016, 1017, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "invert": [114, 126, 166, 233, 352, 353, 388, 410, 416, 634, 693, 697, 1015, 1044], "invert_yaxi": [183, 353], "invest": [382, 1029], "investig": [126, 131, 135, 183, 347, 376, 402, 1001], "invok": [378, 533, 539, 541, 547, 548, 569, 571, 572, 803, 826, 829, 905, 1047, 1052], "involv": [315, 317, 319, 327, 340, 344, 363, 365, 371, 376, 390, 391, 402, 411, 418, 703, 836, 837, 1002, 1006, 1008, 1012, 1013, 1020, 1024, 1029, 1043], "invscal": [306, 680, 681, 682, 865, 866, 1019], "io": [370, 373, 376, 380, 382, 384, 390, 696, 1024, 1031, 1033], "ioangatop": 1052, "ioanni": 738, "ioerror": 1051, "iofal": 1049, "ion": 1050, "ionescu": [646, 997, 1045], "iowa": [144, 155, 249], "ipca": [2, 125, 535, 536], "ipdb": 384, "ipm": 674, "ipynb": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358], "ipython": [378, 381, 382, 384], "ipython_config": 382, "iq": 186, "iqbal": 1047, "iqr": [249, 886, 898], "ir": [242, 413, 593, 730, 760, 843, 847, 1003, 1005], "iren": [1050, 1051], "iri": [2, 51, 56, 67, 68, 70, 77, 107, 120, 123, 125, 131, 134, 135, 136, 137, 139, 153, 156, 162, 165, 170, 172, 175, 176, 179, 184, 192, 193, 206, 244, 247, 253, 257, 263, 275, 276, 279, 280, 293, 299, 301, 305, 306, 312, 321, 328, 333, 335, 336, 338, 340, 342, 343, 344, 354, 355, 357, 358, 369, 370, 389, 402, 408, 409, 412, 413, 415, 498, 506, 543, 551, 555, 559, 566, 614, 626, 635, 680, 804, 818, 903, 904, 905, 908, 913, 916, 920, 921, 922, 923, 994, 995, 999, 1004, 1005, 1008, 1012, 1015, 1018, 1019, 1020, 1021, 1026, 1031, 1048], "iris": [127, 276, 277], "iris_61": 370, "iris_969": 370, "iris_version_3": 370, "irreduc": [138, 1005], "irregular": [176, 344, 408, 1008], "irregularities_kernel": 176, "irrelev": [164, 198, 359, 382, 410, 415, 417, 607, 744, 1005], "irrespect": [212, 243, 264, 279, 290, 609], "irvin": 373, "is_categor": 636, "is_categorical_": [563, 564], "is_classifi": [2, 378, 390], "is_cluster": 2, "is_data_valid": [675, 1001], "is_fit": [2, 988], "is_fitted_": [422, 425, 427, 430, 431], "is_inli": [470, 565, 854], "is_leav": 358, "is_max_test_scor": 106, "is_model_valid": [675, 1001], "is_multilabel": [2, 385, 1052], "is_outlier_detector": 2, "is_paramet": 992, "is_pypi": 1053, "is_regressor": [2, 378, 390], "is_scalar_nan": 1048, "is_sh": 281, "is_split_nod": 358, "is_stationari": [179, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "is_transform": 2, "isaac": [1041, 1042, 1044, 1045, 1052], "isaack": 1048, "isaactrost": 1052, "isakov": 1047, "isbn": [373, 408, 1001], "isclos": 56, "isdigit": [58, 416], "ish": 70, "ishaan": 1048, "ishan": [1048, 1049], "ishank": [1040, 1041, 1042], "ishikawa": [1047, 1048], "isin": 330, "isinst": [71, 143, 205, 230, 378, 390], "islic": [48, 80, 96], "ism": 1039, "isn": [169, 319, 353, 359, 364, 376, 380, 384, 517, 563, 564, 597, 798, 807, 808, 881, 1008, 1020, 1045, 1053], "iso": [137, 170, 184, 224, 234, 614, 617, 618, 1026], "iso_reg": 639, "isoformat": 56, "isol": [2, 144, 151, 239, 249, 352, 374, 382, 394, 565, 854, 912, 1044, 1045], "isolationforest": [2, 134, 184, 215, 239, 249, 310, 635, 834, 912, 1011, 1026, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052], "isomap": [2, 52, 86, 140, 184, 231, 234, 236, 243, 300, 319, 323, 415, 504, 546, 551, 568, 693, 694, 695, 696, 857, 869, 878, 901, 1008, 1026, 1030, 1031, 1043, 1045, 1048, 1049, 1050, 1051, 1052], "isomap__n_neighbor": 319, "isometr": [232, 692, 694, 695, 696, 1002], "isoton": [2, 62, 63, 108, 184, 238, 438, 639, 640, 641, 661, 937, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1041, 1048, 1051], "isotonic_regress": [2, 639, 1048], "isotonicregress": [2, 242, 996, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1047, 1049, 1050, 1051], "isotonicregression0": 639, "isotrop": [2, 71, 89, 91, 95, 126, 173, 175, 232, 234, 408, 410, 418, 514, 521, 534, 619, 623, 624, 626, 627], "isotropi": 413, "isr": 417, "issam": [0, 1041], "issu": [0, 2, 44, 63, 111, 117, 209, 212, 230, 275, 317, 364, 370, 379, 380, 381, 385, 388, 390, 391, 393, 394, 399, 402, 404, 408, 410, 411, 416, 450, 453, 463, 474, 483, 484, 485, 536, 541, 545, 575, 591, 592, 594, 615, 631, 695, 699, 773, 879, 881, 884, 896, 941, 995, 1002, 1013, 1015, 1020, 1024, 1025, 1028, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1052, 1053], "issuenumb": 384, "ist": 417, "isupp": 416, "isuru": 1047, "itakura": [413, 540, 542, 549, 1042], "itali": 373, "item": [2, 48, 49, 50, 51, 52, 53, 56, 67, 79, 89, 108, 139, 141, 144, 147, 155, 187, 210, 214, 220, 233, 245, 246, 248, 257, 267, 273, 277, 323, 330, 352, 369, 376, 377, 378, 385, 409, 465, 528, 563, 564, 591, 592, 594, 636, 816, 881, 903, 904, 923, 930, 958, 997, 1018, 1025], "item_idx": 310, "iter": [2, 48, 55, 56, 68, 81, 105, 114, 121, 124, 135, 138, 141, 143, 145, 146, 148, 149, 150, 169, 182, 184, 194, 195, 220, 227, 257, 258, 262, 265, 278, 281, 305, 312, 321, 330, 332, 340, 376, 382, 384, 385, 389, 390, 403, 408, 411, 413, 415, 417, 420, 438, 441, 442, 444, 446, 448, 449, 450, 453, 455, 460, 462, 463, 464, 472, 473, 479, 483, 484, 485, 517, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 561, 562, 563, 564, 566, 569, 570, 584, 585, 591, 592, 594, 596, 597, 605, 614, 631, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 842, 857, 864, 865, 866, 867, 868, 872, 879, 881, 883, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 923, 946, 951, 952, 959, 960, 961, 962, 970, 994, 995, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1018, 1019, 1020, 1021, 1026, 1029, 1031, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "iter_minibatch": 48, "iter_offset": 1049, "iter_offset_": 1049, "iterated_pow": [105, 534, 537, 543, 1041], "iterative_impute_scor": 183, "iterativeimput": [2, 181, 183, 184, 380, 399, 491, 567, 583, 632, 633, 634, 643, 649, 676, 830, 851, 869, 1026, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "itergrid": 1037, "itertool": [48, 78, 80, 96, 156, 188, 201, 256, 261, 270, 277, 279, 415], "ith": [498, 778, 782, 844, 865, 866, 881, 882], "ith_cluster_silhouette_valu": 94, "itk": [1045, 1046, 1047], "its": [0, 2, 7, 26, 44, 49, 52, 53, 54, 58, 64, 65, 71, 73, 89, 99, 100, 110, 112, 114, 117, 119, 126, 127, 133, 135, 141, 143, 145, 147, 150, 160, 169, 171, 176, 178, 187, 188, 190, 192, 194, 202, 209, 225, 229, 230, 234, 239, 246, 248, 249, 251, 253, 255, 260, 261, 264, 269, 273, 275, 277, 279, 284, 290, 292, 296, 297, 312, 322, 332, 337, 344, 349, 351, 352, 355, 358, 359, 364, 365, 369, 370, 371, 372, 376, 377, 378, 380, 381, 384, 388, 389, 390, 391, 394, 396, 399, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 424, 441, 443, 445, 447, 451, 455, 457, 461, 464, 465, 466, 468, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 499, 505, 525, 533, 535, 536, 537, 539, 540, 542, 543, 544, 546, 552, 555, 557, 558, 559, 560, 561, 562, 566, 567, 568, 586, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 648, 649, 675, 676, 678, 689, 690, 691, 692, 696, 700, 703, 712, 729, 733, 734, 740, 741, 745, 782, 785, 787, 801, 802, 804, 829, 836, 837, 839, 850, 851, 852, 854, 855, 856, 858, 859, 860, 867, 868, 872, 877, 880, 881, 883, 900, 901, 904, 908, 909, 910, 913, 916, 918, 934, 935, 940, 947, 974, 994, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1024, 1029, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "itsaphel": 1053, "itself": [28, 62, 65, 83, 89, 135, 147, 151, 188, 198, 210, 246, 252, 264, 279, 290, 317, 340, 352, 363, 365, 375, 376, 378, 390, 399, 402, 406, 408, 419, 441, 442, 445, 446, 447, 470, 471, 472, 473, 474, 475, 476, 477, 529, 533, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 553, 568, 571, 586, 595, 598, 599, 601, 602, 603, 605, 606, 613, 643, 644, 645, 646, 647, 649, 659, 693, 695, 796, 797, 843, 844, 845, 846, 847, 848, 849, 853, 861, 862, 873, 874, 875, 903, 904, 961, 997, 1001, 1002, 1004, 1008, 1009, 1013, 1024, 1039, 1050], "iv": [186, 1005], "ivan": [1043, 1044, 1047, 1050, 1053], "ivanllt": 1050, "iver": 1041, "iverson": 1001, "ivicajov": 1038, "ivl": 190, "ivt": 536, "iv\u00e1n": [1042, 1048], "iwhalv": 1048, "iwona": 1052, "ix": [51, 279, 346], "iy_j": 1015, "iyer": 1046, "izadifar": 1053, "j": [0, 51, 56, 73, 74, 76, 79, 95, 111, 112, 113, 135, 138, 139, 149, 167, 172, 183, 188, 224, 235, 248, 255, 269, 270, 275, 281, 294, 300, 303, 314, 358, 364, 370, 371, 373, 380, 382, 388, 397, 405, 406, 408, 410, 412, 413, 415, 416, 418, 419, 438, 441, 445, 447, 454, 455, 470, 475, 500, 515, 518, 519, 520, 522, 530, 533, 536, 538, 539, 540, 542, 543, 549, 555, 561, 562, 596, 597, 636, 637, 641, 648, 649, 652, 653, 670, 671, 673, 684, 692, 693, 694, 696, 697, 698, 700, 709, 712, 714, 718, 720, 722, 725, 727, 728, 730, 759, 760, 762, 763, 778, 782, 792, 793, 796, 797, 837, 838, 845, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 879, 888, 889, 916, 917, 994, 995, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j0rd1smit": 1047, "ja": [411, 1042], "jaccard": [2, 289, 405, 451, 458, 703, 707, 723, 733, 738, 742, 782, 783, 784, 800, 1008, 1043, 1044], "jaccard_scor": [2, 289, 707, 733, 738, 800, 1005, 1044, 1047], "jaccard_similarity_scor": [1037, 1039, 1044], "jaccarddist": 703, "jack": [1037, 1040, 1048, 1049, 1050, 1051, 1053], "jacklangerman": [1043, 1044], "jackman": 1036, "jackmartin": 1041, "jackson": [1041, 1042, 1044], "jacob": [0, 398, 1040, 1041, 1042], "jacobi": 1050, "jacobsen": 1038, "jacopo": [1043, 1044], "jacqu": [1036, 1038], "jaehong": 1045, "jaehyun": 1047, "jaewon": 1043, "jai": [1045, 1049], "jaidev": 1040, "jaim": 1045, "jain": [1041, 1042, 1043, 1047, 1049, 1050], "jair": 1042, "jake": [0, 398, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049], "jakemick": 1037, "jakhar": 1047, "jakirkham": [1042, 1043, 1044, 1050, 1051], "jakub": 1052, "jakubek": [1048, 1049], "jalali": [0, 391, 397, 402, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "jalexand3r": 1049, "jamaoui": [1043, 1044, 1047], "jame": [0, 373, 412, 838, 1006, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1052], "jamestwebb": [1037, 1038], "jami": 1043, "jamieson": 994, "jan": [0, 213, 287, 398, 887, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1051], "jana": 1045, "janet": 373, "jane\u017e": [1036, 1037], "janfidor": [1050, 1051], "janhang": 1045, "janin": 1042, "janna": 1041, "jannik": 1048, "janso": 1035, "jansson": [1038, 1050], "januari": [374, 376, 1035, 1036, 1045, 1047, 1050, 1052], "janvanrijn": [1043, 1044], "jaqu": [0, 398, 1035, 1036, 1037, 1038], "jardim": 1048, "jare": 1050, "jarfa": 1041, "jarir": 1048, "jarkko": 700, "jarosch": 1037, "jaroslaw": 1042, "jarrod": [0, 398, 1044, 1051, 1052], "jarvelin": [730, 760, 1005], "jaskowiak": 447, "jason": [45, 413, 537, 904, 1041, 1043, 1047, 1050], "jatin": [1039, 1041], "jauhar": 1049, "jauvin": 1036, "java": [408, 443], "javier": [1039, 1053], "jawahar": 997, "jax": 1052, "jay": 1042, "jaya": 1049, "jayaratn": [1046, 1047, 1050, 1051], "jayratn": 1047, "jayzed82": 1042, "jb": [1051, 1052], "jbdelafoss": 1042, "jbirch": [408, 443], "jblackburn": 1041, "jc": [1042, 1043], "jdcaballero": 1039, "jdethuren": [1043, 1044], "je": 1049, "jean": [1035, 1038, 1039, 1040, 1041, 1042, 1048], "jeann": 1049, "jeanselm": 1045, "jeb": 1043, "jeevan": 1047, "jeff": [1039, 1041, 1048, 1049], "jeffrei": [1038, 1041], "jeffrey04": [1040, 1041], "jelfner": 1049, "jell": 1038, "jen": [662, 1043], "jen09": 413, "jenatton": 413, "jenni": 1049, "jennif": 1048, "jensen": [1041, 1047], "jeong": 1045, "jeremi": [1029, 1040, 1041, 1042, 1043, 1046, 1047], "jeremiedbb": [1043, 1044, 1045], "jeremynixon": 1041, "jeroen": 1041, "jeroenpeterbo": 1047, "jeroko": 1042, "jeromedock": 1045, "jerphanion": [0, 397, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "jerryzhu": 903, "jesper": 1045, "jess": [839, 1006, 1048], "jess010": 1038, "jessica": 1041, "jessicakk0711": 1051, "jet": 101, "jevnik": 1040, "jewalikar": 1041, "jf": 1044, "jfraj": 1040, "jha": [1039, 1045, 1049], "jhay": 1047, "jhun": 475, "jia": 1041, "jiacheng": 1042, "jiali": 1040, "jian": 408, "jianbo": [408, 453, 463, 695], "jiang": [406, 1039, 1046], "jianzhu": 1048, "jiawei": [1051, 1052, 1053], "jiaxiang": 1047, "jie": [1043, 1044, 1047], "jiefangxuanyan": 1048, "jigna": 1047, "jihan": 1049, "jill": 1041, "jim": 1037, "jim0421": 1047, "jimenez": [1048, 1049], "jimmi": [865, 866, 1009, 1041, 1043], "jim\u00e9nez": [0, 366, 1043, 1046, 1047, 1048, 1049, 1050], "jin": [643, 1046, 1047], "jindal": 1047, "jinkun": 1043, "jiongyan": 1043, "jiquan": 1009, "jirka": 1049, "jiten": 1050, "jitendra": [408, 453, 463, 695], "jitter": [135, 654, 658, 1046], "jiyuan": 1041, "jjabl": 1043, "jjmistri": 1046, "jk": 1002, "jkarolczak": 1050, "jkleint": [1042, 1043], "jl": [243, 901], "jmlr": [0, 408, 670, 671, 680, 708, 1001, 1020], "jmlr_2014": 696, "jmontoyam": 1042, "jnboehm": 1048, "jnt": 412, "joaak": [1043, 1044], "joan": [1042, 1043, 1044, 1045], "joanna": 1045, "joaquin": 1047, "job": [150, 187, 258, 376, 380, 396, 415, 419, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 469, 473, 533, 537, 538, 539, 541, 544, 545, 547, 548, 550, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 605, 610, 611, 614, 638, 643, 661, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 867, 870, 903, 904, 906, 970, 1029], "joblib": [2, 42, 78, 88, 105, 141, 290, 320, 371, 374, 376, 379, 385, 388, 390, 394, 401, 409, 419, 438, 442, 445, 446, 447, 449, 451, 453, 458, 459, 462, 465, 468, 473, 510, 511, 533, 537, 538, 539, 541, 544, 545, 547, 548, 550, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 597, 605, 610, 611, 614, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 854, 856, 858, 859, 861, 862, 867, 868, 869, 870, 903, 904, 970, 971, 974, 989, 1005, 1025, 1031, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1050, 1052, 1053], "joblib_start_method": 388, "jochen": 1037, "joe": [1040, 1053], "joei": 1051, "joel": [0, 391, 397, 416, 537, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "johann": [1037, 1038, 1043, 1045, 1046, 1049], "johanna": [113, 1053], "johannah": 1041, "johanwork": 1048, "john": [373, 416, 538, 712, 739, 773, 883, 910, 911, 913, 914, 995, 1001, 1005, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1048, 1050, 1051, 1052, 1053], "johnathanpi": [1050, 1051], "johnson": [38, 89, 184, 238, 310, 314, 368, 490, 504, 884, 896, 900, 901, 902, 1015, 1022, 1026, 1031, 1043, 1049, 1051], "johnson_lindenstrauss_min_dim": [2, 243, 1017, 1036], "johnston": [373, 1001, 1044], "johnstott": 1043, "johnthagen": 1050, "johnwon": 314, "join": [51, 52, 58, 89, 182, 230, 270, 312, 371, 391, 464, 1028, 1035, 1043], "joint": [147, 184, 188, 193, 198, 199, 202, 211, 232, 264, 409, 615, 656, 666, 696, 843, 844, 845, 846, 847, 908, 1001, 1002, 1006, 1010, 1012, 1016, 1026, 1035], "jointli": [26, 207, 277, 408, 413, 1001], "joli": [0, 398, 1036, 1037, 1038, 1039, 1040, 1041], "jon": [1042, 1045, 1046, 1048, 1049, 1052], "jona": [1047, 1052], "jonatan": 1043, "jonathan": [371, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051], "joncral": 1041, "jone": [0, 371, 398, 1035], "jong": 1042, "jonker": [405, 723], "joona": 1035, "jordal": 1041, "jordan": [408, 413, 695, 801, 1045, 1046, 1049, 1050], "jordi": 1041, "jorg": [662, 1038, 1047, 1049], "jori": [0, 398, 1042, 1043, 1044, 1047, 1048], "jose": [373, 662, 1005, 1043, 1045], "joseph": [1038, 1039, 1040, 1041, 1047, 1049, 1050], "josephsalmon": [1042, 1043, 1044], "josh": [416, 1042], "joshi": [1041, 1043, 1049, 1052, 1053], "joshua": [371, 1037, 1038, 1040, 1041, 1047, 1050, 1051], "joshuakennethjon": 1044, "jos\u00e9": [727, 1038, 1048, 1053], "jotasi": 1043, "joudet": [1042, 1043], "journal": [0, 113, 188, 270, 276, 287, 370, 371, 373, 406, 408, 410, 415, 453, 463, 474, 536, 543, 631, 639, 649, 693, 696, 697, 709, 719, 735, 738, 739, 762, 763, 790, 833, 838, 884, 896, 994, 995, 999, 1001, 1002, 1003, 1006, 1012, 1017, 1019, 1020], "jovan": [1049, 1050], "joydeep": 408, "jo\u00e3o": [1050, 1053], "jo\u00ebl": 1043, "jpcar": 1053, "jpeg": [370, 371, 495, 496], "jpfrancoia": [1041, 1042], "jpg": [508, 587, 590], "jpienaar": 1053, "jpm": 52, "jpmml": 1024, "jpmorgan": [52, 1029], "jr": 1001, "jrenni": 845, "jrfiedler": 1041, "jschendel": [1042, 1043], "jschuerz": 1049, "json": [53, 370, 376, 394], "jth": [778, 782], "juan": [0, 366, 1035, 1046, 1047, 1048, 1049, 1050], "juanfe88": 1050, "judg": [92, 218, 408], "judgment": [261, 1005], "judithabk6": 1046, "juergen": [1045, 1050], "jul": 279, "juli": [373, 417, 738, 889, 1015, 1038, 1042, 1043, 1044, 1053], "julia": [408, 721, 741, 799], "julian": [1042, 1043, 1053], "juliankahnert": 1041, "juliaschoepp": [1050, 1051], "juliathebrav": 1041, "julien": [0, 397, 662, 1001, 1029, 1035, 1038, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "juliet": 1043, "julietcl": 1043, "julio": 1048, "julyrashchenko": 1048, "jumon": 1046, "jump": [44, 213, 310, 373, 376, 416, 887], "jumpi": 416, "june": [408, 1002, 1041, 1051], "juneja": 1053, "jung": [1042, 1046, 1050], "jungkook": 1040, "jungl": 1002, "jupyt": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 377, 378, 409, 469, 906, 1021, 1024, 1025, 1046, 1049], "jurgen": 1029, "juri": 568, "jurman": 747, "just": [44, 53, 68, 117, 121, 141, 144, 150, 169, 203, 233, 244, 264, 270, 277, 281, 290, 305, 340, 358, 359, 371, 375, 376, 377, 378, 380, 381, 384, 388, 389, 390, 405, 407, 408, 409, 412, 415, 417, 420, 469, 535, 537, 544, 548, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 582, 587, 614, 615, 650, 656, 661, 662, 664, 666, 670, 671, 672, 680, 681, 682, 810, 827, 857, 865, 866, 994, 1001, 1004, 1005, 1006, 1009, 1013, 1015, 1019, 1025, 1035, 1039, 1041, 1043, 1047, 1051], "justglow": 1044, "justif": 680, "justifi": [376, 382, 406, 567], "justin": [1037, 1043, 1047], "jvm": 1048, "jygerardi": [1050, 1051], "j\u00e9r\u00e9mie": [0, 397, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j\u00e9r\u00f4me": [1044, 1045, 1046, 1052, 1053], "j\u00eann": 1041, "j\u00f6rg": [408, 451, 458, 1043], "j\u00f6rn": 1042, "j\u00f8rgensen": [1001, 1052], "k": [2, 34, 51, 52, 55, 56, 58, 62, 64, 67, 68, 72, 73, 74, 76, 78, 81, 83, 84, 87, 89, 90, 94, 97, 99, 107, 108, 112, 119, 121, 128, 135, 137, 143, 147, 151, 153, 154, 156, 157, 160, 162, 165, 166, 172, 174, 175, 179, 180, 183, 184, 187, 188, 189, 190, 195, 197, 201, 205, 207, 224, 226, 243, 245, 247, 248, 249, 255, 258, 266, 270, 273, 274, 279, 280, 283, 284, 290, 292, 295, 296, 297, 298, 299, 301, 302, 303, 311, 312, 313, 314, 317, 319, 323, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 350, 351, 353, 358, 359, 364, 371, 373, 376, 384, 385, 388, 390, 399, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 441, 444, 447, 448, 449, 450, 451, 452, 453, 454, 460, 461, 463, 470, 473, 489, 504, 514, 525, 533, 539, 543, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 584, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 635, 643, 644, 652, 654, 655, 657, 658, 659, 660, 662, 663, 667, 668, 669, 670, 671, 673, 683, 684, 686, 687, 688, 689, 690, 692, 695, 699, 700, 708, 709, 712, 721, 730, 741, 747, 760, 762, 763, 765, 770, 773, 778, 779, 780, 781, 783, 797, 798, 799, 801, 802, 805, 809, 811, 812, 813, 816, 819, 820, 822, 823, 825, 826, 832, 843, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 869, 873, 874, 875, 879, 880, 881, 883, 884, 888, 896, 901, 915, 923, 937, 947, 952, 978, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1007, 1009, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1024, 1026, 1030, 1031, 1035, 1036, 1037, 1038, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "k0": 999, "k1": [418, 625, 628], "k1__": 418, "k1__k1": 418, "k1__k1__constant_valu": 418, "k1__k1__constant_value_bound": 418, "k1__k2": 418, "k1__k2__length_scal": 418, "k1__k2__length_scale_bound": 418, "k2": [418, 625, 628], "k2__": 418, "k2__length_scal": 418, "k2__length_scale_bound": 418, "k_": [405, 418, 620, 623, 625, 628, 778, 997, 1015], "k_1": [2, 418, 625, 628], "k_2": [2, 418, 625, 628], "k_best": [595, 905, 1018, 1052], "k_diag": [616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "k_fit_all_": 874, "k_fit_rows_": 874, "k_fold": 160, "k_gradient": [616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629], "k_init": [444, 460], "k_mean": [2, 98, 385, 390, 1043, 1051], "k_means_cluster_cent": 98, "k_means_elkan": 1043, "k_means_label": 98, "k_new": 874, "k_ret": [848, 849], "k_true": [848, 849], "ka00ri": [1050, 1051], "kachaiev": 1052, "kaczmarzyk": 1052, "kadatatlu": 1048, "kadota": 1049, "kaggl": [155, 389], "kahni": 1047, "kai": [373, 565, 1011, 1042], "kaicheng": 1039, "kaichogami": 1041, "kailasa": [1049, 1050], "kaim": [865, 866], "kaiser": [413, 534], "kakati": 1050, "kalli": [1043, 1044], "kalyan": 1041, "kamalakerdadi": [1040, 1041], "kamar": 1043, "kamchyev": 1052, "kamel": 1035, "kamishima": [1041, 1042], "kamm": 1005, "kanai": [1041, 1042, 1043], "kanazu": [1050, 1051], "kanchimo": 1053, "kang": [1043, 1045], "kania": [1050, 1051], "kanika": 1045, "kanishk": 1050, "kanissh": 1050, "kanji": 1048, "kanniah": [1038, 1039], "kansal": 1041, "kapadni": 1050, "kapeln": [188, 1012], "kapoor": [1043, 1044], "kappa": [2, 538, 720], "kapur": 1042, "kar": 1041, "karan": [1042, 1043, 1044], "karayev": 1037, "karbownik": 1048, "karen": 1048, "karger": [845, 1007], "karhunen": 536, "karin": [631, 995], "karl": 1043, "karlo": [1052, 1053], "karnofski": 1042, "karnowski": 1047, "karol": 1038, "kartik": 1047, "karypi": 408, "kaseorg": 1045, "kashif": 1040, "kasim": 1039, "kaski": 700, "kasper": 1043, "kassa": [1050, 1051], "kastner": [0, 398, 1037, 1038, 1039, 1046, 1047], "kat": 1042, "kataev": [1043, 1044], "kataki": [724, 738, 744, 1005], "katarina": [1045, 1047], "katheleen": 370, "kathi": [1042, 1045], "kathleen": 1042, "kathryn": 1046, "kati": 1042, "katotten": 1049, "katrin": [1043, 1044], "katrina": 1046, "katriopla": 1043, "katyal": 1045, "katz": [1040, 1047, 1048], "kaufmann": [1017, 1021, 1047], "kaushik": [1042, 1049, 1050, 1051, 1053], "kaushik94": 1038, "kawamura": 1048, "kawwa": 1048, "kayawari": 1048, "kaylani2": 1047, "kaynak": 373, "kazmar": 1039, "kbest": [105, 595], "kbin": [317, 324], "kbinsdiscret": [2, 44, 87, 119, 184, 195, 212, 230, 250, 309, 312, 317, 324, 348, 514, 661, 871, 887, 917, 1015, 1026, 1043, 1047, 1048, 1049, 1051, 1053], "kbinsdiscretizer__n_bin": 312, "kcachegrind": 379, "kd": [295, 408, 414, 1008, 1043, 1044, 1045], "kd_tree": [419, 445, 447, 451, 458, 692, 693, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1008, 1048, 1052], "kdd": [192, 371, 406, 438, 1017], "kdd06_rp": 901, "kddcup": [249, 369, 494, 1031], "kddcup99": [2, 371, 494], "kde": [186, 187, 284, 287, 294, 295, 303, 414, 853], "kdt": 1008, "kdtree": [2, 447, 451, 458, 692, 693, 848, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1037, 1039, 1043, 1047, 1048, 1051, 1052], "ke": [415, 1046, 1047], "kearn": 1038, "keat": [1050, 1051], "keep": [0, 46, 53, 65, 78, 108, 124, 126, 141, 150, 168, 177, 182, 186, 187, 188, 189, 190, 198, 209, 212, 213, 214, 220, 230, 253, 260, 265, 268, 314, 315, 322, 330, 340, 351, 352, 355, 359, 363, 364, 368, 376, 378, 380, 389, 390, 406, 408, 409, 410, 411, 412, 413, 431, 451, 466, 483, 484, 485, 486, 495, 496, 536, 542, 543, 546, 549, 556, 558, 560, 562, 564, 567, 570, 572, 598, 601, 603, 606, 615, 638, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 680, 681, 682, 683, 712, 822, 841, 842, 851, 859, 865, 866, 904, 909, 911, 914, 917, 919, 1001, 1006, 1010, 1013, 1015, 1025, 1028, 1029, 1031, 1035, 1040, 1043, 1044, 1048, 1049, 1051, 1053], "keep_empty_featur": [631, 632, 634, 995, 1050], "keerti": 1050, "kegl": 1039, "kei": [2, 48, 50, 53, 56, 78, 127, 141, 144, 155, 182, 186, 230, 246, 249, 252, 271, 273, 274, 320, 321, 322, 323, 324, 325, 326, 327, 365, 369, 378, 381, 382, 383, 388, 390, 391, 394, 399, 408, 409, 412, 418, 465, 473, 563, 564, 569, 570, 571, 572, 591, 594, 597, 613, 621, 630, 636, 638, 663, 715, 804, 807, 808, 816, 818, 826, 831, 867, 868, 923, 939, 969, 1013, 1025, 1031, 1032, 1041, 1047, 1048, 1050, 1051, 1053], "keith": [1035, 1040], "kekalainen": [730, 760, 1005], "kelkar": [1042, 1043, 1045], "kelleh": [712, 1005], "kelleher2015": 1005, "kellei": [371, 1037, 1038], "keller": 1047, "kellogg": 52, "kellycarmodi": 1045, "kemal": [0, 1037, 1038], "kemenad": 1046, "kemk": 1046, "ken": [373, 1037, 1044], "ken4git": 1049, "kendal": 1050, "kendrick": 1047, "kennedi": [1042, 1045, 1052], "kennel": 1046, "kenneth": [1017, 1035, 1036, 1041, 1042, 1049, 1050], "kenni": 1047, "kensuk": 1045, "kenta": 1038, "kento": [1050, 1051], "kept": [65, 260, 290, 347, 370, 402, 418, 498, 537, 540, 542, 543, 549, 600, 613, 614, 615, 623, 624, 648, 699, 801, 802, 935, 1015, 1043, 1044], "kera": [388, 1024], "kerimov": [1042, 1043], "kernal": 126, "kernc": [1035, 1049, 1050], "kernel": [2, 24, 25, 28, 43, 46, 49, 50, 51, 67, 68, 69, 85, 100, 107, 117, 120, 122, 130, 133, 156, 162, 167, 170, 172, 173, 174, 175, 178, 182, 197, 213, 221, 226, 238, 239, 247, 251, 263, 268, 270, 272, 275, 276, 280, 285, 291, 296, 301, 315, 322, 331, 334, 335, 337, 338, 340, 341, 342, 343, 345, 348, 359, 363, 368, 378, 388, 390, 396, 406, 408, 409, 412, 415, 416, 431, 441, 449, 453, 462, 463, 466, 483, 484, 485, 492, 498, 500, 504, 506, 516, 535, 536, 537, 543, 546, 556, 558, 560, 562, 564, 567, 570, 572, 596, 597, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 635, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 680, 681, 682, 683, 692, 694, 695, 696, 699, 739, 762, 763, 765, 770, 771, 778, 779, 780, 781, 804, 810, 815, 818, 834, 836, 841, 842, 848, 849, 851, 853, 859, 866, 868, 869, 874, 878, 880, 881, 883, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 917, 919, 925, 994, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1018, 1019, 1026, 1027, 1030, 1031, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "kernel_": [171, 172, 173, 174, 175, 176, 177, 178, 180, 614, 615], "kernel__length_scal": 171, "kernel__period": 171, "kernel_approxim": [2, 44, 182, 184, 191, 192, 226, 239, 244, 321, 642, 643, 644, 645, 646, 681, 762, 763, 874, 997, 1026, 1036, 1042, 1052], "kernel_dens": [848, 849], "kernel_label": 346, "kernel_metr": [2, 643, 644, 645, 646], "kernel_param": [453, 537, 643, 647], "kernel_pca": [45, 126, 409], "kernel_pca_": 692, "kernel_pca_back_proj_ax": 126, "kernel_pca_proj_ax": 126, "kernel_ridg": [2, 171, 245, 647, 1006, 1039], "kernel_ridge_tun": 171, "kernel_svm": 244, "kernel_svm_scor": 244, "kernel_svm_tim": 244, "kernelapproximationkernel": 396, "kernelcenter": [2, 404, 1015, 1045, 1049, 1051, 1052], "kerneldens": [2, 294, 295, 303, 414, 1037, 1043, 1044, 1048, 1049, 1050], "kernelpca": [2, 45, 409, 413, 535, 536, 543, 546, 692, 694, 696, 874, 1015, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "kernelridg": [2, 126, 171, 245, 676, 998, 1006, 1039, 1052], "kertesz": 1049, "keshat": [670, 671, 1001], "keshavan": 1045, "kesshi": [1045, 1046], "kevad": 1045, "kevin": [647, 1037, 1039, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1052], "kevlani": 1043, "keyber": 1053, "keyerror": [923, 1045], "keyword": [351, 370, 376, 378, 381, 383, 390, 408, 419, 422, 439, 445, 446, 451, 453, 458, 465, 468, 498, 505, 537, 540, 542, 561, 562, 569, 570, 571, 572, 613, 624, 635, 636, 643, 647, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 692, 696, 701, 702, 703, 704, 705, 706, 778, 782, 783, 784, 785, 796, 797, 810, 827, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 868, 872, 947, 971, 994, 1002, 1005, 1008, 1018, 1035, 1039, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "kf": [412, 809], "kfold": [2, 88, 141, 146, 160, 265, 275, 359, 412, 438, 473, 569, 570, 597, 605, 651, 655, 657, 659, 665, 667, 669, 677, 804, 807, 808, 810, 812, 814, 818, 823, 825, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 889, 1036, 1037, 1038, 1040, 1041, 1043, 1045, 1053], "khaja": 1050, "khan": [1050, 1051], "khandelw": 1047, "khanduja": 1038, "khant": 1050, "kharsa": 1049, "khedkar": 1049, "khine": 1049, "kho": 1050, "khoo": 1047, "khosasi": 1048, "khosrow": 1005, "khoual": 1048, "khwaja": 1050, "ki": 1005, "kian": [1040, 1050, 1051, 1052], "kid": 1015, "kieker": [1043, 1044], "kielczewski": 1041, "kie\u00dfl": 1046, "kilian": [416, 1050, 1051], "kill": 388, "killer": [376, 1029], "kilobyt": 87, "kilomet": 768, "kim": [1001, 1043, 1044, 1045, 1049], "kimayoung": 1049, "kimberli": 52, "kimbinyi": 1047, "kind": [44, 49, 52, 53, 62, 63, 108, 129, 141, 155, 164, 187, 188, 260, 263, 264, 266, 279, 317, 321, 324, 337, 340, 351, 364, 365, 369, 371, 376, 382, 388, 389, 406, 408, 411, 412, 413, 415, 416, 417, 489, 490, 505, 510, 511, 523, 526, 591, 636, 637, 705, 943, 1001, 1007, 1012, 1021, 1038, 1047, 1049, 1050, 1051], "king": 939, "kingjr": 1041, "kingma": [865, 866, 1009], "kink": 202, "kiragu": 1047, "kiran": 1047, "kirandevraj": 1050, "kiril": [1042, 1043, 1045, 1047], "kirkbi": [1042, 1043], "kirkham": [1040, 1041, 1043], "kirthi": 1045, "kishan": 1052, "kishimoto": 1047, "kishor": 1048, "kislovskii": 1052, "kit": 388, "kitchen": [645, 997], "kj": [370, 1007], "kjell": 1041, "kk": 1005, "kl": [413, 1002, 1043], "kl_divergence_": [696, 1042], "klarup": 1042, "klass": 99, "klau": [413, 537, 874], "kleczewski": [1042, 1043], "kleiber": 1049, "klevebr": 1043, "klima": 1050, "klopfer": 1044, "kluge": [1050, 1051], "kluger": [2, 405, 452, 515], "klusacek": 1005, "km": [95, 323, 352], "kmatt10": 1048, "kmb": 52, "kmean": [2, 58, 59, 72, 79, 81, 84, 87, 91, 92, 95, 184, 258, 261, 313, 323, 352, 385, 399, 408, 434, 435, 437, 441, 444, 449, 450, 453, 463, 514, 714, 796, 797, 801, 802, 873, 1008, 1015, 1026, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "kmeans_estim": 121, "kmeans_model": 408, "kmeans_plusplu": [2, 93, 408, 1047, 1052], "kmode": 1024, "kms15": [1043, 1044], "knee": 408, "kneighbor": [315, 323, 850, 851, 852, 854, 856, 1008, 1039, 1044, 1048, 1049, 1050, 1051], "kneighbors_graph": [2, 75, 80, 96, 101, 290, 390, 408, 442, 446, 699, 850, 851, 852, 854, 856, 858, 859, 860, 862, 1008, 1035, 1039, 1044], "kneighborsclassifi": [2, 68, 156, 161, 292, 293, 298, 299, 315, 321, 323, 351, 415, 605, 851, 855, 856, 857, 858, 859, 1006, 1008, 1035, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kneighborsclassifierkneighbor": 396, "kneighborsregressor": [2, 182, 248, 302, 323, 415, 572, 850, 856, 858, 859, 1006, 1008, 1035, 1037, 1039, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kneighborstransform": [2, 290, 292, 319, 696, 860, 1008, 1045, 1049, 1050], "knn": [138, 156, 161, 182, 293, 298, 299, 302, 315, 321, 331, 351, 415, 605, 850, 857, 858, 903, 904, 1008, 1018, 1041], "knn__weight": 293, "knn_graph": 75, "knn_impute_scor": 183, "knnimput": [2, 183, 319, 631, 634, 995, 1045, 1046, 1049, 1050, 1051, 1052], "knnquerybatch": 290, "knot": [44, 213, 322, 887, 1015, 1048], "know": [87, 100, 166, 169, 171, 180, 187, 230, 246, 247, 264, 270, 283, 287, 289, 323, 329, 347, 363, 376, 388, 399, 402, 408, 411, 412, 413, 416, 502, 506, 512, 650, 656, 662, 663, 730, 760, 804, 818, 893, 894, 896, 897, 898, 899, 916, 917, 918, 919, 994, 1004, 1005, 1006, 1008, 1017, 1041, 1042, 1045, 1047], "knowledg": [91, 150, 187, 229, 249, 264, 270, 283, 284, 371, 376, 379, 382, 389, 390, 408, 412, 415, 419, 445, 513, 557, 558, 565, 724, 740, 744, 787, 837, 1005, 1006, 1017, 1053], "known": [2, 51, 56, 63, 65, 75, 83, 91, 92, 113, 127, 129, 130, 155, 176, 178, 183, 198, 212, 213, 230, 239, 264, 270, 272, 279, 299, 303, 311, 322, 327, 329, 337, 344, 352, 365, 371, 373, 374, 376, 384, 388, 390, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 439, 464, 483, 485, 500, 510, 511, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 591, 592, 594, 597, 612, 626, 637, 662, 663, 676, 686, 687, 698, 708, 714, 717, 722, 733, 747, 759, 761, 799, 837, 843, 844, 845, 846, 847, 850, 855, 858, 864, 892, 916, 917, 918, 919, 952, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1020, 1021], "known_val": 631, "knox": 1047, "knp": 631, "knr": 415, "knyazev": [408, 453, 463, 699, 1045, 1048, 1049], "ko": [52, 64, 172], "kobak": [696, 1048], "kobaski": 1048, "kobayashi": [1047, 1048], "kober": 1043, "kobi": 739, "koch": [1037, 1043, 1044, 1046, 1047], "kocot": 1046, "koehler": 1039, "koen": [1043, 1044], "koenker": [727, 1001], "koh": [1001, 1029], "kohavi": 412, "kohli": [1052, 1053], "koi8": 416, "koivunen": 113, "kokhlikyan": [1042, 1043], "koki": 1047, "koko": [1043, 1049, 1050], "kolawol": 1048, "kolganov": 1040, "kolh": 1037, "komarov": 1053, "komey": [1049, 1050], "kommireddi": 1049, "kondratyev": 1049, "kong": 1048, "konstantin": [1040, 1041, 1042], "konstantino": [1043, 1052], "konwar": 1046, "koonc": 1043, "korba": 371, "korean": 1024, "kornel": 1041, "kornev": 1050, "korobko": [1052, 1053], "korobov": [1036, 1037, 1038, 1041, 1042], "korolev": 1045, "kosic": 1047, "kosobrodov": 1043, "kossaifi": [1035, 1039, 1040], "kossen": [1050, 1051], "kossori": [1043, 1044], "kostelac": [1050, 1051], "kot271828": 1048, "kothari": 1046, "kotwalia": [1043, 1044], "koumenti": 1050, "koushik": 1049, "koustav": [1052, 1053], "kovalevskyi": 1041, "kowalski87": 1038, "koyama": 1049, "kozachenko": [610, 611], "kozynet": [1047, 1049], "kpca": [2, 535, 536, 537, 1030, 1031, 1035], "kr": [245, 270, 1049], "kr_fit": 245, "kr_predict": 245, "kraig": 1050, "kraktu": 1053, "kranthi": 1049, "kranz": 1029, "kraskov": [610, 611], "krasouli": [1042, 1043, 1044, 1045, 1047, 1048], "kratzwald": 1041, "krawczyk": 1049, "krawutschk": [1050, 1051], "krell": [1039, 1041], "kriegel": [408, 419, 445, 451, 458, 854, 1011], "krinitsyn": 1043, "krishna": [1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "krishnachaitanya9": 1046, "krishnakalyan3": 1041, "krishnan": 1045, "krivich": [1041, 1042, 1044], "kronovet": 1040, "krr": [245, 647, 998], "krsto": 1053, "krum": [1047, 1049], "krumetoft": 1049, "krump": 1040, "kruskal": [639, 694, 698, 1002], "krzeminski": 1042, "krzysztof": 370, "ksemb": 1043, "kshitij": [1050, 1051, 1053], "ksvd": [668, 689, 690, 1001], "ksvm": 192, "ksvm_score": 192, "ksvm_time": 192, "kth": 825, "ku": [1039, 1040], "kuai": [1043, 1044], "kubin": 1046, "kuhlmann": [1042, 1043], "kulbear": 1044, "kulkarni": 1043, "kull": [406, 1005], "kullback": [55, 232, 413, 540, 542, 549, 696, 1002, 1042], "kulsinski": [451, 458, 703, 782, 783, 784], "kulsinskidist": [703, 1051], "kumar": [0, 169, 371, 398, 408, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kumaresshan": [1043, 1044, 1047], "kumawat": 1049, "kund": [1051, 1052], "kunj": 1048, "kuno": 1053, "kuo": 1039, "kurumeyuta": 1048, "kurz": [1049, 1050], "kusanagi": [1046, 1048], "kusanagi2": 1047, "kushal": [1043, 1044], "kushan": 1052, "kushwah": [1051, 1052], "kushwaha": 1047, "kusterl": 1045, "kuth": 1041, "kvam": [1036, 1038], "kvle": 1041, "kw_arg": [140, 872, 1015, 1041], "kwarg": [77, 124, 246, 378, 383, 422, 426, 430, 439, 443, 449, 451, 465, 470, 537, 540, 542, 565, 613, 635, 650, 651, 656, 657, 664, 665, 666, 667, 681, 685, 688, 702, 703, 704, 706, 746, 867, 868, 872, 912, 923, 964, 970, 993, 1042, 1046, 1048, 1052], "kwd": [775, 778, 782, 785, 796, 797], "kwei": [1038, 1039, 1040, 1041, 1042], "kxytim": 1048, "kybernetika": 373, "kye": 1043, "kyeongpil": 1043, "kyle": [0, 398, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047], "kyledrogo": 1043, "kyler": 1040, "k\u00e4rkk\u00e4inen": 1001, "l": [0, 47, 54, 56, 76, 81, 82, 100, 101, 113, 138, 189, 208, 216, 221, 222, 275, 276, 277, 287, 306, 314, 347, 373, 374, 382, 384, 405, 406, 408, 412, 413, 415, 418, 475, 518, 519, 520, 540, 542, 549, 557, 558, 559, 560, 567, 568, 593, 610, 611, 614, 615, 619, 623, 626, 627, 638, 652, 653, 662, 673, 676, 678, 684, 691, 693, 696, 697, 709, 719, 729, 730, 735, 760, 790, 845, 879, 916, 917, 918, 919, 994, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1013, 1017, 1019, 1021, 1038, 1043, 1047, 1048, 1049, 1050, 1052], "l1": [2, 26, 43, 47, 56, 67, 76, 100, 114, 116, 184, 193, 194, 199, 200, 201, 202, 207, 208, 216, 223, 227, 241, 271, 283, 290, 307, 322, 385, 388, 408, 410, 413, 442, 446, 451, 458, 465, 470, 471, 472, 473, 474, 475, 476, 477, 479, 498, 504, 506, 533, 539, 540, 541, 542, 544, 545, 549, 550, 560, 567, 592, 593, 594, 600, 648, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 676, 680, 681, 682, 683, 685, 692, 739, 766, 772, 777, 782, 783, 784, 789, 818, 825, 834, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 880, 888, 895, 908, 909, 915, 917, 919, 937, 986, 1001, 1003, 1005, 1008, 1015, 1019, 1020, 1021, 1026, 1040, 1042, 1048, 1051], "l1_color": 223, "l1_contour": 223, "l1_distanc": 1035, "l1_min_c": [2, 206, 1001, 1020, 1035], "l1_plot": 228, "l1_ratio": [47, 50, 55, 198, 201, 204, 278, 283, 363, 388, 413, 540, 542, 549, 650, 651, 656, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 1001, 1019, 1036, 1038, 1040, 1047, 1049], "l1_ratio_": [651, 663, 665], "l1_ratios_": 663, "l2": [2, 54, 67, 76, 114, 116, 184, 186, 187, 193, 194, 198, 201, 204, 206, 212, 217, 223, 227, 228, 230, 271, 283, 290, 310, 317, 333, 351, 352, 378, 385, 388, 408, 410, 413, 415, 416, 442, 446, 451, 458, 526, 540, 542, 549, 560, 563, 564, 567, 592, 593, 594, 647, 650, 651, 652, 653, 656, 661, 662, 663, 664, 665, 666, 667, 672, 673, 676, 680, 682, 684, 685, 690, 691, 692, 739, 754, 765, 766, 782, 783, 784, 818, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 866, 880, 888, 895, 908, 909, 913, 914, 915, 917, 919, 987, 994, 998, 1001, 1003, 1008, 1009, 1015, 1019, 1021, 1026, 1037, 1039, 1040, 1042, 1044], "l2014": 415, "l2_color": 223, "l2_contour": 223, "l2_regular": [322, 415, 563, 564], "l_": [405, 615, 656, 745, 1005], "l_i": 1015, "l_inf": 56, "l_m": 415, "l_p": [451, 458, 692, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862], "l_x": 54, "la": [0, 373, 398, 1029, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "lab": [0, 371, 469, 538, 906, 1029, 1046], "labb\u00e9": 1053, "label": [2, 31, 39, 44, 46, 47, 49, 51, 52, 53, 54, 59, 62, 63, 64, 65, 67, 69, 70, 74, 76, 78, 79, 81, 82, 83, 85, 86, 89, 90, 92, 94, 97, 98, 99, 100, 101, 106, 108, 110, 111, 112, 113, 116, 117, 119, 123, 125, 128, 129, 130, 135, 136, 137, 138, 139, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 158, 165, 167, 171, 172, 176, 177, 178, 179, 180, 182, 184, 187, 190, 192, 194, 195, 197, 198, 200, 202, 203, 205, 207, 209, 212, 213, 214, 215, 218, 219, 220, 221, 222, 226, 227, 229, 230, 233, 234, 235, 239, 244, 245, 247, 249, 250, 257, 263, 264, 265, 268, 269, 271, 272, 273, 274, 276, 279, 280, 281, 282, 283, 284, 285, 289, 295, 297, 299, 302, 306, 308, 310, 311, 315, 319, 320, 323, 326, 328, 332, 334, 342, 344, 346, 347, 351, 352, 355, 356, 357, 365, 368, 369, 370, 375, 376, 378, 381, 385, 390, 391, 405, 406, 407, 418, 419, 425, 426, 430, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 463, 466, 470, 488, 489, 490, 495, 496, 497, 498, 504, 505, 510, 511, 514, 516, 517, 521, 524, 525, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 571, 572, 595, 596, 597, 598, 599, 601, 602, 603, 607, 608, 609, 612, 614, 635, 662, 663, 670, 671, 672, 677, 678, 679, 680, 681, 682, 701, 702, 704, 706, 707, 708, 709, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 726, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 758, 759, 760, 761, 786, 787, 788, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 818, 819, 820, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 855, 857, 858, 865, 866, 868, 872, 875, 876, 879, 881, 882, 889, 892, 903, 904, 905, 908, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 924, 928, 934, 939, 940, 967, 968, 975, 994, 1001, 1002, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1021, 1024, 1026, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "label1": 390, "label2": 390, "label_a": 279, "label_b": 279, "label_binar": [2, 277, 279, 875, 1039], "label_binarizer_": 837, "label_distributions_": [329, 330, 903, 904, 1046], "label_im": 100, "label_out": 79, "label_pr": [721, 740, 741, 759, 761, 799], "label_prop_model": [903, 904], "label_propag": 1036, "label_ranking_average_precision_scor": [2, 1005, 1039, 1043, 1044, 1050], "label_ranking_loss": [2, 1005, 1040], "label_spread": 331, "label_tru": [708, 721, 741, 759, 761, 799], "labelbinar": [2, 279, 390, 726, 745, 837, 872, 881, 889, 892, 1006, 1038, 1039, 1040, 1044, 1049], "labelbottom": [158, 270], "labeled_iter_": [332, 905], "labelencod": [2, 390, 571, 882, 1016, 1035, 1043, 1050, 1051], "labeling1": 1005, "labeling2": 1005, "labelkfold": [1040, 1041], "labelleft": 255, "labelpad": 270, "labelpropag": [2, 323, 331, 904, 905, 1006, 1018, 1036, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1051], "labels": [55, 314], "labels_": [74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 89, 92, 95, 96, 97, 99, 101, 323, 325, 352, 376, 378, 390, 408, 426, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 714, 1040], "labels_050": 99, "labels_200": 99, "labels_a": 73, "labels_b": 73, "labels_pr": [408, 708, 709, 718, 719, 721, 735, 740, 741, 759, 761, 790, 799], "labels_tru": [74, 83, 89, 98, 408, 708, 709, 718, 719, 721, 735, 740, 741, 759, 761, 790, 799], "labels_uniqu": 97, "labelshufflesplit": [1040, 1041], "labelspread": [2, 323, 329, 330, 331, 333, 334, 903, 905, 1006, 1018, 1036, 1041, 1042, 1045, 1046, 1049, 1050, 1051], "labex": 0, "labl": 150, "laboratori": [371, 1024], "lacchia": 1042, "lack": [44, 65, 344, 376, 388, 412, 833, 923, 1020, 1049], "lacost": [662, 1001], "lacouth": 1048, "lacrosse91": 1048, "lad": 1048, "lag": [43, 44, 147, 150, 184, 214, 493, 564, 705, 746, 749, 750, 752, 794, 825, 830, 831, 834, 1026], "lagacheri": 1039, "lagard": 1038, "lagat": 1045, "lagged_count_": 53, "lagged_count_1d": 53, "lagged_count_1d_1h": 53, "lagged_count_7d": 53, "lagged_count_7d_1h": 53, "lagged_df": 53, "lagged_max_24h": 53, "lagged_max_7d": 53, "lagged_mean_24h": 53, "lagged_mean_7d": 53, "lagged_min_24h": 53, "lagged_min_7d": 53, "lai": [52, 315, 344, 1011], "laid": [0, 186, 376], "lakhotia": [1045, 1046], "lakshmi": 1045, "lakshmikanth": 1042, "lakshya": [1043, 1044, 1045], "lal": 904, "lalliacqua": [1045, 1048], "lam": [320, 321, 1046, 1053], "lama": 496, "lamb": [1040, 1048], "lambda": [44, 47, 48, 50, 58, 90, 146, 195, 230, 270, 271, 314, 333, 402, 404, 408, 413, 415, 416, 648, 649, 650, 651, 872, 884, 997, 1001, 1015, 1043, 1049], "lambda_": [195, 648, 649, 884, 1001, 1042], "lambda_1": [648, 649, 1001], "lambda_2": [648, 649, 1001], "lambda_i": [1001, 1015], "lambda_init": [194, 195, 649, 1001, 1045], "lambdas_": [314, 884, 1048, 1051], "lami": 1043, "lamond": 1039, "lamp": 1029, "lamu": 1041, "lan": [662, 1050, 1051], "land": [51, 303, 380, 391, 415], "land_mask": 303, "land_refer": [51, 303], "landeau": 1052, "landmark": [885, 897, 1015], "landscap": 172, "lane": 1041, "langford": [416, 692, 1002], "langl": [997, 1005, 1019, 1020], "languag": [0, 353, 381, 413, 416, 1019, 1024, 1025, 1029], "language_level": 377, "lanigan": 1042, "lanl": 56, "lannuzel": 1047, "lanterni": 1049, "lanzani": 1041, "lapack": [363, 364, 374, 534, 537, 543, 692, 1050], "lapack_lit": 382, "lapack_svd_driv": 1050, "laplac": [2, 172, 418, 614, 615, 843, 844, 845, 847, 1007], "laplacian": [2, 232, 368, 405, 441, 453, 463, 624, 643, 647, 695, 699, 769, 770, 778, 904, 1001, 1002, 1018, 1031, 1036, 1041], "laplacian_kernel": [2, 769, 1003, 1040], "laptop": [53, 384, 469, 906, 1049, 1050, 1051], "lar": [0, 2, 124, 184, 193, 198, 199, 202, 204, 207, 373, 398, 472, 473, 479, 503, 533, 539, 541, 544, 545, 547, 548, 550, 655, 656, 657, 658, 659, 660, 667, 668, 669, 682, 685, 686, 687, 688, 689, 690, 1006, 1026, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1053], "laradji": [0, 1041], "larg": [0, 2, 39, 44, 52, 53, 54, 60, 64, 65, 73, 75, 79, 82, 83, 84, 86, 87, 89, 106, 108, 121, 125, 138, 140, 141, 147, 150, 151, 153, 165, 176, 177, 189, 190, 194, 195, 202, 204, 212, 214, 216, 217, 218, 230, 244, 249, 264, 267, 273, 276, 279, 292, 299, 307, 310, 312, 322, 323, 326, 340, 345, 347, 352, 353, 363, 371, 376, 378, 382, 385, 388, 389, 390, 394, 402, 408, 410, 412, 413, 414, 415, 417, 419, 421, 443, 445, 447, 448, 451, 452, 453, 454, 459, 463, 474, 476, 501, 516, 536, 538, 540, 542, 543, 546, 549, 551, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 585, 592, 638, 645, 647, 650, 651, 654, 656, 657, 658, 661, 662, 663, 668, 675, 676, 678, 681, 683, 689, 691, 693, 695, 696, 697, 699, 750, 783, 784, 804, 812, 814, 818, 822, 833, 843, 844, 845, 846, 847, 848, 849, 854, 865, 866, 873, 877, 878, 886, 888, 900, 901, 908, 909, 913, 914, 916, 917, 918, 919, 951, 952, 994, 997, 999, 1001, 1002, 1004, 1007, 1008, 1009, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "larger": [44, 47, 65, 73, 75, 78, 82, 89, 112, 114, 119, 130, 138, 148, 150, 172, 177, 178, 183, 187, 188, 192, 195, 198, 227, 228, 229, 237, 243, 245, 255, 261, 264, 271, 273, 279, 280, 287, 290, 292, 305, 306, 308, 310, 340, 344, 352, 353, 369, 371, 376, 382, 390, 405, 406, 408, 409, 410, 412, 413, 415, 416, 418, 441, 444, 450, 451, 453, 455, 457, 517, 529, 543, 546, 563, 564, 565, 569, 570, 585, 592, 647, 656, 676, 677, 678, 679, 683, 691, 696, 708, 723, 740, 801, 853, 854, 885, 887, 888, 889, 897, 902, 951, 952, 975, 978, 997, 998, 1001, 1002, 1004, 1005, 1008, 1009, 1013, 1015, 1019, 1020, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1052, 1053], "largest": [114, 123, 141, 214, 373, 408, 410, 413, 444, 529, 543, 559, 560, 561, 562, 566, 567, 591, 713, 801, 802, 823, 846, 878, 916, 917, 918, 919, 952, 1002, 1005, 1015, 1020, 1021], "largest_clust": [408, 444], "largest_coef": [114, 529], "larrald": 1052, "lars_path": [2, 201, 385, 533, 539, 541, 544, 545, 547, 548, 550, 654, 655, 656, 657, 658, 659, 660, 667, 668, 669, 687, 688, 689, 690, 1001, 1035, 1037, 1040, 1044, 1046], "lars_path_gram": [2, 686, 1001, 1044], "larscv": [2, 399, 654, 669, 686, 687, 1042, 1048, 1052], "larson": [1040, 1044, 1045, 1047, 1049], "larsson": [1047, 1048, 1049], "lasagna": 1041, "laska": 1041, "lasso": [2, 43, 56, 100, 130, 155, 160, 184, 187, 193, 204, 209, 211, 220, 260, 322, 326, 347, 363, 388, 410, 411, 413, 415, 416, 417, 472, 473, 479, 503, 526, 533, 539, 541, 544, 545, 547, 548, 550, 600, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 674, 676, 682, 685, 686, 687, 688, 689, 690, 725, 727, 728, 829, 830, 831, 869, 888, 994, 1005, 1006, 1019, 1026, 1027, 1031, 1035, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1053], "lasso_cd": [533, 539, 544, 550], "lasso_cv": 160, "lasso_lar": [130, 533, 539, 544, 550, 1045], "lasso_lars_": [200, 202], "lasso_path": [2, 201, 655, 656, 657, 658, 659, 660, 667, 686, 687, 1001, 1035, 1037, 1039, 1048], "lasso_pipelin": 155, "lassocv": [2, 54, 155, 160, 187, 198, 202, 399, 415, 417, 655, 656, 658, 659, 660, 667, 688, 1001, 1035, 1038, 1042, 1045, 1046, 1048, 1049, 1052, 1053], "lassolar": [2, 655, 656, 657, 659, 660, 667, 668, 669, 686, 687, 688, 1001, 1006, 1035, 1036, 1038, 1042, 1045, 1046, 1048], "lassolars": [2, 200, 202, 417, 655, 658, 659, 1001, 1035, 1042, 1044, 1048, 1049], "lassolarscv": [2, 202, 399, 417, 656, 657, 658, 660, 667, 669, 686, 687, 688, 1001, 1035, 1042, 1048, 1052], "lassolarsic__criterion": [200, 202], "last": [44, 59, 80, 92, 147, 187, 194, 212, 213, 220, 225, 239, 261, 273, 281, 282, 315, 321, 323, 332, 355, 363, 371, 374, 380, 381, 384, 390, 394, 402, 408, 409, 416, 420, 439, 443, 448, 460, 465, 468, 469, 517, 535, 561, 562, 563, 564, 586, 587, 590, 596, 597, 600, 614, 686, 687, 689, 690, 701, 702, 704, 705, 706, 711, 786, 801, 802, 807, 808, 823, 848, 849, 853, 868, 869, 873, 881, 887, 923, 955, 979, 993, 994, 1000, 1001, 1002, 1004, 1006, 1009, 1019, 1025, 1035, 1041, 1042, 1043, 1044, 1049, 1051, 1052], "last_hour": [44, 53], "last_mean": 979, "last_n": 979, "last_var": 979, "lat": [51, 303, 500, 768], "late": 365, "latenc": [43, 47, 48, 184, 362, 526, 567, 676, 682, 834, 888, 914, 969, 978, 1024, 1026, 1031, 1038], "latent": [2, 43, 46, 56, 131, 184, 308, 352, 411, 416, 418, 489, 534, 538, 540, 541, 542, 545, 546, 591, 594, 864, 1004, 1024, 1026, 1030, 1031, 1037, 1040], "latentdirichletalloc": [2, 55, 365, 381, 413, 1024, 1040, 1042, 1049, 1050], "later": [0, 51, 87, 135, 140, 148, 171, 188, 192, 194, 249, 264, 287, 303, 353, 359, 374, 378, 382, 388, 389, 402, 415, 854, 877, 878, 886, 888, 997, 1015, 1038, 1041, 1043, 1047], "latest": [319, 320, 321, 322, 323, 324, 325, 326, 327, 374, 376, 380, 382, 384, 1021, 1049], "latestst": 380, "latex": 1035, "latexpdf": 376, "latin": [48, 416], "latitud": [303, 310, 371, 500, 703, 768], "lattarini": 1037, "latter": [44, 55, 260, 270, 279, 280, 298, 315, 347, 365, 373, 390, 407, 412, 415, 416, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 746, 801, 802, 803, 804, 807, 808, 813, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 971, 1008, 1013, 1044], "laughlin": 1042, "launch": [394, 1029], "laur": 1035, "lauren": [0, 360, 696, 700, 1002, 1047, 1050], "laurent": [1038, 1039, 1042, 1043, 1050, 1051], "laurenz": 1047, "lauritzen": 1043, "laveen": 1048, "law": 1029, "lawrenc": 264, "lawson": [1042, 1043, 1044], "lawton": 1043, "layer": [2, 44, 68, 143, 153, 162, 173, 175, 184, 219, 228, 250, 304, 307, 308, 312, 313, 334, 345, 363, 384, 415, 516, 517, 524, 569, 834, 864, 865, 866, 869, 888, 1010, 1026, 1027, 1031, 1041], "layout": [135, 310, 388, 908, 909, 910, 913, 935, 1020, 1038, 1040, 1052], "layton": [0, 398, 1035, 1036, 1037, 1038, 1040], "lazaru": 1053, "lazebnik": [762, 763, 1003], "lazi": [53, 391, 416, 1019, 1039], "lazyfram": 106, "lazz": 1050, "lb": [875, 1016], "lbfg": [305, 378, 652, 653, 662, 663, 673, 676, 678, 684, 691, 839, 842, 865, 866, 1001, 1009, 1039, 1040, 1042, 1043, 1048, 1049, 1050, 1052], "lbfgsb": 662, "lbfin": 1045, "lc": [52, 235, 242], "lceil": [405, 1011], "lda": [55, 70, 120, 123, 125, 127, 131, 184, 299, 359, 373, 404, 506, 538, 543, 551, 552, 857, 1024, 1026, 1027, 1030, 1031, 1040], "lda_featur": 381, "lda_model": 381, "lda_np": 404, "ldavid": 1041, "ldflag": 374, "ldirer": 1042, "ldl": 373, "ldot": [1001, 1005, 1007, 1009, 1019], "ldwy4": [1052, 1053], "le": [662, 876, 996, 1001, 1008, 1016, 1018, 1043, 1047, 1048, 1052], "le_": 571, "lead": [0, 47, 63, 65, 68, 73, 86, 89, 95, 105, 141, 144, 145, 147, 168, 169, 187, 188, 189, 194, 198, 202, 204, 205, 209, 212, 216, 244, 246, 249, 264, 270, 271, 273, 277, 283, 295, 296, 307, 310, 312, 315, 316, 321, 340, 347, 352, 355, 359, 363, 364, 370, 375, 378, 384, 385, 389, 390, 405, 406, 407, 408, 410, 412, 413, 414, 415, 417, 453, 463, 466, 469, 498, 517, 529, 537, 540, 541, 542, 545, 549, 553, 559, 560, 561, 562, 565, 566, 567, 568, 609, 634, 650, 651, 654, 656, 657, 658, 664, 665, 666, 667, 683, 695, 699, 750, 801, 807, 808, 836, 848, 849, 853, 872, 879, 889, 900, 901, 906, 908, 916, 917, 918, 919, 994, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1015, 1018, 1019, 1021, 1029, 1038, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053], "leader": [376, 1029], "leadership": 0, "leaf": [77, 140, 151, 153, 355, 358, 408, 415, 419, 442, 443, 444, 445, 446, 447, 451, 458, 464, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 916, 917, 918, 919, 920, 921, 1008, 1021, 1038, 1040, 1042, 1046, 1049], "leaf_id": 358, "leaf_rot": 190, "leaf_siz": [419, 445, 447, 451, 456, 457, 458, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1008], "leagu": 371, "leak": [140, 275, 351, 359, 409, 412, 868, 893, 894, 896, 897, 898, 899, 1015, 1035, 1042, 1045, 1051, 1052, 1053], "leakag": [389, 390, 409, 1031], "lean": 402, "leandro": [1044, 1048], "lear": 1029, "learn": [2, 15, 27, 30, 31, 33, 39, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 328, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 364, 368, 369, 370, 371, 373, 375, 379, 382, 383, 384, 385, 389, 390, 393, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 416, 417, 418, 422, 423, 425, 426, 427, 428, 430, 431, 432, 438, 439, 440, 443, 444, 447, 448, 450, 451, 458, 465, 466, 468, 469, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 510, 511, 512, 514, 516, 517, 518, 519, 520, 522, 523, 524, 526, 527, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 579, 584, 585, 586, 587, 590, 591, 592, 593, 594, 596, 597, 602, 605, 606, 613, 614, 615, 618, 623, 626, 630, 632, 634, 636, 638, 642, 644, 645, 647, 648, 649, 650, 652, 656, 661, 662, 672, 673, 680, 681, 682, 684, 692, 693, 694, 695, 696, 700, 701, 704, 705, 706, 712, 717, 721, 722, 725, 727, 728, 730, 736, 739, 745, 746, 747, 752, 760, 782, 783, 784, 788, 789, 791, 792, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 845, 846, 847, 850, 852, 855, 857, 864, 865, 866, 867, 868, 869, 871, 873, 875, 878, 880, 881, 882, 883, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 906, 908, 909, 910, 913, 916, 917, 918, 919, 924, 926, 937, 945, 947, 957, 970, 971, 994, 995, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1026, 1028, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "learn_rat": 1036, "learnalgorithm": 396, "learner": [2, 48, 136, 145, 155, 365, 556, 561, 562, 563, 564, 585, 592, 634, 850, 851, 856, 858, 859, 1007, 1010, 1021, 1024, 1051], "learning_curv": [2, 272, 324, 399, 810, 1000, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1052], "learning_decai": 538, "learning_method": [55, 381, 538], "learning_offset": [55, 538], "learning_r": [47, 135, 145, 146, 147, 148, 149, 150, 237, 290, 306, 308, 320, 322, 415, 555, 556, 561, 562, 563, 564, 672, 680, 681, 682, 696, 864, 865, 866, 1002, 1012, 1019, 1036, 1044, 1048], "learning_rate_": [696, 866], "learning_rate_init": [188, 306, 307, 865, 866], "learningcurvedisplai": [2, 245, 272, 324, 1000, 1050, 1051], "learnt": [150, 187, 317, 359, 390, 412, 889, 994, 1015], "least": [2, 38, 45, 53, 55, 112, 113, 115, 116, 123, 124, 138, 148, 158, 167, 179, 184, 186, 193, 194, 197, 198, 203, 206, 212, 214, 216, 217, 220, 229, 230, 243, 249, 266, 270, 283, 287, 289, 315, 321, 322, 340, 352, 353, 363, 369, 371, 373, 375, 376, 380, 382, 384, 388, 390, 391, 399, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 445, 449, 451, 457, 458, 459, 462, 475, 482, 483, 484, 485, 486, 496, 503, 518, 533, 539, 541, 543, 544, 545, 547, 548, 549, 550, 551, 559, 560, 561, 562, 564, 566, 567, 568, 596, 597, 605, 639, 647, 650, 652, 654, 655, 656, 657, 658, 659, 660, 661, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 696, 701, 716, 720, 722, 754, 789, 805, 809, 810, 816, 818, 819, 820, 822, 823, 825, 829, 832, 833, 834, 865, 866, 869, 880, 888, 913, 916, 917, 918, 919, 943, 967, 995, 998, 1002, 1005, 1008, 1017, 1019, 1020, 1021, 1025, 1026, 1027, 1029, 1031, 1035, 1037, 1038, 1041, 1042, 1046], "least_absolute_devi": [1045, 1047, 1048], "least_angl": 385, "least_squar": 1048, "leastangle_2002": 373, "leastsquareserror": 1044, "leav": [2, 87, 135, 140, 148, 188, 190, 230, 277, 315, 358, 359, 363, 373, 375, 381, 390, 408, 415, 442, 443, 446, 447, 464, 505, 559, 560, 561, 562, 563, 564, 566, 567, 568, 677, 679, 806, 811, 812, 813, 814, 822, 823, 848, 849, 850, 858, 916, 917, 918, 919, 994, 1002, 1008, 1012, 1021, 1035, 1042, 1044, 1046, 1047, 1051], "leaveonegroupout": [2, 275, 412, 805, 812, 813, 1041], "leaveonelabelout": 1041, "leaveoneout": [2, 275, 412, 850, 858, 1053], "leavepgroupsout": [2, 412, 806, 1041], "leaveplabelout": 1041, "leaveplabelsout": 1041, "leavepout": [2, 412, 812], "leaves_parallel": 920, "lebedev": [1041, 1042], "lebel": 1050, "lebourgeoi": 1029, "lectur": [408, 648, 997, 1023], "lecture2": 648, "lecun": [1009, 1019], "led": 1035, "ledoit": [2, 50, 66, 71, 109, 110, 113, 114, 184, 299, 421, 474, 476, 480, 481, 514, 551, 999, 1026], "ledoit_wolf": [2, 114, 410, 1048], "ledoit_wolf_shrinkag": [2, 1048], "ledoitwolf": [2, 70, 109, 111, 114, 128, 149, 184, 301, 410, 421, 470, 471, 475, 476, 477, 478, 804, 1026, 1039], "lee": [413, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1050], "leepei": 1039, "leereev": 1042, "leeuw": 639, "lefebvr": [1048, 1049], "lefevr": [413, 540], "left": [46, 47, 52, 54, 55, 62, 70, 71, 75, 78, 80, 85, 89, 96, 98, 105, 108, 113, 114, 119, 123, 124, 135, 138, 140, 141, 142, 144, 147, 150, 155, 157, 174, 180, 183, 187, 190, 206, 212, 213, 214, 216, 223, 225, 226, 229, 230, 239, 243, 247, 249, 250, 255, 257, 258, 261, 266, 267, 268, 269, 271, 279, 280, 282, 293, 295, 296, 303, 305, 308, 310, 323, 325, 326, 330, 339, 340, 344, 358, 371, 376, 378, 380, 405, 408, 411, 412, 414, 415, 416, 418, 425, 431, 447, 473, 483, 484, 485, 486, 495, 500, 551, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 590, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 639, 643, 647, 655, 659, 801, 802, 804, 807, 808, 811, 818, 825, 881, 888, 916, 917, 918, 919, 920, 938, 952, 975, 978, 994, 997, 999, 1001, 1003, 1005, 1007, 1012, 1017, 1019, 1021, 1042, 1044, 1049], "left_h": 310, "left_impur": [559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919], "leftarrow": [408, 1009, 1019], "leftmost": 1009, "legaci": [370, 380, 390, 945, 946, 947, 1035, 1042, 1047], "legarreta": [1046, 1048, 1049], "legend": [44, 47, 48, 49, 51, 53, 62, 64, 70, 73, 76, 95, 105, 106, 108, 110, 111, 112, 113, 116, 117, 123, 125, 127, 128, 129, 130, 135, 136, 137, 138, 139, 141, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 165, 171, 172, 176, 177, 178, 179, 180, 187, 188, 192, 194, 195, 197, 200, 201, 202, 203, 205, 207, 209, 212, 213, 214, 215, 218, 219, 220, 221, 222, 225, 226, 227, 229, 230, 235, 242, 243, 244, 245, 247, 250, 257, 264, 265, 267, 269, 270, 272, 273, 274, 275, 277, 280, 282, 283, 284, 285, 287, 293, 295, 296, 297, 302, 306, 311, 315, 320, 323, 326, 331, 339, 342, 344, 346, 351, 355, 356, 357, 704, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "legend1": 127, "legend_el": [127, 151, 205, 225, 273, 293, 344], "legend_handl": 297, "legend_lin": 49, "legend_titl": 218, "legitim": [264, 1002], "legitimate_accept": 264, "legitimate_refus": 264, "lego": 1024, "lehoucq": 413, "leibler": [55, 232, 413, 540, 542, 549, 696, 1002, 1042], "leibniz": 1005, "leig": 1041, "leightonzhang": 1041, "leinweb": [1043, 1044], "leisur": 44, "lejeun": 1042, "lekhwani": 1044, "leland": [1041, 1042, 1043, 1045, 1046, 1051], "lemaitr": [0, 397, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lemir": 1046, "lemma": [38, 243, 368, 536, 543, 551, 900, 901, 902, 999, 1031, 1038], "lemmat": 416, "lemmatoken": 416, "lemo": [1051, 1052], "len": [47, 48, 50, 51, 56, 58, 67, 68, 69, 73, 74, 77, 79, 80, 83, 84, 85, 89, 94, 95, 96, 97, 98, 99, 103, 105, 124, 130, 131, 133, 138, 141, 143, 144, 150, 161, 162, 167, 171, 179, 183, 188, 190, 211, 212, 230, 235, 239, 242, 243, 244, 246, 248, 249, 255, 257, 258, 265, 268, 270, 271, 278, 279, 281, 285, 289, 290, 297, 299, 300, 305, 311, 312, 313, 316, 325, 327, 329, 330, 333, 340, 346, 349, 351, 352, 353, 358, 388, 390, 415, 418, 426, 430, 432, 438, 446, 451, 457, 465, 509, 517, 552, 571, 572, 585, 600, 636, 637, 786, 804, 818, 830, 834, 836, 838, 839, 889, 903, 904, 1044, 1047], "lenail": [1043, 1047], "lend": 1029, "lene": 1051, "length": [2, 103, 119, 127, 129, 131, 143, 171, 172, 173, 176, 177, 179, 192, 246, 247, 250, 293, 324, 337, 353, 369, 373, 376, 384, 385, 390, 409, 413, 415, 416, 418, 446, 491, 510, 511, 514, 517, 525, 553, 565, 584, 585, 592, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 636, 650, 651, 654, 655, 656, 657, 658, 660, 661, 664, 665, 666, 667, 685, 688, 785, 804, 807, 808, 818, 834, 836, 839, 840, 842, 850, 851, 852, 854, 856, 895, 921, 934, 936, 940, 958, 959, 975, 978, 1004, 1011, 1015, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1051], "length_scal": [171, 172, 175, 176, 177, 178, 180, 418, 616, 619, 622, 623, 625, 626, 627, 628], "length_scale_bound": [171, 177, 178, 180, 418, 615, 619, 623, 626, 627], "length_scale_grid": 177, "lengthi": [376, 388], "lenient": [882, 1025, 1052], "lenz": [1046, 1050], "leo": 1052, "leogrin": 1053, "leon": [680, 681, 682, 1035, 1053], "leonardo": 1048, "leonenko": [610, 611], "leonieborn": 1041, "leopoldo": 1048, "leq": [174, 413, 415, 1001, 1005, 1008, 1019, 1020, 1021], "lera": 1042, "leriqu": [1041, 1043], "lernen": 451, "lesne": 1049, "less": [44, 45, 48, 65, 86, 87, 94, 119, 121, 124, 131, 135, 142, 147, 148, 150, 171, 178, 187, 197, 198, 212, 214, 216, 245, 249, 256, 258, 264, 270, 271, 279, 281, 284, 285, 311, 314, 315, 316, 321, 323, 327, 344, 351, 352, 359, 363, 365, 371, 376, 378, 388, 390, 402, 408, 412, 413, 415, 416, 420, 440, 442, 444, 446, 449, 451, 453, 458, 461, 463, 464, 483, 484, 485, 498, 517, 533, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 593, 599, 623, 631, 638, 651, 665, 680, 682, 696, 705, 725, 726, 727, 728, 729, 740, 756, 768, 783, 784, 789, 799, 801, 802, 806, 807, 808, 814, 832, 843, 844, 845, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 871, 883, 885, 886, 888, 891, 897, 898, 908, 909, 916, 917, 918, 919, 940, 955, 994, 995, 997, 998, 999, 1002, 1004, 1005, 1008, 1010, 1015, 1019, 1020, 1021, 1024, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1050, 1052], "lessen": [218, 662, 663], "lesser": [305, 390, 443, 543, 1001], "let": [44, 45, 53, 87, 89, 98, 104, 108, 121, 126, 127, 142, 144, 147, 148, 150, 152, 171, 177, 178, 183, 187, 188, 189, 196, 202, 205, 212, 214, 230, 232, 236, 246, 253, 264, 265, 270, 273, 277, 283, 284, 327, 351, 353, 358, 359, 371, 376, 378, 382, 388, 402, 405, 407, 408, 412, 415, 416, 492, 502, 506, 512, 536, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 685, 688, 874, 881, 882, 1001, 1002, 1003, 1004, 1005, 1012, 1013, 1015, 1020, 1021, 1029, 1045], "letelli": 1041, "letter": [179, 371, 373, 380, 416, 792, 793, 810, 827, 1005], "leu": 1049, "leung": 1046, "lev_metr": 388, "levarag": 326, "level": [44, 49, 51, 52, 65, 71, 77, 87, 121, 140, 143, 162, 170, 171, 172, 175, 178, 180, 184, 187, 188, 223, 224, 225, 226, 227, 230, 239, 243, 244, 259, 264, 270, 273, 279, 280, 296, 303, 338, 339, 341, 342, 344, 347, 352, 358, 363, 371, 373, 376, 378, 382, 388, 390, 393, 394, 399, 406, 413, 416, 418, 422, 455, 469, 495, 496, 498, 505, 523, 533, 538, 539, 547, 548, 549, 563, 564, 569, 570, 615, 619, 626, 627, 629, 670, 671, 672, 680, 681, 682, 691, 694, 696, 698, 704, 706, 720, 727, 732, 789, 829, 830, 831, 833, 836, 837, 864, 865, 866, 906, 921, 994, 1001, 1005, 1006, 1008, 1013, 1019, 1021, 1024, 1025, 1026, 1038, 1046, 1049, 1050, 1051], "levelnam": 121, "leven": 388, "levenshtein": [327, 388], "levenshtein_dist": 327, "levequ": [846, 888], "leverag": [44, 48, 73, 83, 117, 230, 327, 351, 352, 363, 364, 374, 390, 412, 415, 883, 994, 1001, 1038, 1050, 1053], "levesqu": 1041, "levi": [536, 1042], "levinson": [1043, 1044], "levitski": [1050, 1051, 1052], "levitskii": 1048, "lewi": [371, 1042, 1046], "lex": [408, 453, 463], "lexicograph": [390, 569, 792, 798, 850, 858], "lexicon": 1015, "lexsort": 62, "lf": 384, "lfw": [2, 46, 371, 495, 496, 1035], "lfw_home": 371, "lfw_pairs_train": [371, 495], "lfw_peopl": [46, 371, 496], "lg2012": 415, "lgtm": 1042, "li": [0, 332, 371, 397, 398, 643, 646, 700, 730, 760, 901, 994, 997, 1005, 1008, 1015, 1017, 1020, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "liabil": 230, "liac": [324, 370, 376, 498, 1050, 1051], "liam": [1043, 1044], "liang": [1041, 1046, 1047, 1052, 1053], "liau": 1038, "lib": [364, 374, 394, 1024], "liberti": 261, "libisel": 1053, "liblinear": [206, 338, 382, 662, 663, 792, 908, 909, 910, 913, 914, 1001, 1005, 1020, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1051], "libomp": [374, 1047], "librari": [46, 264, 270, 322, 324, 359, 368, 370, 371, 374, 375, 376, 377, 382, 384, 388, 389, 390, 394, 402, 404, 465, 662, 908, 909, 910, 911, 913, 914, 1001, 1005, 1020, 1021, 1024, 1025, 1029, 1033, 1038, 1042, 1043, 1044, 1045, 1046, 1048, 1052], "libsvm": [2, 192, 338, 369, 382, 488, 510, 565, 908, 909, 910, 911, 912, 913, 914, 1020, 1031, 1035, 1037, 1043, 1046, 1049], "libsvmtool": [192, 370, 488, 510, 511], "licenc": 370, "licens": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 388, 390, 1021, 1029], "lichman": 373, "liddel": 1043, "lidston": [843, 844, 845, 847, 1007], "lie": [53, 94, 116, 168, 187, 244, 310, 331, 338, 340, 413, 415, 609, 856, 858, 859, 860, 908, 909, 999, 1002, 1005, 1015, 1020], "lieg": 415, "lieret": 1050, "lieu": [1041, 1042], "life": [53, 150, 263, 327, 384, 1002], "lifecycl": [1024, 1025], "lifo": 923, "lift": 394, "light": [138, 371], "lighter": [363, 704, 706, 786, 793, 1051], "lightfm": 1024, "lightgbm": [150, 415, 563, 564, 1024, 1044, 1051], "lightgreen": [157, 218, 229], "lightgrei": 50, "lightweight": [377, 804, 818, 829, 830], "ligo": 1042, "lihaitao": 1053, "lik_max": 110, "lik_min": 110, "like": [0, 2, 44, 52, 53, 86, 89, 92, 94, 103, 119, 124, 128, 130, 133, 135, 137, 142, 147, 150, 151, 171, 177, 187, 188, 195, 212, 246, 261, 264, 270, 273, 274, 277, 278, 285, 299, 308, 310, 315, 316, 319, 332, 340, 344, 359, 363, 365, 368, 370, 371, 375, 376, 378, 380, 383, 384, 385, 388, 389, 390, 399, 402, 404, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 517, 521, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 584, 585, 586, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 930, 932, 939, 940, 954, 958, 967, 968, 975, 976, 977, 989, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1005, 1007, 1008, 1009, 1011, 1012, 1015, 1020, 1021, 1025, 1029, 1032, 1035, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "likelihood": [2, 70, 91, 109, 111, 112, 113, 114, 128, 149, 171, 172, 173, 175, 176, 177, 178, 180, 184, 200, 230, 259, 262, 270, 276, 301, 310, 378, 390, 406, 410, 413, 415, 418, 421, 438, 470, 471, 472, 473, 474, 475, 476, 477, 478, 517, 534, 538, 543, 551, 552, 553, 614, 615, 635, 649, 662, 716, 745, 801, 802, 804, 831, 834, 853, 855, 864, 884, 896, 910, 911, 913, 914, 1001, 1004, 1007, 1015, 1020, 1026, 1038, 1039, 1044, 1050], "likewis": [247, 408, 525], "lil": [390, 555, 556, 875, 930, 958, 1008], "lil_matrix": 56, "lili": [1043, 1044], "lilian": [1040, 1041, 1052], "lim": [174, 536], "lima": [1048, 1049], "limit": [44, 48, 56, 65, 73, 78, 91, 100, 114, 135, 142, 148, 155, 182, 187, 188, 189, 194, 212, 213, 229, 243, 277, 312, 316, 322, 347, 353, 359, 364, 377, 381, 388, 390, 391, 406, 407, 408, 411, 413, 417, 447, 464, 469, 561, 562, 563, 564, 636, 654, 683, 686, 687, 692, 782, 825, 856, 858, 859, 860, 881, 882, 906, 910, 911, 912, 913, 914, 994, 1001, 1002, 1004, 1005, 1012, 1013, 1015, 1025, 1031, 1043, 1045, 1048, 1049, 1052], "limits_": 1008, "lin": [0, 536, 662, 1020, 1040, 1041, 1042, 1043], "lin_clf": 1020, "linalg": [71, 88, 110, 111, 114, 128, 130, 199, 255, 256, 257, 260, 261, 326, 376, 382, 413, 452, 453, 454, 463, 523, 534, 537, 543, 546, 661, 676, 678, 691, 695, 699, 950], "linalgerror": 1045, "lincoln": 371, "lindenbaum": 536, "lindenstrauss": [38, 89, 184, 238, 368, 490, 504, 900, 901, 902, 1022, 1026, 1031], "lindgren": 1053, "lindquist": 1050, "line": [49, 51, 53, 56, 76, 79, 94, 103, 112, 121, 126, 135, 137, 141, 146, 170, 182, 183, 184, 187, 188, 200, 202, 203, 205, 208, 210, 213, 215, 220, 221, 223, 224, 226, 239, 243, 244, 247, 249, 267, 274, 276, 277, 283, 296, 300, 303, 311, 321, 339, 342, 344, 345, 348, 349, 370, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 388, 413, 414, 415, 439, 488, 489, 490, 510, 511, 544, 555, 556, 557, 558, 614, 617, 618, 636, 674, 690, 704, 705, 706, 810, 827, 999, 1005, 1009, 1012, 1019, 1024, 1026, 1028, 1037, 1046, 1048, 1051, 1052], "line0": [52, 235], "line1": [47, 52, 235], "line2": [47, 52, 235, 348], "line2d": [49, 112, 226, 296, 339, 342, 810, 827], "line_": [383, 439, 702, 704, 705, 706, 810, 827], "line_bin": 311, "line_fig": 141, "line_i": 215, "line_kw": [150, 152, 250, 272, 320, 326, 636, 810, 827], "line_kwarg": [155, 705], "line_profil": 382, "line_trac": 141, "line_x": [215, 229], "line_y_ransac": 215, "linea": 396, "linear": [2, 12, 45, 49, 50, 52, 53, 54, 65, 66, 67, 68, 73, 86, 91, 107, 108, 110, 111, 112, 113, 114, 117, 121, 126, 127, 129, 138, 140, 153, 155, 158, 160, 162, 164, 169, 175, 177, 182, 183, 185, 186, 188, 192, 195, 197, 198, 199, 200, 202, 203, 205, 208, 210, 213, 214, 216, 217, 220, 224, 226, 228, 229, 230, 231, 234, 236, 242, 243, 245, 247, 248, 251, 260, 263, 266, 267, 268, 270, 273, 275, 276, 277, 278, 279, 280, 283, 285, 295, 296, 298, 299, 300, 308, 310, 311, 312, 315, 317, 321, 322, 335, 337, 340, 341, 342, 345, 347, 348, 351, 357, 364, 368, 372, 373, 374, 378, 379, 381, 390, 393, 396, 406, 408, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 443, 445, 456, 466, 468, 476, 483, 484, 485, 498, 504, 514, 517, 523, 526, 534, 535, 536, 537, 538, 541, 543, 545, 546, 550, 551, 552, 556, 568, 585, 592, 596, 597, 609, 612, 618, 624, 635, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 692, 693, 694, 695, 696, 697, 705, 711, 720, 723, 754, 757, 769, 771, 778, 804, 815, 819, 831, 834, 848, 849, 853, 857, 864, 865, 866, 869, 873, 874, 875, 878, 881, 883, 885, 886, 887, 888, 897, 901, 908, 909, 910, 911, 912, 913, 914, 994, 996, 997, 998, 1000, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1020, 1026, 1027, 1029, 1030, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049], "linear_baselin": 321, "linear_kernel": [2, 404, 765, 769, 1003, 1043], "linear_model": [2, 44, 47, 48, 50, 54, 63, 65, 67, 88, 104, 106, 108, 117, 140, 155, 157, 158, 160, 161, 167, 168, 169, 171, 182, 184, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 239, 240, 241, 242, 246, 248, 251, 253, 264, 266, 273, 278, 279, 283, 284, 285, 289, 308, 311, 312, 315, 317, 319, 320, 321, 322, 323, 325, 326, 327, 333, 351, 359, 363, 365, 375, 376, 378, 382, 384, 385, 389, 390, 399, 404, 407, 409, 415, 428, 433, 439, 466, 539, 541, 544, 545, 547, 548, 550, 569, 570, 571, 572, 600, 613, 635, 636, 638, 639, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 704, 705, 792, 803, 818, 827, 829, 830, 831, 833, 835, 839, 840, 841, 842, 866, 883, 887, 908, 909, 912, 915, 943, 945, 947, 948, 988, 997, 1001, 1005, 1006, 1011, 1013, 1015, 1019, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "linear_model_preprocessor": 212, "linear_pca": 409, "linear_preprocessor": 155, "linear_regress": [214, 285], "linear_sum_assign": [405, 723], "linear_svc": 1020, "linear_svm": 244, "linear_svm_scor": 244, "linear_svm_tim": 244, "lineardiscriminantanalysi": [2, 70, 71, 129, 233, 299, 359, 404, 538, 552, 857, 999, 1006, 1008, 1035, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1049, 1050, 1051], "linearli": [68, 126, 137, 187, 194, 226, 233, 239, 279, 280, 312, 315, 344, 351, 363, 373, 388, 413, 415, 517, 555, 646, 711, 877, 878, 1005, 1008, 1011, 1020, 1042, 1051], "linearly_separ": [68, 305], "linearmodel": 1048, "linearoper": [326, 691], "linearregress": [2, 117, 158, 186, 194, 203, 208, 209, 210, 215, 218, 229, 242, 246, 248, 266, 285, 311, 359, 376, 388, 389, 409, 415, 466, 572, 636, 639, 650, 653, 656, 658, 675, 676, 691, 1001, 1005, 1006, 1015, 1039, 1040, 1044, 1047, 1048, 1049, 1051], "linearsvc": [2, 63, 65, 103, 105, 165, 166, 184, 192, 244, 267, 269, 277, 312, 319, 335, 336, 337, 341, 342, 347, 351, 363, 382, 406, 416, 417, 438, 514, 569, 580, 635, 643, 647, 656, 676, 677, 678, 679, 680, 691, 739, 746, 831, 836, 909, 910, 913, 915, 1001, 1005, 1006, 1020, 1026, 1035, 1036, 1037, 1041, 1043, 1046, 1051], "linearsvc__c": 312, "linearsvr": [2, 570, 914, 1020, 1039, 1041, 1046, 1051], "linecollect": [52, 235, 242, 636], "linen": [52, 235], "lineno": 382, "lineplot": [150, 270], "liner": [378, 834], "lines_": [383, 636, 810, 827], "linestyl": [50, 51, 70, 94, 106, 112, 128, 130, 135, 146, 157, 160, 162, 171, 174, 176, 178, 180, 189, 190, 200, 201, 202, 212, 213, 214, 218, 222, 224, 225, 230, 247, 249, 264, 267, 269, 273, 274, 279, 283, 284, 295, 303, 306, 311, 338, 341, 342, 344, 345, 347], "linewidth": [62, 70, 71, 73, 76, 92, 106, 110, 117, 119, 123, 136, 147, 150, 152, 171, 175, 179, 202, 203, 205, 207, 208, 209, 210, 213, 215, 218, 226, 229, 239, 247, 249, 279, 283, 296, 300, 311, 320, 326, 338, 339, 341, 357], "linger": 214, "linguist": [720, 905, 1018], "lingyi1110": 1050, "link": [52, 56, 135, 187, 188, 194, 212, 216, 230, 255, 264, 273, 300, 355, 364, 370, 375, 376, 377, 378, 380, 384, 390, 406, 408, 410, 413, 415, 418, 563, 564, 614, 652, 673, 684, 692, 709, 933, 935, 1001, 1008, 1021, 1022, 1024, 1028, 1033, 1035, 1038, 1039, 1042, 1043, 1046, 1052], "link_thickness_i": 300, "linkag": [72, 75, 76, 77, 80, 82, 86, 89, 90, 91, 101, 184, 190, 441, 442, 446, 447, 464, 514, 516, 524, 888, 1024, 1026, 1038, 1043, 1046], "linkage_matrix": 77, "linkage_tre": 1039, "linkedin": 380, "linker": 377, "linnerrud": [369, 1031], "linnerud": [2, 373, 507], "linprog": [674, 1001], "linspac": [44, 48, 50, 51, 54, 62, 64, 73, 74, 76, 78, 83, 89, 112, 113, 122, 130, 136, 147, 171, 172, 174, 175, 176, 177, 178, 180, 188, 194, 195, 197, 198, 203, 205, 207, 212, 213, 214, 218, 222, 223, 224, 225, 226, 230, 237, 239, 242, 243, 245, 247, 259, 270, 272, 273, 277, 278, 279, 280, 285, 295, 296, 302, 303, 311, 313, 323, 324, 339, 340, 343, 344, 345, 347, 348, 349, 635, 636, 810, 832, 848, 849], "lint": 376, "linter": 582, "linthresh": [194, 198], "linu": [1051, 1052, 1053], "linux": [376, 378, 379, 384, 1024, 1035], "lipoprotein": 373, "lippert": 1001, "lippmann": 371, "lipschitz": [38, 1017], "lisa": [1043, 1044, 1046, 1047, 1049, 1050], "lise": 1049, "list": [0, 2, 44, 48, 50, 52, 53, 54, 56, 58, 59, 63, 69, 76, 80, 83, 96, 103, 130, 131, 139, 141, 146, 155, 190, 216, 249, 250, 265, 268, 270, 271, 273, 274, 279, 299, 312, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 333, 343, 352, 353, 365, 370, 371, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 388, 389, 390, 391, 394, 395, 399, 406, 408, 409, 412, 414, 415, 416, 431, 433, 438, 451, 457, 458, 465, 466, 467, 468, 472, 473, 479, 483, 484, 485, 489, 490, 491, 492, 494, 495, 498, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 516, 517, 518, 519, 520, 521, 522, 525, 534, 552, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 591, 592, 594, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 636, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 685, 688, 690, 691, 696, 700, 701, 703, 714, 715, 716, 717, 720, 722, 729, 737, 746, 750, 758, 782, 785, 787, 792, 798, 801, 802, 804, 807, 808, 810, 815, 816, 818, 827, 829, 830, 831, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 872, 876, 879, 881, 882, 887, 889, 905, 909, 911, 914, 916, 917, 918, 919, 922, 929, 930, 934, 935, 936, 940, 942, 943, 944, 945, 947, 955, 956, 959, 970, 975, 978, 988, 994, 995, 1001, 1005, 1007, 1008, 1009, 1012, 1013, 1016, 1021, 1024, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "list_param": 376, "listedcolormap": [68, 71, 143, 298, 301, 305, 312], "listinfo": 384, "lite": 1035, "liter": [376, 945, 946, 1029], "literatur": [176, 270, 287, 352, 373, 376, 382, 384, 388, 389, 408, 411, 413, 415, 444, 448, 450, 503, 538, 540, 542, 549, 557, 558, 591, 594, 712, 801, 994, 997, 1001, 1005, 1045], "litsidi": [1050, 1051], "littl": [187, 188, 189, 190, 239, 371, 416, 463, 648, 804, 818, 952, 995, 1002, 1004, 1020, 1021, 1036, 1047, 1052], "lituiev": 1048, "liu": [0, 366, 387, 397, 565, 730, 760, 1005, 1011, 1038, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "liutong": 1043, "live": [51, 187, 264, 303, 371, 376, 408, 500, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 1028], "livni": [408, 443], "lizao": 1043, "lizsz": 1041, "lj2017": 408, "lk": 1038, "lkjcalc": 1043, "lkubin": 1046, "ll": [51, 89, 265, 283, 303, 376, 388, 534, 543, 997, 1008, 1021], "llcrnrlat": [51, 303], "llcrnrlon": [51, 303], "lle": [232, 233, 234, 236, 532, 693, 697, 1002, 1047], "lle_hessian": 232, "lle_ltsa": 232, "lle_method": 232, "lle_mod": 232, "lle_standard": 232, "lloyd": [408, 444, 448, 450, 460, 1049, 1050], "llvm": 374, "lm": 196, "lmbda": 314, "lmbda_bc": 314, "lmbda_yj": 314, "lml": [172, 173, 177, 418], "ln": [380, 1001, 1009, 1015], "loa": [170, 178, 184, 418, 498, 615, 619, 626, 627, 629, 1026], "load": [2, 10, 44, 46, 51, 53, 55, 69, 81, 87, 104, 105, 121, 131, 143, 145, 156, 158, 167, 176, 192, 196, 212, 220, 228, 248, 249, 253, 266, 275, 287, 290, 294, 299, 306, 307, 332, 333, 356, 363, 368, 371, 373, 379, 382, 389, 402, 411, 412, 413, 415, 483, 484, 485, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 534, 536, 545, 848, 849, 952, 1015, 1025, 1031, 1035, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "load_ames_h": 155, "load_boston": [1041, 1043, 1048], "load_breast_canc": [2, 169, 190, 332, 355, 381, 595, 598, 599, 601, 678, 679, 792, 1005, 1040, 1041, 1046], "load_cont": 505, "load_dataset": 351, "load_diabet": [2, 47, 148, 158, 160, 169, 183, 200, 201, 202, 209, 250, 266, 324, 415, 560, 564, 570, 677, 705, 829, 830, 831, 917, 919, 1013, 1041, 1046, 1049], "load_digit": [2, 69, 85, 86, 92, 105, 106, 161, 167, 204, 219, 233, 243, 244, 268, 269, 272, 278, 292, 294, 299, 306, 308, 325, 329, 330, 382, 409, 420, 446, 447, 534, 535, 536, 537, 602, 603, 642, 643, 672, 692, 693, 694, 695, 697, 699, 1041, 1046], "load_fil": [2, 370, 371, 1037, 1049], "load_iri": [2, 67, 77, 107, 125, 127, 129, 131, 143, 156, 162, 165, 173, 206, 221, 253, 257, 263, 275, 276, 277, 279, 280, 293, 298, 301, 306, 319, 321, 324, 334, 336, 337, 340, 343, 356, 358, 389, 402, 408, 409, 412, 415, 417, 428, 563, 569, 604, 605, 614, 623, 624, 626, 627, 635, 662, 663, 715, 792, 804, 807, 808, 810, 818, 836, 857, 903, 904, 905, 916, 918, 920, 921, 922, 995, 1000, 1005, 1006, 1007, 1008, 1012, 1015, 1021, 1041, 1043, 1046], "load_lfw_pair": 1040, "load_linnerud": [2, 841, 1041, 1046], "load_mnist": [220, 290], "load_mtpl2": 230, "load_sample_imag": [2, 586, 587, 590, 1044], "load_svmlight_fil": [2, 370, 1035, 1036, 1041, 1042, 1043, 1050], "load_win": [2, 49, 252, 315, 852, 860, 1032, 1046], "loader": [2, 271, 333, 351, 369, 370, 371, 500, 501, 510, 1035, 1040, 1042, 1043, 1046], "loan": [415, 536, 1001, 1029], "loayza": 1049, "lobpcg": [81, 453, 463, 692, 695, 699, 1045, 1048, 1049, 1050], "loc": [44, 47, 48, 49, 62, 64, 70, 76, 105, 108, 111, 112, 113, 116, 123, 125, 127, 128, 129, 130, 135, 137, 138, 139, 146, 147, 148, 149, 150, 152, 155, 157, 158, 165, 171, 172, 178, 180, 187, 188, 197, 201, 203, 207, 212, 213, 214, 215, 218, 219, 222, 225, 226, 229, 230, 235, 242, 243, 244, 245, 247, 249, 257, 258, 265, 268, 269, 270, 273, 274, 277, 280, 283, 284, 285, 293, 295, 296, 306, 311, 314, 315, 320, 323, 326, 331, 339, 342, 344, 346, 347, 351, 356, 357, 818, 885, 897], "loc_a": 314, "loc_b": 314, "local": [2, 44, 49, 52, 59, 75, 86, 91, 95, 121, 124, 140, 141, 152, 176, 177, 184, 188, 213, 226, 231, 234, 236, 239, 243, 249, 291, 300, 339, 357, 364, 373, 374, 376, 380, 382, 384, 394, 408, 413, 415, 416, 418, 448, 453, 463, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 504, 540, 542, 546, 549, 551, 561, 562, 565, 568, 614, 615, 692, 693, 694, 695, 696, 697, 699, 700, 762, 763, 851, 854, 857, 859, 869, 878, 901, 904, 912, 970, 1003, 1004, 1008, 1009, 1021, 1026, 1028, 1030, 1031, 1039, 1043, 1047, 1050, 1053], "local_filenam": 493, "localcach": 394, "locally_linear_embed": [2, 236, 1002], "locallylinearembed": [2, 52, 232, 233, 234, 323, 692, 694, 696, 1002, 1008, 1040, 1041, 1049, 1050, 1051], "localoutlierfactor": [2, 239, 249, 296, 297, 323, 390, 565, 912, 1011, 1042, 1043, 1045, 1049, 1050, 1051, 1052], "localoutlierfactor__n_neighbor": 249, "locat": [49, 63, 87, 88, 105, 112, 113, 207, 303, 321, 340, 369, 371, 374, 376, 378, 380, 381, 384, 385, 394, 395, 408, 410, 414, 449, 461, 462, 470, 471, 472, 473, 474, 475, 476, 477, 489, 502, 503, 506, 507, 514, 517, 989, 995, 1001, 1006, 1011, 1015, 1021, 1043], "location_": [112, 113, 470, 471, 472, 473, 474, 475, 476, 477], "location_reweight": [470, 475], "lock": [379, 394, 401, 402, 970, 1053], "loev": 536, "lof": [2, 49, 184, 226, 239, 249, 291, 339, 565, 854, 912, 1011, 1026], "lof_kw": 249, "lofti": [1045, 1046], "log": [2, 44, 59, 63, 64, 65, 110, 121, 135, 145, 147, 155, 165, 172, 173, 175, 176, 177, 180, 200, 202, 206, 212, 217, 222, 230, 243, 245, 259, 264, 300, 315, 351, 371, 373, 374, 376, 384, 385, 390, 405, 406, 408, 409, 410, 413, 415, 416, 418, 449, 452, 461, 466, 471, 472, 473, 474, 475, 476, 477, 534, 538, 543, 551, 552, 553, 555, 557, 559, 561, 564, 566, 593, 594, 596, 597, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 646, 649, 652, 662, 663, 673, 675, 680, 684, 726, 745, 759, 801, 802, 804, 807, 808, 818, 843, 844, 845, 846, 847, 848, 849, 853, 855, 864, 865, 872, 873, 902, 905, 910, 913, 915, 916, 918, 945, 950, 994, 997, 999, 1001, 1002, 1007, 1008, 1010, 1013, 1015, 1019, 1021, 1024, 1025, 1037, 1038, 1039, 1044, 1045, 1046, 1049, 1052, 1053], "log10": [165, 177, 187, 206, 271, 340], "log1p": [108, 242, 872, 1005, 1015], "log2": [139, 222, 251, 559, 560, 561, 562, 566, 567, 916, 917, 918, 919, 1006], "log_": 1005, "log_2": [405, 565, 1011], "log_bas": 730, "log_den": 295, "log_dens": 853, "log_likelihood": [110, 614, 615, 801, 802], "log_likelihood_gradi": [614, 615], "log_logist": 1052, "log_loss": [2, 63, 64, 146, 149, 172, 315, 333, 351, 390, 406, 415, 559, 561, 563, 566, 650, 662, 680, 916, 918, 994, 1001, 1005, 1019, 1021, 1037, 1039, 1041, 1049, 1050, 1051, 1052], "log_marginal_likelihood": [172, 173, 175, 177, 180, 418, 614, 615, 1045], "log_marginal_likelihood_value_": [614, 615], "log_prob": [801, 802, 803, 826], "log_reg": [253, 323], "log_reg_input_featur": 323, "log_scal": 1051, "log_scale_transform": [212, 230], "log_scaled_numer": [212, 230], "log_y_prob": 865, "logaddexp": 1052, "logan": [1049, 1050, 1051], "logarithm": [2, 108, 155, 187, 216, 243, 271, 340, 390, 417, 461, 593, 662, 663, 680, 708, 730, 745, 755, 759, 760, 761, 795, 803, 826, 839, 848, 849, 950, 1021, 1042], "logcosh": [420, 535], "logdet": 950, "logged_in": 371, "logger": 1046, "logic": [133, 364, 377, 378, 383, 404, 415, 1021, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "logical_and": [54, 147], "logical_not": [58, 98, 130, 215], "logical_or": [214, 220, 279, 382], "logical_xor": [54, 175, 344], "loginov": 1041, "logist": [2, 63, 65, 67, 102, 104, 108, 140, 161, 167, 184, 193, 201, 208, 210, 216, 218, 223, 229, 240, 242, 253, 264, 278, 281, 283, 284, 287, 289, 307, 308, 315, 323, 347, 351, 390, 391, 406, 409, 415, 417, 418, 438, 490, 498, 504, 506, 514, 543, 561, 563, 614, 635, 650, 661, 662, 663, 670, 672, 680, 745, 804, 818, 834, 837, 864, 865, 866, 868, 888, 915, 937, 939, 1005, 1009, 1010, 1019, 1020, 1026, 1027, 1029, 1031, 1039, 1042, 1043, 1045, 1046], "logistic__c": 106, "logistic_regress": [264, 827, 835], "logistic_regression_multinomi": 205, "logistic_regression_ovr": 205, "logistic_regression_path": [1043, 1044], "logisticregress": [2, 63, 67, 104, 106, 140, 157, 161, 167, 168, 169, 203, 204, 205, 206, 219, 227, 228, 240, 241, 251, 253, 264, 273, 279, 284, 308, 312, 319, 320, 321, 322, 323, 325, 327, 351, 363, 376, 378, 382, 384, 389, 399, 406, 407, 409, 415, 417, 428, 433, 439, 569, 571, 600, 613, 635, 638, 647, 656, 663, 676, 677, 678, 679, 680, 691, 704, 792, 803, 818, 827, 833, 835, 839, 840, 842, 893, 894, 896, 897, 898, 899, 915, 945, 947, 948, 988, 1001, 1005, 1006, 1015, 1019, 1020, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "logisticregression__c": [264, 312], "logisticregressioncv": [2, 65, 315, 390, 399, 662, 1001, 1006, 1039, 1040, 1041, 1043, 1044, 1045, 1049, 1050, 1052, 1053], "logit": [2, 406, 418, 662, 663, 1001], "loglik_lw": 110, "loglik_oa": 110, "loglik_r": 110, "loglike_": 534, "loglog": [110, 243], "logloss": 1046, "lognorm": [147, 177, 196, 259, 314, 1015], "logo": [0, 412, 811], "logprob": 853, "logreg": 842, "logspac": [44, 52, 65, 106, 110, 128, 160, 169, 172, 177, 187, 206, 216, 217, 243, 245, 259, 264, 271, 283, 294, 305, 312, 315, 340, 347, 827, 835, 1000, 1001], "logsumexp": [300, 1042], "loguniform": [46, 171, 278, 994, 1045], "logx": [216, 347], "lohit": 1052, "loic": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "loki": [364, 1005, 1043, 1046], "lomp": 374, "lon": 768, "london": [409, 416, 467], "londschien": [1048, 1052], "lone": [1050, 1051], "long": [0, 31, 44, 51, 52, 80, 96, 147, 176, 183, 187, 189, 212, 246, 247, 249, 273, 303, 310, 320, 351, 352, 359, 364, 374, 376, 384, 388, 390, 391, 402, 408, 454, 500, 540, 680, 681, 682, 807, 808, 843, 844, 845, 846, 847, 865, 866, 876, 1005, 1011, 1015, 1016, 1018, 1019, 1023, 1037, 1041, 1047, 1049], "long_term_trend_kernel": 176, "long_titl": 344, "longer": [0, 44, 71, 87, 138, 187, 188, 201, 307, 322, 376, 378, 408, 412, 415, 416, 450, 538, 565, 1000, 1004, 1005, 1007, 1010, 1020, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "longest": 290, "longitud": [303, 310, 371, 500, 703, 768], "longpathsen": 394, "longstand": [1036, 1042], "loo": [390, 812, 1046], "look": [44, 45, 65, 87, 89, 121, 124, 126, 147, 148, 171, 176, 177, 183, 187, 188, 214, 232, 236, 239, 246, 261, 264, 265, 270, 272, 284, 307, 326, 351, 359, 364, 365, 370, 371, 376, 377, 378, 380, 382, 384, 388, 389, 408, 411, 413, 414, 415, 416, 449, 489, 490, 559, 560, 561, 562, 566, 567, 605, 606, 635, 663, 696, 888, 916, 917, 918, 919, 1001, 1002, 1015, 1019, 1020, 1022, 1035, 1043, 1045], "lookup": [385, 969, 1044], "loop": [47, 48, 138, 147, 187, 265, 275, 358, 363, 376, 377, 382, 408, 412, 417, 650, 651, 656, 657, 663, 664, 665, 666, 667, 994, 1018, 1019, 1038, 1039, 1042, 1047, 1048, 1051, 1052], "loopym": 1045, "loos": [261, 267, 1020, 1043], "looser": 206, "lopusz": 1046, "lorek": 1042, "lorentzen": [0, 397, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lorenz": [212, 230, 1040, 1052], "lorenz_curv": [212, 230], "lose": [216, 229, 353, 371, 390, 411, 416, 418, 951, 952, 995, 1001], "losi": [0, 398, 1035], "loss": [2, 26, 47, 53, 62, 63, 64, 65, 130, 141, 146, 147, 148, 149, 171, 172, 184, 193, 197, 203, 205, 206, 214, 216, 217, 219, 220, 224, 230, 245, 264, 278, 306, 315, 322, 327, 333, 337, 338, 342, 344, 347, 351, 388, 390, 406, 413, 418, 465, 466, 498, 510, 511, 534, 540, 541, 542, 545, 549, 554, 555, 556, 560, 561, 562, 563, 564, 567, 647, 650, 653, 662, 663, 670, 671, 672, 673, 674, 675, 676, 680, 681, 682, 683, 707, 710, 713, 726, 727, 738, 739, 744, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 794, 795, 800, 804, 807, 808, 818, 830, 831, 834, 865, 866, 868, 869, 872, 873, 881, 882, 883, 888, 908, 909, 914, 915, 917, 919, 952, 956, 998, 1001, 1009, 1013, 1018, 1019, 1020, 1021, 1026, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "loss_": [306, 865, 866, 1009, 1049], "loss_curve_": [306, 865, 866], "loss_func": 53, "loss_funct": 53, "loss_function_": 1052, "lossfunct": 1044, "lossi": 408, "lossili": 390, "lost": [59, 91, 114, 371, 377, 388, 402, 1002, 1005], "lostanlen": 1045, "lostcoast": 1045, "lot": [44, 114, 150, 187, 216, 371, 376, 377, 384, 413, 415, 807, 808, 900, 901, 994, 1017, 1019, 1020, 1024, 1025, 1029, 1035, 1040, 1042, 1043, 1044, 1045, 1047], "lot_area": 249, "lotan": 1029, "lotconfig": 144, "lotfrontag": 108, "loui": [1040, 1041, 1045, 1047, 1049, 1051, 1052], "louib": [1043, 1044], "loupp": [0, 398, 415, 557, 558, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "lourida": 1041, "low": [2, 38, 44, 51, 52, 73, 84, 113, 117, 123, 125, 128, 135, 138, 151, 189, 206, 208, 212, 214, 216, 226, 232, 234, 239, 243, 249, 255, 256, 258, 261, 263, 264, 270, 272, 276, 277, 296, 297, 307, 314, 316, 317, 325, 332, 339, 340, 351, 358, 372, 373, 376, 381, 384, 388, 390, 394, 405, 406, 407, 412, 413, 416, 443, 445, 450, 469, 523, 526, 537, 585, 592, 606, 683, 696, 700, 709, 730, 746, 793, 853, 882, 889, 906, 952, 969, 994, 1000, 1001, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1020, 1021, 1027, 1031, 1036, 1039, 1040, 1041, 1043, 1044, 1049, 1050], "low_cardin": 316, "low_cardinality_featur": 316, "low_i": 208, "low_x": 208, "lower": [38, 45, 53, 64, 65, 68, 70, 92, 111, 117, 121, 123, 128, 135, 138, 141, 143, 147, 150, 151, 167, 171, 173, 175, 177, 187, 188, 189, 198, 199, 201, 203, 212, 213, 214, 215, 225, 232, 236, 242, 243, 248, 257, 261, 264, 269, 270, 272, 273, 277, 278, 280, 283, 284, 293, 294, 296, 297, 312, 315, 323, 327, 332, 340, 351, 352, 353, 356, 371, 376, 390, 406, 407, 408, 411, 412, 413, 414, 415, 416, 419, 445, 449, 465, 468, 500, 511, 534, 536, 543, 546, 561, 562, 563, 564, 565, 591, 592, 594, 606, 615, 617, 618, 619, 621, 623, 624, 626, 627, 629, 636, 637, 639, 641, 681, 683, 716, 720, 729, 732, 738, 743, 801, 802, 854, 856, 858, 859, 860, 862, 889, 908, 909, 910, 911, 912, 915, 938, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1020, 1021, 1037, 1038, 1043, 1050, 1052], "lower_bound": 269, "lower_bound_": [801, 802, 1043], "lowercas": [416, 424, 443, 444, 446, 448, 450, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 591, 592, 594, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 869, 874, 900, 901, 1048], "lowest": [2, 108, 117, 188, 198, 260, 370, 408, 412, 639, 641, 807, 808, 811, 915, 916, 1002, 1005, 1021, 1050], "loyal": 1040, "loyola": [0, 366, 1048, 1049], "lo\u00efc": [0, 397, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "lp_model": [329, 330], "lpgo": [412, 813], "lpo": 814, "lprun": 382, "lr": [63, 65, 140, 157, 158, 215, 241, 242, 266, 273, 389, 399, 415, 570, 571, 572, 716, 988], "lr_": 1005, "lr__c": 415, "lr_base": 273, "lrap": [743, 1005], "lrjball": [1045, 1046], "ls100": 334, "ls2010": 997, "ls30": 334, "ls50": 334, "ls_pipelin": 333, "lsa": [2, 413, 546, 1037], "lsa_vector": 352, "lshforest": [1039, 1042], "lsi": 413, "lsqr": [70, 317, 551, 676, 678, 691, 999, 1036, 1042, 1049], "lstrip": [68, 80, 96, 239, 305, 312], "lstsq": [130, 376, 661, 674], "lsturtew": 1048, "lsvc": 417, "lsvm": 192, "lsvm_score": 192, "lsvm_time": 192, "lt": [376, 396], "ltd": [264, 371], "ltg": [373, 503], "ltorgo": 371, "ltsa": [232, 233, 234, 693, 697, 1002], "lu": [543, 546, 951, 952, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "luangkot": 1042, "luca": [1035, 1045, 1046, 1047, 1048], "lucca": 1048, "luce": 1038, "lucen": 416, "lucgiffon": 1046, "luci": [0, 366, 387, 397, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "luciano": [1043, 1050], "lucieclair": 1049, "lucija": 1043, "lucio": 1044, "lucki": 359, "lucyleeow": 1046, "ludwig": 1035, "luessi": 1037, "lui": [662, 1036, 1038, 1039, 1043, 1052], "luiz": 1049, "luk": 1044, "luka": [1039, 1046, 1052, 1053], "luke": 1043, "lukowski": 1050, "luk\u00e1\u0161": 1052, "luna": 1049, "lunt": 1038, "luo": 1039, "lupo": 1047, "luqi": 1044, "luqu": 1045, "lurk": 1035, "lustig": 1001, "lutz": [1041, 1045, 1048, 1052], "luxburg": [408, 453, 463, 695], "luzgin": 1045, "lv_ep": 244, "lvdmaaten": [696, 1042], "lw": [94, 110, 111, 113, 125, 129, 130, 207, 213, 215, 218, 222, 229, 235, 258, 265, 280, 295, 310, 331, 346], "lw_cov_": 114, "lw_mse": 111, "lw_prec_": 114, "lw_score": 128, "lw_shrinkag": 111, "lwda": 451, "lx": 1008, "ly": [244, 856, 858, 859, 860, 1039], "ly648499246": 1048, "lynch": [1036, 1042], "lyon": [1041, 1042], "lyra": [1036, 1039, 1040], "lyrl2004": [371, 499], "l\u00e9o": 1043, "l\u00e9on": [1019, 1049, 1050, 1051], "l\u00e9onard": [1045, 1050], "l\u00e9one": 1041, "l\u00e9oni": 1041, "l\u00f3pez": [1039, 1043, 1044, 1047], "l\u00f6fstedt": 1042, "l\u00f6ning": 1047, "m": [0, 44, 48, 51, 58, 64, 65, 80, 92, 93, 97, 98, 99, 112, 113, 121, 135, 158, 197, 212, 230, 270, 274, 303, 326, 333, 336, 346, 363, 364, 370, 371, 373, 374, 376, 380, 382, 390, 394, 405, 406, 408, 410, 413, 415, 417, 419, 445, 446, 447, 451, 458, 474, 475, 502, 515, 530, 534, 536, 538, 543, 643, 649, 653, 668, 675, 689, 690, 693, 697, 712, 720, 730, 745, 760, 762, 763, 801, 802, 854, 879, 952, 983, 984, 995, 997, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1019, 1021, 1029, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "m1": [374, 404], "m11": 371, "m2": 404, "m2012": 998, "m2019": 1012, "m_max": 173, "ma": [114, 340, 1001, 1041, 1046], "maascha": 1050, "maaten": [696, 700, 1002], "mabel": [1043, 1047], "mabu": 1048, "mac": [58, 333, 371, 376, 712, 1005], "macbook": 1043, "macdonald": [1045, 1046], "mach": [275, 406, 412, 596, 597], "machado": [406, 727], "machin": [0, 2, 40, 44, 46, 48, 49, 53, 65, 97, 106, 141, 161, 165, 166, 171, 176, 185, 189, 203, 205, 208, 224, 252, 264, 270, 273, 276, 287, 304, 310, 315, 317, 321, 324, 327, 336, 341, 344, 347, 353, 363, 364, 369, 370, 371, 373, 376, 379, 383, 388, 389, 390, 393, 396, 402, 406, 408, 412, 413, 415, 416, 418, 438, 440, 449, 472, 473, 479, 504, 506, 512, 518, 519, 520, 532, 534, 536, 543, 546, 557, 558, 559, 560, 561, 562, 566, 567, 568, 596, 597, 614, 615, 618, 623, 626, 638, 642, 643, 645, 647, 648, 649, 654, 655, 658, 659, 660, 661, 662, 663, 680, 686, 687, 696, 712, 717, 729, 739, 745, 747, 789, 792, 801, 833, 834, 848, 849, 854, 857, 864, 865, 866, 868, 886, 888, 894, 908, 909, 910, 911, 913, 914, 918, 919, 994, 995, 997, 998, 1001, 1002, 1003, 1005, 1006, 1008, 1011, 1012, 1013, 1015, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1037, 1047, 1048, 1049, 1050, 1052], "machineri": [378, 957], "maciej": 1046, "maci\u00e0": [1005, 1048, 1050], "mackai": [648, 649, 1001], "mackenbach": 1046, "maco": [377, 378, 379, 394, 404, 1043, 1047, 1049], "macosx": 1035, "macro": [319, 371, 412, 711, 717, 733, 734, 742, 787, 788, 791, 792, 826, 1005, 1035, 1043, 1051], "macro_roc_auc_ovo": 279, "macro_roc_auc_ovr": 279, "macroscop": 408, "macsween": [1044, 1045], "mad": [675, 1041], "madan": 1047, "made": [0, 53, 65, 113, 126, 127, 135, 141, 158, 178, 187, 188, 212, 230, 249, 261, 274, 316, 320, 340, 356, 363, 371, 373, 376, 380, 390, 391, 399, 408, 415, 416, 420, 444, 447, 448, 450, 460, 498, 505, 591, 592, 594, 634, 635, 660, 669, 683, 689, 690, 739, 787, 804, 807, 808, 818, 822, 823, 824, 845, 848, 849, 1006, 1011, 1021, 1024, 1029, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1048, 1049, 1053], "madelon": 517, "madhura": [1044, 1046, 1047, 1050, 1051], "madinak": 1050, "madsen": [1041, 1043], "mae": [44, 53, 155, 212, 214, 560, 567, 749, 917, 919, 1005, 1021, 1042, 1043, 1047, 1048], "mae_test": 187, "mae_train": 187, "maennel": 1050, "magali": 1049, "magazin": [113, 417], "magda": 1046, "magenta": [110, 149], "maggi": [1049, 1053], "maggiecheg": [1045, 1049], "maggio": [1046, 1047, 1048], "magic": [246, 377, 382, 418, 620, 625, 628], "magnesium": 373, "magnitud": [44, 130, 137, 172, 183, 187, 229, 249, 275, 310, 315, 322, 327, 363, 371, 382, 408, 415, 418, 617, 656, 708, 888, 1001, 1005, 1009, 1015, 1019, 1021, 1037, 1044, 1053], "mahajan": [1043, 1045, 1052], "mahal": 112, "mahal_emp_cov": 112, "mahal_robust_cov": 112, "mahalanobi": [109, 113, 184, 215, 408, 410, 451, 458, 470, 471, 472, 473, 474, 475, 476, 477, 703, 782, 783, 784, 999, 1008, 1011, 1026, 1043, 1046, 1047], "mahalanobisdist": 703, "mahapatra": 1042, "mahdavi": 643, "maheshakya": [0, 1038, 1039, 1040], "mahieux": 1029, "mahimkar": 1053, "mahmood": 1053, "mahout": 845, "mai": [0, 2, 26, 48, 58, 63, 75, 80, 81, 90, 104, 117, 121, 144, 145, 150, 169, 187, 190, 192, 195, 198, 202, 205, 216, 218, 237, 246, 249, 273, 275, 277, 278, 284, 305, 315, 330, 340, 344, 347, 351, 352, 353, 359, 363, 364, 365, 368, 370, 371, 372, 373, 375, 376, 378, 380, 381, 384, 388, 390, 391, 394, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 431, 440, 441, 442, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 460, 463, 466, 470, 473, 483, 484, 485, 488, 489, 490, 498, 510, 511, 517, 536, 537, 540, 542, 543, 546, 549, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 576, 584, 597, 600, 605, 614, 615, 621, 624, 638, 639, 641, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 680, 681, 682, 683, 685, 688, 690, 692, 693, 695, 696, 697, 699, 701, 709, 715, 716, 719, 720, 722, 723, 725, 726, 727, 728, 730, 742, 760, 767, 789, 790, 804, 806, 807, 808, 809, 818, 819, 820, 823, 824, 829, 833, 836, 841, 842, 843, 844, 845, 847, 850, 851, 852, 854, 856, 858, 859, 860, 866, 867, 868, 871, 873, 883, 885, 886, 887, 888, 889, 891, 897, 900, 901, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 932, 934, 935, 955, 956, 994, 995, 997, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "maikia": [1043, 1044, 1046, 1047], "mail": [371, 376, 380, 384, 388, 391, 1043, 1044], "mailhot": 1035, "mailman": 384, "main": [2, 38, 49, 69, 96, 117, 125, 144, 184, 239, 279, 289, 318, 347, 351, 363, 364, 365, 369, 374, 376, 378, 380, 382, 384, 388, 389, 390, 393, 394, 406, 408, 413, 415, 416, 418, 505, 527, 532, 551, 552, 629, 717, 838, 908, 909, 994, 1002, 1004, 1005, 1012, 1017, 1025, 1028, 1035, 1038, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mainak": 1042, "maingret": 1046, "mainli": [65, 87, 135, 138, 171, 279, 287, 363, 378, 406, 615, 1007, 1012], "maint": 380, "maintain": [89, 217, 230, 232, 270, 364, 375, 379, 382, 383, 384, 388, 390, 391, 394, 408, 415, 441, 443, 877, 878, 884, 885, 888, 893, 896, 897, 899, 1001, 1002, 1015, 1024, 1025, 1031, 1050], "mainten": [0, 376, 384, 388, 394, 401, 1001, 1025, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mainy": 1047, "mair": 639, "mairal": [413, 533, 539], "mairal_icml09": [533, 539], "maisonneuv": 1047, "maithreyi": 1045, "maj": 571, "major": [2, 50, 55, 71, 141, 264, 277, 310, 314, 319, 320, 321, 322, 323, 324, 325, 326, 344, 353, 357, 363, 371, 375, 376, 378, 380, 382, 388, 391, 402, 408, 412, 414, 416, 553, 571, 572, 698, 920, 922, 1005, 1008, 1019, 1025, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "make": [0, 2, 44, 47, 48, 51, 53, 55, 56, 59, 60, 63, 64, 65, 75, 76, 79, 80, 90, 95, 96, 101, 106, 126, 135, 141, 144, 147, 150, 153, 166, 169, 171, 176, 179, 186, 187, 188, 189, 194, 198, 199, 202, 205, 206, 207, 212, 213, 214, 216, 218, 230, 233, 241, 243, 245, 246, 247, 249, 255, 257, 260, 261, 264, 265, 270, 272, 273, 279, 280, 281, 284, 289, 299, 307, 310, 311, 316, 323, 325, 327, 340, 349, 351, 352, 353, 357, 359, 363, 364, 365, 370, 371, 374, 375, 377, 378, 379, 380, 381, 382, 384, 388, 390, 394, 399, 402, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 420, 441, 442, 443, 444, 446, 448, 450, 452, 453, 454, 459, 460, 461, 463, 489, 505, 516, 517, 524, 525, 529, 534, 536, 543, 553, 554, 557, 558, 563, 564, 586, 587, 610, 611, 635, 653, 659, 660, 675, 695, 699, 734, 741, 746, 772, 773, 785, 801, 802, 804, 806, 809, 815, 819, 820, 823, 824, 830, 831, 838, 839, 842, 875, 884, 887, 888, 892, 896, 898, 899, 900, 901, 914, 922, 934, 935, 945, 952, 959, 965, 990, 995, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "make_": 1044, "make_biclust": [2, 60, 515, 1037], "make_blob": [2, 62, 64, 70, 74, 78, 79, 80, 83, 89, 90, 91, 93, 94, 96, 97, 98, 205, 224, 239, 258, 313, 320, 323, 338, 341, 342, 348, 372, 379, 415, 517, 700, 714, 796, 797, 924, 1043, 1046, 1049], "make_cbar": 281, "make_checkerboard": [2, 59, 513, 1037], "make_circl": [2, 68, 80, 96, 126, 153, 237, 305, 306, 312, 331, 372, 1036, 1043, 1046], "make_classif": [2, 63, 65, 68, 139, 140, 142, 166, 168, 267, 273, 281, 282, 300, 305, 312, 319, 321, 325, 327, 347, 359, 372, 379, 404, 407, 415, 438, 439, 488, 514, 555, 557, 559, 566, 608, 610, 613, 670, 701, 702, 704, 706, 803, 826, 827, 832, 833, 835, 838, 865, 868, 908, 915, 994, 1005, 1006, 1015, 1020, 1041, 1042, 1043, 1045], "make_column_selector": [2, 104, 144, 155, 249, 409, 465, 468, 1045], "make_column_transform": [2, 144, 155, 187, 241, 320, 409, 465, 467, 1043], "make_data": [71, 95], "make_dataset": 1044, "make_default": 974, "make_ellips": 257, "make_estim": 249, "make_friedman1": [2, 372, 415, 541, 545, 596, 597, 636], "make_friedman2": [2, 372, 615, 617, 618, 619, 620, 621, 625, 628, 629], "make_friedman3": [2, 372], "make_gaussian_quantil": [2, 135, 137, 372, 471, 475, 476, 477, 482, 522], "make_hastie_10_2": [2, 149, 274, 372, 415, 561, 1012], "make_heatmap": 281, "make_low_rank_matrix": [2, 325, 327, 526], "make_ml_clf": 119, "make_moon": [2, 68, 80, 96, 239, 270, 305, 306, 312, 372, 994, 1042, 1046], "make_multilabel_classif": [2, 119, 247, 372, 517, 538, 792, 839, 840, 1005, 1037, 1038, 1040, 1046], "make_pipelin": [2, 44, 68, 92, 117, 140, 144, 155, 165, 166, 169, 182, 183, 187, 188, 192, 194, 200, 202, 212, 213, 218, 226, 230, 233, 239, 240, 241, 249, 250, 251, 253, 264, 267, 277, 284, 290, 299, 305, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 352, 359, 389, 399, 409, 412, 569, 680, 682, 860, 868, 893, 894, 896, 897, 898, 899, 908, 909, 910, 911, 913, 914, 995, 1008, 1015, 1019, 1020, 1038, 1045, 1048], "make_plot": 310, "make_regress": [2, 50, 108, 194, 196, 197, 199, 215, 216, 283, 320, 326, 359, 372, 379, 389, 556, 558, 562, 567, 609, 611, 612, 639, 650, 651, 653, 655, 656, 657, 659, 664, 665, 666, 667, 668, 669, 671, 675, 683, 685, 686, 687, 689, 690, 691, 866, 909, 926, 1005, 1006, 1008], "make_s_curv": [2, 232, 237], "make_scor": [2, 53, 147, 150, 264, 274, 327, 399, 407, 412, 715, 804, 826, 830, 831, 1005, 1044, 1052], "make_sparse_coded_sign": [2, 211, 533, 539, 547, 548, 1049, 1051], "make_sparse_spd_matrix": [2, 114, 479, 531, 1052], "make_sparse_uncorrel": [2, 372], "make_spd_matrix": [2, 529], "make_subplot": 141, "make_swiss_rol": [2, 101, 236, 1049], "make_union": [2, 409, 867, 1038, 1042], "makedir": 1042, "maker": [186, 187], "makhija": 1050, "makoeppel": 1048, "maksym": 1050, "maladier": 1050, "maladi\u00e8r": [1050, 1051], "malcolm": 1043, "maldonado": [1045, 1048], "male": [104, 381, 881, 882, 1015], "malem": 1052, "malet": 1035, "malform": [56, 1039], "malic": [315, 373], "malic_acid": 49, "malici": 402, "malign": [373, 502], "malik": [408, 453, 463, 695], "mallat": [668, 689, 690, 1001], "mallatpursuit93": [668, 689, 690], "mallow": [735, 1041], "maloo": [1043, 1044], "malt": [1048, 1049, 1050, 1052], "maltimor": 1045, "malu": 230, "malzer": 447, "mal\u00e9zieux": 1048, "mamba": 402, "mame": 1052, "mammal": 51, "mammalian": 413, "man": [413, 593, 773, 843, 847, 1003, 1005, 1007], "manag": [0, 2, 117, 253, 362, 370, 374, 377, 378, 380, 384, 388, 390, 391, 402, 415, 451, 469, 630, 906, 999, 1021, 1024, 1025, 1029, 1031, 1048, 1051], "manaileng": 1048, "manasimj": 1053, "mandal": 1045, "mandatori": [376, 416], "mandatorili": 1042, "mandera": 1038, "mandi": [1046, 1049], "mandjev": 1049, "mandyam": 1045, "mangasarian": 373, "mangipudi": 1041, "manh": 1043, "manhattan": [408, 442, 446, 451, 458, 703, 766, 775, 782, 783, 784, 855, 1003, 1008, 1039, 1044, 1051], "manhattan_dist": [2, 451, 458, 692, 766, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 1035, 1045, 1050, 1051], "manhattandist": 703, "mani": [44, 47, 50, 58, 89, 90, 107, 110, 114, 135, 141, 142, 143, 148, 165, 169, 189, 212, 232, 243, 256, 263, 264, 270, 278, 282, 283, 290, 310, 315, 316, 319, 320, 321, 322, 323, 325, 326, 327, 351, 359, 363, 365, 371, 373, 375, 376, 378, 389, 390, 391, 394, 402, 405, 406, 408, 409, 410, 413, 415, 416, 417, 418, 420, 505, 543, 555, 556, 559, 560, 561, 562, 566, 567, 568, 609, 612, 631, 643, 654, 658, 662, 663, 670, 671, 672, 680, 681, 682, 696, 699, 778, 782, 804, 808, 818, 865, 866, 881, 886, 888, 908, 916, 917, 918, 919, 994, 995, 997, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1018, 1020, 1022, 1023, 1024, 1025, 1029, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1050, 1051], "manideep": 1053, "manifest": [384, 1002, 1008], "manifold": [2, 52, 75, 86, 101, 140, 235, 236, 237, 243, 290, 300, 319, 323, 324, 331, 369, 390, 408, 413, 415, 504, 527, 532, 546, 551, 568, 692, 693, 694, 695, 696, 697, 698, 699, 700, 857, 869, 878, 901, 937, 1008, 1026, 1030, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1052], "manimaran": [1044, 1046, 1047, 1048, 1049], "manipul": [2, 370, 404, 509, 1024, 1041], "manish": 1046, "maniteja": [1041, 1042, 1043], "mankoo": 1050, "mann": 1045, "mannbi": 1043, "manner": [44, 108, 121, 166, 188, 192, 257, 323, 324, 364, 376, 382, 408, 413, 415, 416, 713, 848, 849, 994, 1005, 1021, 1038, 1045], "mannila": 1017, "manning2008": 1005, "manoharan": [1042, 1043], "manoj": [0, 169, 398, 1038, 1039, 1040, 1041, 1042], "manraj": 1042, "mansi": 1050, "mansingh": 1049, "mansouri": 1051, "mantovani": 1050, "manu": 371, "manual": [2, 44, 81, 89, 187, 188, 190, 213, 223, 272, 290, 332, 338, 351, 353, 363, 364, 371, 376, 380, 381, 388, 389, 394, 402, 408, 412, 413, 414, 438, 450, 569, 803, 826, 858, 881, 887, 994, 999, 1000, 1001, 1004, 1005, 1008, 1015, 1025, 1043, 1045, 1051, 1053], "manuel": [1035, 1039, 1043, 1044, 1047, 1048, 1053], "manufactur": 415, "manvendra": [1041, 1042], "maocx": 1045, "map": [2, 24, 38, 44, 45, 50, 51, 56, 58, 64, 87, 117, 126, 139, 146, 149, 153, 171, 184, 192, 212, 230, 232, 234, 238, 246, 249, 271, 274, 279, 298, 301, 303, 309, 310, 333, 340, 344, 352, 353, 370, 371, 377, 388, 390, 399, 402, 406, 408, 409, 412, 413, 415, 416, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 498, 500, 504, 511, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 766, 769, 801, 802, 803, 804, 807, 808, 815, 816, 818, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 896, 897, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 958, 961, 962, 994, 997, 1002, 1005, 1007, 1017, 1020, 1021, 1026, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052], "mapd": 1005, "mape": [2, 53, 750, 1005], "mape_cv_mean": 144, "mape_cv_std": 144, "mapi": 53, "mar": 52, "marc": [1042, 1044, 1045, 1051], "march": [176, 730, 760, 1005, 1035, 1039, 1043, 1045, 1050], "marchand": 1049, "marchman": [1036, 1037], "marco": [1041, 1043, 1044, 1048, 1049, 1050, 1053], "marcofalk": 1042, "marcogorelli": [1043, 1044], "marcolini": 1048, "marcom": 1049, "marcu": [1043, 1052], "mare": 1052, "marek": [1035, 1052], "maren": [0, 366, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "margeta": 1043, "margin": [31, 44, 52, 63, 65, 137, 162, 172, 173, 174, 175, 176, 177, 184, 187, 188, 193, 222, 223, 225, 247, 249, 270, 287, 310, 313, 316, 335, 336, 338, 339, 340, 342, 344, 348, 349, 373, 406, 413, 415, 418, 514, 614, 615, 635, 649, 680, 739, 837, 885, 897, 910, 913, 1001, 1005, 1007, 1011, 1012, 1015, 1019, 1020, 1026, 1042, 1044], "marguli": 1045, "mari": [1043, 1044, 1045, 1046, 1049], "maria": [169, 408, 1046, 1047, 1048, 1049, 1050], "mariam": 1047, "mariana": 1046, "mariangela": 1048, "mariano": 270, "mariel": 1046, "marielaraj": 1048, "marija": [1046, 1047, 1053], "marijn": 1047, "marin": [530, 1053], "marina": 408, "marinelm": 1044, "mario": [406, 1039, 1041, 1049, 1050, 1051], "marit": 498, "mari\u00e9": [0, 366, 1044, 1045, 1046, 1047, 1048, 1049], "mark": [2, 71, 92, 119, 164, 183, 274, 281, 368, 376, 380, 384, 385, 390, 408, 537, 610, 611, 615, 636, 662, 861, 862, 903, 904, 921, 941, 946, 947, 952, 1001, 1029, 1031, 1035, 1036, 1041, 1043, 1044, 1051, 1052, 1053], "markdown": 379, "marker": [50, 51, 56, 65, 67, 71, 73, 74, 78, 86, 89, 92, 93, 94, 97, 98, 116, 119, 123, 141, 154, 178, 179, 192, 200, 206, 208, 210, 212, 214, 215, 227, 229, 233, 255, 257, 258, 264, 265, 270, 272, 273, 274, 297, 310, 315, 331, 355, 379, 380, 416, 1043, 1045, 1046, 1051], "markeredgecolor": [83, 89, 95, 97, 98], "markeredgewidth": [112, 274], "markerfacecolor": [83, 89, 95, 97, 98], "markers": [83, 89, 92, 95, 97, 98, 147, 174, 178, 242, 264, 323], "markerstyl": 264, "market": [43, 81, 86, 150, 184, 232, 233, 408, 410, 455, 472, 473, 693, 1002, 1026, 1029], "marketplac": 1029, "markham": [1039, 1046, 1047], "markiwanchyshyn": 1043, "marko": [1035, 1044, 1045, 1051], "markou": 1048, "markov": [418, 615, 1010, 1024, 1035], "markovtsev": 1043, "marktab": 1040, "marku": [408, 451, 458, 1043, 1045, 1046, 1047], "marmo": [0, 367, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "maron": [408, 443], "marr": 187, "marreddi": 1049, "marriott": 52, "marsgui": 1043, "marsh": 1046, "marshal": 373, "marsi": 1038, "marsland": 532, "marslast": 532, "marszalek": [762, 763, 1003], "mart": [52, 1045], "martel": 1049, "martian": 1045, "martin": [0, 366, 725, 727, 728, 1001, 1005, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "martin1997": 1005, "martina": [1045, 1047], "martinbpr": [1040, 1041], "martinez": 1042, "martino": 1040, "martinosorb": 1040, "martinsson": [56, 537, 543, 952], "martynov": 1048, "mart\u00edn": [1048, 1049], "marufo": 1050, "marufur": 1042, "marvin": [1050, 1051], "marwaha": 1043, "marx": 1015, "maryanmorel": [1040, 1041], "marzinotto": [1043, 1044], "mar\u00eda": [1049, 1050, 1051], "mas_vnr_typ": 249, "masafumi": 1040, "masanori": [1050, 1051], "masashi": [1045, 1047], "masecchia": 1035, "mash": 416, "mask": [2, 54, 78, 100, 212, 220, 249, 268, 269, 333, 385, 390, 409, 415, 465, 470, 475, 563, 564, 584, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 633, 634, 636, 637, 653, 675, 804, 807, 808, 818, 976, 995, 1012, 1035, 1038, 1040, 1041, 1043, 1045, 1053], "mask_al": 995, "mask_false_neg": 264, "mask_false_posit": 264, "mask_missing_values_onli": 995, "mask_out": 54, "mask_test": 230, "mask_train": [188, 230], "mask_true_neg": 264, "mask_true_posit": 264, "mask_y_pr": 67, "maskani": [1043, 1045, 1046, 1047], "masked_arrai": [340, 804, 818], "masked_equ": 114, "maskedarrai": [274, 1041], "mason": 1039, "mass": [250, 373, 447, 801, 1001, 1012], "massachusett": 371, "massia": [0, 1046, 1048, 1049], "massich": [1042, 1043, 1044, 1045], "massil": 1041, "masstran": 1044, "master": [52, 290, 376, 1029], "masurel": 1036, "masvnrarea": [108, 155], "masvnrtyp": [144, 155], "mat": [370, 416], "match": [2, 44, 59, 73, 88, 121, 122, 124, 130, 141, 184, 192, 193, 212, 234, 242, 249, 344, 353, 371, 374, 378, 408, 413, 415, 416, 429, 450, 465, 467, 493, 510, 511, 517, 528, 533, 539, 544, 550, 553, 569, 570, 574, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 662, 668, 669, 689, 690, 703, 707, 708, 709, 717, 719, 723, 738, 782, 783, 784, 790, 848, 849, 853, 857, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 908, 915, 921, 938, 1002, 1004, 1005, 1007, 1008, 1026, 1027, 1031, 1035, 1041, 1042, 1043, 1045, 1047, 1048, 1051, 1053], "matchingdist": 703, "matchmak": 1029, "matcovici": 1045, "matem\u00e1tica": 1001, "mateo": 1048, "materi": [54, 187, 326, 391, 543, 584, 898, 899], "matern": [2, 180, 418, 1046, 1050], "mateusz": [1039, 1046, 1047, 1052, 1053], "math": [83, 150, 249, 270, 271, 373, 394, 768], "mathbb": [121, 138, 174, 411, 1005, 1012, 1020], "mathbf": [174, 344, 413, 1001, 1005, 1009, 1010, 1019], "mathcal": [216, 347, 413, 415, 631, 700, 997, 999, 1001, 1005, 1019, 1048], "mathemat": [38, 135, 187, 200, 229, 273, 368, 373, 376, 390, 393, 408, 410, 413, 414, 418, 551, 552, 559, 566, 639, 650, 660, 796, 797, 802, 866, 910, 913, 916, 918, 1001, 1005, 1009, 1015, 1017, 1027, 1029, 1031, 1049], "matheu": 1041, "mathew": 1050, "mathi": 1048, "mathia": 1049, "mathieu": [0, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1048], "mathrm": [408, 410, 413, 417, 1001, 1021], "mathschi": 1047, "mathur": [1042, 1044, 1045, 1050, 1051, 1053], "mathurin": [0, 1046, 1048, 1049], "mathurinm": [1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "matjansen": 1049, "mato": 1047, "matplotlib": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 190, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 326, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 372, 376, 383, 394, 401, 439, 504, 635, 636, 701, 702, 704, 705, 706, 810, 827, 922, 1000, 1024, 1032, 1044, 1047, 1048, 1049, 1050, 1053], "matric": [2, 38, 71, 75, 76, 112, 114, 121, 217, 256, 257, 259, 260, 261, 290, 303, 320, 326, 333, 351, 352, 368, 370, 378, 379, 388, 389, 390, 408, 409, 410, 411, 413, 416, 417, 423, 451, 452, 454, 465, 474, 482, 483, 484, 485, 528, 536, 537, 540, 542, 543, 546, 549, 551, 552, 557, 558, 565, 568, 584, 585, 592, 647, 650, 651, 656, 657, 662, 668, 676, 678, 691, 758, 764, 772, 778, 782, 783, 784, 785, 796, 801, 802, 834, 852, 855, 860, 871, 875, 877, 880, 883, 885, 886, 888, 891, 893, 895, 897, 898, 899, 900, 901, 910, 911, 913, 914, 930, 952, 959, 968, 975, 977, 978, 995, 997, 999, 1002, 1003, 1004, 1006, 1008, 1009, 1017, 1019, 1020, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "matrix": [2, 8, 11, 43, 46, 47, 49, 53, 54, 58, 59, 60, 69, 71, 75, 77, 80, 96, 103, 111, 112, 113, 114, 116, 121, 122, 123, 131, 178, 184, 190, 193, 199, 213, 217, 240, 243, 244, 246, 260, 262, 264, 277, 307, 323, 326, 329, 330, 344, 351, 352, 353, 358, 363, 371, 372, 373, 376, 378, 382, 385, 388, 389, 390, 405, 409, 410, 411, 416, 417, 418, 419, 420, 430, 431, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 455, 458, 460, 461, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 494, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 512, 521, 523, 525, 526, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 588, 589, 591, 592, 593, 594, 596, 597, 606, 607, 608, 609, 610, 611, 612, 615, 624, 633, 634, 635, 637, 639, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 716, 717, 718, 719, 720, 722, 726, 733, 734, 735, 738, 742, 743, 744, 745, 758, 759, 762, 763, 764, 765, 767, 768, 770, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 791, 792, 796, 797, 800, 801, 802, 803, 804, 807, 808, 818, 826, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 871, 872, 873, 874, 875, 877, 879, 880, 881, 883, 885, 886, 887, 888, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 930, 932, 933, 934, 935, 940, 949, 950, 951, 952, 953, 956, 958, 959, 967, 968, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 993, 995, 997, 999, 1001, 1002, 1006, 1007, 1008, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "matrixorz": 1038, "matshow": [59, 60, 100, 167, 307, 504], "matsubara": 1005, "matt": [1038, 1039, 1040, 1045, 1046, 1050, 1051], "matteo": [1039, 1041, 1049], "matter": [130, 261, 344, 359, 408, 409, 415, 569, 672, 680, 682, 1001, 1039], "matthew": [2, 375, 381, 538, 747, 1035, 1038, 1042, 1044, 1048, 1049, 1053], "matthews_corrcoef": [2, 1005, 1035, 1041, 1042, 1049], "matthia": [1035, 1037, 1038, 1041, 1042, 1043, 1047, 1050], "matthieu": [0, 398, 1035, 1039, 1050], "matti": [1036, 1039, 1040], "matur": [376, 1024, 1025], "mat\u00e9rn": 623, "mat\u00eda": 1049, "maud": 1038, "mauna": 176, "maura": 1046, "mauroantonioserrano": 1050, "mav": 1053, "mavani": 1043, "mavroforaki": [1039, 1041], "max": [44, 48, 50, 51, 52, 56, 58, 63, 65, 68, 70, 76, 80, 86, 92, 96, 101, 105, 106, 109, 111, 114, 121, 124, 128, 131, 135, 137, 143, 149, 153, 160, 161, 162, 164, 165, 173, 175, 176, 183, 184, 197, 200, 202, 205, 206, 208, 214, 215, 218, 226, 228, 230, 235, 243, 247, 268, 269, 270, 281, 289, 290, 292, 296, 297, 301, 303, 305, 307, 310, 312, 313, 315, 322, 327, 332, 334, 348, 363, 408, 410, 413, 421, 470, 471, 472, 473, 474, 475, 476, 477, 478, 514, 538, 557, 558, 559, 560, 561, 562, 565, 566, 567, 609, 631, 635, 636, 652, 653, 673, 676, 678, 684, 695, 696, 700, 703, 708, 709, 761, 796, 797, 804, 865, 866, 877, 878, 880, 887, 894, 895, 916, 917, 918, 919, 1001, 1003, 1008, 1015, 1019, 1020, 1026, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "max_": [408, 1005], "max_abs_": 877, "max_abs_scal": 1015, "max_bin": [322, 323, 415, 563, 564, 1052], "max_categori": [316, 323, 325, 881, 882, 1015, 1049, 1051], "max_cluster_s": 447, "max_column": 230, "max_degre": [883, 1048], "max_depth": [47, 68, 136, 137, 140, 143, 144, 145, 146, 147, 148, 149, 153, 154, 156, 182, 233, 267, 282, 287, 321, 322, 355, 357, 358, 389, 390, 407, 415, 555, 556, 559, 560, 561, 562, 563, 564, 566, 567, 568, 715, 807, 808, 832, 916, 917, 918, 919, 920, 921, 922, 994, 1012, 1021, 1044, 1046], "max_df": [55, 271, 333, 351, 352, 591, 594, 1046, 1053], "max_dist": 243, "max_doc_update_it": 538, "max_ep": [408, 451, 456, 457, 458], "max_error": [2, 404, 1005, 1044], "max_estim": 139, "max_featur": [55, 68, 139, 149, 248, 267, 282, 321, 415, 417, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 594, 600, 916, 917, 918, 919, 994, 1001, 1035, 1037, 1038, 1042, 1043, 1046, 1049, 1052], "max_features_": [561, 562, 600, 916, 917, 918, 919, 1049], "max_fpr": [792, 1005, 1043], "max_fun": [865, 866, 1045], "max_i": [247, 1007], "max_idf": 1048, "max_it": [44, 48, 53, 55, 56, 63, 65, 67, 68, 105, 106, 121, 124, 140, 141, 144, 150, 157, 160, 161, 182, 183, 187, 188, 194, 199, 206, 219, 220, 221, 224, 225, 227, 232, 233, 234, 235, 237, 250, 251, 255, 257, 258, 261, 283, 300, 305, 306, 307, 316, 321, 322, 323, 329, 330, 337, 351, 352, 382, 390, 415, 420, 441, 444, 448, 449, 450, 455, 460, 462, 472, 473, 479, 483, 484, 485, 533, 534, 535, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 563, 564, 631, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 676, 678, 680, 681, 682, 683, 684, 686, 687, 691, 692, 693, 694, 696, 697, 698, 801, 802, 818, 857, 865, 866, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 995, 997, 1001, 1008, 1009, 1018, 1019, 1036, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "max_iter": 330, "max_iter_list": 150, "max_iter_predict": 614, "max_j": [650, 656], "max_leaf_nod": [135, 141, 149, 212, 322, 358, 415, 559, 560, 561, 562, 563, 564, 566, 567, 568, 916, 917, 918, 919, 1038, 1044, 1046], "max_n": [591, 592, 594, 1035], "max_n_alpha": [655, 659], "max_nbyt": 970, "max_no_improv": [78, 95, 98, 450, 539, 540, 541, 548, 1049, 1050], "max_patch": [84, 416, 586, 587, 1043], "max_resourc": [147, 807, 808, 994], "max_resources_": [807, 808], "max_sampl": [151, 182, 415, 557, 558, 559, 560, 565, 566, 567, 638, 1045, 1048, 1051], "max_samples_": 565, "max_skip": 675, "max_subpopul": [229, 683, 1049], "max_thread": [364, 377], "max_train_s": [44, 53, 412, 825, 1042], "max_trial": [675, 1001], "max_val": 938, "max_valu": [631, 1046, 1047], "max_x": 247, "maxabs_scal": [2, 390, 877, 1043], "maxabsscal": [2, 365, 404, 872, 893, 995, 1015, 1040, 1043, 1044, 1045, 1046, 1051, 1052], "maxent": [2, 662, 663, 1001], "maxent_du": 662, "maxi": 1050, "maxim": [116, 117, 121, 127, 131, 147, 194, 260, 261, 264, 271, 275, 279, 280, 283, 284, 300, 315, 321, 340, 344, 355, 358, 373, 390, 405, 407, 408, 411, 413, 415, 417, 418, 551, 597, 614, 615, 648, 649, 652, 673, 683, 684, 724, 804, 807, 808, 818, 877, 883, 893, 999, 1001, 1004, 1005, 1008, 1010, 1020, 1038, 1040, 1045, 1048, 1050, 1053], "maxima": 408, "maximesaur": [1050, 1051], "maximis": [160, 256, 298, 999, 1008], "maximum": [2, 44, 48, 51, 65, 70, 73, 91, 110, 111, 112, 113, 114, 123, 135, 137, 140, 141, 143, 150, 172, 174, 177, 178, 184, 193, 200, 249, 264, 280, 292, 296, 297, 303, 310, 335, 336, 338, 339, 342, 344, 352, 355, 357, 363, 371, 381, 382, 389, 390, 405, 406, 408, 410, 411, 413, 415, 416, 418, 419, 420, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 455, 458, 460, 462, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 483, 484, 485, 500, 511, 513, 514, 515, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 586, 587, 600, 614, 631, 635, 636, 639, 641, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 678, 680, 681, 682, 683, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 720, 748, 785, 801, 804, 807, 808, 810, 818, 825, 832, 857, 864, 865, 866, 872, 873, 877, 878, 880, 883, 884, 885, 887, 896, 897, 902, 903, 904, 905, 908, 909, 913, 916, 917, 918, 919, 920, 922, 931, 938, 994, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1015, 1019, 1020, 1021, 1026, 1042, 1043, 1045, 1046, 1049, 1050, 1052], "maxin": [1045, 1046], "maxsiz": 621, "maxval": [513, 515], "maxwel": [0, 366, 1045, 1048, 1049, 1050, 1051], "maxwelllzh": 1050, "may_share_memori": 1052, "mayb": [107, 307, 390, 416, 1020, 1025], "mayer": [415, 1047, 1049, 1052, 1053], "mayer2022": 415, "mayilvahanan": 408, "mayorov": [1038, 1039, 1040, 1041], "mayur": 1043, "mazari": 1043, "mb": [48, 243, 351, 353, 371, 382, 498, 910, 911, 912, 913, 914, 1020, 1026], "mbilling": 1040, "mbillingr": 1045, "mbk": [78, 98], "mbk_means_cluster_cent": 98, "mbk_means_label": 98, "mbk_means_labels_uniqu": 78, "mblondel": [370, 510], "mbnmf": 55, "mc4229": 1046, "mc_clf": 1012, "mcar": 150, "mcc": [2, 747, 1005, 1049], "mccallum": [843, 1007], "mccarthi": [0, 360, 1035, 1043], "mcclish": [279, 792], "mcconaghi": 1029, "mccullagh": 1001, "mcculloh": [1040, 1041], "mcd": [2, 52, 112, 113, 410, 470, 475], "mcdermott": [1037, 1052], "mcdonald": 52, "mcdowel": 1043, "mcfadden": 1005, "mcfee": [1040, 1041], "mcgibbon": [1037, 1038, 1041], "mcgushion": 1044, "mcinn": [408, 1041, 1042, 1043, 1045, 1046, 1051], "mcivor": [1050, 1051], "mcm": [758, 1005], "mcm_": 758, "mcmahon": 1052, "mcsherri": [730, 760, 1005], "mctiernan": [1049, 1050], "mcve": [381, 388], "md": [2, 232, 233, 234, 235, 376, 380, 384, 692, 696, 698, 1030, 1031, 1035, 1047, 1050], "md5": 1047, "md5_checksum": 370, "md_scale": 232, "mdarii": 1051, "mdbecker": 1029, "mdi": [142, 148, 184, 185, 190, 415, 417, 465, 498, 566, 634, 638, 834, 868, 882, 1013, 1026], "mdi_import": [189, 190], "mds_result": 698, "mea": 92, "mean": [2, 44, 45, 48, 51, 53, 54, 55, 58, 62, 63, 65, 71, 72, 73, 74, 76, 78, 80, 81, 83, 84, 87, 88, 89, 94, 104, 111, 112, 113, 114, 117, 119, 121, 124, 125, 126, 128, 135, 137, 138, 141, 143, 144, 147, 148, 150, 155, 156, 157, 168, 171, 176, 177, 178, 180, 182, 184, 187, 188, 195, 197, 202, 204, 205, 206, 209, 212, 214, 218, 219, 221, 227, 228, 229, 230, 235, 237, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 255, 256, 257, 258, 260, 261, 264, 266, 267, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 301, 310, 313, 315, 316, 317, 319, 322, 325, 327, 332, 340, 343, 344, 347, 349, 350, 351, 353, 359, 363, 368, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 390, 399, 405, 406, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 431, 438, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 489, 503, 504, 514, 521, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 586, 591, 592, 593, 594, 597, 600, 605, 609, 610, 611, 612, 614, 615, 617, 626, 631, 632, 634, 636, 637, 638, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 688, 692, 693, 694, 695, 696, 697, 698, 699, 708, 709, 711, 713, 716, 717, 720, 721, 728, 730, 733, 734, 735, 740, 741, 742, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 778, 782, 783, 785, 787, 788, 789, 791, 792, 794, 795, 796, 797, 799, 801, 802, 803, 804, 807, 808, 810, 818, 822, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 858, 859, 861, 862, 864, 865, 866, 867, 869, 870, 872, 873, 877, 878, 880, 884, 886, 888, 889, 894, 896, 897, 899, 901, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 930, 934, 935, 937, 978, 979, 985, 989, 994, 995, 996, 999, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1018, 1019, 1020, 1021, 1026, 1029, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mean_": [122, 274, 534, 535, 536, 541, 543, 545, 888, 1015, 1043], "mean_absolute_error": [2, 53, 212, 214, 230, 404, 1005, 1036, 1038], "mean_absolute_percentage_error": [2, 53, 144, 404, 1005, 1047, 1049], "mean_auc": 280, "mean_change_tol": 538, "mean_fit_tim": [141, 292, 804, 818], "mean_fpr": 280, "mean_gamma_devi": [2, 404, 1005, 1045], "mean_impute_scor": 183, "mean_l1_ratio": 1038, "mean_pinball_loss": [2, 53, 147, 150, 322, 1001, 1005, 1048], "mean_pinball_loss_95p": 1005, "mean_poisson_devi": [2, 212, 404, 1005, 1045], "mean_precis": 268, "mean_precision_": 801, "mean_precision_prior": [255, 261, 801], "mean_precision_prior_": 801, "mean_predict": [53, 178], "mean_predictions_gpr": 171, "mean_prior": 801, "mean_prior_": 801, "mean_recal": 268, "mean_scor": [105, 279, 282, 352, 1048], "mean_score_tim": [141, 268, 271, 804, 818], "mean_shift": [2, 1040, 1043], "mean_square_error": 1036, "mean_squared_error": [2, 47, 145, 147, 148, 209, 212, 214, 216, 218, 230, 359, 404, 415, 756, 1005, 1036, 1038, 1045, 1046, 1052], "mean_squared_log_error": [2, 404, 715, 1005, 1042, 1048, 1052], "mean_test_": 274, "mean_test_precis": [268, 274], "mean_test_recal": 268, "mean_test_scor": [104, 105, 106, 114, 141, 160, 168, 260, 269, 270, 271, 278, 281, 282, 292, 340, 473, 597, 804, 818, 994, 1041, 1048], "mean_tim": 1041, "mean_tpr": [279, 280], "mean_train_precis": [804, 818], "mean_train_scor": [804, 818, 1041], "mean_tweedie_devi": [2, 230, 404, 1005, 1045], "mean_variance_axi": [2, 385, 1041, 1048], "mean_y_pr": 176, "meaning": [73, 190, 205, 237, 299, 327, 353, 405, 407, 412, 416, 417, 550, 733, 734, 742, 787, 788, 791, 857, 1009, 1019, 1020, 1035, 1051], "meaningfulli": [212, 1005], "meaningless": [188, 416, 910, 913, 1038], "means_": [71, 255, 256, 257, 258, 260, 261, 551, 552, 801, 802], "means_init": [257, 258, 802], "meanshift": [2, 80, 323, 408, 441, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050, 1051, 1053], "meant": [91, 150, 169, 249, 327, 371, 385, 475, 495, 681, 854, 927, 970, 971, 993, 995, 1009, 1011, 1015, 1036], "meanwhil": [388, 1020], "measur": [2, 28, 44, 47, 48, 50, 51, 53, 58, 63, 73, 74, 83, 92, 94, 95, 122, 138, 139, 147, 151, 158, 171, 176, 184, 186, 187, 188, 192, 202, 207, 211, 212, 216, 218, 230, 262, 268, 270, 276, 277, 315, 344, 351, 352, 363, 371, 373, 378, 382, 390, 405, 410, 412, 413, 414, 415, 416, 450, 453, 463, 500, 517, 540, 542, 549, 553, 559, 560, 561, 562, 565, 566, 567, 607, 610, 611, 615, 631, 635, 662, 694, 696, 702, 706, 708, 709, 711, 713, 716, 717, 720, 721, 724, 729, 730, 731, 733, 735, 740, 741, 743, 744, 747, 751, 759, 760, 761, 786, 787, 788, 790, 791, 792, 793, 796, 799, 829, 831, 834, 854, 885, 897, 916, 917, 918, 919, 925, 995, 1001, 1003, 1008, 1010, 1011, 1013, 1019, 1021, 1026, 1035, 1038, 1040, 1041, 1043, 1045], "mechan": [75, 246, 348, 364, 376, 378, 402, 406, 408, 416, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1003, 1021, 1029], "mecopur": 1052, "med": [58, 103, 279, 371, 1015], "meda": [108, 187, 1005], "media": [408, 1029], "median": [2, 44, 53, 73, 104, 108, 112, 113, 147, 182, 183, 187, 214, 218, 229, 241, 249, 310, 320, 322, 323, 371, 410, 415, 417, 441, 455, 459, 462, 475, 554, 556, 560, 567, 600, 631, 634, 639, 674, 675, 683, 725, 757, 855, 886, 898, 917, 919, 995, 1015, 1021, 1038, 1039], "median_absolute_error": [2, 108, 187, 1005, 1039, 1045, 1047], "median_predict": 53, "medic": [273, 412, 716, 1001, 1029], "medicin": [273, 716, 1005], "medina": [1035, 1037], "medinc": [310, 321, 371, 491], "medium": [43, 184, 245, 317, 340, 408, 647, 882, 998, 1001], "medoid": 447, "medoids_": 447, "medri": 1038, "meekail": [0, 397, 1049, 1050, 1051, 1052], "meer": [97, 408, 449], "meet": [376, 388, 391, 417, 574, 606, 865, 866, 905, 1005, 1018, 1029, 1043, 1044, 1045], "megabyt": 1049, "megasari": 1047, "meghann": [1043, 1045], "mehak": 1042, "mehdi": [1039, 1048], "mehgarg": 1050, "mehmet": [1042, 1048], "mehmetcanakbai": 1050, "mehrdad": 1049, "mehta": [1039, 1040, 1041, 1043, 1044, 1045, 1046, 1050, 1051], "mehul": 1042, "mei": [1040, 1045], "meier": 1042, "meila": 408, "mein": 416, "meinshausen": 198, "meirel": 1046, "meketon": 1042, "melani": [1029, 1042, 1043], "melderi": 1043, "melemo2": 1049, "meli": [1048, 1049, 1050], "melissa": 1043, "mellon": 903, "melnik": 1050, "melsyt": [1043, 1044], "mem": [88, 382, 510, 511, 1026], "member": [0, 351, 352, 371, 376, 379, 391, 408, 423, 443, 447, 449, 452, 454, 494, 557, 558, 559, 560, 565, 566, 567, 568, 584, 662, 663, 670, 671, 672, 680, 681, 682, 708, 709, 719, 721, 735, 740, 741, 761, 790, 799, 804, 908, 1001, 1008, 1035, 1047, 1050], "membership": [31, 90, 391, 405, 408, 513, 514, 515, 516, 517, 521, 524, 1020], "memit": 382, "memmap": [364, 371, 390, 413, 510, 536, 1043, 1052], "memoiz": [105, 371, 390], "memor": 189, "memori": [2, 48, 88, 105, 125, 292, 319, 321, 323, 324, 327, 352, 353, 364, 365, 370, 376, 379, 385, 388, 390, 402, 408, 409, 412, 413, 416, 419, 420, 442, 443, 444, 445, 446, 447, 448, 450, 451, 455, 458, 460, 469, 474, 480, 498, 505, 510, 511, 535, 536, 537, 540, 543, 557, 558, 559, 560, 565, 566, 567, 568, 584, 585, 591, 592, 594, 650, 651, 652, 656, 657, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 688, 782, 783, 784, 785, 804, 810, 818, 827, 829, 830, 831, 832, 835, 836, 837, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 868, 869, 886, 888, 898, 899, 901, 906, 908, 909, 916, 917, 918, 919, 935, 973, 989, 1001, 1007, 1008, 1015, 1017, 1018, 1020, 1021, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "memory_profil": [382, 394, 401], "memoryerror": [1043, 1047], "memoryview": 377, "memorywis": 402, "men": 373, "menes": 1050, "meng": [1035, 1036, 1039, 1041, 1042], "menoci": 1053, "menon": 406, "mensch": [1040, 1041, 1042, 1043], "mention": [89, 117, 135, 230, 284, 320, 359, 363, 376, 378, 380, 381, 388, 408, 700, 900, 901, 994, 999, 1001, 1025, 1028, 1029, 1042, 1043, 1044], "menu": 394, "menuet": 1044, "mercer": 997, "mere": [44, 270, 390, 835, 1019], "merg": [75, 77, 81, 85, 322, 374, 376, 379, 384, 388, 391, 408, 441, 442, 443, 446, 447, 464, 824, 1035, 1042], "merit": [376, 380, 391], "meritocrat": 391, "merritt": 1041, "mersenn": 1046, "merz": 406, "mesfer": 1048, "mesh": [92, 143, 153, 173, 244, 298, 305, 312, 334, 336], "meshgrid": [51, 64, 78, 92, 112, 143, 153, 172, 173, 174, 175, 177, 188, 223, 224, 225, 226, 237, 239, 259, 296, 303, 305, 312, 313, 334, 339, 340, 344, 345, 348, 349, 635], "meshulam": 1038, "meson": [374, 379, 394, 401], "mess": 1049, "messag": [74, 80, 96, 103, 121, 246, 351, 352, 371, 374, 375, 379, 380, 381, 384, 385, 408, 441, 455, 469, 541, 545, 550, 576, 631, 716, 804, 807, 808, 810, 818, 827, 832, 835, 837, 857, 865, 866, 906, 933, 934, 935, 938, 941, 967, 988, 993, 1005, 1015, 1035, 1039, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "met": [246, 378, 417, 536, 543, 631, 675, 1001, 1005, 1043], "meta": [2, 7, 31, 32, 90, 103, 134, 158, 184, 212, 275, 279, 284, 286, 289, 325, 326, 355, 357, 359, 370, 374, 378, 380, 388, 390, 399, 406, 417, 418, 428, 438, 444, 445, 448, 450, 466, 483, 484, 485, 498, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 578, 593, 600, 606, 613, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 804, 805, 806, 811, 813, 820, 822, 826, 831, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 925, 957, 964, 993, 994, 1006, 1025, 1026, 1027, 1031, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1052], "meta_clf_sample_weight": 246, "meta_est": 246, "meta_meta_est": 246, "metaclassifi": [246, 247], "metadata": [2, 62, 133, 184, 196, 238, 264, 327, 352, 370, 371, 378, 402, 422, 425, 428, 431, 432, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 490, 498, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 962, 963, 964, 988, 1005, 1024, 1025, 1026, 1031, 1051], "metadata_rout": [2, 246, 438, 444, 445, 448, 450, 466, 483, 484, 485, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 962, 963, 964], "metadatarequest": [2, 246, 422, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 470, 471, 472, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 566, 567, 568, 584, 585, 586, 591, 592, 593, 594, 595, 598, 599, 601, 602, 603, 606, 613, 614, 615, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 656, 658, 660, 661, 662, 664, 666, 668, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 961, 963, 1052], "metadatarout": [2, 246, 438, 465, 466, 473, 557, 558, 565, 569, 570, 571, 572, 596, 597, 600, 605, 631, 651, 655, 657, 659, 663, 665, 667, 669, 675, 677, 679, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 867, 868, 905, 963, 1052], "metaestim": [2, 90, 390, 905, 925, 965, 1039, 1048, 1049, 1052], "metaestimatormixin": [2, 246], "metaireau": [1035, 1038], "metal": 404, "metaregressor": 246, "metatransfom": 1040, "meteorologi": 406, "meth_nam": 314, "method": [2, 5, 8, 14, 18, 31, 33, 37, 44, 48, 52, 53, 56, 58, 59, 62, 63, 64, 65, 72, 73, 75, 76, 77, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 99, 102, 105, 111, 112, 115, 117, 121, 124, 126, 129, 130, 131, 133, 135, 140, 142, 148, 155, 164, 165, 169, 182, 192, 201, 202, 205, 213, 220, 229, 231, 233, 235, 236, 237, 239, 243, 245, 246, 247, 249, 253, 254, 257, 264, 272, 275, 277, 278, 279, 284, 287, 290, 296, 297, 299, 310, 314, 317, 319, 321, 322, 343, 351, 352, 353, 358, 359, 363, 364, 365, 368, 373, 374, 376, 377, 378, 382, 383, 385, 388, 389, 393, 399, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 430, 431, 432, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 460, 463, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 506, 514, 516, 524, 527, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 709, 714, 715, 726, 735, 736, 739, 740, 745, 746, 767, 772, 773, 778, 782, 787, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 896, 897, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 923, 925, 928, 937, 941, 952, 960, 961, 962, 963, 964, 965, 970, 973, 988, 989, 992, 993, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1026, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "method_map": [246, 961], "method_max_it": [547, 548, 1045], "method_nam": [246, 961, 964], "methodmap": [2, 246, 961], "methodmetadatarequest": 960, "methodol": 1015, "methodolog": [412, 1028], "methodologi": [543, 881, 995, 1005, 1029], "methodpair": 962, "metric": [2, 13, 44, 46, 47, 51, 53, 58, 59, 60, 62, 63, 64, 67, 69, 72, 74, 78, 80, 82, 83, 86, 92, 94, 98, 103, 108, 114, 135, 140, 145, 146, 148, 149, 150, 155, 166, 169, 172, 182, 184, 186, 187, 189, 198, 202, 208, 209, 212, 214, 216, 218, 230, 235, 240, 243, 244, 249, 252, 262, 263, 266, 267, 268, 270, 271, 273, 277, 279, 280, 284, 289, 290, 292, 300, 303, 308, 310, 315, 319, 320, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 351, 352, 359, 363, 368, 371, 376, 378, 388, 389, 390, 393, 399, 403, 406, 407, 413, 414, 415, 418, 419, 425, 438, 442, 445, 446, 447, 451, 455, 456, 457, 458, 463, 470, 522, 537, 551, 552, 553, 555, 557, 559, 560, 561, 563, 564, 566, 567, 569, 571, 581, 605, 614, 624, 632, 635, 638, 642, 643, 644, 645, 646, 647, 662, 663, 667, 670, 672, 678, 679, 680, 692, 694, 696, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 833, 836, 837, 838, 839, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 874, 880, 903, 904, 908, 910, 913, 916, 918, 925, 995, 997, 1000, 1002, 1006, 1008, 1011, 1013, 1024, 1026, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "metric_kwarg": [783, 784], "metric_obj": 703, "metric_param": [419, 445, 447, 451, 456, 457, 458, 692, 696, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 1039, 1042, 1049], "metsi": [843, 1007], "metzen": [0, 398, 1035, 1038, 1039, 1040, 1041], "mexican": 130, "meyer89": 1046, "mferrari3": [1043, 1044], "mgrid": [54, 162], "mhg": 1040, "mi": [65, 73, 164, 408, 610, 611, 708, 759, 761, 995, 1005, 1019], "mia": 1050, "miao": 1048, "mib": [363, 469, 906], "mic": [889, 1015], "micah": 1045, "micci": [889, 1015], "mice": [370, 631, 995], "miceprotein": 370, "michael": [373, 406, 408, 451, 632, 641, 695, 801, 995, 1001, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1052, 1053], "michal": [1039, 1042, 1048, 1049], "michali": 408, "michalkrawczyk": [1048, 1049], "micha\u0142": 1046, "micha\u0142owski": 1044, "michel": [0, 398, 1035, 1037, 1038, 1040, 1042, 1049, 1050], "michelbach": 1039, "michiaki": 1041, "micka\u00ebl": [1043, 1044], "micky774": [1049, 1050], "micro": [50, 303, 333, 363, 380, 711, 717, 733, 734, 742, 787, 788, 791, 792, 1005, 1035, 1043, 1044, 1050, 1053], "micro_roc_auc_ovr": 279, "microarrai": [405, 452, 515, 632, 995], "microcontrol": 1024, "microphon": 122, "microryzomi": [51, 303, 371, 500], "microryzomys_minutu": 500, "microryzomys_minutus_0": 51, "microsoft": [0, 52, 374, 377, 394], "mid": [64, 340, 1005, 1007], "middl": [44, 62, 71, 94, 126, 198, 348, 373, 1012, 1015], "mideast": [58, 371], "midina": 1042, "midnight": 44, "midpoint": 340, "midpointnorm": 340, "midvidi": 1048, "midwest": 373, "might": [0, 44, 45, 53, 68, 78, 80, 94, 96, 103, 143, 150, 153, 166, 177, 183, 187, 188, 189, 192, 209, 212, 230, 239, 264, 270, 272, 284, 293, 306, 321, 327, 344, 349, 359, 363, 364, 370, 374, 376, 377, 378, 380, 381, 382, 388, 390, 391, 394, 402, 406, 407, 409, 412, 413, 414, 415, 416, 418, 433, 444, 489, 498, 503, 505, 510, 517, 525, 538, 557, 558, 559, 563, 564, 566, 582, 583, 585, 614, 615, 631, 654, 658, 659, 660, 662, 663, 680, 682, 696, 761, 798, 806, 807, 808, 821, 824, 832, 857, 873, 888, 901, 920, 922, 924, 926, 930, 934, 935, 952, 973, 994, 995, 997, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1012, 1013, 1015, 1020, 1021, 1036, 1038, 1043, 1044, 1046, 1049, 1050, 1051, 1052], "mignon": [1035, 1038, 1039, 1042], "migrat": [376, 1035], "miguel": [1045, 1053], "miguelbarao": 1045, "miguelcsilva": 1053, "mihael": [408, 451, 458], "mihevc": 1045, "mike": 1042, "mikebenfield": 1042, "miketip": [536, 543], "mikhail": [1036, 1037, 1038, 1041, 1042, 1050, 1051], "miki": [1052, 1053], "mikulski": 1046, "milajev": 1039, "milan": 1047, "milana2": 1049, "mileag": 363, "milen": 1042, "mileston": 380, "mill": 1045, "millawel": 1049, "miller": [371, 1043, 1044, 1048], "million": [78, 90, 176, 192, 416, 696, 1002, 1020, 1029, 1049, 1050], "millman": [0, 398, 1044, 1051, 1052], "milman": 1043, "miln": 371, "miltenberg": 1050, "milton": 1052, "milutinov": 1044, "mimic": [182, 212, 822], "min": [44, 50, 51, 52, 54, 63, 65, 68, 86, 92, 108, 121, 124, 135, 137, 143, 146, 147, 153, 162, 173, 175, 176, 177, 183, 197, 200, 202, 205, 208, 214, 215, 218, 233, 243, 244, 247, 289, 296, 297, 303, 305, 307, 310, 312, 313, 315, 327, 334, 348, 385, 408, 411, 413, 483, 484, 486, 514, 536, 537, 540, 542, 543, 551, 552, 565, 631, 635, 636, 658, 659, 660, 661, 686, 687, 708, 761, 784, 807, 808, 857, 865, 866, 878, 887, 894, 952, 969, 996, 1001, 1005, 1008, 1015, 1041, 1044, 1046, 1047, 1050], "min_": [322, 408, 415, 878, 1001, 1015, 1019, 1020, 1021], "min_arg": 53, "min_batch_s": 955, "min_bin_freq": [449, 462], "min_c": 1007, "min_categori": [844, 1047], "min_cluster_s": [80, 99, 325, 408, 447, 451, 457, 1044], "min_degre": [883, 1048], "min_df": [55, 58, 103, 271, 333, 351, 352, 416, 591, 594, 1035, 1037, 1046, 1053], "min_dist": 243, "min_estim": 139, "min_faces_per_person": [46, 371, 496], "min_features_to_select": [168, 597, 1043], "min_frequ": [323, 325, 881, 882, 1015, 1049, 1051], "min_grad_norm": [696, 1041], "min_i": 247, "min_idf": 1048, "min_impurity_decreas": [559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919, 1021, 1042], "min_impurity_split": 1042, "min_max_axi": 1044, "min_max_scal": 1015, "min_n": [591, 592, 594, 1035], "min_n_compon": 243, "min_po": [2, 385], "min_resourc": [147, 807, 808, 994], "min_resources_": [807, 808], "min_sampl": [80, 83, 99, 388, 390, 408, 419, 445, 447, 451, 456, 457, 458, 675, 1001, 1044, 1048], "min_sample_split": 1050, "min_samples_leaf": [141, 146, 147, 189, 319, 322, 355, 415, 559, 560, 561, 562, 563, 564, 566, 567, 568, 916, 917, 918, 919, 1021, 1041], "min_samples_split": [147, 148, 149, 274, 282, 311, 321, 415, 559, 560, 561, 562, 566, 567, 568, 807, 808, 916, 917, 918, 919, 994, 1021, 1041], "min_val": [931, 938], "min_valu": [631, 1046, 1047], "min_w": 1001, "min_weight_fraction_leaf": [559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919, 1021, 1038, 1041, 1042], "min_x": 247, "mina": [1045, 1046], "mincovdet": [2, 112, 113, 410, 470, 471, 474, 476, 477, 1011, 1035, 1042], "mind": [126, 150, 186, 187, 188, 230, 314, 315, 352, 359, 376, 402, 410, 412, 415, 650, 651, 708, 1001, 1020, 1024], "minden": [408, 453, 463], "mine": [0, 270, 352, 371, 408, 419, 445, 513, 565, 724, 738, 744, 787, 855, 1001, 1005, 1011, 1017], "ming": [565, 1011, 1039, 1043, 1044, 1045, 1049], "minghui": [1042, 1043], "mingw": 1038, "minh": 1043, "mini": [2, 48, 98, 121, 323, 365, 390, 416, 441, 443, 448, 450, 452, 454, 533, 535, 538, 539, 540, 541, 542, 544, 545, 547, 548, 1009, 1010, 1035, 1046, 1048], "mini_batch": [452, 454], "minibatch": [48, 80, 408, 413, 450, 536, 680, 864, 865, 866, 1035], "minibatch_iter": 48, "minibatch_kmean": 352, "minibatch_s": [48, 365], "minibatchdictionarylearn": [2, 121, 124, 365, 413, 533, 540, 544, 547, 548, 1036, 1038, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "minibatchkmean": [2, 58, 72, 74, 79, 80, 84, 92, 93, 95, 97, 184, 352, 365, 408, 413, 441, 443, 448, 514, 783, 1026, 1036, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "minibatchnmf": [2, 55, 365, 413, 1049, 1051, 1052, 1053], "minibatchsparsepca": [2, 533, 535, 539, 542, 544, 545, 547, 548, 1035, 1036, 1046, 1048, 1049, 1050, 1051, 1052], "miniforg": [374, 384, 394, 395], "miniforge3": [374, 384], "minim": [2, 44, 52, 53, 65, 91, 100, 110, 111, 147, 171, 179, 194, 205, 209, 210, 212, 214, 216, 220, 230, 232, 242, 243, 255, 260, 264, 271, 279, 280, 310, 319, 322, 337, 344, 347, 355, 375, 376, 379, 384, 388, 390, 402, 406, 408, 410, 413, 415, 441, 442, 446, 447, 451, 464, 540, 542, 549, 559, 560, 561, 562, 566, 567, 612, 614, 615, 645, 650, 653, 661, 662, 663, 671, 675, 676, 678, 682, 683, 691, 696, 698, 699, 752, 784, 855, 857, 866, 884, 896, 902, 916, 917, 918, 919, 1001, 1002, 1005, 1008, 1009, 1015, 1017, 1018, 1019, 1020, 1024, 1027, 1031, 1039, 1044, 1045], "minima": [177, 200, 413, 448, 696, 1002, 1043], "minimal_reproduc": 384, "minimalist": [381, 416, 1028], "minimis": [53, 269, 408, 412, 662, 663, 1021], "minimum": [2, 49, 89, 91, 112, 147, 148, 150, 168, 202, 222, 243, 249, 280, 296, 297, 385, 394, 401, 405, 408, 415, 416, 442, 446, 447, 451, 455, 457, 470, 471, 474, 475, 476, 477, 513, 515, 543, 554, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 597, 631, 635, 636, 639, 641, 672, 675, 680, 682, 683, 686, 687, 696, 709, 729, 783, 784, 807, 808, 829, 844, 865, 866, 877, 878, 881, 882, 883, 887, 901, 902, 915, 916, 917, 918, 919, 931, 934, 935, 938, 955, 1002, 1005, 1009, 1011, 1015, 1017, 1021, 1035, 1038, 1042, 1043, 1047, 1048, 1052], "minimum_cluster_s": 408, "minka": [128, 543, 1001], "minknowski": 1048, "minkowski": [419, 445, 451, 456, 457, 458, 692, 703, 782, 783, 784, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 1008, 1035, 1038, 1049, 1050, 1051], "minkowski_dist": [451, 458, 692, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862], "minkowskidist": [703, 1048], "minmax_scal": [2, 308, 310, 878, 1040, 1043], "minmaxscal": [2, 44, 45, 105, 165, 167, 192, 233, 249, 306, 321, 365, 404, 409, 465, 894, 995, 1015, 1037, 1040, 1043, 1045, 1046, 1047, 1051, 1052], "minnesota": 408, "minor": [249, 264, 273, 277, 371, 380, 391, 498, 1005, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "minu": [270, 764, 1005], "minut": [44, 150, 371, 376, 1002, 1023], "minutu": [51, 303, 371, 500], "minval": [513, 515], "minwoo": 1035, "minyushkin": 1041, "miola": 1050, "miott": [1035, 1038], "miotto": 1046, "mir": 416, "miroslav": [1036, 1037, 1040], "mirror": [845, 994], "mirza": 1048, "misa": 1050, "misc": [58, 87, 124, 271, 333, 351, 352, 353, 371], "misc_featur": 249, "miscalibr": 65, "miscellan": [369, 370, 1026, 1041, 1042, 1049, 1050, 1052, 1053, 1054, 1055], "miscfeatur": 155, "misclassif": [47, 135, 264, 344, 800, 1019, 1020, 1021, 1036], "misclassifi": [71, 135, 263, 264, 344, 351, 1020], "misclassification_error": 135, "misdetect": 1052, "mish": 416, "mishra": [1047, 1048], "mislabel": [263, 415, 1007], "mislead": [73, 142, 148, 187, 377, 393, 415, 555, 556, 559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919, 1031, 1048], "mismatch": [80, 1004, 1044], "misread": 237, "miss": [2, 21, 104, 155, 189, 241, 251, 264, 270, 290, 320, 327, 359, 363, 368, 371, 373, 375, 376, 381, 390, 404, 407, 408, 409, 410, 447, 473, 491, 498, 500, 503, 559, 560, 563, 564, 566, 567, 568, 631, 632, 633, 634, 643, 649, 676, 694, 698, 731, 773, 830, 851, 869, 877, 878, 882, 884, 885, 888, 889, 893, 896, 897, 899, 916, 917, 918, 919, 925, 1001, 1002, 1005, 1024, 1025, 1026, 1027, 1029, 1031, 1037, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "missclassif": 135, "missforest": [182, 995], "missing": [150, 415, 631, 632, 634, 1044], "missing_featur": [182, 183], "missing_fract": 150, "missing_fraction_list": 150, "missing_r": 183, "missing_sampl": [182, 183], "missing_valu": [182, 183, 251, 390, 631, 632, 633, 634, 773, 995, 1043, 1044], "missingind": [2, 631, 632, 634, 995, 1043, 1044, 1045, 1049, 1051], "mission": [0, 1029], "misspecifi": 65, "misspel": 416, "mistak": [135, 166, 284, 330, 359, 408, 412, 739, 879, 893, 894, 896, 897, 898, 899, 1001, 1006], "mit": [371, 382, 408, 418, 614, 615, 618, 623, 626, 647, 670, 671, 680, 845, 998], "mitar": 1044, "mitig": [65, 89, 150, 189, 317, 364, 365, 1002, 1021, 1047], "mitra": [1045, 1046, 1050], "mitrov": 1044, "mitzi": [1048, 1049], "miwojc": 1049, "mix": [2, 44, 96, 102, 103, 122, 123, 144, 184, 187, 212, 241, 251, 253, 271, 310, 316, 370, 378, 388, 390, 409, 413, 420, 465, 467, 468, 498, 535, 540, 542, 549, 603, 607, 634, 650, 651, 656, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 804, 818, 834, 868, 881, 882, 888, 889, 968, 975, 978, 1001, 1010, 1026, 1047, 1049, 1050], "mixed_encoded_preprocessor": 316, "mixed_pip": 316, "mixed_target": 316, "mixin": [2, 376, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 604, 945, 1037, 1046, 1050], "mixing_": [122, 123, 535], "mixtur": [2, 47, 49, 71, 80, 89, 91, 99, 119, 174, 183, 200, 257, 258, 281, 300, 326, 371, 372, 390, 408, 413, 414, 418, 627, 801, 802, 804, 1025, 1026, 1030, 1031, 1035, 1039, 1040, 1041, 1042], "mizil": [63, 65, 406, 438, 440], "mizuki": 1049, "mk": 1021, "mkdir": [48, 382, 384], "mkdtemp": [88, 409], "mkl": [363, 364, 374, 384, 388, 1035], "mkl_num_thread": 364, "ml": [48, 287, 370, 373, 381, 502, 504, 512, 1001, 1003, 1024, 1025, 1029], "ml_map": 396, "mlant": 1049, "mlb": [371, 879], "mlc": 373, "mlcomp": 1035, "mld": 48, "mldata": [1035, 1043], "mle": [112, 128, 543, 1043, 1046], "mlewis1729": 1042, "mlflow": 1024, "mlg": 1039, "mlinari\u0107": 1050, "mline": [49, 112, 226, 296, 339, 342], "mljar": 1024, "mlle": [693, 697, 1002], "mlliou112": 1042, "mlondschien": 1048, "mlop": 1024, "mlp": [184, 188, 250, 304, 306, 498, 834, 865, 866, 1009, 1026], "mlp_disp": 250, "mlp_model": 188, "mlp_preprocessor": 188, "mlpclassifi": [2, 68, 149, 161, 184, 304, 305, 307, 365, 504, 506, 516, 524, 864, 866, 878, 1006, 1009, 1026, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mlpregressor": [2, 44, 188, 250, 365, 864, 865, 1009, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mlxtend": 1024, "mm": 192, "mm_bunch": 51, "mmap_mod": [402, 970], "mmm": 52, "mmse": [111, 410, 421, 476], "mn193": 1052, "mnb": 1007, "mnist": [184, 193, 204, 206, 220, 227, 290, 304, 306, 498, 662, 834, 865, 888, 937, 1001, 1009, 1026], "mnist_10000": 290, "mnist_20000": 290, "mnist_784": [220, 228, 290, 307], "mo": 1046, "mobil": 384, "mock": 1045, "mockdatafram": 1045, "modal": [2, 239, 475, 954], "mode": [2, 49, 50, 81, 82, 112, 212, 239, 290, 292, 308, 319, 374, 376, 380, 384, 385, 388, 405, 411, 415, 419, 444, 445, 448, 450, 453, 460, 463, 472, 473, 479, 483, 488, 510, 511, 559, 563, 566, 595, 598, 599, 601, 602, 603, 614, 631, 648, 649, 662, 663, 670, 672, 677, 678, 679, 680, 683, 686, 687, 693, 697, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 864, 908, 910, 913, 916, 918, 940, 951, 952, 954, 1008, 1011, 1024, 1036, 1044, 1049, 1052], "model": [2, 7, 8, 22, 29, 35, 38, 41, 43, 45, 46, 49, 50, 52, 54, 55, 59, 60, 62, 63, 65, 71, 75, 76, 77, 83, 88, 89, 90, 92, 95, 102, 104, 105, 106, 110, 114, 117, 120, 121, 130, 131, 134, 135, 136, 138, 140, 143, 146, 147, 149, 150, 152, 154, 155, 158, 160, 162, 163, 165, 166, 174, 175, 177, 178, 179, 180, 183, 185, 186, 190, 195, 197, 199, 201, 203, 204, 205, 206, 208, 213, 214, 216, 217, 218, 220, 224, 225, 227, 228, 229, 239, 242, 247, 255, 257, 258, 259, 263, 265, 266, 268, 271, 273, 274, 275, 276, 278, 279, 284, 285, 287, 290, 292, 293, 294, 296, 299, 303, 311, 314, 316, 317, 319, 321, 323, 324, 325, 327, 329, 330, 337, 339, 340, 341, 342, 343, 345, 347, 349, 352, 353, 356, 359, 368, 370, 371, 378, 382, 390, 393, 399, 404, 405, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 427, 431, 433, 438, 443, 450, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 490, 491, 498, 500, 502, 503, 504, 505, 511, 524, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 591, 592, 596, 597, 600, 605, 609, 612, 613, 614, 615, 619, 631, 636, 637, 638, 639, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 705, 710, 715, 725, 726, 727, 728, 738, 739, 745, 754, 757, 789, 792, 793, 796, 801, 802, 804, 807, 808, 809, 810, 818, 819, 820, 821, 825, 826, 827, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 853, 854, 855, 857, 859, 864, 865, 866, 868, 869, 871, 873, 875, 880, 881, 883, 884, 885, 887, 888, 889, 893, 894, 896, 897, 898, 899, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 923, 988, 995, 997, 998, 999, 1002, 1003, 1006, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040], "model_1": 270, "model_1_scor": 270, "model_2": 270, "model_2_scor": 270, "model__estimator__max_depth": 994, "model_coef": 186, "model_color": 346, "model_detail": 143, "model_displai": 140, "model_fixed_threshold": 264, "model_from_prevision_vers": 402, "model_i": 270, "model_i_scor": 270, "model_idx": 249, "model_k": 270, "model_k_scor": 270, "model_l1": 347, "model_l2": 347, "model_nam": [141, 249, 289], "model_no_cf": 317, "model_param": 227, "model_prop": 44, "model_scor": [270, 289], "model_select": [2, 44, 45, 46, 47, 50, 53, 62, 63, 65, 68, 69, 88, 104, 105, 106, 107, 108, 110, 117, 126, 128, 135, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 160, 165, 166, 168, 171, 182, 183, 184, 186, 187, 189, 190, 192, 198, 208, 209, 212, 214, 219, 220, 227, 228, 230, 240, 245, 246, 249, 251, 252, 253, 257, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 293, 294, 298, 299, 305, 307, 308, 312, 314, 315, 316, 317, 319, 320, 321, 324, 325, 326, 327, 332, 333, 340, 343, 347, 355, 358, 359, 376, 381, 389, 390, 399, 404, 407, 409, 412, 415, 438, 439, 560, 562, 569, 570, 582, 663, 701, 702, 704, 706, 746, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 857, 865, 866, 868, 916, 917, 918, 919, 994, 995, 1000, 1005, 1007, 1008, 1013, 1015, 1020, 1026, 1032, 1039, 1041, 1042], "model_selection_tut": 160, "model_step": 44, "model_titl": 143, "model_with_cf": 317, "moder": [270, 376, 418, 455, 1011], "modern": [44, 150, 416, 469, 505, 593, 694, 698, 734, 906, 1002, 1024, 1025, 1051], "modif": [376, 411, 415, 416, 447, 1018, 1052, 1053], "modifi": [108, 198, 222, 232, 233, 234, 246, 249, 325, 349, 376, 378, 390, 405, 408, 415, 418, 444, 448, 455, 460, 469, 483, 484, 485, 486, 497, 512, 584, 614, 615, 617, 623, 680, 682, 693, 697, 723, 733, 734, 772, 787, 788, 791, 932, 986, 987, 1001, 1018, 1019, 1025, 1030, 1031, 1035, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050], "modified_fil": 376, "modified_hub": [47, 680, 1019], "modified_huber_loss": 222, "modified_tol": [693, 697], "modrak": [1050, 1051], "modroiu": 1005, "modul": [7, 11, 16, 31, 32, 72, 73, 83, 87, 109, 115, 118, 120, 121, 134, 163, 170, 181, 184, 185, 191, 193, 227, 231, 232, 254, 262, 286, 287, 288, 291, 304, 306, 307, 309, 328, 335, 350, 354, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 388, 390, 393, 394, 402, 406, 408, 411, 415, 416, 417, 419, 445, 505, 537, 582, 583, 663, 943, 994, 999, 1001, 1003, 1005, 1006, 1009, 1011, 1012, 1015, 1017, 1019, 1021, 1022, 1029, 1036, 1037, 1038, 1040, 1041, 1045, 1049], "modulo": [416, 1046], "moeller": 1041, "mogavero": 1045, "moham": [1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "mohamedbsh": 1050, "mohammad": [1043, 1044], "mohit": [1049, 1052], "mohn": [1043, 1047], "mohr": 1041, "moin": 1047, "mois\u00e9": 1017, "moitra": [1035, 1036, 1037], "mojca": 1046, "mojdeh": 1052, "mola": [1046, 1052], "molden": 1037, "molecul": 1002, "molin": 1050, "molla": [1036, 1037], "molnar": [188, 1012], "moment": [363, 413, 418, 441, 619, 627, 865, 866, 968, 1009, 1010], "momentum": [306, 865, 866, 1009], "mon": [44, 150, 188], "mona": [170, 178, 184, 418, 498, 615, 619, 626, 627, 629, 1026], "monaf": 1050, "monei": [0, 230, 1029], "monitor": [145, 198, 220, 379, 390, 555, 556, 561, 562, 563, 564, 1009, 1028, 1038, 1043, 1045, 1047], "mono": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688], "monografia": 1001, "monomi": 213, "monotoinc": 320, "monoton": [2, 23, 44, 63, 134, 184, 188, 230, 242, 250, 320, 406, 559, 560, 561, 562, 563, 564, 566, 567, 636, 639, 640, 698, 710, 884, 896, 910, 913, 916, 917, 918, 919, 1002, 1006, 1015, 1020, 1026, 1042, 1046, 1050, 1052], "monotonic_cst": [150, 152, 320, 322, 326, 415, 559, 560, 563, 564, 566, 567, 916, 917, 918, 919, 1050, 1053], "mont": [244, 418, 615, 645, 646, 997, 1010], "montecchio": 1039, "montesel": 1053, "month": [0, 44, 176, 371, 376, 380, 391, 1035], "month_co": 44, "month_sin": 44, "monthli": [176, 391, 1005], "montoya": 1042, "moodi": 1040, "moon": [270, 306, 312, 524], "moonkyung94": 1049, "moor": [0, 739, 1005, 1029, 1052], "moosmann": 568, "moradizadeh": 1049, "morai": 1053, "moral": [351, 662, 1043, 1047, 1048, 1053], "morawiec": [1042, 1043], "more": [0, 2, 11, 37, 44, 46, 47, 48, 51, 52, 53, 54, 58, 63, 64, 65, 67, 68, 73, 75, 76, 79, 80, 81, 83, 86, 87, 89, 91, 94, 101, 108, 112, 119, 121, 124, 128, 135, 136, 138, 141, 142, 144, 146, 147, 148, 149, 150, 151, 155, 167, 169, 171, 177, 180, 183, 184, 187, 188, 190, 192, 194, 195, 198, 199, 202, 204, 205, 207, 210, 212, 213, 214, 216, 227, 228, 229, 230, 232, 236, 239, 244, 245, 246, 247, 249, 251, 255, 257, 258, 260, 261, 263, 264, 268, 270, 271, 272, 273, 277, 279, 284, 287, 289, 290, 292, 293, 300, 305, 306, 308, 310, 311, 312, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 330, 337, 340, 344, 345, 347, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 389, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 431, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 924, 926, 927, 948, 950, 952, 954, 967, 970, 988, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1027, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "moreau": [1041, 1042, 1043, 1044, 1045], "moreov": [160, 177, 312, 323, 359, 408, 412, 418, 901, 974, 1005, 1013, 1029, 1043, 1049, 1050], "moreyra": 1048, "morgan": [1017, 1021], "mori": 1050, "morikko": 1042, "morina": 1048, "moritz": [1048, 1050], "morn": 44, "moroz": 1041, "morril": 1035, "mors": 1046, "moslei": 1005, "mosley2013": 1005, "mosold": 155, "most": [2, 11, 44, 46, 48, 52, 54, 58, 62, 65, 86, 87, 89, 96, 110, 116, 117, 127, 129, 135, 141, 142, 148, 150, 155, 164, 165, 166, 168, 169, 176, 183, 186, 187, 188, 189, 190, 192, 198, 212, 213, 230, 246, 250, 255, 261, 264, 267, 268, 273, 277, 278, 280, 284, 287, 289, 299, 310, 316, 317, 319, 322, 325, 327, 330, 340, 344, 351, 352, 353, 359, 363, 364, 365, 371, 372, 374, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 394, 399, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 444, 445, 447, 451, 457, 458, 461, 469, 498, 505, 523, 526, 534, 536, 541, 545, 551, 553, 563, 564, 568, 569, 591, 592, 594, 596, 607, 615, 631, 634, 653, 662, 676, 678, 680, 682, 691, 692, 696, 699, 729, 732, 762, 763, 767, 789, 798, 801, 802, 807, 808, 823, 836, 837, 850, 851, 852, 854, 856, 857, 858, 859, 860, 883, 885, 893, 894, 896, 897, 898, 899, 906, 925, 951, 952, 954, 967, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1052], "most_common": 58, "most_frequ": [273, 553, 631, 634, 858, 995, 1005, 1043, 1045, 1047], "mostli": [0, 2, 81, 212, 230, 315, 378, 384, 388, 390, 413, 415, 416, 523, 783, 784, 1020, 1024, 1029, 1043, 1044, 1045, 1051], "mother": 1002, "motiv": [130, 376, 378, 390, 997, 1005, 1015, 1029, 1048], "motmoti": 1045, "motoda": 408, "motor": 230, "motorcycl": [58, 371], "mottl": [1043, 1044], "moudgalya": [1051, 1052], "moufad": 1050, "moulavi": [408, 447], "mount": 384, "mountain": 1043, "mountford": [1051, 1052], "mous": 370, "mouseid": 370, "moussa": 1041, "move": [65, 143, 271, 308, 340, 375, 376, 382, 406, 408, 551, 552, 573, 574, 575, 578, 580, 581, 945, 946, 947, 971, 1035, 1036, 1040, 1043, 1045, 1048, 1049], "moveabl": 409, "movelikeriv": 1044, "movement": 371, "movi": 416, "movie_entri": 416, "moya": 1047, "mp": 1001, "mpl": [71, 255, 256, 257, 261, 310], "mpl_toolkit": [51, 101, 127, 188, 232, 234, 303], "mplot3d": [101, 127, 188, 232, 234], "mpoemsl": 1049, "mppca": [536, 543], "mprun": 382, "mpy": 416, "mr": [1036, 1039, 1049], "mrandrewandrad": 1041, "mrastgoo": [1050, 1052], "mrg": 384, "mridul": 1041, "mrinal": 1049, "mrinaltyagi": 1049, "mrl09": 413, "mrmjauh": 1042, "mro": [378, 425, 431, 1045, 1046], "mrs2008": 593, "msabati": 1049, "msc": 373, "mschaffenroth": 1045, "mse": [45, 47, 110, 111, 145, 147, 148, 182, 183, 212, 214, 216, 218, 285, 326, 651, 657, 1005, 1021, 1046, 1048], "mse_path_": [202, 651, 655, 657, 659, 665, 667], "mse_valu": 47, "mses_california": 183, "mses_diabet": 183, "msft": 52, "msg": [290, 988], "msle": 1005, "msm": 373, "mssubclass": 155, "mst": 408, "msvc": 1038, "msvcp140": 1049, "mt19937": [937, 1046], "mthorrel": [1042, 1045], "mtrand": 359, "mtse": 683, "mu": [55, 112, 113, 270, 413, 421, 474, 476, 477, 480, 481, 482, 542, 549, 999, 1001, 1042, 1045], "mu_i": 1007, "mu_j": 408, "mu_k": 999, "muayyad": 1043, "much": [38, 44, 46, 47, 49, 53, 58, 63, 76, 89, 112, 114, 119, 124, 130, 140, 147, 148, 155, 156, 157, 171, 182, 183, 187, 188, 189, 190, 192, 210, 214, 243, 246, 249, 264, 270, 272, 273, 276, 281, 283, 307, 311, 315, 316, 317, 321, 322, 324, 340, 345, 351, 352, 359, 363, 364, 365, 371, 376, 377, 378, 381, 384, 388, 389, 394, 402, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 448, 449, 498, 536, 537, 538, 540, 561, 562, 563, 564, 662, 663, 670, 671, 672, 680, 681, 682, 696, 783, 784, 807, 808, 822, 850, 858, 883, 901, 908, 994, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1017, 1018, 1020, 1021, 1025, 1029, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mudd": 1048, "mueller": [0, 397, 1029, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "muhammad": [1043, 1044, 1048], "mukherje": 1046, "mula": 1047, "multi": [2, 51, 68, 125, 127, 134, 143, 153, 156, 162, 173, 175, 184, 193, 198, 199, 202, 205, 211, 219, 228, 231, 234, 238, 239, 247, 250, 262, 267, 279, 289, 304, 312, 313, 319, 324, 334, 345, 351, 356, 358, 364, 371, 373, 379, 385, 390, 394, 408, 415, 416, 418, 425, 438, 453, 463, 470, 475, 497, 498, 506, 507, 512, 516, 517, 521, 522, 524, 543, 551, 552, 553, 555, 557, 559, 560, 561, 563, 566, 567, 569, 571, 614, 635, 637, 647, 650, 651, 656, 657, 661, 662, 664, 665, 666, 667, 670, 672, 676, 677, 678, 679, 680, 685, 688, 694, 707, 717, 724, 738, 744, 746, 787, 803, 804, 818, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 856, 858, 864, 865, 866, 869, 875, 888, 892, 903, 904, 908, 910, 913, 916, 918, 920, 921, 922, 924, 928, 934, 937, 940, 994, 1006, 1008, 1012, 1015, 1019, 1024, 1026, 1027, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "multi_class": [279, 319, 614, 662, 663, 792, 908, 924, 1001, 1006, 1020, 1035, 1039, 1043, 1048, 1050, 1053], "multi_confus": 758, "multi_label": [924, 926], "multi_layer_regressor": 415, "multi_output": [385, 928, 934, 993], "multi_target_forest": 1006, "multialign": 282, "multiarch": 384, "multiclass": [2, 32, 64, 67, 141, 193, 205, 228, 240, 247, 249, 252, 262, 267, 275, 277, 280, 289, 308, 337, 348, 355, 371, 372, 378, 379, 381, 390, 399, 408, 415, 438, 453, 463, 490, 498, 506, 559, 561, 563, 566, 569, 570, 597, 605, 614, 635, 636, 637, 662, 663, 670, 672, 677, 678, 679, 680, 706, 710, 712, 733, 734, 738, 739, 742, 747, 758, 787, 788, 791, 792, 793, 798, 804, 805, 807, 808, 809, 810, 818, 820, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 875, 889, 908, 910, 913, 916, 918, 966, 967, 968, 999, 1001, 1015, 1016, 1020, 1021, 1026, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051, 1052], "multicollinear": [142, 148, 184, 185, 189, 276, 332, 411, 502, 566, 638, 659, 834, 1001, 1013, 1026], "multicor": [1047, 1048], "multidimension": [2, 411, 692, 694, 696, 698, 1002, 1008], "multigrid": 463, "multiindex": 1049, "multilabel": [2, 31, 32, 116, 118, 184, 238, 277, 288, 332, 371, 378, 379, 390, 403, 483, 488, 498, 499, 510, 511, 517, 525, 543, 559, 566, 569, 662, 678, 679, 707, 711, 717, 730, 733, 734, 738, 739, 742, 743, 758, 760, 787, 788, 791, 792, 798, 800, 834, 837, 839, 841, 865, 872, 875, 879, 881, 892, 913, 916, 918, 926, 940, 966, 967, 968, 1016, 1026, 1027, 1031, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "multilabel_": [837, 1040], "multilabel_confusion_matrix": [2, 717, 733, 734, 742, 788, 791, 1005, 1044], "multilabelbinar": [2, 390, 837, 872, 881, 1006, 1038, 1040, 1041, 1043, 1044], "multilay": [388, 1003], "multilearn": 1024, "multimetr": [715, 994, 1045, 1050], "multimetric_": [804, 807, 808, 818], "multimod": 239, "multinomi": [2, 48, 67, 184, 193, 203, 204, 206, 227, 247, 265, 279, 287, 307, 371, 372, 376, 413, 415, 498, 514, 525, 553, 555, 561, 563, 635, 662, 663, 745, 834, 837, 843, 844, 845, 846, 847, 888, 937, 1005, 1021, 1026, 1027, 1031, 1035, 1039, 1041, 1042, 1043, 1048, 1049, 1053], "multinomialdevi": 1046, "multinomialhmm": 1035, "multinomialnb": [2, 48, 365, 371, 416, 843, 844, 845, 846, 1007, 1037, 1039, 1042, 1043, 1047, 1048, 1050], "multiouput": 1045, "multioutput": [2, 42, 154, 279, 289, 390, 399, 431, 466, 483, 484, 485, 553, 556, 558, 559, 560, 562, 564, 566, 567, 570, 572, 615, 636, 637, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 792, 794, 795, 829, 837, 839, 840, 841, 842, 851, 859, 866, 875, 909, 911, 914, 916, 917, 918, 919, 940, 967, 968, 1005, 1026, 1027, 1031, 1035, 1036, 1037, 1041, 1042, 1048, 1049], "multioutput_arrai": 376, "multioutputclassifi": [2, 399, 792, 837, 839, 841, 1005, 1042, 1044, 1045, 1046, 1047, 1051, 1052], "multioutputregressor": [2, 154, 399, 431, 466, 483, 484, 485, 556, 558, 560, 562, 564, 567, 570, 572, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 840, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1041, 1042, 1044, 1046, 1047, 1051, 1052], "multipl": [2, 26, 53, 81, 102, 105, 119, 130, 135, 141, 143, 145, 165, 184, 187, 207, 244, 264, 270, 275, 278, 282, 287, 289, 292, 319, 325, 343, 363, 364, 365, 370, 372, 373, 376, 378, 379, 380, 381, 388, 390, 402, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 445, 461, 465, 467, 468, 470, 475, 489, 492, 494, 497, 498, 499, 505, 506, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 553, 555, 556, 557, 558, 561, 562, 563, 564, 565, 584, 602, 610, 611, 614, 615, 631, 636, 638, 643, 644, 645, 646, 650, 651, 654, 656, 657, 658, 661, 664, 665, 666, 667, 670, 671, 672, 675, 677, 680, 682, 683, 693, 694, 696, 697, 698, 715, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 792, 794, 795, 797, 801, 802, 804, 805, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 830, 831, 832, 834, 838, 839, 840, 841, 842, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 870, 873, 885, 889, 897, 900, 901, 908, 909, 910, 913, 930, 945, 951, 952, 975, 978, 997, 1000, 1001, 1002, 1006, 1007, 1008, 1012, 1013, 1018, 1019, 1021, 1024, 1026, 1035, 1036, 1038, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "multipleloc": [232, 295], "multiplex": 1021, "multipli": [187, 216, 230, 270, 358, 363, 385, 390, 413, 415, 416, 421, 465, 476, 517, 540, 542, 543, 549, 559, 563, 566, 650, 652, 656, 658, 662, 663, 664, 666, 672, 673, 674, 676, 680, 681, 682, 684, 690, 691, 693, 697, 768, 910, 913, 916, 918, 940, 980, 981, 982, 994, 997, 1001, 1005, 1019, 1046], "multiprocess": [388, 390, 970, 1008, 1035, 1043, 1049], "multirespons": 1001, "multiscal": 463, "multisurfac": 373, "multitarget": 385, "multitask": [289, 416, 1006], "multitaskelasticnet": [2, 650, 651, 656, 665, 666, 667, 685, 1001, 1006, 1035, 1042, 1043, 1046, 1048], "multitaskelasticnetcv": [2, 399, 650, 651, 656, 664, 666, 667, 685, 1001, 1006, 1038, 1045, 1046, 1048, 1052], "multitasklasso": [2, 207, 656, 664, 667, 1001, 1006, 1035, 1043, 1046, 1048], "multitasklassocv": [2, 399, 665, 666, 1006, 1038, 1045, 1046, 1048, 1052], "multithread": [363, 408, 778, 782, 908, 909, 910, 911, 912, 913, 914], "multivari": [2, 121, 187, 368, 410, 413, 416, 474, 518, 519, 520, 631, 632, 633, 634, 653, 675, 682, 683, 843, 844, 845, 846, 847, 999, 1001, 1004, 1007, 1024, 1031], "multivariate_norm": [114, 117, 255, 421, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "multiwai": 1021, "muma": 113, "mungui": 1048, "munoz": [1041, 1047], "muoki": 1047, "murad": 1038, "murashkin": 1039, "murata": [1048, 1049], "murezzda": 1051, "murmurhash": 385, "murmurhash3": [2, 416, 585, 592, 969], "murmurhash3_32": [2, 385], "murmurhash3_x86_32": [385, 969], "murphi": [406, 647, 998], "murrai": [1041, 1042], "music": 1029, "must": [89, 187, 188, 190, 196, 198, 229, 230, 239, 250, 265, 296, 311, 316, 359, 371, 375, 376, 377, 378, 380, 382, 384, 390, 391, 399, 404, 406, 408, 409, 412, 413, 415, 416, 417, 418, 419, 429, 439, 442, 445, 446, 447, 448, 450, 451, 452, 456, 458, 460, 462, 463, 465, 467, 468, 470, 475, 488, 510, 511, 514, 525, 533, 539, 540, 541, 542, 543, 545, 546, 549, 555, 556, 561, 562, 563, 564, 569, 570, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 621, 624, 631, 632, 633, 634, 635, 636, 637, 642, 646, 647, 652, 653, 656, 662, 663, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 703, 707, 710, 713, 739, 750, 768, 775, 778, 782, 785, 792, 796, 797, 798, 800, 801, 802, 804, 805, 807, 808, 809, 811, 813, 814, 816, 818, 819, 820, 822, 823, 825, 829, 832, 834, 835, 843, 844, 845, 846, 847, 850, 851, 852, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 868, 871, 872, 873, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 908, 909, 910, 911, 912, 913, 914, 915, 921, 979, 988, 990, 993, 994, 995, 1001, 1002, 1003, 1005, 1008, 1009, 1011, 1012, 1019, 1020, 1021, 1035, 1038, 1042, 1046, 1048, 1049, 1052], "mutabl": 378, "mutat": [359, 993, 1043], "mutual": [2, 73, 74, 83, 89, 92, 163, 184, 390, 415, 417, 447, 595, 598, 599, 602, 603, 609, 610, 611, 612, 708, 709, 719, 759, 761, 790, 799, 806, 821, 824, 994, 1001, 1005, 1006, 1026, 1035, 1041, 1051], "mutual_info_classif": [2, 105, 417, 595, 598, 599, 602, 603, 1041, 1047, 1050, 1053], "mutual_info_regress": [2, 164, 323, 417, 595, 598, 599, 602, 603, 612, 1041, 1042, 1047, 1049, 1050, 1051, 1053], "mutual_info_scor": [2, 73, 408, 708, 1005, 1043, 1046, 1047], "mu\u00f1oz": [1048, 1050], "mwestt": 1044, "my": [370, 376, 381, 384, 498, 945, 947], "my_custom_loss_func": 1005, "my_data": 381, "my_dataset": 488, "my_estim": [378, 409], "my_extra_param": 378, "my_featur": 376, "my_fil": 382, "my_func": [377, 382], "my_g": [420, 535], "my_group": [246, 399], "my_kernel": [336, 1020], "my_memb": [95, 97, 98], "my_other_weight": [246, 399], "my_pipelin": 1044, "my_script": 364, "my_tag": 378, "my_test_script": 384, "my_token": 416, "my_weight": [246, 399], "myatt": [1044, 1045], "mycach": [510, 511], "mycluster": 426, "myenugula": 1053, "myer": [1038, 1042], "myestim": [378, 422, 424, 425, 427, 428, 429, 430, 431], "myestimator0": 424, "myestimator1": 424, "mymultioutputestim": 378, "mypi": [376, 380, 394, 401, 1046], "myself": 376, "mysvmlightfil": 510, "mytag": 378, "mytransform": [378, 432], "m\u00e9hault": [1043, 1044], "m\u00f6rtberg": 1041, "m\u00fcller": [0, 391, 413, 537, 874, 1009, 1015, 1019, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "n": [2, 44, 45, 47, 48, 50, 51, 55, 56, 58, 69, 70, 73, 75, 76, 92, 103, 108, 112, 116, 119, 121, 124, 126, 128, 130, 131, 135, 137, 138, 142, 157, 164, 167, 171, 175, 180, 188, 190, 195, 198, 205, 212, 213, 216, 227, 229, 230, 232, 242, 243, 244, 247, 255, 257, 258, 268, 270, 273, 275, 276, 277, 279, 280, 283, 290, 293, 295, 308, 312, 314, 315, 321, 324, 326, 330, 344, 347, 358, 363, 370, 373, 374, 376, 380, 382, 384, 385, 390, 394, 395, 399, 405, 406, 408, 411, 412, 413, 414, 415, 416, 418, 419, 445, 446, 448, 449, 451, 470, 472, 475, 479, 490, 517, 518, 519, 520, 525, 530, 540, 542, 543, 549, 559, 560, 561, 562, 565, 566, 567, 568, 591, 592, 593, 594, 610, 611, 618, 631, 653, 675, 683, 696, 700, 703, 710, 711, 759, 809, 812, 814, 819, 820, 823, 844, 848, 849, 853, 873, 900, 902, 916, 917, 918, 919, 931, 950, 955, 956, 979, 983, 984, 994, 997, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1019, 1020, 1021, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "n1": 124, "n2": 124, "n4": 124, "n_": [112, 113, 190, 270, 322, 408, 413, 415, 650, 656, 689, 700, 997, 1001, 1005, 1007, 1008, 1012, 1015, 1017, 1020, 1021], "n_alpha": [217, 473, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 677, 679, 685, 686, 687, 688, 1038], "n_atom": 1036, "n_averag": 70, "n_bar": 183, "n_batch_iter_": 538, "n_best": 452, "n_bin": [62, 63, 65, 87, 212, 230, 311, 313, 317, 439, 440, 873, 1015], "n_bins_": 873, "n_bootstrap": [273, 1036], "n_bulk_repeat": 50, "n_byte": 243, "n_c": [408, 663], "n_call": [848, 849], "n_candid": [807, 808, 994], "n_candidates_": [282, 807, 808, 994], "n_candidates_0": 994, "n_candidates_i": 994, "n_categori": [317, 844, 882, 1015], "n_categorical_featur": [144, 563, 564, 636, 637], "n_categories_": 844, "n_center": [78, 514], "n_channel": [586, 587, 590], "n_class": [2, 46, 73, 119, 135, 137, 142, 143, 166, 168, 227, 233, 244, 247, 257, 277, 278, 279, 299, 300, 319, 356, 358, 359, 372, 376, 378, 390, 415, 438, 489, 490, 504, 517, 521, 525, 551, 552, 553, 555, 557, 559, 561, 563, 566, 569, 571, 596, 597, 607, 614, 638, 643, 662, 663, 670, 671, 672, 678, 679, 680, 681, 701, 711, 720, 722, 726, 739, 742, 745, 758, 792, 798, 803, 804, 807, 808, 818, 826, 829, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 850, 855, 857, 858, 865, 868, 875, 876, 879, 882, 889, 892, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 918, 920, 921, 939, 940, 1001, 1005, 1006, 1009, 1016, 1019, 1020, 1040, 1041, 1042, 1044, 1045, 1046, 1052], "n_classes_": [553, 555, 557, 559, 561, 566, 614, 836, 837, 916, 918, 1036, 1045, 1047], "n_classes_pr": [718, 759], "n_classes_tru": [718, 759], "n_classifi": [67, 571, 572], "n_cluster": [2, 58, 59, 60, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 121, 323, 352, 376, 390, 408, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 464, 513, 515, 714, 796, 797, 1035, 1039, 1041, 1043, 1044, 1046, 1049], "n_clusters_": [74, 83, 89, 97, 442, 446], "n_clusters_list": 79, "n_clusters_per_class": [68, 139, 166, 168, 267, 300, 305, 312, 372, 381, 517, 608, 610], "n_clusters_rang": 73, "n_clusters_tru": 95, "n_col": [46, 58, 121, 248, 423, 452, 454, 513, 515, 636], "n_column": [405, 452, 454], "n_column_clust": [452, 454, 515], "n_comp": [131, 192], "n_comparison": 270, "n_compon": [44, 45, 46, 52, 55, 80, 86, 91, 92, 93, 103, 106, 107, 116, 117, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 153, 192, 211, 232, 233, 234, 235, 236, 237, 239, 243, 244, 247, 251, 255, 256, 257, 258, 259, 260, 261, 269, 294, 299, 308, 315, 321, 323, 326, 327, 352, 378, 381, 382, 390, 409, 411, 413, 420, 452, 453, 463, 465, 483, 484, 485, 486, 528, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 643, 644, 645, 646, 692, 693, 694, 695, 696, 697, 698, 699, 700, 801, 802, 857, 864, 867, 900, 901, 902, 952, 997, 999, 1002, 1004, 1008, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1052, 1053], "n_components_": [106, 128, 390, 442, 446, 536, 540, 541, 542, 543, 544, 545, 900, 901, 1044, 1046], "n_components_fa": 128, "n_components_pca": 128, "n_components_pca_ml": 128, "n_components_rang": 243, "n_connected_compon": 464, "n_connected_components_": [442, 446, 1044], "n_core": 141, "n_core_sampl": [419, 445], "n_cpu": [364, 390], "n_cv": [412, 438], "n_cv_alpha": [655, 659], "n_cv_fold": [144, 316, 810, 827, 832, 835], "n_digit": 92, "n_dim": [479, 529, 531, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 1052], "n_dimens": [801, 802], "n_dimensions_of_x": [910, 911, 912, 913, 914], "n_dir": 54, "n_e": 408, "n_element": [418, 621], "n_encoded_featur": [881, 882], "n_error": 297, "n_error_outli": [226, 296, 339], "n_error_outliers_sgd": 226, "n_error_test": [226, 296, 339], "n_error_test_sgd": 226, "n_error_train": [226, 339], "n_error_train_sgd": 226, "n_estim": [47, 50, 64, 68, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 153, 154, 157, 182, 190, 233, 248, 252, 257, 267, 282, 312, 319, 321, 363, 389, 390, 415, 417, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 636, 807, 808, 994, 1011, 1012, 1032, 1043, 1051], "n_estimators_": [145, 561, 562], "n_estimators_ful": 145, "n_exampl": 48, "n_face": 248, "n_featur": [46, 48, 55, 63, 64, 65, 67, 68, 69, 70, 71, 76, 86, 92, 94, 95, 110, 111, 112, 113, 114, 119, 121, 128, 135, 137, 139, 141, 142, 166, 168, 169, 182, 183, 192, 194, 197, 198, 199, 207, 208, 211, 215, 216, 227, 229, 233, 239, 243, 244, 246, 255, 260, 267, 273, 277, 279, 280, 282, 283, 300, 305, 312, 319, 320, 321, 323, 325, 326, 327, 347, 351, 352, 353, 359, 363, 369, 370, 372, 376, 378, 381, 388, 389, 390, 399, 408, 410, 411, 413, 415, 416, 419, 420, 421, 423, 425, 426, 427, 430, 431, 432, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 490, 491, 492, 494, 496, 503, 506, 510, 511, 514, 517, 518, 521, 523, 525, 526, 528, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 704, 705, 706, 714, 729, 762, 763, 764, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 926, 952, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 997, 1001, 1006, 1008, 1009, 1015, 1019, 1020, 1021, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "n_feature_influ": 50, "n_features_": [168, 596, 597, 1048, 1050], "n_features_a": 857, "n_features_b": 857, "n_features_in_": [378, 390, 429, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 631, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 993, 1046, 1048, 1050, 1053], "n_features_max": 70, "n_features_missing_ind": 634, "n_features_new": [432, 443, 446, 534, 536, 538, 539, 541, 544, 545, 551, 569, 571, 572, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 632, 634, 639, 642, 643, 644, 645, 646, 857, 864, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 900, 901], "n_features_opt": 105, "n_features_out": 634, "n_features_out_": 887, "n_features_rang": 70, "n_features_to_comput": 1043, "n_features_to_select": [167, 169, 321, 417, 596, 605, 1047, 1049], "n_features_to_select_": 605, "n_features_with_miss": 633, "n_features_with_missing_": 631, "n_fold": [160, 651, 655, 657, 659, 663, 665, 667, 1036, 1037, 1041], "n_gram_rang": 1035, "n_group": [412, 813, 1041], "n_i": [1007, 1015], "n_imag": 268, "n_index": [850, 851, 852, 854, 856, 858, 859], "n_inform": [63, 65, 68, 139, 142, 166, 168, 194, 198, 215, 216, 267, 273, 283, 300, 305, 312, 319, 347, 372, 381, 517, 526, 555, 556, 557, 558, 566, 567, 608, 609, 610, 611, 612, 650, 651, 656, 664, 665, 666, 669, 685, 686, 687, 838, 926, 1006, 1043], "n_init": [58, 78, 79, 84, 91, 92, 95, 98, 232, 233, 234, 235, 320, 323, 352, 408, 444, 448, 450, 452, 453, 454, 460, 463, 694, 698, 801, 802, 1035, 1043, 1049, 1050, 1051], "n_init_rang": 95, "n_inlier": 239, "n_input_features_": 1048, "n_instanc": [50, 637], "n_iter": [46, 56, 104, 150, 171, 220, 271, 278, 290, 308, 342, 382, 389, 420, 455, 479, 534, 535, 546, 547, 548, 549, 650, 651, 656, 657, 664, 665, 666, 667, 685, 686, 687, 688, 689, 690, 691, 696, 698, 807, 808, 816, 818, 864, 866, 951, 952, 994, 1019, 1036, 1041, 1042, 1043, 1047, 1049, 1050, 1051, 1053], "n_iter_": [44, 124, 150, 220, 258, 390, 441, 448, 449, 450, 472, 473, 483, 484, 485, 533, 534, 535, 538, 539, 540, 541, 542, 545, 563, 564, 631, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 683, 684, 694, 696, 801, 802, 857, 865, 866, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 1039, 1042, 1043, 1045, 1048, 1049, 1051], "n_iter_no_chang": [47, 141, 145, 150, 220, 322, 351, 381, 390, 415, 561, 562, 563, 564, 670, 671, 672, 680, 681, 682, 865, 866, 1019, 1043, 1046], "n_iter_search": 278, "n_iter_without_progress": [233, 696, 1040, 1041], "n_iterations_": [282, 807, 808], "n_iters_": 1041, "n_job": [53, 88, 105, 106, 141, 142, 147, 148, 155, 168, 169, 182, 187, 188, 189, 190, 233, 235, 251, 264, 269, 271, 272, 274, 283, 287, 290, 319, 320, 321, 324, 347, 364, 376, 390, 415, 419, 438, 445, 447, 449, 451, 453, 456, 457, 458, 459, 462, 465, 468, 473, 533, 537, 538, 539, 541, 544, 545, 547, 548, 550, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 597, 605, 610, 611, 614, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 867, 870, 903, 904, 970, 972, 994, 1005, 1006, 1008, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1053], "n_k": [408, 552], "n_kernel": 616, "n_kernel_param": [614, 615], "n_knot": [44, 213, 322, 887, 1015, 1048], "n_l1_ratio": [651, 663, 665, 1038], "n_l1_ratios_": 663, "n_label": [52, 119, 247, 390, 488, 525, 717, 724, 730, 743, 744, 758, 760, 796, 797, 824, 1005, 1041, 1043], "n_labeled_point": [329, 330], "n_layer": [865, 866], "n_layers_": [865, 866], "n_leav": [464, 916, 917, 918, 919], "n_leaves_": [442, 446], "n_left": 565, "n_local_tri": 461, "n_m": 1021, "n_mask": 212, "n_missing_featur": 633, "n_missing_sampl": 183, "n_nearest_featur": [183, 631], "n_neighbor": [52, 80, 96, 101, 156, 182, 232, 233, 234, 236, 239, 249, 290, 292, 293, 296, 297, 298, 299, 302, 315, 319, 321, 351, 415, 453, 605, 610, 611, 632, 692, 693, 695, 697, 699, 700, 850, 851, 852, 854, 856, 857, 861, 903, 904, 995, 1002, 1008, 1011, 1018, 1042, 1049, 1051, 1052], "n_neighbors_": [695, 854], "n_neighbors_list": [249, 292], "n_neighbour": 1049, "n_node": [358, 442, 446, 464, 559, 560, 566, 567, 568, 916, 917, 918, 919, 958], "n_node_sampl": 358, "n_nodes_ptr": [559, 560, 566, 567, 568], "n_noise_": 83, "n_nonzero": 130, "n_nonzero_coef": [211, 528, 533, 539, 544, 547, 548, 550, 654, 668, 689, 690, 1053], "n_nonzero_coefs_": [668, 669, 1053], "n_nonzero_column": 353, "n_numerical_featur": 144, "n_order": 195, "n_original_featur": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "n_out": 568, "n_outlier": [112, 113, 151, 215, 239, 297], "n_output": [358, 390, 415, 425, 431, 432, 438, 443, 446, 466, 470, 483, 484, 485, 534, 536, 538, 539, 541, 544, 545, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 632, 634, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 725, 727, 732, 749, 750, 752, 754, 755, 757, 758, 789, 792, 794, 795, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 857, 858, 859, 864, 865, 866, 867, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 900, 901, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 940, 975, 1005, 1006, 1021, 1042, 1045], "n_output_featur": 632, "n_output_features_": 883, "n_outputs_": [553, 554, 559, 560, 566, 567, 568, 865, 866, 916, 917, 918, 919], "n_oversampl": [452, 454, 543, 546, 952, 1049], "n_pack": [2, 955, 956], "n_patch": [586, 587, 590], "n_permut": [276, 412, 833], "n_pixel": [248, 268], "n_point": [265, 848, 849], "n_points_per_clust": 99, "n_popul": [385, 973], "n_possible_iterations_": [807, 808], "n_predict": 50, "n_pt": 54, "n_q": 408, "n_quantil": [108, 188, 314, 885, 897, 1044], "n_quantiles_": 885, "n_queri": [692, 850, 851, 852, 854, 856, 858, 859, 860], "n_random_featur": 202, "n_redund": [63, 65, 68, 142, 166, 168, 267, 273, 300, 305, 312, 372, 381, 438, 517, 555, 557, 566, 838], "n_refin": 473, "n_region": 81, "n_regions_plu": 81, "n_regressor": 572, "n_relevant_featur": 207, "n_remaining_candidates_": [807, 808], "n_repeat": [138, 142, 148, 168, 187, 189, 190, 270, 284, 287, 319, 412, 517, 638, 819, 820, 1013], "n_required_iterations_": [807, 808], "n_resourc": 994, "n_resources_": [282, 807, 808, 994], "n_resources_0": 994, "n_resources_i": 994, "n_restarts_optim": [177, 178, 418, 614, 615], "n_retri": [489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 1049, 1053], "n_row": [46, 58, 121, 405, 423, 452, 454, 513, 515], "n_row_clust": [452, 454, 515], "n_run": [73, 95, 192, 352], "n_sampl": [46, 47, 50, 55, 62, 63, 64, 65, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 83, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 103, 108, 110, 111, 112, 113, 114, 117, 119, 121, 122, 126, 128, 135, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 151, 152, 161, 162, 168, 180, 182, 183, 186, 194, 196, 197, 198, 199, 200, 203, 205, 207, 208, 211, 212, 213, 215, 216, 220, 224, 227, 229, 230, 232, 233, 234, 235, 236, 237, 239, 243, 244, 246, 249, 256, 258, 259, 260, 261, 267, 268, 270, 273, 274, 277, 279, 280, 281, 282, 283, 285, 290, 300, 312, 313, 314, 317, 320, 321, 323, 325, 326, 327, 331, 338, 341, 342, 347, 351, 352, 359, 369, 373, 376, 378, 381, 385, 388, 389, 390, 399, 407, 408, 410, 411, 412, 413, 415, 419, 420, 421, 423, 425, 426, 427, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 496, 503, 506, 510, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 625, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 774, 775, 776, 777, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 924, 926, 939, 940, 952, 954, 956, 966, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 994, 997, 1001, 1005, 1006, 1008, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "n_samples1": 874, "n_samples2": 874, "n_samples_": 543, "n_samples_1": [342, 1020], "n_samples_2": [342, 1020], "n_samples_a": [796, 797], "n_samples_fit": [431, 466, 483, 484, 485, 556, 558, 560, 562, 564, 567, 570, 572, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 692, 841, 842, 850, 851, 852, 854, 856, 858, 859, 860, 866, 909, 911, 914, 917, 919], "n_samples_fit_": [290, 850, 851, 852, 854, 856, 858, 859, 860], "n_samples_i": [616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785], "n_samples_per_cent": 95, "n_samples_rang": [111, 243], "n_samples_seen": 888, "n_samples_seen_": [536, 877, 878, 888, 1043], "n_samples_test": [283, 910, 911, 912, 913, 914, 1008, 1015], "n_samples_train": [283, 910, 911, 912, 913, 914], "n_samples_transform": [290, 852, 860], "n_samples_x": [615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785], "n_seed": 462, "n_selected_featur": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "n_skips_": 1042, "n_skips_invalid_data_": 675, "n_skips_invalid_model_": 675, "n_skips_no_inliers_": 675, "n_spline": [44, 887], "n_split": [44, 53, 141, 146, 150, 182, 183, 187, 257, 265, 270, 272, 275, 280, 284, 287, 326, 332, 340, 347, 359, 412, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 831, 1041, 1043, 1053], "n_splits_": [804, 807, 808, 818], "n_steps_": [124, 450, 539, 540, 1048], "n_subpopulation_": 683, "n_subsampl": [683, 940], "n_subsets_of_featur": 597, "n_support_": [910, 911, 912, 913, 914, 1020, 1045], "n_support_vector": 47, "n_sv": [910, 911, 912, 913, 914, 1020, 1045], "n_svd_vec": [452, 454], "n_t": [559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919], "n_t_l": [559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919], "n_t_r": [559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919], "n_target": [390, 411, 483, 484, 485, 486, 526, 558, 615, 647, 650, 651, 654, 655, 656, 657, 658, 660, 661, 664, 665, 666, 667, 668, 669, 675, 676, 677, 678, 679, 685, 688, 689, 690, 691, 1006, 1047, 1049, 1051], "n_task": [207, 1001], "n_test": [48, 50, 70, 138, 270, 1035, 1038], "n_test_docu": 48, "n_test_po": 48, "n_threshold": [639, 731, 786, 793], "n_tick": [810, 827, 832, 835], "n_top": 278, "n_top_word": 55, "n_topic": [381, 538, 1042], "n_tot": 703, "n_total_sampl": [329, 330], "n_train": [48, 50, 70, 138, 270, 1035, 1038], "n_train_po": 48, "n_transformed_featur": 868, "n_tree": 47, "n_trees_per_iter": 563, "n_trees_per_iteration_": [561, 562, 563, 564], "n_trials_": 675, "n_uncorrelated_featur": 276, "n_unequ": 703, "n_unique_categori": 316, "n_unique_label": [733, 734, 742, 787, 788, 791, 968], "n_unique_tick": [810, 832], "n_valu": [827, 835, 1043], "n_values_": 1043, "n_values_feature_j": 637, "n_x": [88, 588], "n_y": [88, 588, 1007, 1015], "n_z": 588, "na": [631, 632, 633, 634, 773, 782, 932, 934, 935, 1045, 1046, 1049, 1050, 1051, 1052], "nabarun": 1043, "nabla": 1009, "nabsolut": 218, "nacross": 284, "nadeau": [270, 1043], "nadia": 1047, "nadim": 1048, "nadirhan": 1049, "nadya": 1041, "nagarajan": [649, 1001], "nagarjuna": [1042, 1043], "nagasaka": 1048, "naghshhnejad": [1045, 1046], "naipawat": [1049, 1050], "naiv": [2, 33, 65, 68, 153, 270, 272, 289, 351, 353, 371, 406, 415, 416, 438, 546, 843, 844, 845, 846, 847, 999, 1000, 1008, 1013, 1027, 1031, 1035, 1036, 1037, 1038, 1043, 1045, 1048, 1050], "naive_bay": [2, 48, 62, 63, 65, 68, 153, 157, 271, 272, 351, 359, 365, 371, 415, 438, 571, 843, 844, 845, 846, 847, 869, 999, 1006, 1007, 1036, 1037, 1039, 1040, 1041, 1042], "naive_linear_pipelin": 44, "naive_linear_predict": 44, "naivebay": 365, "naivebayesna": 396, "naivelycalibratedlinearsvc": [63, 65], "najera": 1042, "najork": [730, 760, 1005], "naka": 1048, "nakamura": 1049, "nakano": [1042, 1043], "nalepa": 1042, "naman": 1052, "name": [2, 46, 47, 49, 50, 51, 52, 56, 58, 63, 65, 67, 68, 73, 80, 92, 96, 104, 106, 108, 114, 122, 127, 138, 139, 140, 141, 144, 147, 150, 155, 187, 189, 202, 210, 212, 214, 216, 218, 219, 227, 229, 230, 232, 233, 239, 245, 246, 248, 249, 253, 257, 264, 265, 267, 271, 273, 274, 277, 279, 280, 290, 298, 299, 305, 306, 312, 314, 316, 323, 327, 333, 345, 351, 352, 353, 364, 365, 370, 371, 374, 376, 378, 380, 381, 383, 384, 390, 394, 399, 405, 408, 412, 415, 416, 418, 422, 424, 429, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 512, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 579, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 701, 702, 703, 704, 706, 712, 713, 715, 717, 736, 737, 746, 783, 784, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 816, 818, 822, 826, 827, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 933, 934, 935, 938, 942, 943, 944, 945, 947, 960, 961, 962, 964, 967, 974, 988, 992, 993, 994, 999, 1001, 1005, 1006, 1012, 1013, 1015, 1021, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "name_to_color": 316, "named_estim": [569, 570, 571, 572], "named_estimators_": [569, 570, 571, 572, 1043, 1045], "named_step": [106, 117, 167, 409, 596, 597, 600, 868, 869, 908, 909, 1001, 1042, 1044], "named_transform": [867, 1050], "named_transformers_": 465, "namedtupl": [2, 621, 1051], "namespac": 404, "namiya": 1042, "nan": [2, 108, 144, 150, 182, 183, 249, 251, 265, 273, 319, 325, 326, 327, 363, 368, 385, 390, 415, 447, 469, 498, 557, 558, 559, 563, 564, 566, 596, 597, 600, 606, 609, 612, 631, 632, 633, 634, 639, 716, 717, 718, 725, 726, 727, 728, 732, 733, 734, 773, 782, 787, 788, 789, 791, 804, 807, 808, 810, 818, 827, 830, 831, 832, 835, 877, 878, 882, 884, 885, 888, 889, 893, 896, 897, 899, 925, 932, 933, 934, 935, 979, 994, 1005, 1015, 1021, 1031, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "nan_euclidean": [632, 766, 782, 783, 784], "nan_euclidean_dist": [2, 319, 766, 995, 1045], "nandana": [1041, 1042, 1043], "nanshan": 1048, "nanta": 1038, "nanxin": 1043, "nanyang": 373, "naois": [1050, 1052], "naoki": [1037, 1047], "naoya": [1041, 1042, 1043, 1044], "naozin555": 1048, "narasimhan": 855, "nardelli": 1038, "narendra": [1046, 1052], "narendramukherje": 1046, "narendran": 1043, "narin": [1042, 1043], "narinek": [1042, 1043], "narr": [376, 390, 662, 908, 913, 1035, 1036], "narrai": 597, "narrow": [53, 138, 147, 310, 312, 381, 848, 849], "nartayxd": 1049, "nasa": 373, "nasdaq": 52, "naser": 1045, "nasir": 1043, "nass": 1050, "nastegiano": 1049, "nat": [610, 611, 708, 759, 761, 1049], "natasha": 1045, "natchiappan": [1048, 1049], "nate": [1041, 1042, 1048], "nath": 1043, "nathan": [537, 1043, 1047, 1050, 1053], "nathaniel": [1042, 1043, 1045], "nathansquan": 1049, "nati": 1050, "nation": [51, 112, 303, 371, 855], "nativ": [44, 150, 154, 176, 182, 264, 364, 371, 390, 402, 415, 498, 563, 564, 840, 841, 1001, 1005, 1006, 1024, 1045, 1047], "native_result": 144, "natl": [693, 697, 1002], "natur": [44, 65, 68, 141, 147, 178, 187, 188, 192, 198, 212, 213, 229, 230, 236, 249, 255, 261, 279, 289, 376, 378, 390, 413, 415, 416, 419, 445, 451, 458, 553, 593, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 696, 708, 745, 759, 761, 850, 851, 852, 854, 856, 858, 859, 860, 887, 950, 1001, 1002, 1004, 1005, 1008, 1010, 1015, 1019, 1024, 1035, 1043], "naul": [1040, 1041], "nav": 52, "navarret": [1043, 1044, 1045], "navarro": 1050, "navi": [70, 111, 125, 129, 130, 154, 194, 215, 223, 235, 256, 257, 258, 261, 277, 279, 295, 302, 331], "navig": [384, 1037], "navin": 904, "navistar": 52, "navkal": 1043, "navractil": 1005, "navratil2007": 1005, "nawazish": [1050, 1051], "naziya": 1053, "nb": [48, 128, 153, 359, 845, 1007], "nbclaim": 230, "nber": 50, "nbr": [856, 1008], "nbrown": 1053, "nbrs_": [692, 693], "nbyte": [87, 243], "nca": [233, 298, 299, 300, 857, 1008], "nca_pip": 1008, "ncall": 382, "ncanip": 857, "nclass": 265, "ncluster": 80, "ncol": [44, 45, 53, 67, 69, 71, 87, 91, 100, 121, 126, 131, 145, 188, 209, 212, 213, 214, 220, 230, 232, 233, 242, 249, 264, 266, 272, 273, 281, 283, 284, 290, 293, 306, 311, 312, 314, 315, 324, 346, 347, 352, 372], "ncorrect": 270, "ncsu": 373, "ncv": [452, 454], "nd": [1048, 1052], "ndarrai": [87, 92, 212, 268, 269, 270, 376, 377, 378, 382, 383, 404, 416, 419, 420, 423, 424, 426, 429, 430, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 499, 502, 503, 504, 505, 506, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 719, 722, 725, 726, 727, 728, 731, 732, 742, 749, 750, 752, 755, 757, 758, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 931, 932, 933, 934, 939, 940, 949, 951, 952, 953, 954, 959, 966, 968, 969, 973, 976, 977, 979, 980, 981, 982, 985, 990, 991, 993, 1005, 1020, 1038, 1042, 1045, 1046, 1049, 1050, 1051, 1052], "ndata": 276, "ndataset": [227, 312], "ndbscan": 99, "ndcg": [730, 760, 1005, 1042], "ndcg_score": [2, 730, 1005, 1042, 1045, 1050, 1051], "ndenumer": 224, "ndepend": 188, "ndim": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 934, 935], "ndimag": [54, 81, 82, 88, 308], "ndingwal": 1042, "ndirangu": [1045, 1049], "ne": [1005, 1008], "neal": [1001, 1048], "near_uniqu": 317, "nearbi": [408, 1008], "nearer": [2, 852, 860, 1008], "nearest": [2, 34, 52, 54, 68, 69, 75, 76, 84, 85, 88, 92, 95, 100, 105, 110, 114, 121, 124, 151, 161, 175, 183, 196, 204, 224, 228, 234, 237, 248, 249, 263, 294, 296, 299, 300, 307, 308, 315, 340, 345, 349, 368, 373, 385, 388, 390, 408, 414, 415, 419, 422, 432, 445, 447, 449, 451, 453, 458, 462, 463, 498, 504, 506, 610, 611, 631, 632, 634, 635, 639, 692, 693, 695, 696, 700, 796, 797, 804, 834, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 868, 869, 873, 888, 978, 1002, 1011, 1020, 1026, 1027, 1031, 1035, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1047], "nearest_neighbor": [80, 453, 695], "nearest_neighbor_algorithm": [850, 858, 859], "nearest_neighbors_algorithm": [851, 856], "nearestcentroid": [2, 301, 351, 1006, 1008, 1035, 1039, 1042, 1047, 1050], "nearestneighbor": [2, 290, 323, 394, 408, 419, 445, 447, 449, 462, 692, 693, 697, 850, 851, 852, 854, 858, 859, 860, 1008, 1035, 1039, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "nearli": [38, 63, 273, 371, 390, 768, 1005, 1008, 1017], "neat": 1035, "necess": [1002, 1008], "necessari": [47, 54, 139, 198, 212, 217, 255, 264, 270, 271, 277, 292, 344, 363, 371, 374, 375, 376, 377, 379, 380, 384, 388, 408, 410, 415, 453, 463, 489, 490, 492, 494, 495, 496, 497, 499, 536, 648, 649, 650, 656, 660, 661, 664, 665, 666, 667, 668, 669, 675, 677, 679, 680, 695, 699, 799, 871, 880, 891, 895, 901, 994, 997, 1001, 1004, 1007, 1015, 1021, 1035, 1043], "necessarili": [44, 68, 105, 124, 187, 212, 220, 230, 244, 245, 256, 277, 312, 352, 370, 402, 404, 406, 408, 415, 631, 856, 858, 859, 860, 999, 1002, 1004, 1005], "need": [0, 31, 44, 49, 52, 69, 81, 87, 89, 91, 114, 123, 133, 141, 144, 146, 147, 148, 150, 155, 169, 171, 176, 182, 183, 187, 200, 214, 229, 230, 233, 239, 242, 244, 246, 249, 250, 255, 256, 260, 261, 264, 268, 270, 272, 273, 275, 287, 289, 290, 292, 315, 319, 326, 332, 340, 352, 357, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 389, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 424, 438, 442, 446, 450, 465, 466, 468, 505, 543, 553, 574, 585, 586, 591, 592, 593, 594, 631, 639, 642, 643, 644, 646, 653, 670, 672, 675, 680, 683, 696, 715, 724, 725, 726, 727, 728, 785, 789, 801, 802, 804, 807, 808, 818, 819, 820, 829, 837, 840, 848, 849, 865, 868, 871, 875, 880, 881, 885, 903, 910, 913, 925, 945, 961, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1021, 1025, 1029, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "needl": 373, "needs_proba": [1044, 1052], "needs_threshold": 1052, "neeraj": 1042, "neg": [2, 43, 44, 46, 62, 94, 108, 110, 117, 141, 146, 147, 152, 177, 184, 186, 187, 193, 203, 209, 210, 212, 230, 259, 260, 264, 267, 270, 273, 277, 279, 280, 284, 290, 310, 314, 323, 327, 351, 382, 390, 391, 408, 412, 415, 416, 417, 419, 420, 431, 441, 445, 453, 466, 470, 483, 484, 485, 489, 533, 535, 537, 538, 539, 540, 542, 544, 546, 549, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 591, 594, 595, 598, 599, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 681, 682, 683, 684, 691, 702, 703, 708, 709, 716, 717, 719, 720, 722, 723, 725, 726, 727, 728, 731, 733, 734, 735, 739, 742, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 786, 787, 788, 789, 791, 794, 795, 797, 801, 802, 810, 827, 829, 834, 841, 842, 851, 854, 859, 866, 875, 884, 886, 887, 892, 896, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 935, 950, 952, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1019, 1020, 1026, 1030, 1031, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "neg_": [810, 827, 1041], "neg_brier_scor": [1005, 1045], "neg_label": [264, 284, 875, 892], "neg_log_loss": [65, 264, 1005], "neg_lr": 273, "neg_lr_bas": 273, "neg_lr_base_std": 273, "neg_max_error": 1005, "neg_mean_absolute_error": [44, 155, 214, 1005], "neg_mean_absolute_percentage_error": [53, 144, 1005, 1013], "neg_mean_gamma_devi": 1005, "neg_mean_pinball_loss_05p_scor": 147, "neg_mean_pinball_loss_95p_scor": 147, "neg_mean_poisson_devi": 1005, "neg_mean_squared_error": [182, 183, 214, 245, 285, 326, 831, 1005, 1013, 1041], "neg_mean_squared_log_error": 1005, "neg_median_absolute_error": 1005, "neg_root_mean_squared_error": [44, 150, 316, 1005], "neg_root_mean_squared_log_error": 1005, "neg_root_mean_squared_log_error_scor": 1052, "negat": [390, 810, 827, 1005], "negate_scor": [245, 810, 827], "negative_class": 716, "negative_likelihood_ratio": [273, 716], "negative_linestyl": 239, "negative_loglik": 110, "negative_mahal_dist": 470, "negative_outlier_factor": 854, "negative_outlier_factor_": [249, 297, 854, 1011], "neglig": [187, 1008, 1038, 1052], "neigh": [785, 850, 851, 852, 854, 856, 858, 859, 860], "neigh_dist": [850, 851, 852, 854, 856, 858, 859, 860], "neigh_ind": [850, 851, 852, 854, 856, 858, 859, 860], "neighbor": [2, 52, 68, 75, 80, 82, 94, 100, 105, 150, 151, 153, 156, 161, 182, 183, 196, 233, 234, 236, 237, 239, 248, 249, 263, 294, 295, 296, 297, 299, 300, 301, 303, 307, 321, 323, 324, 351, 368, 373, 385, 388, 390, 394, 408, 414, 415, 416, 419, 422, 432, 442, 445, 446, 447, 449, 451, 453, 458, 459, 462, 464, 498, 504, 506, 565, 572, 605, 610, 611, 631, 632, 635, 692, 693, 694, 695, 696, 697, 699, 700, 785, 804, 834, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 868, 869, 888, 904, 912, 978, 1006, 1011, 1026, 1027, 1030, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "neighbor_feat_idx": 631, "neighborhood": [2, 89, 114, 129, 161, 184, 232, 290, 291, 292, 293, 301, 302, 373, 390, 408, 413, 419, 445, 451, 458, 504, 506, 517, 543, 551, 632, 635, 700, 834, 850, 851, 854, 856, 857, 858, 859, 860, 862, 868, 869, 888, 1002, 1011, 1026, 1027, 1031, 1044], "neighborhoodcomponentanalysi": 299, "neighborhoodcomponentsanalysi": [2, 233, 298, 299, 300, 1008, 1044, 1049, 1053], "neighbors_algorithm": [692, 693], "neighborsbas": [1047, 1050], "neighborsclassifi": [856, 858, 859, 860, 1035], "neighborsregressor": 1035, "neighbour": [447, 463, 696, 1010], "neighbourhood": [857, 1008], "neighbourhood_components_analysi": 857, "neil": 1047, "neill": 1047, "neither": [183, 187, 319, 351, 359, 388, 406, 438, 597, 632, 938, 1008, 1021], "nelder": 1001, "nell": [0, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047], "nelson": [0, 1041, 1042, 1047, 1053], "nemour": 52, "neo": 1043, "nep": 1045, "neptun": 1024, "neq": [408, 1005, 1007, 1015], "ness": [183, 230], "nest": [126, 135, 184, 202, 246, 262, 264, 265, 287, 326, 364, 382, 390, 394, 408, 412, 418, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 463, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 506, 521, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 809, 818, 826, 830, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1005, 1008, 1026, 1035, 1036, 1039, 1041, 1042, 1043, 1049], "nested_lin": 275, "nested_scor": 275, "nesterov": [306, 865, 866, 1009, 1051, 1052], "nesterovs_momentum": [306, 865, 866], "nestor": 1050, "net": [2, 26, 68, 184, 193, 198, 199, 202, 204, 207, 223, 246, 283, 382, 412, 472, 473, 479, 503, 526, 559, 560, 561, 562, 566, 567, 568, 650, 651, 656, 661, 662, 663, 664, 665, 666, 667, 672, 680, 682, 685, 686, 688, 864, 916, 917, 918, 919, 994, 1005, 1010, 1019, 1026, 1027, 1029, 1031, 1035, 1040, 1044, 1045, 1047], "netbsd": 1035, "neto": [593, 734, 1053], "nettei": 1048, "network": [35, 46, 249, 307, 363, 364, 365, 370, 371, 380, 390, 391, 402, 408, 413, 415, 420, 498, 535, 537, 569, 570, 700, 745, 865, 866, 1001, 1003, 1005, 1019, 1021, 1024, 1027, 1030, 1031, 1035, 1049, 1053], "networkx": [56, 385], "neural": [35, 45, 46, 68, 270, 307, 390, 402, 412, 413, 415, 420, 535, 537, 540, 542, 549, 569, 570, 643, 649, 700, 745, 801, 857, 864, 865, 866, 874, 997, 1001, 1002, 1003, 1005, 1008, 1011, 1015, 1019, 1021, 1024, 1027, 1029, 1030, 1031, 1035, 1047], "neural_network": [2, 68, 184, 188, 250, 304, 305, 306, 307, 308, 365, 388, 864, 865, 866, 1006, 1009, 1026, 1037, 1052], "neuro": 1024, "neurodebian": 0, "neuroimag": [1023, 1029], "neuron": [865, 866, 1003, 1009], "neutral": 720, "nevalu": 155, "never": [141, 247, 327, 359, 376, 378, 385, 388, 402, 407, 408, 409, 411, 412, 451, 458, 525, 557, 558, 559, 566, 868, 869, 993, 997, 1015, 1045, 1048], "nevertheless": [44, 190, 415], "new": [2, 44, 47, 48, 50, 84, 90, 92, 94, 103, 104, 127, 128, 135, 137, 139, 140, 141, 145, 147, 150, 154, 155, 166, 169, 171, 177, 183, 189, 190, 212, 218, 226, 239, 246, 253, 264, 269, 272, 277, 289, 294, 296, 320, 323, 326, 327, 330, 339, 344, 359, 364, 365, 370, 371, 373, 374, 375, 378, 379, 380, 382, 384, 385, 389, 390, 391, 394, 402, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 433, 438, 439, 441, 443, 444, 446, 448, 449, 450, 453, 463, 464, 465, 473, 483, 484, 485, 506, 510, 511, 536, 543, 546, 557, 558, 559, 560, 565, 566, 567, 568, 584, 605, 634, 635, 639, 644, 645, 646, 649, 650, 656, 692, 693, 694, 701, 702, 704, 705, 706, 792, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 838, 854, 855, 877, 878, 883, 884, 885, 887, 888, 889, 896, 897, 905, 923, 932, 937, 974, 979, 994, 995, 997, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1015, 1017, 1018, 1019, 1020, 1025, 1029, 1031, 1033, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "new_data": [294, 378], "new_valu": [569, 570, 571, 572], "newaxi": [52, 54, 58, 62, 78, 114, 130, 136, 172, 196, 203, 213, 214, 215, 217, 218, 229, 242, 244, 285, 295, 302, 357, 405, 538, 1001], "newei": 1043, "newer": [171, 375, 394, 413], "newgroups20": 227, "newli": [374, 378, 389, 415, 464, 1012, 1041, 1042, 1050], "newsgroup": [2, 47, 55, 58, 243, 271, 333, 352, 353, 369, 405, 416, 489, 490, 1031], "newsgroups_test": 371, "newsgroups_train": [371, 489], "newsgroups_vector": 490, "newsl": [889, 1015], "newslett": 370, "newswir": 371, "newton": [212, 230, 308, 614, 652, 662, 663, 673, 684, 865, 866, 1001, 1039, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "newton_cg": 1045, "next": [47, 63, 94, 112, 143, 144, 148, 158, 178, 186, 190, 206, 212, 240, 246, 248, 252, 253, 257, 265, 276, 289, 315, 316, 317, 321, 330, 351, 355, 358, 359, 374, 376, 378, 380, 396, 402, 405, 408, 409, 412, 415, 510, 511, 614, 638, 696, 702, 704, 706, 785, 801, 802, 834, 970, 994, 998, 1004, 1005, 1015, 1029, 1032, 1035, 1048, 1049], "nezar": 1045, "nff": 703, "nfit": 330, "nfkd": [591, 592, 594, 1045], "nfor": 247, "nfrom": 176, "nft": 703, "ng": [408, 413, 695, 854, 1009, 1011, 1046], "ngiam": 1009, "ngo": 1047, "ngram_rang": [271, 333, 416, 591, 592, 594], "ngram_vector": 416, "ngroup": 265, "ngshya": 1046, "nguyen": [1045, 1046, 1049, 1050], "nguy\u1ec5n": 1050, "ni": [1041, 1046], "nic": 1048, "nice": [44, 101, 213, 246, 310, 363, 413], "nicer": 635, "nichol": 1039, "nichola": [1043, 1044, 1046], "nicholson": [1041, 1042, 1043], "nick": [373, 1035, 1041, 1042, 1043, 1044], "nicki": 1049, "nickledav": 1041, "nicknam": 371, "nico": [1041, 1048], "nicol": 1042, "nicola": [0, 169, 397, 662, 1001, 1018, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "nicolashug": 1044, "nicolasservel": 1046, "nicolau": 1043, "nicula": [0, 121, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "niculescu": [63, 65, 406, 438, 440], "nidhin": 1045, "niederb\u00fchl": 1043, "niederhut": [1043, 1045], "nielsen": [747, 1043], "nielsenmarkus11": [1042, 1043], "nigam": [843, 1007], "nigel": 1048, "night": 53, "nightli": [0, 364, 379, 380], "nightwalkx": 1051, "nihal": 1050, "nihar": 1043, "niket": 1049, "nikhil": 1049, "nikita": [1042, 1043, 1045, 1048, 1049, 1050], "nikla": [1045, 1046], "nikolai": [1038, 1039, 1040, 1041, 1043, 1044, 1049, 1051], "nil": 1047, "nilearn": 1024, "nilesh": 1043, "nilotp": [639, 641], "nima": 1050, "nima10khodaveisi": 1050, "ninertia": 98, "ningchi": 1041, "ninh": 192, "ninja": [374, 1029], "nip": [128, 373, 517, 543, 568, 645, 1005], "nipal": [411, 484, 485], "nipy_spectr": [52, 75, 81, 82, 85, 86, 94, 95], "nirvan": [1043, 1047], "nishan": 1045, "nishihara": 1047, "nishu": 1051, "nist": [373, 1005], "nistir": 373, "nit": 376, "nithish": 1053, "nitinramvelraj": 1050, "nitish": 1042, "nitya": 1045, "niuk": 1051, "niyogi": 1002, "nizam": 1043, "nizhibitski": 1036, "nk": 700, "nkish": 1046, "nkmean": 80, "nl": [53, 382], "nl1_ratio": 204, "nlasso": 198, "nlathia": 1041, "nlearn": 306, "nlog": 177, "nlogn": 696, "nlp": [371, 413, 416, 843, 847, 1003, 1029], "nls_max_it": 1040, "nltk": [416, 1023, 1024], "nm": 363, "nmcd": 112, "nmd": 235, "nmean": 125, "nmf": [2, 11, 55, 105, 382, 416, 537, 540, 546, 549, 1030, 1031, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "nmf_estim": 121, "nmi": [73, 408, 721, 740, 741, 761], "nmixtur": 80, "nmle": 112, "nmse": [45, 285], "nmslib": 290, "nmslib_": 290, "nmslibtransform": 290, "nn": [248, 416, 699], "nn_candid": 282, "nn_compon": [243, 244], "nn_sampl": [243, 282], "nndsvd": [413, 540, 542, 549, 1044, 1047], "nndsvda": [55, 413, 540, 542, 549, 1044, 1047], "nndsvdar": [413, 540, 542, 549, 1044], "nneq": 703, "nnl": [208, 661], "nnlnr": [1050, 1051], "nnmf": [416, 1030, 1031, 1035], "nntp": 371, "nnz": [199, 352, 371, 703], "no_chang": 905, "no_interact": [563, 564, 1050], "no_mathjax": 376, "no_structur": [80, 96], "no_valid": [927, 993], "no_weight": 225, "no_weights_handl": 225, "noa": [1046, 1052], "noah": 1001, "noc": 52, "noced": 662, "nodar": 1048, "node": [2, 52, 77, 144, 148, 198, 319, 325, 326, 355, 358, 384, 385, 408, 410, 413, 415, 442, 443, 446, 464, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 654, 658, 660, 686, 687, 696, 848, 849, 916, 917, 918, 919, 920, 922, 958, 1008, 1010, 1011, 1012, 1021, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1052], "node_count": [319, 355, 358, 916, 917, 918, 919], "node_depth": 358, "node_id": [358, 920, 922], "node_idx": 358, "node_ind": 358, "node_index": 358, "node_position_model": 52, "noel": [0, 398, 1035, 1036, 1037, 1038, 1039, 1047], "noelano": 1047, "nof": 151, "nogil": 377, "noinfo": 249, "nois": [45, 50, 54, 59, 60, 65, 68, 70, 76, 80, 83, 86, 88, 89, 95, 96, 101, 108, 117, 121, 122, 124, 126, 128, 136, 138, 147, 152, 153, 170, 171, 172, 176, 180, 184, 194, 196, 197, 198, 202, 203, 208, 210, 211, 214, 215, 216, 217, 229, 235, 237, 239, 241, 242, 245, 270, 278, 283, 285, 302, 305, 306, 312, 317, 320, 326, 346, 357, 359, 372, 378, 381, 406, 408, 413, 415, 417, 418, 419, 445, 447, 453, 513, 515, 516, 517, 518, 519, 520, 524, 526, 527, 532, 534, 536, 543, 609, 610, 611, 612, 615, 617, 618, 619, 620, 621, 625, 626, 628, 629, 648, 649, 653, 654, 655, 657, 658, 659, 660, 667, 668, 669, 675, 683, 689, 690, 696, 885, 897, 903, 926, 998, 1000, 1001, 1002, 1005, 1008, 1018, 1026, 1036, 1041, 1046, 1048, 1049], "noise_coef": 88, "noise_kernel": 176, "noise_level": [176, 177, 616, 629], "noise_level_bound": [176, 177, 629], "noise_level_grid": 177, "noise_std": 178, "noise_vari": [200, 534, 660, 1001, 1049], "noise_variance_": [121, 200, 534, 536, 543, 660, 1042, 1049], "noise_variance_init": 534, "noiseless": [124, 1003], "noisi": [45, 70, 83, 89, 96, 122, 135, 165, 171, 177, 198, 211, 214, 235, 242, 261, 271, 277, 279, 280, 283, 315, 357, 359, 408, 416, 418, 419, 445, 447, 451, 523, 526, 952, 1000, 1002, 1008, 1020], "noisier": 1002, "noisili": 188, "noisy_circl": [80, 96], "noisy_moon": [80, 96], "noiz": 116, "nolan": 1052, "noll": [212, 230], "nomenclatur": [1001, 1041], "nomin": [188, 370, 390, 391, 415, 416, 584, 585, 720, 1015, 1025], "non": [0, 2, 26, 43, 45, 46, 49, 50, 53, 54, 62, 63, 65, 70, 71, 73, 83, 91, 96, 108, 112, 114, 122, 123, 124, 126, 137, 144, 152, 153, 155, 165, 166, 168, 175, 177, 183, 184, 186, 187, 188, 189, 190, 193, 194, 198, 199, 201, 203, 206, 207, 209, 210, 211, 213, 214, 218, 226, 227, 228, 230, 235, 236, 240, 241, 242, 243, 245, 249, 255, 257, 261, 262, 263, 264, 265, 270, 279, 287, 290, 294, 296, 308, 310, 312, 314, 315, 320, 321, 322, 323, 325, 326, 333, 335, 337, 342, 343, 344, 347, 348, 351, 352, 353, 358, 359, 363, 364, 368, 371, 372, 376, 377, 378, 381, 382, 384, 385, 388, 390, 391, 402, 406, 408, 409, 412, 414, 415, 416, 417, 418, 420, 438, 442, 446, 447, 451, 453, 457, 463, 464, 465, 466, 468, 469, 489, 498, 499, 505, 506, 510, 528, 534, 537, 538, 540, 542, 546, 549, 551, 553, 554, 555, 559, 560, 561, 562, 563, 564, 566, 567, 568, 574, 591, 592, 594, 595, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 635, 639, 642, 647, 654, 656, 661, 662, 663, 664, 668, 669, 670, 671, 672, 673, 676, 680, 681, 682, 689, 690, 691, 692, 693, 694, 695, 696, 698, 702, 703, 706, 710, 711, 716, 719, 721, 723, 724, 730, 731, 732, 739, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 782, 786, 789, 792, 793, 794, 795, 798, 801, 802, 804, 805, 809, 811, 812, 813, 814, 816, 822, 830, 834, 837, 856, 858, 859, 860, 863, 868, 869, 871, 872, 873, 876, 880, 881, 882, 883, 884, 885, 887, 888, 895, 896, 897, 898, 899, 901, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 933, 934, 935, 950, 952, 956, 959, 967, 994, 995, 996, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "non_determinist": [378, 927, 1049], "non_neg": [585, 1042], "non_negative_factor": [2, 1044, 1046, 1047, 1048, 1052], "non_nest": 275, "non_nested_scor": 275, "non_nested_scores_lin": 275, "non_noisy_label": 325, "non_outliers_mask": 310, "non_zero": [47, 52], "nonblasdotwarn": 1047, "none": [44, 48, 49, 50, 53, 56, 64, 67, 70, 75, 77, 78, 80, 86, 89, 90, 96, 123, 126, 130, 139, 143, 144, 146, 149, 150, 162, 172, 178, 179, 188, 190, 194, 212, 213, 220, 223, 230, 232, 245, 246, 247, 249, 263, 265, 270, 271, 282, 295, 297, 301, 314, 317, 321, 322, 330, 333, 338, 340, 341, 344, 345, 346, 351, 352, 371, 372, 373, 376, 378, 383, 385, 390, 399, 402, 408, 412, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 505, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 711, 712, 713, 715, 716, 717, 718, 720, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 739, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 927, 931, 932, 933, 934, 935, 937, 938, 939, 940, 943, 945, 946, 947, 951, 952, 955, 956, 958, 959, 963, 964, 967, 970, 972, 973, 975, 978, 979, 985, 988, 989, 991, 993, 994, 1001, 1005, 1015, 1018, 1021, 1031, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "nonecheck": 377, "nonetheless": [390, 1005], "nonexist": 636, "nonflavanoid": 373, "nonlinear": [285, 322, 648, 692, 693, 697, 700, 874, 1001, 1002, 1010, 1015], "nonmetr": [694, 698, 1002], "nonneg": [408, 413, 454, 540, 542, 549, 885], "nonner": 1046, "nono": 396, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 396, "nonoisomapisomapspectralembeddingspectr": 396, "nonojustlookingjust": 396, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 396, "nonolinearsvclinear": 396, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 396, "nonopredict": 396, "nonopredictingstructurepredict": 396, "nonosvcsvcensembleclassifiersensembl": 396, "nonosvr": 396, "nonotoughlucktough": 396, "nonoverlap": 373, "nonparametr": [417, 418, 610, 611], "nonzero": [56, 58, 130, 211, 243, 274, 353, 405, 419, 445, 525, 526, 533, 539, 544, 550, 591, 594, 689, 690, 703, 850, 851, 854, 856, 858, 859, 1005], "nonzero_coef": 1001, "noptic": 99, "noptimum": 177, "noqa": [101, 127, 147, 169, 182, 183, 188, 232, 234, 281, 282, 321, 351, 380, 582, 583, 631, 807, 808, 994, 1044], "nor": [147, 273, 351, 359, 363, 381, 388, 406, 416, 438, 447, 597, 938, 1009, 1021, 1046], "norbert": [0, 366, 1037, 1047, 1048, 1049], "nordbi": 1052, "nore\u00f1a": 1048, "norm": [2, 52, 54, 55, 56, 67, 71, 76, 88, 124, 174, 177, 194, 198, 199, 204, 235, 255, 256, 257, 259, 261, 267, 271, 295, 310, 340, 352, 382, 385, 390, 408, 416, 417, 443, 444, 448, 460, 461, 465, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 490, 533, 536, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 592, 593, 594, 600, 647, 650, 651, 656, 657, 661, 662, 663, 664, 665, 666, 667, 668, 676, 678, 680, 682, 685, 688, 689, 690, 694, 696, 697, 698, 774, 845, 880, 895, 908, 910, 913, 986, 987, 998, 1001, 1003, 1005, 1015, 1019, 1038, 1040, 1042, 1046], "norm1": 465, "norm2": 465, "norm_diag": 529, "norm_laplacian": 699, "norm_ord": [600, 1042], "norm_y_weight": 1047, "normal": [2, 26, 37, 45, 50, 52, 56, 58, 59, 64, 66, 71, 73, 76, 80, 81, 91, 95, 96, 100, 106, 108, 110, 111, 112, 116, 117, 122, 135, 136, 138, 141, 146, 147, 150, 151, 152, 164, 174, 177, 178, 183, 184, 186, 187, 193, 194, 195, 196, 197, 198, 203, 206, 208, 210, 214, 215, 216, 218, 226, 230, 235, 249, 255, 260, 261, 263, 264, 267, 270, 276, 295, 296, 299, 309, 311, 315, 320, 323, 326, 327, 332, 340, 352, 353, 359, 368, 371, 372, 373, 376, 381, 385, 389, 390, 404, 405, 406, 408, 409, 411, 414, 415, 416, 420, 421, 441, 450, 452, 453, 454, 463, 465, 466, 476, 483, 484, 485, 490, 498, 514, 517, 521, 528, 529, 535, 538, 543, 544, 546, 550, 551, 554, 555, 556, 559, 560, 561, 562, 564, 565, 566, 567, 568, 582, 583, 585, 591, 592, 593, 594, 615, 629, 631, 643, 662, 663, 673, 676, 680, 684, 691, 695, 699, 701, 707, 708, 710, 722, 728, 730, 738, 740, 745, 749, 753, 754, 756, 759, 760, 761, 765, 774, 798, 799, 800, 807, 808, 834, 836, 845, 847, 853, 854, 857, 868, 869, 872, 873, 876, 878, 881, 882, 883, 884, 885, 886, 888, 893, 894, 896, 897, 898, 899, 903, 904, 916, 917, 918, 919, 951, 952, 956, 980, 981, 986, 987, 997, 999, 1001, 1002, 1003, 1004, 1007, 1011, 1016, 1018, 1020, 1021, 1026, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "normalis": [187, 615, 792], "normalization_": [643, 997], "normalize_compon": [1043, 1045], "normalize_i": [176, 180, 418, 615, 1049], "normalized_discounted_cumulative_gain": 760, "normalized_mutual_info_scor": [2, 73, 408, 740, 759, 799, 1005, 1043, 1049], "normalized_stress": [232, 694, 698, 1002, 1050], "normalized_weight": 196, "norms_squar": 690, "north": [373, 408], "northrop": 52, "northwestern": 662, "norvan": 1045, "nose": [373, 1038, 1042], "nosetest": 1037, "notabl": [205, 246, 310, 370, 390, 407, 498, 732, 881, 1002, 1004, 1008, 1039, 1042, 1049], "notarstefano": [1043, 1044], "notat": [151, 390, 409, 413, 416, 593, 716, 1001, 1005, 1044, 1051], "notch": 1029, "note": [0, 31, 44, 45, 47, 48, 51, 52, 54, 58, 59, 64, 65, 69, 73, 87, 100, 104, 105, 112, 114, 116, 117, 119, 124, 138, 139, 141, 143, 147, 148, 152, 169, 171, 178, 182, 186, 187, 188, 189, 190, 192, 200, 202, 206, 209, 212, 213, 214, 216, 220, 226, 228, 230, 232, 233, 234, 236, 239, 240, 242, 244, 245, 246, 247, 249, 256, 264, 265, 266, 270, 273, 276, 278, 284, 289, 290, 292, 296, 297, 306, 310, 311, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 332, 334, 340, 344, 351, 358, 363, 364, 370, 373, 374, 376, 377, 378, 380, 382, 383, 388, 389, 390, 394, 399, 402, 403, 406, 408, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 431, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 465, 466, 469, 470, 473, 474, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 491, 498, 500, 511, 517, 521, 529, 532, 535, 536, 538, 540, 541, 542, 543, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 592, 593, 595, 596, 597, 600, 602, 603, 605, 606, 607, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 636, 637, 639, 640, 642, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 703, 704, 711, 712, 717, 719, 724, 725, 726, 727, 728, 732, 733, 734, 736, 738, 742, 745, 750, 758, 759, 762, 767, 768, 772, 774, 778, 782, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 924, 925, 930, 940, 941, 945, 951, 952, 964, 967, 979, 988, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1031, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "notebook": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 377, 378, 382, 409, 469, 906, 1021, 1023, 1024, 1025, 1046, 1049], "notes_neighbor": 1035, "notfittederror": [2, 133, 390, 857, 988, 1039, 1041, 1044, 1045, 1051, 1052], "noth": [58, 327, 352, 381, 544, 718, 871, 880, 935, 1015], "nothman": [0, 391, 397, 416, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "notic": [47, 53, 63, 64, 71, 87, 91, 112, 138, 140, 141, 147, 150, 168, 194, 198, 239, 252, 267, 268, 270, 271, 273, 279, 280, 290, 315, 344, 351, 352, 353, 359, 378, 381, 391, 407, 412, 415, 498, 543, 565, 994, 1004, 1005, 1011, 1032, 1048], "notif": [376, 380], "notifi": [2, 574, 575, 576, 1033, 1045], "notimplementederror": [555, 556, 895, 1042, 1052], "notin": 408, "notion": [279, 344, 352, 365, 388, 408, 413, 415, 1001, 1005], "notmatthancock": [1043, 1045], "noto": 1048, "notplancha": 1053, "noun": 390, "nouri": [363, 1036, 1038], "novak": 1038, "novarti": 52, "novaya": [1045, 1048], "novel": [226, 296, 339, 359, 406, 994], "novelti": [184, 226, 239, 249, 291, 297, 339, 854, 1026, 1027, 1030, 1031, 1035, 1043], "novemb": [212, 230, 373, 380, 1040, 1041, 1043], "novic": 1037, "now": [44, 45, 47, 53, 56, 59, 87, 91, 104, 117, 126, 135, 136, 140, 142, 143, 144, 147, 148, 155, 158, 169, 171, 176, 177, 178, 183, 186, 187, 188, 189, 192, 194, 196, 199, 200, 202, 213, 214, 216, 236, 244, 246, 264, 266, 270, 273, 281, 282, 283, 284, 287, 293, 315, 320, 321, 323, 324, 325, 326, 327, 331, 340, 351, 352, 353, 359, 363, 365, 371, 376, 377, 382, 388, 389, 390, 394, 405, 408, 412, 413, 415, 416, 420, 428, 495, 510, 511, 514, 538, 551, 582, 583, 585, 631, 634, 653, 657, 662, 667, 688, 730, 760, 801, 802, 807, 808, 840, 855, 867, 868, 979, 995, 1001, 1005, 1011, 1014, 1015, 1020, 1021, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "nowadai": 376, "nozawa": [1050, 1051], "np": [2, 44, 45, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 122, 123, 124, 125, 128, 130, 131, 136, 137, 138, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 162, 164, 165, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 237, 239, 242, 243, 244, 245, 246, 247, 248, 249, 251, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 289, 290, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 308, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 363, 370, 371, 376, 378, 381, 382, 385, 388, 390, 399, 405, 408, 409, 412, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 486, 495, 498, 499, 502, 506, 510, 511, 512, 516, 517, 518, 519, 520, 521, 522, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 559, 560, 561, 562, 563, 565, 566, 567, 568, 571, 572, 584, 585, 588, 589, 591, 592, 596, 597, 600, 604, 607, 609, 612, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 640, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 691, 695, 696, 698, 699, 703, 706, 707, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 747, 748, 752, 757, 758, 759, 760, 767, 773, 777, 782, 785, 786, 787, 788, 790, 791, 792, 793, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 831, 832, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 858, 859, 860, 864, 865, 872, 873, 875, 876, 881, 882, 883, 884, 885, 887, 888, 889, 896, 897, 900, 901, 902, 903, 904, 905, 908, 910, 911, 913, 914, 916, 917, 918, 919, 925, 930, 931, 932, 933, 934, 935, 937, 939, 940, 950, 951, 952, 958, 959, 966, 967, 969, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 994, 995, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1011, 1015, 1016, 1017, 1019, 1020, 1021, 1036, 1038, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "npach": [1050, 1051], "npo": 235, "npolynomi": 44, "nprior": 255, "npropag": 80, "nqy18": 416, "nreceiv": 279, "nrow": [44, 45, 67, 69, 71, 91, 100, 106, 121, 150, 180, 188, 212, 214, 220, 230, 232, 233, 236, 249, 264, 272, 273, 290, 312, 314, 315, 324, 330, 346, 347, 372], "nsampl": [378, 801, 802], "nswdemand": 150, "nswprice": 150, "nt": 56, "nt_uri": 56, "ntest": 299, "ntf": 703, "nth": [277, 711, 1005], "nthe": [188, 268, 358], "ntime": [51, 281], "nto": [218, 279], "ntol": 169, "ntrain": 84, "ntree": 44, "ntrue": [46, 329, 330], "ntt": 703, "ntu": [192, 370, 488, 510, 511, 662], "ntwo": 372, "nu": [2, 47, 49, 51, 180, 226, 239, 339, 363, 415, 418, 623, 681, 910, 911, 912, 1011, 1019, 1020, 1046, 1050], "nuanc": [205, 390], "nuclear": 373, "nuclei": 373, "nudge_dataset": 308, "nuff": 1042, "nugmanov": [1043, 1044], "nuisanc": 418, "nukariya": [1047, 1048], "null": [80, 189, 264, 270, 276, 408, 412, 498, 652, 673, 684, 708, 735, 761, 799, 833, 1001, 1002, 1005, 1020, 1045], "nullabl": [631, 632, 633, 634, 1046, 1050], "nullformatt": [232, 234, 237, 290], "nullloc": 295, "num": [44, 52, 104, 169, 171, 176, 177, 178, 188, 189, 214, 277, 278, 323, 325, 326, 415, 498, 636], "num_col": 253, "num_cor": 382, "num_featur": [1003, 1050], "num_linear_processor": 155, "num_missing_cel": 150, "num_pip": 253, "num_preprocess": 465, "num_proc": [241, 320], "num_sampl": [804, 818, 1050], "num_selector": 155, "num_sent": 103, "num_thread": 290, "num_tree_processor": 155, "num_trial": 275, "numba": [290, 1025], "number": [2, 44, 45, 47, 48, 50, 52, 53, 54, 58, 59, 63, 64, 65, 69, 70, 72, 74, 75, 77, 79, 80, 81, 82, 83, 84, 87, 88, 89, 91, 95, 96, 97, 101, 103, 104, 105, 106, 108, 114, 116, 117, 119, 121, 123, 125, 126, 128, 135, 136, 138, 141, 143, 145, 146, 147, 148, 151, 155, 157, 165, 166, 167, 169, 179, 180, 183, 184, 187, 188, 192, 198, 202, 211, 212, 213, 214, 219, 220, 226, 227, 228, 229, 230, 232, 239, 243, 247, 249, 250, 255, 256, 258, 260, 261, 263, 264, 265, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 283, 287, 290, 292, 296, 297, 310, 312, 313, 316, 319, 320, 321, 322, 323, 324, 325, 327, 333, 340, 345, 347, 352, 353, 355, 358, 359, 364, 365, 368, 370, 371, 372, 373, 374, 376, 379, 380, 382, 383, 384, 385, 388, 389, 390, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 431, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 584, 585, 586, 587, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 707, 708, 709, 711, 716, 717, 718, 720, 722, 724, 728, 732, 733, 734, 735, 738, 739, 742, 744, 756, 759, 778, 782, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 934, 935, 938, 951, 952, 955, 956, 973, 975, 978, 979, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "number_norm": 58, "numbernormalizingvector": 58, "numer": [2, 44, 53, 58, 100, 104, 108, 144, 155, 176, 179, 188, 189, 202, 212, 230, 249, 251, 253, 277, 300, 316, 322, 326, 353, 370, 371, 373, 379, 381, 382, 388, 389, 390, 404, 408, 410, 415, 416, 417, 418, 420, 421, 441, 444, 448, 460, 472, 473, 476, 479, 490, 491, 492, 498, 502, 503, 504, 506, 507, 512, 533, 535, 537, 542, 543, 549, 563, 564, 569, 584, 593, 615, 621, 624, 631, 634, 636, 637, 650, 656, 658, 676, 691, 694, 698, 718, 782, 792, 798, 804, 807, 808, 810, 818, 827, 830, 831, 832, 835, 843, 844, 845, 846, 847, 865, 866, 871, 876, 881, 882, 889, 920, 921, 922, 934, 935, 951, 952, 994, 995, 1001, 1002, 1006, 1013, 1015, 1016, 1021, 1028, 1029, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "numeric_featur": [104, 323], "numeric_onli": 188, "numeric_preprocessor": 251, "numeric_transform": [104, 323], "numerical_column": [187, 189, 468], "numerical_columns_subset": 144, "numerical_featur": [188, 316], "numerical_pip": 189, "numerical_transform": 104, "numfocu": 0, "numpi": [2, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 128, 130, 131, 136, 137, 138, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 162, 164, 165, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 237, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 289, 290, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 308, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 363, 369, 370, 371, 374, 376, 377, 378, 379, 382, 384, 385, 388, 389, 390, 394, 399, 401, 402, 404, 405, 408, 409, 412, 413, 414, 415, 416, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 440, 441, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 486, 491, 495, 496, 498, 505, 508, 510, 511, 523, 529, 533, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 571, 572, 584, 585, 588, 589, 591, 592, 594, 604, 607, 622, 631, 632, 633, 634, 635, 636, 637, 647, 650, 651, 653, 656, 657, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 676, 680, 681, 682, 688, 691, 692, 695, 696, 697, 698, 699, 703, 706, 707, 710, 711, 713, 716, 718, 730, 731, 733, 734, 736, 738, 739, 742, 743, 758, 760, 777, 783, 785, 786, 787, 788, 791, 792, 793, 798, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 910, 911, 913, 914, 916, 930, 931, 932, 933, 937, 939, 949, 950, 951, 952, 956, 958, 959, 966, 967, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 994, 995, 1000, 1001, 1003, 1005, 1006, 1008, 1011, 1015, 1017, 1020, 1021, 1023, 1025, 1035, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "numpydoc": [376, 390, 394, 401], "nune": 1036, "nuniformli": 151, "nuniqu": 316, "nurseit": 1052, "nusvc": [2, 363, 438, 911, 1006, 1020, 1035, 1036, 1037, 1040, 1043, 1045, 1046, 1047, 1049], "nusvr": [2, 47, 363, 914, 1020, 1037, 1043, 1045, 1046, 1047, 1049, 1050], "nutshel": 1003, "nv": 52, "nvidia": [0, 388], "nvirginica": 279, "nwanna": 1050, "nweight": 157, "nwith": [73, 91, 95, 168, 352], "nx": [51, 303, 371, 500], "nxorabl": 1045, "ny": [51, 53, 269, 303, 371, 373, 500, 995, 1017], "nyc": [1023, 1029], "nymark": 1050, "nystroem": [2, 44, 182, 226, 239, 244, 368, 644, 645, 646, 681, 874, 913, 914, 1031, 1036, 1042, 1045, 1047, 1048, 1049], "nystroem_approx_svm": 244, "nystroem_scor": 244, "nystroem_tim": 244, "nystrom": [883, 1044, 1045], "nystr\u00f6m": [44, 997], "nyu": [0, 857], "nz": 532, "nzw": 1043, "n\u00e1jera": [1039, 1040, 1041, 1042], "n\u00e1pole": 1048, "o": [0, 56, 58, 65, 67, 74, 83, 89, 94, 95, 97, 98, 114, 116, 123, 152, 179, 200, 206, 210, 212, 227, 245, 255, 264, 270, 272, 279, 310, 311, 315, 320, 323, 326, 333, 344, 355, 363, 371, 373, 376, 384, 394, 408, 410, 413, 415, 419, 421, 445, 448, 449, 451, 474, 476, 501, 536, 607, 631, 670, 671, 696, 836, 864, 879, 920, 973, 997, 999, 1001, 1002, 1005, 1006, 1008, 1009, 1019, 1020, 1021, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "oa": [2, 50, 66, 71, 109, 113, 114, 128, 149, 184, 299, 301, 410, 470, 471, 474, 475, 477, 478, 514, 551, 804, 999, 1026], "oa_ms": 111, "oa_shrinkag": 111, "oarc": 1001, "ob2019": 1005, "obaja": 1039, "obatin": 315, "obei": [390, 1003], "obj": [246, 402, 569, 570, 941, 961, 963, 964, 965, 970], "obj_func": [614, 615], "object": [2, 44, 51, 54, 55, 64, 65, 80, 84, 96, 100, 103, 104, 124, 127, 133, 150, 155, 160, 168, 176, 184, 188, 198, 228, 230, 238, 246, 250, 252, 264, 268, 277, 279, 280, 303, 323, 325, 352, 353, 359, 369, 370, 371, 376, 377, 379, 381, 382, 383, 385, 389, 390, 391, 399, 402, 408, 409, 410, 413, 416, 417, 418, 422, 424, 429, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 715, 722, 736, 737, 746, 762, 763, 785, 786, 793, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 923, 934, 935, 936, 937, 938, 941, 945, 946, 948, 957, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 989, 990, 992, 1001, 1002, 1003, 1004, 1008, 1011, 1012, 1015, 1018, 1019, 1020, 1024, 1026, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "object_nam": [246, 961, 964], "obozinski": 413, "obscur": [1012, 1051], "observ": [2, 44, 45, 47, 49, 51, 53, 54, 59, 62, 65, 71, 73, 76, 79, 87, 96, 104, 110, 112, 113, 114, 122, 123, 126, 127, 128, 135, 138, 139, 141, 142, 147, 150, 151, 154, 169, 171, 174, 176, 177, 178, 180, 187, 188, 189, 194, 195, 205, 208, 210, 212, 213, 214, 216, 226, 230, 236, 237, 242, 243, 249, 264, 266, 270, 272, 273, 277, 283, 284, 290, 293, 296, 303, 315, 325, 327, 332, 339, 340, 344, 345, 351, 352, 353, 357, 371, 373, 390, 394, 406, 408, 410, 411, 412, 413, 414, 417, 418, 442, 444, 446, 447, 448, 450, 460, 461, 470, 471, 472, 473, 474, 475, 476, 477, 526, 534, 553, 554, 565, 614, 615, 650, 656, 661, 705, 720, 722, 762, 825, 846, 854, 887, 889, 1001, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1028, 1036, 1048, 1049, 1050, 1051], "observatori": 176, "obsolet": [1035, 1051], "obstruct": 1042, "obtain": [23, 44, 47, 49, 52, 53, 59, 65, 89, 91, 92, 104, 107, 108, 126, 128, 135, 144, 147, 148, 153, 160, 173, 175, 187, 188, 198, 209, 212, 214, 216, 226, 236, 249, 255, 256, 257, 264, 266, 270, 271, 272, 276, 279, 283, 293, 315, 322, 338, 344, 352, 353, 358, 359, 371, 373, 378, 390, 402, 406, 407, 408, 410, 411, 413, 415, 416, 417, 418, 438, 443, 470, 498, 534, 535, 557, 558, 559, 560, 561, 562, 565, 566, 567, 596, 609, 618, 649, 663, 665, 670, 672, 676, 678, 680, 681, 691, 712, 716, 730, 743, 760, 797, 810, 827, 833, 836, 837, 840, 854, 865, 885, 897, 910, 913, 916, 917, 952, 994, 995, 997, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1041, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "obviat": 997, "obviou": [187, 344, 359, 363, 376, 405, 413], "obvious": [183, 363], "oc": 1050, "occas": 376, "occasion": [391, 731, 1044], "occup": [187, 310, 498], "occupi": [408, 1005], "occur": [55, 103, 145, 212, 216, 230, 347, 359, 376, 384, 391, 405, 408, 410, 412, 416, 445, 510, 511, 574, 584, 593, 631, 675, 802, 804, 807, 808, 810, 818, 827, 830, 831, 832, 835, 878, 939, 1005, 1007, 1015, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "occurr": [2, 212, 316, 352, 353, 371, 376, 380, 408, 416, 571, 572, 584, 592, 593, 621, 631, 632, 633, 634, 787, 843, 871, 1007, 1036, 1041], "ocean": 303, "ocsvm": [49, 226], "oct": [696, 773, 1002, 1008], "octob": [111, 371, 1035, 1042, 1048, 1049, 1051], "od280": 373, "od315": 373, "odd": [273, 415, 516, 716, 1005, 1042, 1043], "ofcategoriesknownnumb": 396, "off": [45, 52, 54, 73, 75, 76, 82, 86, 87, 110, 114, 116, 121, 141, 150, 168, 169, 184, 205, 216, 233, 244, 248, 262, 263, 269, 271, 272, 273, 283, 287, 310, 327, 330, 332, 334, 340, 349, 351, 371, 376, 378, 390, 407, 408, 410, 417, 443, 498, 555, 556, 561, 562, 591, 594, 638, 660, 662, 696, 719, 801, 802, 804, 807, 808, 818, 820, 826, 831, 869, 888, 956, 1004, 1010, 1020, 1025, 1026, 1035, 1039, 1040, 1042], "offer": [44, 141, 201, 378, 384, 388, 389, 390, 394, 402, 412, 413, 415, 416, 994, 995, 1006, 1009, 1021, 1024, 1025, 1029, 1041, 1053], "offic": 1029, "offici": [371, 378, 388, 390, 394, 495, 499, 1024, 1043, 1044, 1047], "offlin": [264, 363, 376], "offset": [138, 192, 388, 410, 413, 470, 510, 511, 565, 636, 637, 645, 646, 648, 649, 681, 732, 779, 781, 854, 912, 1005, 1019, 1043], "offset_": [470, 565, 681, 854, 912, 1043], "offset_init": 681, "offsetbox": 233, "offsetimag": 233, "ofmulticlass": 1020, "often": [44, 58, 62, 63, 65, 70, 103, 107, 141, 150, 153, 175, 182, 187, 188, 213, 230, 233, 249, 257, 272, 275, 310, 315, 340, 349, 351, 352, 353, 363, 364, 370, 371, 373, 376, 378, 381, 384, 388, 389, 390, 393, 396, 402, 406, 408, 409, 410, 412, 413, 415, 416, 418, 420, 469, 523, 526, 535, 538, 636, 650, 651, 656, 657, 664, 665, 666, 667, 676, 678, 691, 732, 878, 886, 894, 906, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1015, 1018, 1019, 1021, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "og": 416, "ogbonna": 1048, "ogordon100": 1048, "ogrid": 54, "ogu": 416, "ogura": 1050, "oh": [881, 1045], "ohad": 1049, "ohayon": [1043, 1044, 1051], "ohio": 371, "ohno": 406, "oj_lappi": 1047, "oja": [420, 535], "ojala": [276, 412, 833], "ojeda": 1049, "ok": [50, 376, 1011], "okal": 1039, "okbalefthand": 1041, "okhlopkov": [1041, 1042], "okon": 1049, "okroshiashvili": 1048, "ol": [194, 203, 208, 209, 210, 218, 229, 322, 660, 1001], "ol2001": 995, "olatunji": 1050, "old": [230, 376, 380, 382, 408, 469, 538, 650, 656, 906, 1002, 1025, 1035, 1040, 1041, 1043, 1048, 1049, 1050], "olden": 1043, "older": [246, 375, 380, 402, 465, 1028, 1033, 1038, 1045, 1047], "oldest": 498, "oldid": 1005, "oldja": 1047, "oleg": 1045, "oleggio": 1039, "olegovich": 1042, "oleh": [1047, 1049], "oleksandr": [1043, 1044, 1045, 1046, 1049], "oleksii": 1052, "olemiss": 683, "olga": [632, 995], "oli": 1042, "oliblum90": [1042, 1043], "olicairn": 1046, "olimpio": 1043, "oliph": 1035, "oliv": [1043, 1044, 1046, 1047, 1048], "oliveira": [1041, 1043, 1045, 1049], "olivetti": [2, 121, 369, 413, 497, 1031, 1035, 1043], "olivetti_fac": 497, "olivi": [0, 391, 397, 904, 1018, 1023, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "oll": 1050, "olr": 194, "olsen": 1042, "olshen": [916, 917, 1021], "olson": 1041, "olszewski": 1048, "olvi": 373, "om": 1042, "omar": [0, 397, 1045, 1050, 1051, 1052, 1053], "omarmanzoor": 1051, "omega": [347, 411, 999], "omega_": 999, "omega_k": [411, 999], "omer": 1040, "omit": [142, 186, 187, 334, 381, 421, 476, 536, 670, 672, 680, 811, 813, 836, 837, 840, 843, 844, 845, 846, 847, 865, 1003, 1010], "omohundro": 1008, "omp": [2, 124, 130, 211, 413, 533, 539, 544, 550, 668, 669, 689, 690, 1027, 1031, 1035, 1043], "omp_cv": 211, "omp_get_max_thread": 377, "omp_num_thread": 364, "omtcyfz": 1042, "on_fail": 945, "on_skip": 945, "onc": [2, 44, 48, 84, 166, 169, 171, 176, 205, 233, 246, 249, 264, 268, 271, 283, 284, 287, 290, 319, 323, 351, 353, 357, 358, 359, 363, 365, 370, 371, 374, 376, 378, 380, 381, 382, 383, 384, 389, 390, 391, 402, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 450, 452, 454, 473, 510, 511, 540, 546, 553, 561, 562, 593, 594, 600, 615, 623, 631, 651, 655, 657, 659, 665, 667, 669, 670, 671, 672, 680, 681, 682, 701, 716, 720, 722, 740, 785, 805, 809, 812, 822, 826, 843, 844, 845, 846, 847, 920, 1001, 1002, 1008, 1015, 1019, 1020, 1021, 1032, 1035, 1043, 1045, 1046, 1047, 1048, 1052], "one": [0, 2, 31, 44, 48, 49, 50, 53, 55, 56, 63, 64, 65, 69, 70, 71, 73, 76, 82, 87, 89, 91, 92, 94, 95, 98, 100, 104, 113, 121, 124, 126, 127, 130, 140, 141, 145, 147, 150, 151, 155, 158, 168, 169, 171, 178, 179, 182, 186, 187, 188, 189, 190, 192, 194, 195, 198, 202, 203, 205, 206, 207, 209, 212, 214, 221, 222, 227, 230, 234, 239, 246, 247, 249, 253, 257, 260, 264, 266, 267, 268, 270, 271, 273, 274, 277, 278, 279, 280, 287, 289, 290, 295, 308, 311, 312, 315, 316, 319, 321, 322, 323, 327, 332, 339, 340, 348, 351, 352, 353, 355, 358, 359, 363, 364, 365, 370, 371, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 393, 394, 396, 399, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 458, 461, 463, 465, 470, 475, 488, 489, 491, 492, 494, 495, 496, 497, 498, 502, 503, 504, 505, 506, 507, 510, 511, 512, 514, 516, 536, 541, 542, 543, 545, 549, 553, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 571, 584, 586, 587, 591, 592, 593, 594, 614, 615, 619, 620, 624, 631, 634, 636, 637, 638, 639, 647, 651, 652, 653, 654, 658, 661, 662, 663, 665, 670, 672, 673, 675, 677, 678, 679, 680, 682, 684, 692, 696, 699, 703, 707, 713, 715, 724, 733, 734, 738, 742, 754, 755, 758, 767, 775, 778, 782, 783, 784, 785, 787, 788, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 807, 808, 810, 811, 812, 814, 816, 818, 822, 823, 826, 827, 829, 831, 832, 834, 835, 836, 837, 838, 840, 841, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 864, 868, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 887, 888, 889, 892, 894, 908, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 930, 940, 943, 945, 954, 975, 994, 995, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "one_class": 247, "one_d_arrai": 925, "one_d_label": 928, "one_hot": [316, 327], "one_hot_encod": [44, 144], "one_hot_encoder_": 568, "one_hot_linear_pipelin": 44, "one_hot_linear_predict": 44, "one_hot_poly_pipelin": 44, "one_hot_poly_predict": 44, "one_hot_result": 144, "one_hot_tim": 44, "one_imag": [416, 587, 590], "one_vs_on": [418, 614, 1006], "one_vs_rest": [614, 1006], "oneclasssvm": [2, 49, 51, 226, 239, 322, 339, 565, 681, 854, 1011, 1019, 1020, 1037, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "oned": 394, "onehot": [251, 311, 312, 409, 873, 1015], "onehot_categor": [212, 230], "onehotencod": [2, 44, 104, 140, 144, 155, 187, 188, 212, 230, 241, 249, 251, 253, 316, 320, 322, 325, 326, 327, 370, 390, 409, 415, 467, 468, 568, 584, 585, 871, 875, 876, 879, 882, 889, 995, 1015, 1036, 1039, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "ones": [44, 51, 71, 79, 89, 104, 113, 145, 151, 171, 192, 198, 216, 217, 239, 242, 246, 270, 278, 281, 297, 314, 330, 349, 363, 364, 376, 384, 390, 408, 410, 412, 415, 423, 426, 430, 451, 534, 568, 584, 614, 615, 622, 648, 649, 662, 663, 674, 680, 707, 800, 806, 811, 822, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 883, 887, 958, 1001, 1005, 1010, 1011, 1015, 1020, 1035, 1043, 1044, 1045], "onetoonefeaturemixin": [2, 378, 432], "onevsoneclassifi": [2, 287, 399, 837, 838, 1036, 1038, 1039, 1041, 1042, 1044, 1047, 1049, 1052], "onevsrestclassifi": [2, 67, 205, 227, 247, 277, 279, 287, 399, 406, 662, 663, 836, 838, 908, 1036, 1037, 1039, 1041, 1042, 1048, 1049, 1052, 1053], "ong": 712, "ongari": 1052, "onggo": 1051, "ongo": [325, 377, 391], "onli": [2, 26, 31, 44, 47, 51, 54, 55, 59, 62, 63, 64, 65, 67, 70, 71, 73, 75, 76, 83, 87, 89, 92, 100, 103, 104, 105, 107, 108, 113, 124, 125, 127, 131, 135, 137, 142, 143, 144, 146, 154, 155, 164, 165, 166, 169, 171, 173, 178, 180, 183, 186, 187, 188, 192, 198, 202, 209, 212, 213, 215, 218, 220, 221, 230, 232, 233, 239, 241, 243, 245, 246, 250, 253, 255, 256, 257, 260, 261, 264, 266, 268, 270, 272, 273, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 296, 298, 301, 303, 307, 310, 311, 315, 316, 321, 322, 329, 330, 332, 336, 337, 340, 344, 345, 347, 348, 351, 352, 353, 355, 356, 358, 359, 363, 364, 365, 369, 370, 371, 373, 374, 376, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 428, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 490, 491, 492, 494, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 512, 514, 518, 521, 525, 526, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 703, 711, 713, 717, 730, 733, 734, 738, 740, 741, 742, 745, 747, 760, 762, 764, 778, 782, 783, 784, 785, 787, 788, 791, 792, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 818, 822, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 927, 928, 929, 930, 932, 933, 934, 935, 938, 940, 943, 952, 954, 958, 960, 965, 970, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "onlin": [2, 45, 46, 48, 55, 72, 85, 121, 124, 184, 193, 220, 226, 248, 264, 306, 365, 371, 375, 381, 390, 408, 413, 416, 418, 443, 447, 448, 450, 497, 504, 533, 538, 539, 540, 541, 547, 548, 585, 587, 662, 670, 671, 672, 680, 682, 834, 843, 844, 845, 846, 847, 850, 851, 856, 858, 859, 877, 878, 888, 908, 909, 997, 1001, 1009, 1011, 1023, 1026, 1027, 1029, 1031, 1035, 1039, 1040, 1042, 1050], "onlineldavb": 538, "only_non_neg": 1048, "only_physical_cor": 141, "onnx": [1024, 1025, 1031], "onnxruntim": 402, "onto": [117, 233, 234, 244, 310, 388, 413, 416, 420, 447, 449, 462, 535, 541, 545, 631, 632, 634, 692, 999, 1003, 1008], "onward": [882, 1039, 1053], "onx": 402, "oob": [134, 146, 184, 415, 517, 566, 1026, 1037, 1048, 1052], "oob_best_it": 146, "oob_color": 146, "oob_decision_function_": [557, 559, 566], "oob_error": 139, "oob_improvement_": [146, 415, 561, 562, 1037], "oob_lin": 146, "oob_prediction_": [558, 560, 567], "oob_scor": [139, 415, 557, 558, 559, 560, 566, 567, 1040, 1042], "oob_score_": [139, 557, 558, 559, 560, 561, 562, 566, 567, 1037, 1051], "oob_scores_": [561, 562, 1051], "op": [380, 427, 613, 662, 663, 670, 671, 672, 680, 681, 682, 865, 866, 908, 1015], "opaqu": 1013, "open": [0, 48, 52, 56, 234, 370, 371, 374, 375, 376, 380, 382, 388, 389, 391, 402, 409, 416, 488, 498, 510, 511, 995, 1024, 1029, 1038, 1042, 1043, 1045, 1051], "open_pric": 52, "openbla": [363, 364, 374, 384, 388, 1048, 1052, 1053], "openblas_num_thread": 364, "opencv": 371, "opengraph": [376, 394, 401], "openml": [2, 44, 53, 104, 155, 176, 187, 212, 220, 228, 230, 240, 264, 284, 287, 289, 307, 369, 394, 498, 1031, 1043, 1045, 1048], "openml1": 53, "openml100": 370, "openmp": [320, 374, 379, 388, 390, 408, 415, 1046, 1048, 1051, 1053], "opentsn": 696, "oper": [2, 20, 54, 179, 184, 240, 245, 252, 262, 264, 265, 267, 272, 277, 353, 363, 364, 373, 374, 376, 379, 382, 388, 390, 391, 394, 402, 404, 407, 412, 413, 415, 416, 417, 421, 443, 449, 462, 469, 476, 483, 484, 485, 486, 506, 535, 536, 543, 553, 554, 568, 574, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 620, 625, 628, 634, 639, 647, 662, 693, 697, 706, 710, 711, 712, 731, 778, 785, 786, 792, 793, 823, 834, 837, 848, 849, 871, 875, 880, 891, 892, 906, 913, 916, 954, 977, 1001, 1008, 1015, 1020, 1024, 1026, 1029, 1039, 1041, 1042, 1043, 1045, 1046, 1051], "operand": 418, "operation": [230, 1029], "operatornam": [413, 745, 1001, 1005, 1021], "opinion": 391, "opitz": 1005, "opportun": [536, 1019], "oppos": [101, 246, 378, 404, 408, 904, 1008, 1020, 1035, 1053], "opposit": [63, 87, 101, 126, 187, 188, 202, 264, 277, 390, 406, 410, 412, 417, 444, 448, 450, 470, 540, 542, 549, 565, 716, 734, 854, 912, 1035], "opposite_lof_scor": 854, "opt": [374, 378], "opta": 901, "optic": [2, 72, 80, 184, 323, 369, 419, 445, 447, 456, 457, 458, 504, 1026, 1030, 1031, 1044, 1048, 1049, 1050, 1051, 1052, 1053], "optim": [47, 53, 54, 65, 87, 88, 91, 94, 105, 110, 111, 121, 145, 146, 148, 150, 168, 171, 172, 176, 177, 178, 198, 200, 202, 205, 206, 220, 228, 245, 249, 264, 268, 275, 278, 283, 284, 287, 289, 294, 308, 310, 315, 323, 327, 332, 342, 347, 351, 352, 353, 359, 363, 370, 373, 376, 378, 379, 388, 390, 394, 403, 405, 407, 408, 410, 412, 413, 415, 417, 418, 419, 445, 448, 449, 450, 451, 453, 458, 462, 463, 473, 474, 480, 533, 536, 537, 539, 541, 545, 559, 560, 561, 562, 576, 614, 615, 623, 624, 639, 642, 644, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 688, 691, 694, 696, 698, 699, 705, 723, 727, 734, 803, 804, 818, 826, 850, 851, 852, 854, 856, 857, 858, 859, 860, 865, 866, 884, 896, 900, 901, 908, 909, 910, 911, 912, 913, 914, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1019, 1020, 1021, 1024, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051], "optima": 418, "optimis": [378, 408, 1008, 1038, 1048, 1050], "optimist": [53, 202, 275, 351, 359, 711, 1001, 1005], "optimum": [95, 177, 187, 192, 264, 283, 407, 413, 473, 1001, 1004], "option": [2, 44, 67, 81, 86, 128, 141, 148, 177, 183, 196, 198, 213, 249, 264, 273, 279, 320, 327, 351, 355, 359, 365, 370, 371, 372, 374, 376, 377, 378, 381, 382, 384, 385, 388, 390, 391, 394, 402, 408, 409, 411, 412, 413, 415, 416, 419, 432, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 460, 462, 463, 464, 465, 466, 469, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 691, 692, 693, 694, 696, 698, 699, 715, 717, 721, 733, 734, 739, 740, 741, 761, 762, 763, 768, 770, 771, 775, 778, 779, 780, 781, 782, 785, 787, 788, 791, 796, 797, 799, 803, 805, 806, 807, 808, 810, 811, 813, 822, 826, 827, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 941, 990, 994, 995, 1001, 1004, 1005, 1008, 1015, 1018, 1020, 1021, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "option_context": 230, "ora": 1048, "oracl": [2, 70, 212, 230, 421, 470, 471, 474, 475, 476, 477, 999, 1035], "orallo": 1005, "orang": [47, 49, 87, 112, 119, 122, 123, 128, 135, 149, 150, 152, 178, 183, 200, 202, 209, 222, 247, 258, 264, 301, 320, 326, 1006, 1052], "orazbayev": 1049, "order": [2, 44, 54, 59, 62, 65, 82, 89, 98, 99, 105, 110, 130, 143, 144, 148, 150, 162, 176, 186, 187, 190, 192, 202, 206, 212, 213, 218, 226, 230, 234, 243, 246, 249, 253, 257, 265, 268, 270, 277, 289, 308, 310, 315, 316, 317, 321, 322, 327, 347, 351, 353, 359, 363, 364, 371, 376, 377, 378, 381, 382, 385, 390, 394, 395, 399, 402, 408, 409, 410, 412, 413, 414, 415, 416, 418, 420, 438, 441, 444, 447, 448, 450, 451, 456, 457, 458, 460, 465, 489, 490, 491, 497, 499, 517, 536, 537, 541, 542, 543, 545, 549, 553, 555, 557, 558, 559, 560, 561, 565, 566, 567, 568, 569, 584, 591, 594, 596, 597, 600, 609, 610, 611, 614, 626, 631, 635, 644, 662, 663, 669, 680, 689, 690, 692, 693, 697, 701, 703, 704, 706, 708, 716, 717, 722, 726, 730, 733, 734, 742, 744, 745, 746, 758, 760, 782, 786, 787, 788, 791, 792, 793, 798, 803, 804, 805, 807, 808, 809, 811, 815, 818, 822, 823, 826, 829, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 865, 868, 879, 881, 882, 883, 887, 888, 889, 892, 893, 894, 896, 897, 898, 899, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 934, 935, 940, 952, 968, 973, 995, 1001, 1002, 1005, 1006, 1008, 1009, 1015, 1018, 1019, 1020, 1021, 1025, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "order_": [839, 842], "order_centroid": 352, "ordered_sampl": 230, "ordereddict": 139, "ordering_": [99, 408, 451, 456, 457, 458], "ordin": [44, 87, 104, 155, 249, 313, 316, 317, 321, 324, 370, 390, 415, 498, 569, 713, 873, 876, 881, 882, 889, 1001, 1002, 1015, 1025, 1043, 1049], "ordinal_encod": [144, 249], "ordinal_result": 144, "ordinalencod": [2, 144, 155, 188, 189, 212, 249, 316, 324, 370, 390, 584, 844, 876, 881, 889, 995, 1007, 1015, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052], "ordinari": [2, 123, 138, 158, 184, 193, 194, 197, 198, 212, 214, 215, 217, 229, 266, 322, 503, 639, 650, 656, 658, 659, 660, 661, 676, 682, 686, 687, 691, 754, 789, 834, 1019, 1026, 1027, 1031], "ordinarili": [388, 390], "ordowski": 1005, "oren": 1043, "oresti": 1044, "orfano": [1048, 1049, 1050, 1051, 1052], "org": [44, 53, 56, 62, 104, 192, 212, 220, 228, 230, 284, 289, 307, 364, 369, 374, 376, 379, 382, 384, 391, 412, 598, 640, 672, 675, 680, 699, 709, 773, 850, 851, 856, 857, 858, 859, 886, 902, 916, 917, 945, 947, 1001, 1005, 1021, 1031, 1043, 1047], "organ": [0, 51, 53, 112, 370, 375, 376, 391, 856, 1024], "ori": 1041, "orient": [67, 121, 187, 232, 310, 390, 920, 1002], "orig": [54, 297], "orig_coin": [81, 82], "orig_data_ax": 126, "origin": [44, 45, 54, 59, 60, 81, 82, 85, 90, 92, 107, 108, 121, 123, 124, 127, 130, 150, 153, 165, 166, 169, 171, 173, 175, 176, 182, 183, 188, 192, 200, 202, 216, 232, 233, 234, 236, 237, 243, 244, 245, 249, 261, 264, 267, 273, 283, 293, 298, 308, 311, 315, 325, 330, 344, 351, 353, 359, 364, 371, 373, 375, 376, 378, 380, 381, 388, 390, 402, 405, 408, 409, 412, 413, 415, 416, 418, 419, 420, 421, 433, 438, 442, 444, 445, 446, 447, 448, 450, 451, 460, 464, 465, 466, 476, 483, 484, 485, 495, 496, 497, 503, 521, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 579, 584, 587, 593, 597, 610, 611, 613, 614, 615, 618, 634, 636, 639, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 696, 700, 705, 732, 767, 773, 803, 805, 806, 811, 813, 822, 826, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 858, 859, 865, 866, 868, 871, 872, 873, 874, 875, 876, 877, 880, 881, 882, 884, 885, 886, 887, 888, 897, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 932, 934, 935, 939, 940, 963, 975, 978, 998, 999, 1001, 1002, 1004, 1005, 1008, 1011, 1016, 1017, 1018, 1019, 1022, 1024, 1029, 1038, 1039, 1041, 1043, 1045, 1047, 1049, 1051], "original_param": 149, "original_sklearn_vers": [402, 579], "original_space_centroid": 352, "orii": 1037, "orphan": [449, 462, 1035], "orr": [1009, 1019], "orr\u00f9": 1038, "orthogon": [2, 38, 88, 122, 123, 124, 130, 184, 193, 413, 528, 533, 539, 541, 544, 545, 550, 668, 669, 689, 690, 1017, 1026, 1027, 1031, 1035], "orthogonal_mp": [2, 550, 668, 669, 690, 1001], "orthogonal_mp_gram": [2, 668, 669, 689, 1049], "orthogonalmatchingpursuit": [2, 211, 669, 689, 690, 1001, 1006, 1035, 1037, 1040, 1043, 1048, 1053], "orthogonalmatchingpursuitcv": [2, 211, 399, 668, 1037, 1048, 1052], "orthonorm": [2, 46, 385, 951, 997], "orthotrop": 1008, "ortiz": [1045, 1051], "os": 1053, "osa": 1043, "osaid": 1043, "osborn": [1038, 1039], "oscar": [1038, 1042], "oscil": [152, 188, 217, 408, 441], "oscillatori": [213, 1015], "osei": 1049, "osendorf": [1035, 1036], "oserror": [394, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500], "osindero": [864, 1010], "osman": [1044, 1050], "osx": 363, "other": [0, 2, 26, 44, 48, 52, 53, 62, 65, 67, 68, 70, 73, 76, 80, 86, 91, 100, 102, 104, 105, 117, 123, 124, 126, 128, 138, 140, 141, 143, 144, 147, 148, 150, 151, 157, 164, 182, 183, 184, 186, 187, 188, 189, 192, 194, 201, 205, 206, 212, 216, 230, 232, 233, 234, 236, 239, 240, 241, 243, 245, 246, 249, 250, 257, 260, 264, 265, 267, 270, 271, 272, 279, 280, 284, 287, 295, 296, 297, 309, 310, 314, 315, 317, 319, 320, 322, 326, 327, 329, 340, 344, 346, 349, 351, 352, 355, 357, 358, 359, 363, 368, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 384, 385, 389, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 438, 444, 445, 447, 448, 449, 450, 451, 453, 458, 465, 466, 470, 483, 484, 485, 489, 498, 499, 505, 535, 536, 537, 538, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 591, 592, 593, 594, 600, 605, 613, 614, 615, 616, 617, 624, 631, 632, 634, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 694, 696, 700, 703, 708, 722, 767, 778, 782, 789, 796, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 818, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 863, 865, 866, 868, 869, 871, 873, 874, 875, 877, 878, 880, 881, 882, 884, 885, 886, 887, 888, 889, 896, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 945, 947, 961, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1025, 1026, 1027, 1028, 1029, 1031, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1048, 1049, 1050, 1051, 1052], "other_scor": 381, "otherwis": [51, 90, 96, 137, 180, 183, 196, 214, 220, 264, 303, 344, 347, 359, 365, 378, 380, 382, 390, 399, 408, 410, 412, 416, 418, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 454, 455, 465, 466, 468, 483, 484, 485, 486, 498, 529, 535, 537, 538, 540, 542, 543, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 591, 593, 594, 600, 605, 614, 615, 618, 635, 636, 637, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 690, 694, 696, 700, 701, 702, 704, 706, 707, 711, 713, 717, 718, 728, 730, 731, 732, 733, 734, 742, 745, 756, 758, 759, 760, 770, 778, 782, 785, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 818, 822, 823, 826, 827, 832, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 865, 866, 868, 871, 872, 873, 874, 875, 879, 880, 887, 888, 889, 890, 893, 894, 895, 897, 898, 899, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 923, 934, 935, 937, 951, 952, 963, 965, 988, 990, 993, 1000, 1001, 1002, 1005, 1008, 1009, 1011, 1012, 1015, 1017, 1019, 1020, 1024, 1029, 1037, 1043, 1044, 1045, 1048, 1051], "ott": 1039, "oudshoorn": [631, 995], "ought": 363, "our": [0, 44, 45, 47, 51, 52, 53, 78, 87, 90, 103, 104, 112, 113, 117, 121, 122, 135, 136, 142, 144, 145, 147, 148, 164, 169, 171, 176, 177, 178, 184, 186, 187, 188, 189, 190, 212, 216, 230, 234, 236, 246, 263, 264, 270, 273, 276, 277, 283, 293, 307, 310, 316, 320, 322, 327, 334, 337, 343, 345, 347, 351, 352, 353, 359, 364, 375, 378, 380, 381, 384, 388, 389, 390, 391, 399, 408, 412, 415, 416, 418, 419, 445, 451, 565, 648, 696, 712, 724, 730, 742, 760, 850, 851, 852, 854, 856, 858, 859, 860, 994, 995, 1001, 1002, 1005, 1011, 1015, 1018, 1019, 1020, 1025, 1028, 1029, 1042, 1043, 1045, 1046, 1049, 1050, 1052], "our_rand_r": 1044, "oura": [1048, 1049, 1050], "ourselv": 1029, "ouss1508": [1050, 1051], "out": [0, 2, 43, 44, 47, 49, 50, 52, 53, 55, 56, 64, 67, 76, 84, 89, 104, 128, 134, 139, 141, 142, 148, 149, 162, 184, 186, 187, 188, 189, 198, 212, 214, 216, 220, 230, 249, 255, 257, 264, 268, 270, 273, 278, 282, 283, 287, 289, 315, 316, 322, 332, 334, 336, 337, 340, 347, 351, 362, 371, 373, 374, 376, 378, 379, 380, 382, 388, 390, 396, 402, 408, 411, 413, 415, 416, 418, 424, 434, 435, 436, 437, 443, 444, 446, 447, 448, 450, 455, 473, 483, 484, 485, 486, 501, 517, 518, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 591, 592, 594, 607, 610, 611, 638, 643, 644, 645, 646, 655, 659, 670, 672, 677, 679, 680, 692, 693, 696, 705, 731, 745, 804, 806, 807, 808, 809, 811, 812, 813, 814, 818, 834, 843, 844, 845, 846, 847, 850, 852, 857, 858, 860, 864, 865, 866, 874, 878, 885, 897, 900, 901, 923, 966, 968, 973, 993, 995, 999, 1000, 1004, 1005, 1006, 1008, 1013, 1015, 1025, 1026, 1027, 1029, 1031, 1035, 1037, 1039, 1041, 1043, 1044, 1047, 1048, 1051, 1053], "out_activation_": [865, 866], "out_bounds_predict": 214, "out_fil": [920, 1021], "out_of_bound": [242, 639], "out_of_cluster_doc": 58, "outcom": [44, 141, 187, 283, 390, 396, 415, 571, 662, 713, 746, 798, 836, 903, 904, 905, 910, 913, 1001, 1005, 1021, 1028, 1039, 1043, 1045], "outdat": 379, "outer": [59, 126, 275, 331, 452, 516, 644, 654, 655, 658, 997, 1036], "outer_cv": [275, 326], "outer_numb": 331, "outermost": 344, "outli": [49, 112, 390, 470, 475, 1001, 1011], "outlier": [2, 43, 71, 80, 88, 112, 113, 147, 151, 171, 184, 193, 210, 214, 215, 216, 217, 218, 226, 238, 291, 309, 314, 317, 339, 349, 371, 390, 408, 410, 415, 430, 436, 447, 465, 467, 470, 471, 474, 475, 476, 477, 491, 492, 494, 498, 512, 514, 524, 526, 565, 635, 643, 653, 674, 675, 676, 680, 681, 682, 683, 696, 706, 834, 854, 858, 869, 877, 878, 880, 881, 882, 884, 885, 886, 887, 888, 893, 894, 895, 896, 897, 898, 899, 911, 912, 914, 1005, 1019, 1020, 1024, 1026, 1027, 1030, 1031, 1035, 1040, 1041, 1043], "outlier_detector": [249, 430, 927], "outlier_label": [858, 1045], "outlier_label_": 858, "outlier_mask": 215, "outlier_plot": 112, "outliermixin": [2, 1052], "outliers_": 653, "outliers_cov": 112, "outliers_fract": 239, "outliers_index": 113, "outliers_offset": 113, "outlin": [100, 143, 376, 378, 390, 391, 393, 408, 994, 1031], "outlying": 1011, "outperform": [110, 117, 150, 155, 287, 315, 388, 412, 415, 453, 463, 1007, 1015], "output": [2, 31, 32, 52, 55, 63, 65, 73, 87, 93, 124, 134, 135, 138, 143, 155, 171, 179, 182, 183, 184, 187, 238, 246, 253, 258, 263, 264, 268, 270, 273, 277, 279, 280, 284, 287, 290, 311, 314, 316, 317, 319, 322, 323, 325, 327, 352, 353, 358, 369, 370, 371, 373, 376, 378, 382, 384, 388, 389, 390, 406, 407, 408, 409, 411, 412, 415, 416, 417, 418, 424, 429, 432, 438, 442, 443, 444, 446, 447, 448, 450, 451, 453, 460, 461, 463, 464, 465, 466, 467, 468, 469, 483, 484, 485, 486, 489, 492, 494, 495, 496, 497, 498, 499, 505, 507, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 615, 631, 632, 633, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 650, 651, 654, 656, 657, 658, 661, 662, 664, 665, 666, 667, 670, 671, 672, 675, 677, 678, 680, 682, 683, 685, 686, 687, 688, 692, 693, 694, 696, 698, 700, 703, 704, 717, 718, 725, 727, 728, 730, 732, 739, 749, 750, 752, 754, 755, 756, 757, 758, 760, 765, 771, 776, 789, 792, 794, 795, 801, 802, 803, 805, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 829, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 851, 852, 853, 857, 858, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 896, 897, 900, 901, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 928, 929, 934, 935, 937, 940, 952, 953, 960, 961, 963, 971, 991, 994, 995, 997, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1020, 1026, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "output_dict": [717, 1043, 1047], "output_distribut": [108, 310, 314, 409, 884, 885, 896, 897, 1015], "output_fil": 488, "output_indices_": [465, 1048], "output_label": 331, "output_label_arrai": 331, "outputcodeclassifi": [2, 287, 399, 836, 837, 1042, 1047, 1051, 1052], "outputs_2d_": [850, 858, 1045], "outreach": 391, "outsid": [46, 49, 58, 143, 213, 214, 242, 253, 402, 416, 447, 639, 887, 1011, 1043], "outward": 310, "outweigh": 1039, "ouvert": [762, 763, 1003], "ova": [221, 670, 672, 680, 1019], "ovb": [186, 187], "over": [0, 2, 31, 44, 47, 48, 49, 59, 62, 64, 65, 68, 73, 84, 89, 90, 105, 106, 107, 121, 138, 141, 145, 150, 151, 164, 168, 171, 179, 182, 186, 188, 197, 205, 207, 212, 220, 230, 239, 249, 264, 270, 271, 273, 275, 277, 278, 279, 282, 295, 303, 305, 306, 312, 322, 323, 325, 329, 351, 352, 363, 364, 365, 371, 372, 375, 376, 377, 378, 382, 389, 390, 404, 406, 408, 409, 412, 413, 414, 415, 416, 420, 447, 450, 465, 473, 511, 535, 536, 538, 539, 540, 541, 548, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 585, 591, 592, 594, 597, 605, 634, 636, 637, 638, 648, 649, 650, 651, 656, 657, 662, 664, 665, 666, 667, 669, 670, 671, 672, 680, 681, 682, 689, 690, 701, 720, 722, 743, 767, 792, 797, 801, 804, 807, 808, 810, 815, 816, 818, 827, 829, 830, 831, 832, 833, 835, 864, 865, 866, 867, 883, 887, 908, 916, 918, 925, 931, 940, 945, 946, 947, 994, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1029, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "overal": [44, 79, 135, 138, 141, 145, 155, 176, 205, 230, 264, 267, 290, 315, 316, 352, 363, 375, 376, 382, 405, 406, 415, 448, 450, 465, 472, 473, 479, 551, 855, 889, 1002, 1005, 1021, 1029, 1045], "overallqu": 155, "overcom": [142, 216, 363, 416], "overcomplet": 413, "overconstrain": 150, "overestim": [128, 359, 412], "overfit": [44, 65, 140, 145, 147, 150, 184, 188, 189, 190, 194, 209, 213, 216, 239, 257, 262, 264, 265, 271, 275, 283, 284, 305, 311, 312, 314, 315, 316, 317, 340, 347, 355, 357, 371, 390, 406, 407, 412, 415, 438, 489, 490, 563, 564, 569, 570, 661, 804, 807, 808, 818, 826, 830, 831, 865, 866, 868, 883, 887, 1000, 1009, 1011, 1013, 1015, 1021, 1026, 1029, 1038], "overflow": [375, 384, 388, 404, 1028, 1038, 1042, 1043, 1044, 1045, 1046, 1048], "overflowerror": 1045, "overhead": [48, 290, 364, 365, 376, 382, 385, 388, 390, 415, 442, 446, 450, 536, 703, 840, 841, 843, 844, 845, 846, 847, 848, 849, 1007, 1008, 1038, 1043, 1044, 1047], "overlai": [384, 636], "overlaid": 1012, "overlap": [2, 52, 53, 73, 89, 127, 148, 168, 205, 235, 257, 352, 405, 408, 412, 415, 416, 590, 796, 797, 805, 806, 809, 811, 812, 813, 814, 821, 822, 824, 1002, 1015, 1041], "overli": [53, 63, 64, 202, 275, 359, 413, 1005], "overlin": [270, 405], "overparameter": 1001, "overrid": [188, 378, 416, 447, 451, 458, 544, 550, 591, 592, 594, 596, 597, 600, 636, 637, 660, 668, 689, 690, 810, 827, 850, 851, 852, 854, 856, 858, 859, 860, 1035, 1043, 1045, 1049, 1051], "overridden": [378, 390, 418, 544, 550, 620, 625, 628, 636, 637, 698, 1043, 1044, 1051], "oversampl": [546, 1035], "oversc": 1050, "overset": [413, 1012], "overst": 187, "oversubscript": [782, 1049], "overview": [108, 184, 275, 286, 289, 355, 377, 379, 389, 390, 498, 738, 747, 804, 820, 831, 836, 837, 838, 916, 1007, 1019, 1026, 1030, 1031], "overwhelm": 376, "overwrit": [150, 447, 498, 635, 1035, 1046, 1051, 1052], "overwrite_": 1035, "overwritten": [443, 534, 535, 536, 538, 543, 550, 610, 611, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 676, 678, 683, 685, 686, 687, 688, 690, 974, 1048], "ovo": [287, 319, 792, 836, 910, 913, 1005, 1006, 1020], "ovo_tpr": 279, "ovo_tre": 287, "ovr": [2, 67, 227, 287, 289, 319, 348, 662, 663, 792, 837, 908, 910, 913, 1005, 1006, 1020, 1035, 1040, 1041, 1043, 1044, 1045, 1049, 1050], "ovr_jaccard_scor": 289, "ovr_tre": 287, "ow": 94, "owen": [653, 1044, 1045], "own": [2, 16, 53, 71, 141, 230, 246, 260, 290, 292, 331, 352, 364, 370, 379, 381, 384, 385, 394, 407, 408, 420, 424, 441, 455, 535, 559, 566, 650, 801, 802, 850, 851, 852, 854, 856, 858, 859, 860, 882, 916, 918, 940, 945, 1001, 1007, 1008, 1011, 1015, 1020, 1024, 1029, 1042, 1043, 1045, 1052], "owner": [246, 371, 373, 960, 961], "ownership": 378, "oyamada": 1040, "oyindamola": 1050, "oywa": 1045, "ozga": 1043, "ozsvald": 1037, "p": [0, 2, 51, 54, 62, 64, 65, 77, 95, 112, 113, 116, 119, 128, 146, 165, 174, 192, 224, 229, 230, 232, 234, 243, 270, 276, 277, 303, 370, 371, 373, 374, 381, 384, 405, 406, 407, 408, 410, 411, 413, 415, 417, 418, 419, 421, 443, 445, 447, 448, 451, 456, 457, 458, 470, 472, 475, 476, 479, 500, 530, 536, 540, 542, 543, 549, 551, 552, 553, 555, 557, 558, 559, 560, 561, 563, 566, 567, 568, 593, 595, 596, 597, 598, 599, 601, 602, 603, 607, 608, 609, 610, 611, 612, 619, 620, 631, 644, 647, 692, 694, 696, 698, 703, 709, 719, 728, 745, 756, 790, 792, 806, 812, 813, 814, 817, 833, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 864, 868, 869, 884, 896, 902, 918, 919, 920, 998, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1019, 1020, 1035, 1036, 1038, 1041, 1043, 1050, 1051, 1052], "p0": 64, "p1": [64, 157], "p1d": 64, "p2": [64, 157, 230], "p3": 157, "p4": 157, "p5": 952, "p592": 139, "p_": [165, 1005, 1008, 1021], "p_c": [119, 525], "p_e": 720, "p_grid": 275, "p_i": [1005, 1008], "p_k": [277, 1005], "p_n": [277, 711, 1005], "p_o": 720, "p_val": 270, "p_val_uncorrect": 270, "p_valu": [607, 608, 609], "p_w": 119, "p_w_c": [119, 525], "pa": [670, 671, 905, 1001, 1005, 1018], "pab": [1050, 1051], "pablo": [1045, 1048, 1049], "pabloduque0": 1048, "pace": 371, "pacha": 1043, "pacif": 270, "pack": [385, 1043], "packag": [0, 81, 87, 182, 246, 290, 364, 369, 370, 373, 374, 376, 377, 378, 380, 384, 385, 388, 390, 394, 395, 402, 410, 415, 416, 453, 479, 650, 651, 995, 1001, 1004, 1008, 1015, 1021, 1029, 1035, 1041, 1043, 1044, 1045], "packet": 363, "packg": 394, "pacman": 394, "paczuski": [1043, 1044], "pad": [121, 143, 182, 188, 232, 249, 351, 356, 416, 591, 592, 594], "page": [0, 56, 232, 321, 363, 371, 373, 376, 378, 380, 382, 384, 391, 408, 410, 474, 518, 519, 520, 632, 648, 838, 903, 952, 995, 1001, 1005, 1006, 1033, 1035, 1039, 1040], "page_links_en": 56, "page_links_filenam": 56, "page_links_url": 56, "pagerank": [56, 952], "pagh": [192, 997], "pai": [0, 187, 230, 264, 376], "paid": 1001, "pain": 388, "paint": [920, 922], "pair": [2, 50, 53, 73, 80, 92, 98, 126, 137, 139, 143, 147, 162, 175, 179, 195, 221, 224, 230, 243, 265, 270, 277, 279, 334, 336, 338, 340, 341, 342, 344, 352, 356, 371, 388, 390, 405, 406, 409, 412, 416, 418, 438, 441, 442, 446, 451, 458, 464, 472, 473, 479, 495, 510, 511, 585, 595, 598, 599, 601, 602, 603, 614, 617, 618, 619, 621, 623, 624, 626, 627, 629, 631, 636, 637, 647, 649, 696, 703, 704, 709, 710, 711, 719, 735, 744, 762, 763, 767, 770, 773, 774, 775, 776, 777, 778, 780, 782, 783, 784, 785, 786, 790, 836, 848, 849, 923, 1005, 1006, 1007, 1008, 1015, 1021, 1035, 1047, 1048, 1050, 1051, 1052], "pair_confusion_matrix": [2, 408, 1047], "pair_list": 279, "pair_scor": 279, "paired_cosine_dist": [2, 404], "paired_dist": [2, 767, 773, 782, 1039], "paired_euclidean_dist": [2, 404], "paired_manhattan_dist": 2, "pairidx": 356, "pairplot": [127, 186, 187], "pairwis": [2, 38, 98, 186, 187, 243, 249, 279, 319, 323, 324, 351, 363, 368, 390, 404, 408, 413, 418, 442, 447, 455, 459, 462, 463, 469, 488, 510, 511, 537, 563, 564, 624, 642, 643, 644, 645, 646, 647, 692, 694, 696, 698, 700, 703, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 792, 796, 797, 836, 852, 856, 860, 874, 906, 925, 997, 1005, 1008, 1017, 1020, 1031, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1050, 1051, 1052, 1053], "pairwise_bayesian": 270, "pairwise_bayesian_df": 270, "pairwise_comp_df": 270, "pairwise_dist": [2, 76, 327, 390, 408, 419, 445, 447, 451, 458, 692, 700, 766, 775, 783, 784, 796, 797, 852, 854, 856, 860, 1003, 1035, 1039, 1041, 1043, 1044, 1046, 1047, 1052, 1053], "pairwise_dist_chunk_s": [469, 906], "pairwise_distance_funct": [696, 700, 782, 785, 1008], "pairwise_distances_argmin": [2, 98, 323, 784, 1043, 1049, 1050, 1051, 1052], "pairwise_distances_argmin_min": [2, 323, 783, 1038, 1043, 1049, 1050, 1051, 1052], "pairwise_distances_chunk": [2, 363, 782, 1043, 1046, 1052], "pairwise_indices_": 836, "pairwise_kernel": [2, 390, 418, 453, 463, 647, 769, 874, 1003, 1035, 1042, 1052], "pairwise_kernel_funct": [624, 647, 778], "pairwise_kernels_kwarg": 624, "pairwise_t_test": 270, "pairwisedistancesreduct": 364, "pairwisekernel": [2, 418], "paislei": [413, 538], "pakdd": 408, "pal": [1043, 1049], "palacio": 1048, "palafox": 1035, "palett": [187, 270], "palevioletr": [226, 296, 339], "palioura": [843, 1007], "paliw": 1043, "palladium": 1029, "palmol": 52, "pami": [373, 408, 729], "pamnani": 1043, "pan": 396, "panchal": 1047, "pancholi": 1042, "panda": [2, 44, 52, 63, 103, 104, 105, 135, 141, 142, 144, 147, 150, 152, 168, 176, 182, 186, 187, 188, 189, 190, 194, 198, 202, 212, 216, 220, 230, 249, 250, 253, 260, 264, 268, 270, 271, 273, 281, 282, 284, 287, 315, 316, 317, 319, 322, 323, 347, 351, 352, 370, 371, 374, 375, 376, 378, 379, 384, 388, 390, 394, 401, 409, 432, 443, 444, 446, 448, 450, 465, 467, 469, 483, 484, 485, 486, 490, 491, 492, 494, 498, 502, 503, 504, 506, 507, 512, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 563, 564, 568, 569, 570, 571, 572, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 636, 637, 639, 642, 643, 644, 645, 646, 692, 693, 696, 804, 807, 808, 818, 834, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 930, 994, 995, 1015, 1024, 1025, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pandata": [1050, 1051], "pandei": [1042, 1047], "panel": [261, 295, 310, 414, 1024], "panga": [1050, 1051], "panico": [1043, 1047], "pankaj": 1047, "pano": 1041, "panpiort8": [1045, 1047], "paolo": [0, 398, 1035, 1039, 1045, 1053], "papadopoulo": [1048, 1049, 1050, 1051, 1052], "papapanagiot": 1042, "paper": [0, 192, 264, 270, 373, 382, 388, 408, 410, 415, 443, 450, 479, 506, 536, 543, 565, 645, 662, 670, 671, 675, 680, 683, 696, 792, 845, 854, 857, 900, 901, 1001, 1005, 1008, 1011, 1020, 1035, 1042, 1043], "paper355": 675, "papier": [668, 689, 690], "par": 1015, "paraboloid": 1001, "paradi": 1050, "paradigm": 1001, "paragraph": [416, 505], "paralel": 1051, "parallel": [2, 54, 139, 141, 143, 188, 214, 271, 320, 321, 323, 345, 358, 362, 368, 374, 376, 377, 379, 388, 390, 409, 419, 420, 438, 445, 447, 449, 450, 451, 453, 458, 459, 462, 465, 468, 473, 533, 535, 536, 537, 539, 541, 543, 544, 545, 547, 548, 550, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 592, 597, 605, 610, 611, 614, 636, 638, 643, 662, 692, 693, 694, 695, 696, 697, 698, 785, 804, 807, 808, 810, 815, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 867, 870, 903, 904, 971, 974, 1025, 1031, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "parallel_backend": [2, 364, 419, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 473, 533, 537, 538, 539, 541, 544, 545, 547, 548, 550, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 597, 605, 610, 611, 614, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 854, 856, 858, 859, 861, 862, 867, 870, 903, 904, 1043, 1053], "parallel_batch_queri": 290, "parallel_coordin": 271, "parallel_help": 1045, "parallelbackendbas": 974, "parallelis": [271, 469, 906, 1042], "param": [80, 89, 95, 96, 104, 145, 146, 148, 149, 232, 245, 246, 268, 270, 278, 282, 294, 306, 326, 372, 376, 378, 390, 399, 415, 418, 422, 425, 431, 432, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 816, 818, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 964, 993, 994, 1041, 1045, 1046, 1048, 1049, 1052, 1053], "param1": 378, "param2": 378, "param3": 378, "param_": 141, "param_c": [281, 804], "param_classifier__c": 104, "param_covariance_typ": 260, "param_degre": 804, "param_dist": [278, 282, 321], "param_distribut": [171, 271, 278, 282, 321, 389, 808, 816, 818, 1051], "param_gamma": [281, 804, 818], "param_grid": [44, 46, 104, 105, 106, 107, 141, 147, 245, 251, 260, 264, 269, 270, 274, 275, 278, 281, 287, 292, 312, 326, 340, 390, 399, 409, 415, 746, 804, 807, 815, 816, 994, 1005], "param_kernel": [804, 818], "param_list": 816, "param_min_samples_split": 274, "param_n_compon": 260, "param_nam": [141, 271, 283, 325, 347, 399, 827, 835, 1000], "param_pca__n_compon": 106, "param_preprocessor__cat__selector__percentil": 104, "param_preprocessor__num__imputer__strategi": 104, "param_rang": [283, 325, 347, 827, 835, 1000, 1051], "param_reduce_dim__n_compon": 269, "param_valu": 47, "paramet": [2, 26, 28, 44, 45, 49, 50, 51, 54, 55, 65, 71, 80, 88, 89, 92, 94, 95, 96, 104, 105, 106, 111, 113, 114, 119, 121, 127, 133, 135, 139, 141, 143, 144, 145, 148, 149, 150, 160, 166, 169, 171, 172, 176, 177, 178, 179, 180, 182, 183, 184, 187, 188, 194, 195, 196, 197, 198, 200, 201, 202, 204, 209, 212, 214, 216, 217, 220, 229, 230, 236, 237, 239, 241, 244, 245, 246, 255, 257, 258, 260, 261, 263, 264, 269, 270, 271, 272, 274, 275, 278, 281, 282, 287, 290, 292, 293, 296, 297, 303, 305, 306, 308, 310, 311, 312, 314, 315, 319, 320, 322, 323, 324, 325, 333, 335, 337, 342, 344, 345, 346, 348, 349, 351, 352, 353, 355, 356, 357, 359, 363, 364, 365, 368, 369, 371, 378, 379, 381, 383, 384, 385, 388, 399, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1021, 1024, 1025, 1026, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "parameter": [355, 418, 618, 619, 626, 627, 801, 802, 1001, 1002, 1010, 1015, 1021], "parameter_grid": 271, "parameter_nam": [569, 570, 571, 572], "parametergrid": [2, 804, 1037, 1043], "parameters_str": 89, "parametersampl": [2, 818, 1037, 1043, 1047], "parametr": [2, 49, 62, 63, 114, 242, 294, 314, 322, 406, 409, 414, 415, 438, 553, 555, 639, 689, 700, 884, 896, 945, 947, 1001, 1004, 1007, 1008, 1015, 1018, 1021, 1043, 1045, 1048], "parametrize_with_check": [2, 319, 378, 390, 945, 1045, 1046], "params_str": 282, "parcel": [88, 101, 408], "parch": 189, "pardeep": 1047, "parel": 1039, "parent": [48, 186, 246, 358, 376, 380, 390, 408, 443, 464, 961, 962, 1035, 1052], "parent_hourly_wag": 186, "parenthes": 941, "parenthesi": [77, 376], "paresh": [1044, 1045], "pareto": 214, "pargent": 1015, "pari": [0, 373, 409, 467, 768, 876, 1016, 1049], "pariet": [1029, 1035], "parikh": [1044, 1049, 1050, 1051, 1052, 1053], "parimi": 1053, "paris_in_radian": 768, "paristech": 0, "pariti": 1021, "parizi": 1050, "park": [1040, 1045, 1047, 1050, 1051], "parmet": 1052, "parmind": 1042, "parquet": 53, "parra": 1043, "parri": [1040, 1041, 1042], "pars": [48, 56, 363, 370, 371, 377, 510], "parse_vers": [148, 190, 319, 674], "parser": [48, 150, 264, 284, 319, 323, 498, 1050, 1051], "parsifalxu": 1053, "parsimoni": [413, 1015], "parsing_tim": 48, "parson": [1046, 1048], "part": [0, 45, 46, 68, 72, 85, 95, 104, 114, 121, 124, 127, 138, 141, 143, 147, 153, 160, 161, 162, 166, 176, 184, 194, 246, 248, 258, 264, 265, 267, 285, 305, 312, 315, 317, 353, 365, 371, 373, 376, 378, 382, 384, 389, 390, 394, 396, 404, 406, 407, 408, 412, 413, 415, 416, 418, 447, 450, 495, 496, 497, 523, 533, 539, 544, 576, 587, 588, 589, 617, 629, 797, 873, 891, 893, 894, 895, 896, 897, 898, 899, 994, 995, 997, 1002, 1006, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1035, 1043, 1044, 1046, 1048, 1050], "part3": 412, "part_of_speech": 416, "partev": [1049, 1050, 1051, 1052], "parthiv": 1047, "parti": [230, 287, 325, 364, 375, 378, 388, 402, 806, 813, 1035, 1046, 1051, 1052], "partial": [2, 44, 48, 52, 84, 115, 116, 152, 184, 185, 230, 238, 321, 324, 373, 376, 390, 393, 410, 411, 413, 415, 418, 465, 483, 484, 485, 486, 498, 503, 536, 538, 543, 564, 592, 636, 637, 661, 792, 834, 836, 837, 864, 865, 866, 869, 881, 882, 885, 888, 917, 1002, 1009, 1019, 1026, 1031, 1032, 1036, 1043, 1044, 1048, 1052], "partial_correl": 52, "partial_depend": [2, 188, 636, 1012, 1036, 1044, 1045, 1046, 1047, 1050, 1051], "partial_fit": [48, 84, 121, 323, 365, 378, 390, 408, 413, 443, 450, 536, 538, 539, 540, 592, 600, 662, 663, 670, 671, 672, 680, 681, 682, 836, 837, 840, 841, 843, 844, 845, 846, 847, 864, 865, 866, 877, 878, 888, 908, 993, 1001, 1007, 1009, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "partial_fit_": 1048, "partial_fit_classifi": 48, "partial_fit_param": [600, 836, 837, 840, 841], "partialdependencedisplai": [2, 150, 152, 188, 250, 320, 321, 322, 324, 326, 383, 637, 1012, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "particip": [375, 376, 391, 1029], "particl": 1010, "particular": [0, 44, 51, 54, 65, 73, 75, 76, 94, 104, 110, 119, 126, 129, 144, 147, 150, 151, 175, 182, 187, 188, 212, 214, 220, 244, 264, 267, 271, 273, 279, 290, 299, 303, 310, 319, 320, 323, 352, 353, 359, 363, 364, 370, 371, 374, 375, 376, 378, 381, 382, 384, 385, 389, 390, 394, 408, 409, 412, 413, 415, 416, 417, 418, 447, 470, 474, 498, 546, 565, 612, 657, 662, 667, 676, 678, 688, 691, 716, 732, 789, 840, 933, 935, 995, 997, 999, 1001, 1005, 1008, 1009, 1010, 1011, 1013, 1015, 1029, 1035, 1038, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1052], "particularli": [59, 68, 103, 104, 107, 130, 153, 187, 213, 241, 270, 284, 312, 320, 327, 349, 359, 363, 376, 378, 385, 390, 408, 409, 411, 414, 416, 498, 613, 810, 827, 845, 952, 973, 1001, 1002, 1005, 1007, 1013, 1025, 1029, 1035, 1040, 1042, 1043, 1049], "partit": [81, 100, 103, 151, 153, 270, 307, 390, 405, 406, 408, 412, 415, 450, 452, 454, 463, 513, 559, 560, 561, 562, 565, 566, 567, 708, 709, 719, 790, 856, 916, 917, 918, 919, 1004, 1008, 1011, 1015, 1021], "partli": [81, 402, 773], "partnership": 1029, "parvu": 373, "pasbi": [1042, 1043], "pascal": 1005, "pascual": 1038, "paskov": 1042, "pass": [2, 44, 47, 48, 59, 60, 71, 74, 141, 150, 152, 166, 188, 196, 198, 213, 240, 242, 243, 246, 249, 250, 252, 260, 264, 268, 271, 317, 319, 322, 327, 345, 353, 359, 363, 364, 365, 371, 376, 377, 378, 381, 382, 383, 384, 385, 388, 390, 399, 402, 404, 407, 408, 409, 412, 413, 415, 416, 418, 419, 420, 425, 426, 430, 431, 438, 439, 441, 443, 444, 445, 447, 448, 449, 450, 451, 453, 455, 458, 460, 461, 463, 465, 466, 468, 469, 470, 473, 475, 483, 484, 485, 489, 492, 494, 497, 498, 499, 505, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 584, 585, 591, 592, 593, 594, 596, 597, 600, 605, 610, 611, 614, 615, 621, 624, 630, 635, 636, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 715, 736, 737, 746, 767, 778, 782, 783, 784, 785, 792, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 879, 880, 881, 882, 883, 885, 887, 888, 889, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 928, 933, 934, 935, 941, 945, 947, 951, 952, 954, 956, 959, 961, 964, 965, 974, 975, 978, 988, 993, 994, 995, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1018, 1019, 1020, 1025, 1029, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "passiv": [2, 48, 219, 670, 671, 1027, 1031, 1036], "passiveaggress": [365, 416], "passiveaggressiveclassifi": [2, 48, 219, 363, 365, 1001, 1006, 1036, 1039, 1040, 1042, 1043, 1046, 1048, 1053], "passiveaggressiveregressor": [2, 365, 1001, 1036, 1039, 1042, 1043, 1046, 1048, 1053], "passo": [0, 398, 1035, 1036], "passthrough": [44, 105, 144, 187, 188, 212, 230, 249, 316, 324, 409, 465, 468, 569, 570, 867, 868, 1015, 1044, 1046, 1049, 1050, 1052], "passthrough_numer": [212, 230], "past": [51, 53, 380, 381, 384, 388, 391, 412, 413, 415, 540, 557, 558, 682, 1029, 1051], "pat": [632, 995], "patch": [2, 71, 84, 249, 255, 256, 257, 260, 261, 265, 371, 388, 413, 415, 557, 558, 586, 587, 590, 1035, 1043], "patch_height": [586, 587, 590], "patch_siz": [84, 124, 416, 586, 587, 590], "patch_width": [586, 587, 590], "patchextractor": [2, 416, 1051], "patel": [1043, 1045, 1046, 1047, 1049], "path": [2, 48, 56, 184, 193, 198, 199, 202, 204, 207, 216, 228, 283, 347, 355, 370, 374, 376, 380, 384, 385, 390, 402, 442, 446, 451, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 510, 511, 550, 559, 560, 565, 566, 567, 568, 596, 597, 600, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 685, 686, 687, 688, 689, 690, 692, 868, 869, 915, 916, 917, 918, 919, 958, 994, 1001, 1002, 1011, 1026, 1035, 1036, 1039, 1041, 1042, 1044, 1045, 1047, 1048, 1050, 1051], "path_length": 958, "path_method": [692, 1002], "pathak": [1050, 1051], "patheffect": 76, "pathlib": [48, 1050, 1051], "pathlik": [498, 1051], "patholog": [86, 1004, 1041], "pathwai": 377, "pati": 1037, "patienc": [384, 390], "patient": [47, 158, 169, 183, 373, 384, 407, 412, 1001], "patil": [1049, 1052], "paton": 1048, "patric": [1047, 1048], "patricio": 1049, "patrick": [1042, 1043, 1048, 1049, 1052, 1053], "patrini": [1040, 1041, 1042], "pattaniyil": 1045, "pattern": [44, 53, 59, 97, 114, 116, 120, 127, 128, 171, 182, 184, 188, 198, 216, 246, 249, 322, 344, 351, 352, 353, 359, 373, 376, 378, 391, 405, 408, 409, 413, 415, 416, 449, 465, 467, 506, 534, 536, 543, 557, 558, 642, 712, 729, 745, 773, 792, 793, 801, 888, 997, 999, 1001, 1005, 1006, 1012, 1020, 1022, 1025, 1026, 1029, 1047], "patterson": [496, 1040], "paul": [371, 1038, 1041, 1042, 1043, 1044, 1048, 1049], "paula": [1045, 1046, 1053], "pauli": 1040, "paulo": [1042, 1048, 1050], "paus": 81, "pava": 639, "pavel": [1036, 1044], "pavlo": [1043, 1044], "pavlyk": [1043, 1044, 1045, 1046], "pawel": 1044, "pawe\u0142": [1038, 1042, 1047, 1048], "payn": 1045, "pazzani": 65, "pb_q": [322, 1001], "pbl": 147, "pc": [58, 333, 353, 371], "pca": [2, 11, 43, 46, 56, 69, 70, 85, 100, 102, 103, 105, 107, 108, 117, 120, 123, 130, 131, 161, 184, 221, 233, 235, 242, 244, 247, 251, 257, 263, 269, 276, 278, 281, 290, 293, 294, 299, 308, 322, 356, 359, 368, 378, 390, 404, 408, 409, 414, 424, 474, 477, 485, 498, 504, 506, 516, 534, 535, 536, 537, 541, 542, 545, 546, 551, 647, 662, 692, 694, 696, 700, 804, 830, 834, 857, 864, 867, 868, 870, 878, 886, 888, 923, 997, 999, 1002, 1008, 1015, 1019, 1021, 1026, 1030, 1031, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1052, 1053], "pca0": 424, "pca1": [409, 424], "pca2": [409, 424], "pca_2": 117, "pca__n_compon": 106, "pca_back_proj_ax": 126, "pca_estim": 121, "pca_proj_ax": 126, "pca_scor": 128, "pcd": [864, 1010], "pchelintsev": 1047, "pclass": [104, 189, 253, 319, 323, 324], "pcolor": 172, "pcolormesh": [71, 153, 162, 293, 298, 336, 340, 344, 635], "pcr": [117, 411], "pd": [44, 52, 63, 104, 105, 135, 141, 142, 147, 152, 168, 182, 186, 187, 188, 189, 190, 194, 198, 202, 212, 216, 220, 230, 250, 253, 260, 268, 270, 271, 273, 281, 282, 284, 287, 315, 316, 317, 322, 323, 347, 351, 352, 381, 390, 409, 465, 467, 631, 632, 633, 634, 636, 782, 932, 934, 935, 994, 995, 1012, 1015, 1046, 1048, 1049, 1050, 1052], "pd2000": 1005, "pd_": 1012, "pd_line_kw": 636, "pd_result": 636, "pdb": 384, "pdbcl": 384, "pdf": [270, 295, 310, 373, 376, 408, 417, 443, 450, 533, 536, 539, 543, 645, 648, 653, 662, 668, 670, 671, 675, 680, 683, 686, 687, 689, 690, 696, 845, 857, 864, 901, 903, 1001, 1018, 1021, 1028, 1035], "pdist": [696, 782, 785], "pdp": [2, 636, 1012, 1049], "pdp_lim": 636, "pdp_line_kw": 636, "pe": 586, "pe_tran": 586, "peai": 1044, "peak": [44, 53, 65, 188, 406, 412, 1049], "pear": 1006, "pearson": [2, 609, 612, 1048], "pearu": 1035, "pedersen": [1039, 1051], "pedigo": [1047, 1048], "pedregosa": [0, 398, 1035, 1036, 1037, 1038, 1039, 1041], "pedro": [1036, 1038, 1039, 1043], "peek": [188, 376, 1012], "peer": 1029, "peev": [1043, 1046], "pegaso": 1019, "pei": [408, 1042], "peixinho": 1049, "pelennor": 1049, "penal": [2, 54, 67, 114, 155, 198, 202, 206, 212, 216, 228, 230, 283, 315, 347, 408, 410, 413, 415, 417, 470, 471, 472, 473, 474, 475, 476, 477, 479, 563, 564, 651, 656, 657, 665, 667, 680, 709, 719, 738, 790, 799, 881, 908, 909, 915, 1001, 1005, 1007, 1009, 1019, 1020], "penalis": [210, 227, 700], "penalti": [2, 26, 47, 50, 67, 114, 184, 193, 194, 198, 201, 202, 206, 212, 216, 219, 227, 228, 241, 278, 283, 305, 322, 333, 345, 351, 363, 384, 388, 410, 413, 417, 472, 473, 474, 475, 476, 477, 479, 504, 533, 539, 540, 541, 542, 544, 545, 549, 550, 600, 647, 650, 651, 652, 653, 656, 657, 658, 661, 662, 663, 664, 665, 666, 672, 673, 674, 676, 680, 682, 684, 685, 691, 818, 888, 908, 909, 911, 913, 914, 915, 994, 1001, 1004, 1009, 1015, 1019, 1020, 1026, 1037, 1040, 1042, 1044, 1045, 1047, 1048, 1050, 1051], "peng": [683, 1001, 1041, 1042, 1043, 1045, 1047], "peopl": [2, 46, 187, 248, 273, 351, 364, 365, 371, 373, 375, 376, 380, 391, 414, 495, 496, 645, 845, 1024], "pep": [52, 1035], "pep073": 377, "pep257": 390, "pep440": 380, "pep8": [378, 380], "pepsi": 52, "per": [44, 50, 59, 71, 87, 98, 140, 141, 144, 176, 178, 187, 188, 212, 227, 230, 249, 253, 256, 264, 266, 277, 279, 310, 316, 321, 327, 347, 351, 353, 363, 371, 372, 376, 381, 382, 385, 388, 390, 406, 408, 412, 413, 414, 415, 416, 418, 447, 449, 451, 458, 462, 465, 469, 488, 498, 502, 504, 505, 506, 510, 512, 514, 517, 525, 534, 536, 537, 538, 541, 543, 545, 551, 552, 563, 564, 571, 586, 591, 594, 614, 615, 636, 637, 645, 646, 662, 663, 670, 671, 672, 675, 677, 678, 679, 680, 682, 696, 700, 717, 720, 724, 726, 745, 758, 762, 763, 785, 787, 801, 802, 829, 836, 837, 838, 840, 841, 844, 846, 855, 864, 867, 873, 875, 877, 878, 881, 882, 888, 889, 906, 908, 909, 910, 911, 912, 913, 914, 939, 940, 952, 979, 994, 997, 1001, 1004, 1005, 1006, 1009, 1012, 1019, 1020, 1021, 1025, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052], "perc": 265, "percal": 382, "percent": [135, 494, 603, 1018], "percent10": [249, 494], "percentag": [2, 53, 88, 129, 144, 204, 230, 265, 273, 276, 412, 417, 536, 543, 546, 551, 596, 597, 652, 673, 684, 707, 738, 750, 822, 823, 824, 838, 920, 922, 1006, 1021, 1037, 1041, 1047, 1048], "percentil": [2, 50, 53, 104, 147, 150, 188, 249, 253, 310, 363, 595, 598, 599, 601, 602, 603, 606, 609, 636, 637, 752, 1015, 1040, 1048], "percentile_5_predict": 53, "percentile_95_predict": 53, "percentile_perf_in_u": 50, "percentiles_class": 265, "percept": [164, 188, 1012], "perceptron": [2, 48, 68, 143, 153, 162, 173, 175, 184, 219, 222, 228, 250, 304, 312, 313, 334, 345, 365, 388, 416, 516, 517, 524, 670, 680, 834, 864, 865, 866, 869, 888, 1003, 1006, 1010, 1019, 1026, 1027, 1031, 1039, 1041, 1042, 1043, 1047], "percol": 75, "perdisci": [408, 443], "perdok": 1050, "pere": 1052, "peredachi": [610, 611], "pereira": [1040, 1043, 1044], "peretti": 1050, "perez": [1043, 1050], "perf_count": 249, "perfect": [59, 64, 73, 113, 124, 126, 212, 351, 352, 376, 408, 412, 555, 556, 694, 698, 708, 709, 712, 721, 730, 732, 735, 741, 747, 760, 761, 789, 790, 799, 1001, 1005, 1008, 1020, 1029, 1049], "perfectli": [64, 65, 73, 273, 285, 344, 393, 408, 415, 439, 569, 609, 708, 709, 719, 721, 740, 741, 761, 790, 799, 881, 1000, 1002, 1005, 1020, 1048, 1049], "perform": [2, 26, 28, 30, 31, 42, 44, 47, 53, 58, 62, 63, 64, 69, 72, 74, 76, 83, 87, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 107, 110, 117, 124, 130, 133, 135, 141, 144, 145, 146, 148, 149, 150, 154, 155, 160, 164, 167, 168, 169, 172, 180, 182, 183, 184, 187, 188, 189, 190, 192, 198, 202, 209, 212, 214, 216, 218, 219, 220, 229, 230, 233, 234, 236, 239, 244, 247, 249, 257, 260, 262, 264, 265, 266, 267, 268, 270, 271, 272, 275, 276, 278, 279, 281, 283, 284, 287, 289, 290, 303, 308, 310, 312, 314, 316, 317, 319, 325, 326, 328, 330, 331, 340, 343, 344, 347, 351, 353, 357, 359, 362, 364, 365, 371, 373, 378, 379, 380, 382, 384, 385, 388, 389, 390, 393, 399, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 426, 430, 441, 443, 444, 445, 447, 448, 449, 451, 453, 455, 456, 460, 462, 469, 470, 483, 484, 485, 486, 496, 504, 514, 517, 533, 534, 535, 537, 539, 544, 545, 546, 547, 548, 550, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 585, 586, 591, 592, 593, 594, 597, 604, 605, 606, 614, 615, 631, 634, 635, 642, 644, 649, 655, 658, 659, 660, 662, 668, 669, 670, 671, 672, 674, 677, 679, 680, 681, 682, 686, 687, 689, 691, 693, 694, 697, 698, 701, 707, 708, 709, 711, 712, 716, 717, 730, 733, 734, 742, 744, 746, 759, 760, 761, 782, 787, 788, 790, 791, 792, 798, 799, 800, 801, 802, 804, 807, 808, 815, 816, 818, 822, 829, 830, 831, 833, 834, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 855, 857, 858, 863, 864, 865, 866, 868, 869, 871, 874, 875, 877, 878, 880, 881, 882, 884, 885, 888, 889, 891, 893, 894, 895, 897, 898, 899, 903, 904, 906, 910, 911, 912, 913, 914, 916, 917, 918, 919, 934, 935, 977, 988, 993, 994, 995, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1029, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "performancetip": 382, "perhap": [143, 373, 375, 384, 390, 414], "perimet": 373, "period": [2, 53, 150, 171, 176, 180, 380, 390, 391, 406, 418, 619, 825, 887, 1043, 1048, 1050], "periodic_spline_transform": 44, "periodicity_bound": [171, 176, 180, 619], "peripheri": 408, "perla": 1038, "perm_scores_iri": 276, "perm_scores_rand": 276, "perm_sorted_idx": 190, "permalink": 380, "perman": 384, "permiss": [375, 380, 391, 394, 395, 1029, 1050], "permit": [409, 468, 591, 592, 594, 804, 807, 808, 818, 830, 869, 870, 1005, 1006, 1007, 1041], "permut": [2, 59, 60, 73, 113, 148, 162, 164, 184, 185, 228, 262, 270, 317, 332, 393, 403, 408, 415, 417, 465, 498, 502, 506, 561, 562, 566, 567, 631, 634, 638, 683, 708, 709, 721, 740, 741, 759, 761, 799, 821, 823, 833, 834, 868, 882, 913, 916, 917, 952, 973, 975, 978, 1005, 1019, 1026, 1031, 1035, 1041, 1048, 1050], "permutation_import": [2, 142, 148, 189, 190, 319, 415, 555, 556, 559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919, 1013, 1045, 1047, 1048, 1052], "permutation_scor": 833, "permutation_test_scor": [2, 276, 399, 412, 1035, 1042, 1047], "permuted_categori": 317, "perp_tol": 538, "perpendicular": [71, 345], "perperogl": 1015, "perplex": [184, 231, 232, 234, 236, 290, 516, 527, 538, 696, 1002, 1026, 1040, 1042, 1049], "perri": 1045, "perrin": 1041, "perrot": [0, 1035], "persian": 1024, "persist": [384, 388, 413, 447, 614, 615, 864, 1010, 1024, 1031, 1041, 1044], "persola": 1043, "person": [46, 187, 264, 273, 371, 375, 412, 416, 495, 496, 497, 1015, 1043], "perspect": [89, 94, 212, 284, 363, 371, 388, 391, 532, 647, 908, 998], "pertin": 212, "perturb": [187, 229, 308, 413, 415, 1004], "peru": [51, 303, 371, 500], "pervas": [359, 376], "pessimist": [146, 415], "pessoa": 1048, "pestrickland": 1041, "pet": [322, 326, 792, 1005], "petal": [127, 129, 131, 143, 324, 373, 409, 921, 1021], "petal_col": 324, "petar": 1050, "pete": [1042, 1046, 1047], "peter": [0, 97, 398, 408, 449, 451, 458, 653, 796, 797, 1001, 1005, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1052], "peterlongo": 1052, "peterson": [1035, 1037], "petfood": 1029, "petrov": [1042, 1043, 1051], "petrushev": 1044, "pe\u00f1a": 1039, "pfaffel": 1048, "pfahring": [839, 1006], "pfe": 52, "pfister": 1015, "pfizer": 52, "pft": 213, "pg": [52, 382, 653, 1001, 1040], "pg_i": 653, "pgithub": 1047, "ph": 1047, "pham": [192, 997, 1042], "phan": 413, "pharmaceut": 373, "phase": [44, 198, 207, 363, 631, 997, 1002, 1008, 1029, 1043, 1045], "phase_nois": 76, "phd": [0, 408, 415, 1025, 1029], "phenol": 373, "phenomena": 176, "phenomenon": [352, 1015], "phi": [76, 413, 415, 747, 874, 997, 1005, 1015, 1020], "phi_coeffici": 1005, "phil": [1040, 1051], "philipp": [1037, 1038, 1041, 1050], "phillip": [2, 51, 303, 371, 500], "phlypo": 1038, "phongpanagnam": 1048, "phongpanangam": 1048, "photogrammetr": 1001, "php": 1005, "phrase": 416, "phy": [610, 611], "phyo": 1049, "physic": [2, 141, 364, 507, 969, 1001, 1051], "physician": 407, "physiolog": [273, 373], "pi": [44, 54, 71, 75, 76, 122, 130, 152, 154, 164, 171, 195, 198, 200, 207, 213, 234, 255, 256, 257, 260, 261, 285, 303, 320, 326, 357, 394, 414, 418, 518, 519, 520, 619, 646, 999, 1000, 1001, 1007], "pianomania": 1040, "pick": [89, 94, 190, 247, 278, 323, 329, 371, 376, 380, 408, 415, 444, 461, 525, 677, 918, 919, 994, 1001, 1002, 1004, 1019, 1046], "pickl": [380, 390, 416, 592, 848, 849, 1024, 1025, 1031, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "pickleabl": [872, 1041], "pickup": 1043, "pico": [1038, 1039], "pict": [838, 1006], "pictur": [52, 56, 60, 72, 87, 100, 124, 184, 243, 261, 371, 391, 408, 413, 416, 463, 495, 496, 523, 1025, 1026], "piec": [71, 82, 213, 364, 1004], "piecewis": [130, 322, 405, 996, 1001, 1015, 1021], "pierr": [1035, 1043, 1044, 1046, 1048, 1050, 1052, 1053], "pierreablin": 1043, "pierreattard": [1048, 1049], "pierretallott": [1043, 1044, 1045], "pierron": 1038, "piet": [1049, 1050], "pieter": [56, 1041, 1042, 1049], "pietro": [1035, 1038, 1052], "pietruh": 1043, "pig": 787, "pillow": [376, 394, 401], "pim": 1044, "pin": [382, 402], "pinaki": 1043, "pinbal": [2, 53, 147, 150, 322, 415, 564, 674, 727, 752, 1001, 1048, 1049], "pinball_loss_05": 53, "pinball_loss_50": 53, "pinball_loss_95": 53, "ping": [901, 1017, 1041, 1042], "pink": 195, "pinki": 1049, "pinto": 1035, "pintor": 1046, "pinvh": [1042, 1044], "piontek": 1051, "piotr": [1043, 1044, 1053], "pip": [290, 319, 320, 321, 322, 323, 324, 325, 326, 327, 364, 374, 376, 380, 382, 384, 394, 402, 404, 1021], "pip3": [374, 394], "pipe": [105, 106, 144, 167, 246, 251, 269, 316, 321, 322, 389, 399, 409, 416, 593, 868, 893, 894, 896, 897, 898, 899, 994, 1015], "pipe_sgd": 226, "pipegraph": 388, "pipelin": [2, 7, 44, 68, 88, 92, 104, 107, 108, 117, 140, 141, 144, 161, 163, 165, 167, 168, 169, 182, 183, 188, 189, 192, 194, 200, 202, 212, 213, 218, 226, 230, 233, 238, 239, 240, 242, 244, 249, 250, 253, 262, 264, 267, 269, 270, 277, 278, 281, 284, 285, 290, 292, 293, 298, 299, 305, 308, 312, 315, 317, 319, 320, 321, 322, 323, 324, 325, 333, 351, 352, 359, 363, 368, 370, 371, 376, 378, 390, 399, 402, 412, 416, 418, 422, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 504, 517, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 610, 613, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 717, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 818, 822, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 995, 997, 1001, 1008, 1009, 1014, 1015, 1019, 1020, 1024, 1025, 1026, 1027, 1029, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1052], "pita": 1052, "pitfal": [169, 184, 185, 186, 189, 216, 217, 270, 321, 389, 390, 393, 412, 466, 468, 498, 657, 676, 677, 705, 757, 819, 831, 834, 869, 881, 888, 1001, 1026, 1031], "pitkin": [188, 1012], "pitter": 1050, "pivot": [81, 281, 282], "pivot_t": 281, "pixel": [2, 45, 46, 54, 59, 69, 82, 87, 121, 167, 192, 243, 268, 307, 308, 373, 408, 413, 416, 417, 495, 496, 497, 588, 589, 610, 611, 1008, 1010, 1021], "pixelwis": 121, "pixi": 402, "piyg": 312, "pkdd": 0, "pkg": 374, "pkgsrc": 394, "pkl": 402, "pl": [2, 53, 106, 117, 176, 326, 373, 411, 483, 484, 485, 486, 1040], "place": [2, 44, 94, 240, 250, 294, 363, 376, 377, 378, 381, 383, 391, 406, 412, 416, 418, 442, 443, 446, 447, 483, 484, 485, 517, 584, 593, 632, 634, 635, 772, 785, 801, 891, 893, 894, 895, 896, 897, 898, 899, 983, 984, 1024, 1035, 1042, 1045, 1046, 1048, 1052, 1053], "placehold": [58, 380, 631, 632, 633, 634, 819, 820, 823, 824, 993, 995], "plagre": 1042, "plai": [122, 148, 173, 221, 263, 301, 336, 337, 363], "plain": [342, 418, 661, 1019], "plan": [52, 370, 374, 376, 377, 391, 402, 1015, 1038], "planar": 408, "plane": [52, 224, 244, 296, 342, 344, 345, 349, 373, 453, 463, 999, 1001, 1020], "plant": [276, 279, 280, 369, 1005, 1031], "plasma": 310, "plasma_r": 310, "plateau": [141, 145, 168, 264, 268, 272], "platform": [379, 390, 391, 1024, 1028, 1029, 1040, 1043, 1044, 1046, 1048, 1049, 1052, 1053], "platt": [406, 438, 910, 911, 913, 914, 1020], "pldtc325": 1042, "pleas": [0, 2, 56, 142, 148, 216, 244, 246, 249, 290, 300, 319, 320, 321, 322, 323, 324, 325, 326, 327, 344, 364, 370, 371, 374, 376, 377, 378, 380, 384, 388, 389, 390, 394, 399, 402, 404, 408, 415, 416, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 498, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 631, 632, 633, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1005, 1009, 1015, 1019, 1020, 1024, 1025, 1028, 1035, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pleasant": [375, 1029], "plenti": 63, "plgreenliru": 1046, "plo": [370, 610, 611], "plot": [2, 44, 45, 46, 51, 52, 53, 55, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 78, 79, 88, 89, 90, 92, 93, 94, 95, 96, 99, 105, 106, 107, 108, 111, 112, 113, 117, 118, 121, 124, 125, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 142, 145, 146, 147, 149, 150, 152, 153, 154, 162, 164, 165, 167, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 184, 185, 186, 187, 189, 190, 192, 193, 197, 200, 201, 202, 203, 205, 208, 210, 211, 212, 213, 214, 215, 218, 219, 220, 222, 224, 225, 227, 228, 229, 230, 234, 235, 236, 237, 238, 239, 242, 243, 245, 247, 248, 253, 255, 256, 257, 259, 261, 262, 263, 264, 265, 270, 271, 273, 275, 276, 280, 281, 282, 283, 284, 285, 287, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 317, 320, 323, 324, 325, 326, 330, 331, 332, 334, 335, 336, 340, 341, 342, 345, 346, 347, 348, 349, 352, 353, 354, 355, 358, 376, 379, 385, 388, 393, 394, 403, 406, 408, 410, 412, 414, 415, 439, 442, 447, 451, 457, 465, 472, 498, 503, 504, 506, 514, 525, 555, 559, 562, 564, 566, 567, 571, 572, 614, 626, 635, 636, 637, 661, 662, 676, 680, 701, 702, 704, 705, 706, 707, 722, 731, 739, 765, 786, 788, 791, 792, 793, 804, 810, 821, 827, 829, 830, 831, 832, 835, 837, 846, 850, 866, 869, 881, 882, 883, 885, 888, 908, 910, 913, 916, 917, 922, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1019, 1020, 1021, 1024, 1025, 1026, 1031, 1036, 1038, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "plot_": [322, 394], "plot_2d": [119, 232], "plot_3d": 232, "plot_accuraci": 48, "plot_adaboost_multiclass": [135, 1026], "plot_adaboost_regress": [136, 1026], "plot_adaboost_twoclass": [137, 1026], "plot_adjusted_for_chance_measur": [73, 1026], "plot_affinity_propag": [74, 1026], "plot_agglomerative_clust": [75, 1026], "plot_agglomerative_clustering_metr": [76, 1026], "plot_agglomerative_dendrogram": [77, 1026], "plot_all_sc": [310, 1026], "plot_anomaly_comparison": [239, 1026], "plot_ard": [194, 648, 1026], "plot_arg": 306, "plot_bayesian_ridge_curvefit": [195, 1026], "plot_benchmark_throughput": 50, "plot_bias_vari": [138, 1026], "plot_bicluster_newsgroup": [58, 1026], "plot_birch_vs_minibatchkmean": [78, 1026], "plot_bisect_kmean": [79, 1026], "plot_caching_nearest_neighbor": [292, 1026], "plot_calibr": [62, 376, 1026], "plot_calibration_curv": [63, 1026], "plot_calibration_multiclass": [64, 1026], "plot_causal_interpret": [186, 1026], "plot_chance_level": [249, 264, 277, 279, 280, 704, 706, 1051], "plot_classif": [293, 1026], "plot_classification_prob": [67, 1026], "plot_classifier_chain_yeast": [289, 1026], "plot_classifier_comparison": [68, 1026], "plot_clust": 86, "plot_cluster_comparison": [80, 1026], "plot_coin_segment": [81, 1026], "plot_coin_ward_segment": [82, 1026], "plot_color": [137, 356], "plot_column_transform": [103, 1026], "plot_column_transformer_mixed_typ": [104, 1026], "plot_compare_calibr": [65, 1026], "plot_compare_cross_decomposit": [116, 1026], "plot_compare_gpr_krr": [171, 1026], "plot_compare_method": [232, 1026], "plot_compare_reduct": [105, 1026], "plot_concentration_prior": [255, 1026], "plot_confusion_matrix": [263, 319, 1026, 1045, 1046, 1047, 1048], "plot_cost_complexity_prun": [355, 1026], "plot_cost_sensitive_learn": [264, 1026], "plot_covariance_estim": [110, 1026], "plot_custom_kernel": [336, 1026], "plot_cv_diabet": [160, 1026], "plot_cv_indic": [265, 1026], "plot_cv_predict": [266, 1026], "plot_cyclical_feature_engin": [44, 1026], "plot_dbscan": [83, 1026], "plot_decision_funct": 349, "plot_dendrogram": 77, "plot_det": [267, 1026], "plot_det_curv": [1047, 1048], "plot_dict_face_patch": [84, 1026], "plot_digit": 45, "plot_digits_agglomer": [85, 1026], "plot_digits_classif": [69, 1026], "plot_digits_classification_exercis": [161, 1026], "plot_digits_denois": [45, 1026], "plot_digits_kde_sampl": [294, 1026], "plot_digits_linkag": [86, 1026], "plot_digits_pip": [106, 1026], "plot_discret": [311, 1026], "plot_discretization_classif": [312, 1026], "plot_discretization_strategi": [313, 1026], "plot_display_object_visu": [240, 1026], "plot_distribut": 310, "plot_document_classification_20newsgroup": [351, 1026], "plot_document_clust": [352, 1026], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [196, 1026], "plot_ellips": [71, 255], "plot_embed": 233, "plot_ensemble_oob": [139, 1026], "plot_estimator_represent": [241, 1026], "plot_f_test_vs_mi": [164, 1026], "plot_face_compress": [87, 1026], "plot_face_recognit": [46, 1026], "plot_faces_decomposit": [121, 1026], "plot_feature_agglomeration_vs_univariate_select": [88, 1026], "plot_feature_effect": 351, "plot_feature_select": [165, 1026], "plot_feature_selection_pipelin": [166, 1026], "plot_feature_transform": [140, 1026], "plot_feature_union": [107, 1026], "plot_forest_hist_grad_boosting_comparison": [141, 1026], "plot_forest_import": [142, 1026], "plot_forest_iri": [143, 1026], "plot_galleri": [46, 121], "plot_gmm": [256, 1026], "plot_gmm_covari": [257, 1026], "plot_gmm_init": [258, 1026], "plot_gmm_pdf": [259, 1026], "plot_gmm_select": [260, 1026], "plot_gmm_sin": [261, 1026], "plot_gpc": [172, 1026], "plot_gpc_iri": [173, 1026], "plot_gpc_isoprob": [174, 1026], "plot_gpc_xor": [175, 1026], "plot_gpr_co2": [176, 1026], "plot_gpr_noisi": [177, 1026], "plot_gpr_noisy_target": [178, 1026], "plot_gpr_on_structured_data": [179, 1026], "plot_gpr_prior_posterior": [180, 1026], "plot_gpr_sampl": 180, "plot_gradient_boosting_categor": [144, 1026], "plot_gradient_boosting_early_stop": [145, 1026], "plot_gradient_boosting_oob": [146, 1026], "plot_gradient_boosting_quantil": [147, 1026], "plot_gradient_boosting_regress": [148, 1026], "plot_gradient_boosting_regular": [149, 1026], "plot_grid_search_digit": [268, 1026], "plot_grid_search_refit_cal": [269, 1026], "plot_grid_search_stat": [270, 1026], "plot_grid_search_text_feature_extract": [271, 1026], "plot_hashing_vs_dict_vector": [353, 1026], "plot_hdbscan": [89, 1026], "plot_hgbt_regress": [150, 1026], "plot_huber_vs_ridg": [197, 1026], "plot_hyperplan": [205, 221, 247], "plot_ica_blind_source_separ": [122, 1026], "plot_ica_vs_pca": [123, 1026], "plot_idx": 143, "plot_image_denois": [124, 1026], "plot_incremental_pca": [125, 1026], "plot_indic": 273, "plot_inductive_clust": [90, 1026], "plot_influ": 47, "plot_info": 144, "plot_iris_dtc": [356, 1026], "plot_iris_exercis": [162, 1026], "plot_iris_svc": [337, 1026], "plot_isolation_forest": [151, 1026], "plot_isotonic_regress": [242, 1026], "plot_iterative_imputer_variants_comparison": [182, 1026], "plot_johnson_lindenstrauss_bound": [243, 1026], "plot_kde_1d": [295, 1026], "plot_kernel_approxim": [244, 1026], "plot_kernel_pca": [126, 1026], "plot_kernel_ridge_regress": [245, 1026], "plot_kind": 44, "plot_kmeans_assumpt": [91, 1026], "plot_kmeans_digit": [92, 1026], "plot_kmeans_plusplu": [93, 1026], "plot_kmeans_silhouette_analysi": [94, 1026], "plot_kmeans_stability_low_dim_dens": [95, 1026], "plot_label_propagation_digit": [329, 1026], "plot_label_propagation_digits_active_learn": [330, 1026], "plot_label_propagation_structur": [331, 1026], "plot_lasso_and_elasticnet": [198, 1026], "plot_lasso_dense_vs_sparse_data": [199, 1026], "plot_lasso_lars_": [200, 1026], "plot_lasso_lasso_lars_elasticnet_path": [201, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 1026], "plot_lasso_model_select": [202, 651, 657, 1026], "plot_lda": [70, 1026], "plot_lda_qda": [71, 1026], "plot_learning_curv": [272, 1026], "plot_likelihood_ratio": [273, 1026], "plot_linear_model_coefficient_interpret": [187, 1026], "plot_linearsvc_support_vector": [338, 1026], "plot_linkage_comparison": [96, 1026], "plot_lle_digit": [233, 1026], "plot_lof_novelty_detect": [296, 1026], "plot_lof_outlier_detect": [297, 1026], "plot_logist": [203, 1026], "plot_logistic_l1_l2_spars": [204, 1026], "plot_logistic_multinomi": [205, 1026], "plot_logistic_path": [206, 1026], "plot_lw_vs_oa": [111, 1026], "plot_mahalanobis_dist": [112, 1026], "plot_manifold_spher": [234, 1026], "plot_map_data_to_norm": [314, 1026], "plot_md": [235, 1026], "plot_mean_shift": [97, 1026], "plot_metadata_rout": [246, 1026], "plot_method": [49, 71, 226, 293, 298, 336, 338, 339, 341, 342, 344, 635], "plot_mini_batch_kmean": [98, 1026], "plot_missing_valu": [183, 1026], "plot_mlp_alpha": [305, 1026], "plot_mlp_training_curv": [306, 1026], "plot_mnist_filt": [307, 1026], "plot_model_complexity_influ": [47, 1026], "plot_monotonic_constraint": [152, 1026], "plot_multi_metric_evalu": [274, 1026], "plot_multi_task_lasso_support": [207, 1026], "plot_multiclass_overview": [287, 1026], "plot_multilabel": [247, 1026], "plot_multioutput_face_complet": [248, 1026], "plot_n_features_influ": 50, "plot_nca_classif": [298, 1026], "plot_nca_dim_reduct": [299, 1026], "plot_nca_illustr": [300, 1026], "plot_nearest_centroid": [301, 1026], "plot_nested_cross_validation_iri": [275, 1026], "plot_nnl": [208, 1026], "plot_num": [80, 96, 239], "plot_obs_pr": 230, "plot_ol": [209, 1026], "plot_ols_ridge_vari": [210, 1026], "plot_omp": [211, 1026], "plot_on_dataset": 306, "plot_oneclass": [339, 1026], "plot_opt": [99, 1026], "plot_out_of_core_classif": [48, 1026], "plot_outlier_detection_bench": [249, 1026], "plot_outlier_detection_win": [49, 1026], "plot_partial_depend": [188, 319, 320, 321, 1026, 1040, 1044, 1045, 1046, 1047, 1048, 1049], "plot_partial_dependence_visualization_api": [250, 1026], "plot_pca_iri": [127, 1026], "plot_pca_vs_fa_model_select": [128, 1026], "plot_pca_vs_lda": [129, 1026], "plot_pcr_vs_pl": [117, 1026], "plot_permutation_import": [189, 190, 1026], "plot_permutation_importance_multicollinear": [190, 1026], "plot_permutation_tests_for_classif": [276, 1026], "plot_pipeline_displai": [251, 1026], "plot_poisson_regression_non_normal_loss": [212, 1026], "plot_polynomial_interpol": [213, 883, 887, 1026], "plot_precision_recal": [277, 1026], "plot_precision_recall_curv": [319, 1045, 1047, 1048], "plot_prediction_lat": [50, 1026], "plot_quantile_regress": [214, 1026], "plot_random_forest_embed": [153, 1026], "plot_random_forest_regression_multioutput": [154, 1026], "plot_random_multilabel_dataset": [119, 1026], "plot_randomized_search": [278, 1026], "plot_rang": 137, "plot_ransac": [215, 1026], "plot_rbf_paramet": [340, 1026], "plot_rbm_logistic_classif": [308, 1026], "plot_regress": [302, 1026], "plot_release_highlights_0_22_0": [319, 1026], "plot_release_highlights_0_23_0": [320, 1026], "plot_release_highlights_0_24_0": [321, 1026], "plot_release_highlights_1_0_0": [322, 1026], "plot_release_highlights_1_1_0": [323, 1026], "plot_release_highlights_1_2_0": [324, 1026], "plot_release_highlights_1_3_0": [325, 1026], "plot_release_highlights_1_4_0": [326, 1026], "plot_release_highlights_1_5_0": [327, 1026], "plot_result": [71, 144, 255, 256, 261], "plot_rfe_digit": [167, 1026], "plot_rfe_with_cross_valid": [168, 1026], "plot_ridge_coeff": [216, 1026], "plot_ridge_path": [217, 1026], "plot_robust_fit": [218, 1026], "plot_robust_vs_empirical_covari": [113, 1026], "plot_roc": [279, 1026], "plot_roc_crossv": [280, 1026], "plot_roc_curv": [319, 1045, 1047], "plot_roc_curve_visualization_api": [252, 1026], "plot_roc_pr_curv": 264, "plot_sampl": [123, 261], "plot_scalable_poly_kernel": [192, 1026], "plot_scaling_import": [315, 1026], "plot_scatt": 90, "plot_segmentation_toi": [100, 1026], "plot_select_from_model_diabet": [169, 1026], "plot_self_training_varying_threshold": [332, 1026], "plot_semi_supervised_newsgroup": [333, 1026], "plot_semi_supervised_versus_svm_iri": [334, 1026], "plot_separating_hyperplan": [341, 1026], "plot_separating_hyperplane_unbalanc": [342, 1026], "plot_set_output": [253, 1026], "plot_sgd_comparison": [219, 1026], "plot_sgd_early_stop": [220, 1026], "plot_sgd_iri": [221, 1026], "plot_sgd_loss_funct": [222, 1026], "plot_sgd_penalti": [223, 1026], "plot_sgd_separating_hyperplan": [224, 1026], "plot_sgd_weighted_sampl": [225, 1026], "plot_sgdocsvm_vs_ocsvm": [226, 1026], "plot_sparse_cod": [130, 1026], "plot_sparse_cov": [114, 1026], "plot_sparse_logistic_regression_20newsgroup": [227, 1026], "plot_sparse_logistic_regression_mnist": [228, 1026], "plot_species_distribut": 51, "plot_species_distribution_model": [51, 1026], "plot_species_kd": [303, 1026], "plot_spectral_biclust": [59, 1026], "plot_spectral_coclust": [60, 1026], "plot_stack_predictor": [155, 1026], "plot_step": [137, 143, 356], "plot_step_coars": 143, "plot_stock_market": [52, 1026], "plot_subfigur": 247, "plot_successive_halving_heatmap": [281, 1026], "plot_successive_halving_iter": [282, 1026], "plot_surfac": 188, "plot_svm_anova": [343, 1026], "plot_svm_kernel": [344, 1026], "plot_svm_margin": [345, 1026], "plot_svm_regress": [346, 1026], "plot_svm_scale_c": [347, 1026], "plot_svm_tie_break": [348, 1026], "plot_swissrol": [236, 1026], "plot_t_sne_perplex": [237, 1026], "plot_target_encod": [316, 1026], "plot_target_encoder_cross_v": [317, 1026], "plot_theilsen": [229, 1026], "plot_time_series_lagged_featur": [53, 1026], "plot_titl": 255, "plot_tomography_l1_reconstruct": [54, 1026], "plot_top_word": 55, "plot_topics_extraction_with_nmf_lda": [55, 1026], "plot_train_error_vs_test_error": [283, 1026], "plot_training_data_with_decision_boundari": 344, "plot_transformed_target": [108, 1026], "plot_tre": [2, 356, 358, 1021, 1044, 1046, 1047, 1048, 1050, 1051, 1053], "plot_tree_regress": [357, 1026], "plot_tuned_decision_threshold": [284, 1026], "plot_tweedie_regression_insurance_claim": [230, 1026], "plot_underfitting_overfit": [285, 1026], "plot_unveil_tree_structur": [358, 1026], "plot_varimax_fa": [131, 1026], "plot_voting_decision_region": [156, 1026], "plot_voting_proba": [157, 1026], "plot_voting_regressor": [158, 1026], "plot_ward_structured_vs_unstructur": [101, 1026], "plot_weighted_sampl": [349, 1026], "plotli": [141, 271, 376, 394, 401], "pls1": [411, 485], "pls2": [411, 485], "plsca": [116, 484], "plscanon": [2, 116, 483, 485, 486, 1006, 1027, 1031, 1039, 1043, 1045, 1047, 1049, 1053], "plsregress": [2, 116, 117, 1006, 1027, 1031, 1042, 1045, 1047, 1049, 1051, 1053], "plssvd": [2, 483, 484, 1027, 1031, 1047, 1049, 1053], "plsw2a": 411, "plt": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 190, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 326, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 372, 383, 439, 504, 635, 636, 701, 702, 704, 705, 706, 810, 827, 922, 1012, 1032], "plu": [277, 373, 381, 683, 839, 842, 1006, 1019], "plug": [413, 1001, 1029], "plugin": 394, "plural": 1041, "pm": [180, 188, 280, 415, 1005], "pmlr": 700, "pmml": 1024, "png": [0, 69, 920], "pnucci": 1051, "po": [148, 235, 416], "podshumok": [1041, 1042], "poesio": 720, "poetri": 402, "poh": [1043, 1044], "point": [2, 8, 38, 44, 49, 51, 53, 54, 64, 68, 73, 74, 76, 77, 83, 86, 89, 92, 94, 98, 101, 112, 113, 116, 119, 120, 122, 124, 126, 127, 135, 137, 141, 143, 144, 145, 150, 153, 168, 169, 173, 178, 179, 184, 187, 189, 194, 202, 207, 209, 210, 212, 213, 214, 216, 218, 221, 224, 225, 229, 230, 232, 233, 234, 235, 236, 239, 242, 244, 257, 261, 262, 263, 267, 271, 272, 273, 277, 279, 280, 287, 289, 290, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 305, 311, 312, 314, 316, 327, 329, 330, 332, 334, 336, 340, 341, 342, 344, 345, 348, 349, 352, 353, 356, 357, 359, 363, 364, 365, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 384, 388, 390, 391, 404, 407, 408, 413, 414, 415, 416, 419, 420, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 461, 462, 470, 473, 475, 498, 500, 506, 514, 516, 517, 521, 524, 527, 532, 535, 537, 543, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 614, 615, 632, 635, 636, 637, 641, 642, 643, 648, 649, 655, 659, 661, 662, 674, 675, 677, 679, 680, 682, 683, 686, 687, 692, 693, 694, 695, 696, 697, 698, 705, 710, 711, 714, 717, 721, 727, 729, 735, 740, 741, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 768, 783, 784, 794, 795, 801, 802, 804, 818, 820, 826, 829, 831, 838, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 865, 866, 869, 873, 878, 887, 888, 902, 903, 904, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 932, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1020, 1021, 1024, 1025, 1026, 1031, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pointer": [376, 384, 443, 1044], "pointplot": 150, "points_color": 232, "pointwis": [138, 178, 419, 445], "poisson": [2, 44, 53, 184, 193, 247, 372, 415, 465, 466, 498, 525, 554, 560, 564, 567, 652, 673, 676, 684, 710, 728, 749, 753, 754, 756, 834, 868, 869, 872, 873, 881, 882, 883, 888, 917, 919, 956, 1001, 1021, 1026, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "poisson_gbrt": 212, "poisson_glm": 212, "poissonregressor": [2, 212, 230, 320, 323, 652, 684, 1001, 1046, 1049, 1050], "pokorni": 1050, "pola": 53, "polar": [106, 176, 376, 378, 388, 394, 401, 432, 443, 444, 446, 448, 450, 465, 469, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 563, 564, 568, 569, 570, 571, 572, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 692, 693, 696, 852, 857, 860, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 1052, 1053], "pole": 234, "poli": [44, 162, 192, 270, 337, 344, 346, 453, 537, 624, 769, 778, 804, 883, 910, 911, 912, 913, 914, 1001, 1015], "polici": [150, 186, 187, 212, 230, 264, 379, 390, 537, 543, 1001, 1050], "policyhold": [212, 230, 1001], "polit": [58, 371, 375, 1001, 1006], "pollak": 1053, "pollut": [351, 732, 789, 1005, 1011], "polmauri": 1042, "poloso": 1049, "polycollect": [810, 827], "polynomi": [2, 55, 182, 184, 191, 193, 212, 218, 244, 251, 270, 285, 295, 321, 322, 337, 346, 368, 372, 453, 492, 624, 643, 644, 645, 647, 649, 676, 769, 778, 779, 834, 869, 878, 880, 883, 887, 908, 910, 911, 912, 913, 914, 1000, 1020, 1026, 1027, 1031, 1047, 1048], "polynomial_featur": 285, "polynomial_kernel": [2, 404, 769, 1003, 1052], "polynomialcountsketch": [2, 192, 643, 645, 997, 1047, 1049, 1052], "polynomialfeatur": [2, 44, 194, 212, 213, 218, 251, 285, 321, 344, 887, 1001, 1015, 1039, 1043, 1044, 1045, 1048, 1049, 1051, 1052], "polysemi": 413, "polytop": 517, "pomegran": 1024, "ponc": [413, 533, 539], "poncho": 1029, "pone": 370, "ponnuthurai": 373, "pooch": [87, 376, 394, 401], "pooja": [1050, 1051, 1052], "pool": [279, 388, 446, 639, 855, 973, 1025, 1046], "pooling_func": [446, 1043], "poolqc": 144, "poolsawat": [1049, 1050], "poor": [188, 192, 276, 332, 406, 412, 413, 694, 698, 742, 845, 848, 849, 999, 1000, 1002, 1007, 1042, 1043, 1044, 1046, 1048], "poor_scor": [924, 926], "poorer": [144, 359, 413], "poorest": 1007, "poorli": [63, 65, 96, 110, 117, 138, 149, 236, 364, 408, 415, 530, 634, 1001, 1002, 1041], "poorna": [1045, 1047], "pop": [358, 388, 923, 1043], "popa": [1045, 1046], "popitem": 923, "popo": 1038, "popul": [105, 110, 112, 150, 187, 212, 249, 273, 310, 371, 385, 390, 410, 441, 491, 716, 722, 850, 851, 852, 854, 856, 858, 859, 860, 973, 1005, 1011, 1015, 1021], "popular": [6, 10, 182, 236, 371, 374, 381, 384, 388, 390, 414, 415, 416, 418, 453, 463, 995, 997, 1001, 1003, 1010, 1019, 1025], "port": [374, 394, 1045], "portabl": [402, 1024], "portfolio": [212, 230, 999], "portion": [46, 48, 113, 145, 279, 363, 371, 373, 376, 382, 390, 792, 829, 846, 994, 1004, 1008], "portland": [408, 419, 445], "portnoi": [1001, 1052], "portrait": [46, 413], "pos_class": 48, "pos_label": [240, 249, 264, 284, 390, 407, 439, 440, 702, 704, 706, 710, 711, 713, 731, 733, 734, 742, 786, 787, 788, 791, 793, 803, 875, 892, 1005, 1043, 1047, 1049, 1053], "pos_lr": 273, "pos_lr_bas": 273, "pos_lr_base_std": 273, "pos_tagg": 416, "pos_vector": 416, "pos_window": 416, "pose": [216, 278, 1001], "posit": [0, 2, 44, 46, 48, 51, 52, 62, 63, 65, 101, 131, 150, 152, 157, 167, 186, 187, 198, 201, 208, 212, 213, 214, 216, 230, 235, 243, 249, 264, 267, 270, 273, 277, 279, 280, 283, 284, 310, 320, 321, 325, 327, 351, 358, 363, 371, 375, 376, 378, 383, 385, 390, 391, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 420, 439, 440, 443, 447, 448, 450, 465, 468, 496, 500, 502, 506, 510, 511, 512, 527, 529, 531, 532, 533, 535, 537, 538, 539, 544, 547, 548, 550, 551, 552, 559, 563, 564, 565, 566, 595, 596, 597, 598, 599, 601, 602, 603, 605, 609, 613, 614, 615, 624, 635, 636, 647, 650, 651, 652, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 673, 676, 677, 678, 679, 681, 684, 685, 686, 687, 688, 691, 694, 702, 704, 706, 711, 713, 716, 717, 719, 720, 722, 724, 726, 728, 731, 733, 734, 735, 739, 740, 742, 743, 744, 745, 747, 748, 756, 758, 762, 770, 786, 787, 788, 791, 792, 793, 801, 802, 803, 807, 808, 831, 848, 849, 850, 852, 854, 855, 856, 858, 860, 861, 871, 872, 875, 881, 884, 887, 892, 896, 900, 901, 903, 904, 908, 909, 912, 913, 914, 916, 918, 925, 928, 931, 950, 952, 969, 971, 996, 997, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1015, 1020, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "position": 390, "positive_class": [48, 716], "positive_cod": [121, 533, 539, 544, 547, 548], "positive_dict": [121, 533, 539, 547, 548], "positive_featur": 381, "positive_likelihood_ratio": [273, 716], "positive_onli": [925, 928], "posix": [364, 388], "possa": 1042, "possibl": [31, 44, 53, 56, 64, 65, 73, 83, 89, 104, 110, 121, 138, 141, 150, 152, 171, 187, 188, 189, 190, 205, 212, 229, 230, 244, 246, 264, 270, 271, 272, 273, 275, 276, 277, 279, 280, 289, 319, 340, 347, 351, 352, 359, 363, 364, 365, 369, 370, 371, 376, 377, 378, 379, 380, 382, 384, 388, 389, 390, 394, 399, 402, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 418, 420, 422, 431, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 498, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 713, 725, 726, 727, 728, 732, 746, 760, 782, 787, 789, 792, 801, 802, 803, 804, 806, 807, 808, 810, 816, 817, 818, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 932, 934, 935, 938, 943, 975, 978, 994, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1013, 1015, 1020, 1021, 1025, 1029, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051], "possibli": [91, 117, 212, 227, 344, 352, 373, 375, 384, 402, 408, 415, 416, 452, 454, 592, 843, 844, 845, 846, 847, 913, 914, 916, 917, 918, 919, 994, 997, 1002, 1008, 1015, 1050], "post": [2, 47, 55, 58, 103, 168, 169, 184, 240, 262, 274, 277, 287, 323, 327, 332, 351, 352, 353, 354, 358, 363, 371, 375, 376, 381, 389, 403, 408, 449, 489, 490, 498, 502, 553, 559, 560, 561, 562, 563, 566, 567, 613, 662, 704, 706, 716, 722, 746, 788, 791, 803, 804, 820, 826, 831, 834, 869, 888, 906, 916, 917, 918, 919, 1005, 1021, 1026, 1028, 1029, 1031, 1046], "post1": [374, 394, 400, 401, 1033], "poster": [375, 376], "posterior": [170, 171, 172, 177, 184, 194, 264, 270, 284, 413, 418, 551, 552, 554, 614, 615, 617, 618, 619, 623, 626, 627, 631, 648, 649, 712, 801, 803, 826, 999, 1024, 1026, 1041, 1044], "posteriori": [1001, 1007], "postfit_hook": 47, "postiv": 277, "postpon": [378, 380], "postprocess": [62, 406, 537, 543], "postprocessor": 1046, "postscript": 920, "potenti": [2, 44, 65, 89, 110, 150, 183, 186, 188, 194, 205, 264, 296, 297, 305, 325, 326, 344, 353, 363, 364, 374, 376, 390, 394, 399, 407, 408, 412, 415, 416, 469, 483, 484, 485, 486, 498, 526, 551, 559, 560, 563, 564, 566, 567, 575, 609, 615, 638, 767, 826, 898, 899, 906, 916, 917, 918, 919, 1011, 1019, 1021, 1024, 1038, 1045, 1046, 1049, 1052, 1053], "poughon": 1042, "pour": 1005, "pourbozorg": [1043, 1044, 1045], "pow": [680, 681, 682, 865, 866], "powel": 371, "power": [2, 44, 47, 56, 141, 145, 186, 213, 230, 261, 273, 278, 294, 310, 311, 314, 329, 337, 363, 364, 389, 406, 408, 411, 414, 415, 416, 419, 445, 483, 484, 485, 534, 537, 543, 546, 634, 684, 698, 728, 751, 753, 756, 850, 851, 858, 859, 861, 862, 883, 884, 885, 896, 897, 951, 952, 1001, 1002, 1005, 1013, 1015, 1019, 1020, 1029, 1038, 1041, 1043, 1045, 1046, 1048, 1052], "power_iteration_norm": [404, 543, 546, 951, 952, 1049], "power_t": [680, 681, 682, 865, 866, 1019], "power_transform": [2, 884, 897, 1043], "powers_": 883, "powershel": 374, "powertransform": [2, 314, 885, 896, 995, 1015, 1043, 1046, 1049, 1051], "poznik": [1048, 1049, 1050], "pp": [0, 97, 269, 373, 408, 410, 416, 419, 420, 445, 449, 453, 463, 513, 535, 536, 543, 593, 639, 647, 668, 689, 690, 724, 730, 734, 744, 760, 773, 787, 843, 845, 847, 864, 884, 896, 998, 1005, 1007, 1008, 1018], "pp2013": 997, "pp84": 418, "ppc64le": 384, "ppf": 270, "ppm": 176, "pprint": [56, 147, 246, 271, 371, 947], "pq": 53, "pr": [0, 157, 364, 376, 379, 380, 384, 416, 745, 1005, 1028, 1045, 1047], "pr_displai": 240, "pr_number": 384, "prabakaran": [1043, 1044, 1047, 1049, 1050], "prabhakar": 413, "practic": [65, 87, 104, 112, 117, 124, 141, 144, 145, 150, 171, 186, 187, 192, 198, 205, 214, 239, 245, 271, 278, 296, 297, 321, 327, 340, 344, 364, 376, 378, 379, 380, 382, 384, 389, 390, 408, 410, 412, 413, 414, 415, 416, 418, 448, 453, 463, 523, 526, 592, 636, 637, 674, 801, 847, 901, 908, 994, 995, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1024, 1025, 1027, 1029, 1030, 1031, 1037, 1041, 1043, 1045, 1047], "practicalswift": 1041, "practis": 217, "practition": [139, 216], "pradeep": [1043, 1044], "pragmat": 376, "prakash": [1040, 1042, 1048], "pramod": 1049, "pranayanchuri": 1048, "prang": 377, "prasanth": 1050, "pratama": 1046, "pratap": [1039, 1042, 1049], "prathmesh": 1044, "pratik": 1042, "pratiqu": 373, "pravar": 1043, "pravarmahajan": [1042, 1043], "pre": [45, 104, 187, 202, 283, 310, 353, 374, 376, 390, 394, 407, 410, 412, 413, 415, 416, 417, 419, 420, 444, 445, 448, 460, 535, 537, 613, 694, 716, 767, 871, 913, 1005, 1010, 1015, 1020, 1021, 1024, 1031, 1038, 1043, 1049, 1053], "pre_dispatch": [804, 810, 818, 827, 829, 830, 831, 832, 835, 970, 1038], "preambl": 89, "prec": [114, 240, 529, 1005], "prec_": 114, "prec_macro": 412, "preced": [364, 376, 380, 488, 1005, 1035], "precipit": 406, "precis": [2, 8, 53, 63, 108, 114, 121, 177, 178, 184, 192, 240, 262, 263, 264, 268, 310, 376, 390, 404, 405, 406, 407, 408, 410, 413, 415, 444, 470, 471, 472, 473, 474, 475, 476, 477, 479, 506, 525, 534, 536, 543, 546, 648, 649, 650, 652, 654, 655, 656, 658, 659, 660, 673, 676, 678, 684, 686, 687, 691, 703, 704, 710, 711, 712, 717, 731, 733, 734, 735, 743, 745, 767, 786, 787, 788, 791, 792, 801, 802, 826, 834, 837, 848, 849, 854, 869, 888, 892, 908, 913, 920, 922, 952, 999, 1001, 1008, 1009, 1020, 1026, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "precision_": [52, 114, 470, 471, 472, 473, 474, 475, 476, 477], "precision_macro": 412, "precision_recall_curv": [2, 240, 277, 704, 710, 711, 731, 1005, 1036, 1037, 1041, 1048, 1049, 1051, 1053], "precision_recall_fscore_support": [2, 717, 733, 734, 788, 791, 1005, 1039, 1043, 1045, 1051], "precision_scor": [2, 63, 264, 277, 712, 791, 1005, 1035, 1037, 1038, 1039, 1040, 1045, 1051], "precision_threshold": 268, "precisionrecalldisplai": [2, 264, 277, 322, 786, 788, 791, 1005, 1045, 1048, 1051, 1052, 1053], "precisions_": [801, 802], "precisions_cholesky_": [801, 802, 1049], "precisions_init": [802, 1049, 1051], "precompil": 374, "precomput": [120, 121, 122, 184, 193, 211, 235, 246, 290, 292, 378, 385, 388, 390, 408, 416, 419, 431, 441, 442, 445, 446, 447, 451, 453, 458, 466, 472, 483, 484, 485, 526, 533, 537, 539, 542, 543, 544, 550, 556, 558, 560, 562, 564, 567, 570, 572, 614, 615, 624, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 685, 686, 688, 689, 692, 694, 695, 696, 700, 778, 782, 785, 796, 797, 804, 818, 841, 842, 850, 851, 852, 854, 855, 856, 858, 859, 860, 866, 909, 910, 911, 912, 913, 914, 917, 919, 925, 980, 981, 982, 997, 1001, 1003, 1008, 1020, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "precompute_dist": [1039, 1046], "precompute_gram": 1037, "precomputed_nearest_neighbor": [453, 695], "precondit": [408, 453, 463, 699, 1021, 1051], "pred": [44, 47, 51, 53, 69, 348, 351, 371, 652, 673, 684, 701, 706, 710, 722, 733, 734, 742, 787, 788, 791, 792, 1005], "pred1": 158, "pred2": 158, "pred3": 158, "pred4": 158, "pred_background": 51, "pred_decis": [739, 1005, 1048], "pred_entropi": [329, 330], "pred_nam": 46, "pred_ort": 402, "pred_scor": 47, "pred_test": 51, "pred_typ": 50, "predecessor": [135, 451, 456, 457, 458, 1052], "predecessor_": [451, 458], "predecessor_correct": [451, 457], "predefin": [2, 274, 817, 994, 1008, 1050, 1052], "predefinedsplit": [2, 412, 1039], "predetermin": [408, 1002], "predict": [2, 5, 13, 28, 43, 46, 47, 48, 51, 61, 63, 64, 65, 67, 69, 71, 73, 80, 90, 91, 92, 96, 103, 104, 105, 106, 108, 116, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 166, 167, 170, 171, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 187, 188, 189, 190, 192, 194, 197, 198, 205, 208, 209, 210, 213, 214, 215, 216, 218, 219, 220, 221, 226, 227, 229, 230, 239, 240, 242, 244, 246, 248, 256, 257, 258, 259, 260, 261, 262, 263, 268, 270, 272, 273, 276, 279, 280, 284, 285, 287, 289, 293, 296, 297, 298, 301, 302, 308, 310, 311, 315, 316, 319, 320, 321, 322, 323, 325, 326, 327, 330, 332, 333, 334, 336, 337, 339, 340, 344, 346, 347, 348, 351, 352, 356, 358, 359, 362, 364, 368, 371, 373, 376, 378, 383, 385, 390, 393, 399, 402, 403, 404, 406, 408, 409, 411, 413, 415, 416, 417, 422, 425, 430, 431, 438, 439, 440, 441, 443, 444, 445, 448, 449, 450, 466, 470, 483, 484, 485, 488, 503, 510, 526, 536, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 580, 585, 596, 597, 605, 609, 613, 614, 615, 617, 618, 619, 620, 626, 629, 631, 632, 634, 635, 636, 637, 638, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 701, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 718, 719, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 742, 745, 746, 747, 750, 752, 754, 756, 760, 786, 787, 788, 789, 790, 791, 792, 793, 797, 798, 800, 801, 802, 803, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 855, 858, 859, 865, 866, 868, 875, 888, 889, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 978, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "predict_ecoc": 1039, "predict_joint_log_proba": [843, 844, 845, 846, 847, 1050], "predict_log_proba": [378, 390, 551, 552, 553, 555, 557, 559, 561, 566, 596, 597, 662, 663, 680, 803, 804, 807, 808, 818, 826, 829, 839, 843, 844, 845, 846, 847, 855, 865, 868, 905, 910, 913, 916, 918, 1020, 1035, 1048, 1052], "predict_ovo": 1039, "predict_ovr": 1039, "predict_param": [246, 466, 569, 570, 596, 597, 1048], "predict_proba": [31, 62, 63, 64, 65, 67, 71, 153, 157, 169, 172, 173, 174, 175, 264, 279, 284, 289, 305, 312, 315, 319, 321, 327, 351, 378, 383, 390, 406, 407, 415, 438, 439, 551, 552, 553, 555, 557, 559, 561, 563, 566, 569, 571, 596, 597, 614, 623, 624, 626, 627, 635, 636, 637, 662, 663, 680, 702, 704, 706, 726, 745, 746, 792, 801, 802, 803, 804, 807, 808, 818, 826, 829, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 850, 855, 858, 865, 868, 875, 903, 904, 905, 910, 913, 916, 918, 927, 1001, 1005, 1007, 1009, 1012, 1018, 1019, 1020, 1021, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "predict_proba_ovr": 1039, "predicted_label": [329, 330], "prediction_df": 150, "prediction_perform": 47, "prediction_performance_comput": 47, "prediction_performance_label": 47, "prediction_pow": 47, "prediction_tim": [47, 48], "prediction_titl": 46, "predictionerrordisplai": [2, 44, 53, 108, 155, 187, 266, 324, 1005, 1050, 1052], "predictions_kr": 171, "predictive_analyt": 1021, "predictive_word": 351, "predictor": [2, 108, 134, 136, 144, 158, 182, 184, 212, 230, 241, 378, 389, 390, 409, 411, 412, 415, 418, 467, 468, 483, 484, 485, 498, 518, 519, 520, 557, 558, 564, 567, 570, 605, 614, 634, 636, 637, 652, 657, 661, 673, 677, 684, 705, 829, 831, 840, 841, 868, 869, 881, 882, 888, 978, 1001, 1006, 1026, 1036, 1042, 1045], "predispatch": [810, 827, 832, 835], "predit": 117, "predomin": [378, 1036], "prefer": [74, 80, 89, 150, 261, 279, 310, 359, 363, 364, 365, 376, 377, 378, 390, 408, 412, 413, 415, 416, 441, 455, 472, 473, 479, 488, 510, 511, 631, 636, 637, 658, 662, 663, 705, 730, 732, 746, 761, 762, 839, 857, 883, 908, 909, 958, 970, 994, 997, 999, 1001, 1005, 1010, 1020, 1021, 1024, 1028, 1036, 1042, 1044, 1048, 1049, 1052], "prefetch": 970, "prefit": [264, 390, 407, 417, 438, 569, 570, 600, 826, 1047, 1048, 1049], "prefix": [2, 56, 103, 271, 292, 319, 376, 380, 382, 384, 418, 424, 443, 444, 446, 448, 450, 465, 468, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 643, 644, 645, 646, 692, 693, 696, 810, 832, 852, 857, 860, 864, 867, 868, 874, 900, 901, 1041, 1042, 1048, 1050, 1053], "prein": [0, 366, 1047, 1048, 1049], "preiss": 1048, "preliminari": 463, "prematur": 1048, "prepar": [213, 246, 363, 380, 382, 384, 1021, 1029, 1043, 1051], "prepend": [187, 1035], "preprint": 373, "preprocess": [2, 44, 45, 46, 50, 65, 68, 78, 80, 83, 87, 89, 92, 96, 103, 104, 105, 106, 108, 117, 121, 131, 140, 144, 165, 167, 169, 176, 189, 192, 194, 196, 200, 202, 204, 212, 213, 218, 228, 230, 233, 240, 241, 250, 253, 264, 267, 277, 279, 284, 285, 293, 298, 299, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 333, 340, 343, 352, 365, 368, 370, 373, 376, 381, 389, 390, 402, 404, 405, 408, 409, 412, 415, 416, 417, 465, 466, 467, 468, 490, 569, 584, 585, 591, 592, 594, 634, 662, 663, 676, 678, 680, 682, 691, 837, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 908, 909, 910, 911, 913, 914, 995, 1001, 1006, 1009, 1016, 1019, 1020, 1022, 1024, 1026, 1028, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "preprocessor": [104, 155, 187, 212, 241, 249, 251, 316, 320, 322, 323, 324, 326, 409, 416, 591, 592, 594, 1024, 1035, 1038, 1043, 1045], "preprocessor__cat__selector__percentil": 104, "preprocessor__num__imputer__strategi": 104, "preprocessor_list": 249, "prescrib": 390, "presenc": [2, 49, 94, 96, 112, 113, 133, 186, 190, 198, 216, 249, 310, 374, 377, 390, 410, 413, 716, 730, 760, 773, 837, 871, 879, 881, 888, 988, 995, 1001, 1005, 1006, 1019, 1028, 1038, 1039, 1041, 1045, 1047, 1049], "present": [0, 2, 44, 45, 53, 79, 83, 119, 121, 128, 140, 141, 147, 150, 151, 168, 169, 177, 180, 194, 197, 198, 202, 212, 239, 242, 246, 260, 264, 268, 273, 276, 279, 280, 290, 310, 313, 315, 352, 373, 374, 381, 388, 390, 399, 406, 408, 410, 413, 415, 416, 426, 427, 430, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 490, 491, 492, 493, 494, 498, 502, 503, 504, 505, 506, 507, 512, 533, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 551, 552, 563, 564, 565, 568, 571, 572, 584, 585, 586, 591, 592, 594, 613, 621, 631, 632, 633, 634, 654, 658, 681, 692, 693, 694, 695, 716, 733, 734, 742, 773, 787, 788, 791, 801, 802, 804, 807, 808, 816, 818, 832, 850, 851, 852, 854, 856, 858, 859, 860, 867, 872, 880, 881, 882, 883, 884, 886, 889, 900, 901, 912, 920, 922, 923, 952, 988, 1004, 1005, 1006, 1007, 1012, 1015, 1023, 1025, 1038, 1043, 1045, 1046, 1047, 1049, 1050, 1052], "preserv": [38, 44, 126, 236, 243, 265, 379, 412, 413, 415, 416, 584, 591, 592, 594, 634, 650, 656, 700, 778, 782, 822, 823, 824, 892, 929, 934, 935, 995, 1001, 1002, 1015, 1017, 1024, 1035, 1038, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "preserves_dtyp": 929, "preservs": 1049, "preset": [670, 672, 680, 1009], "presort": [1040, 1045], "press": [371, 408, 413, 418, 419, 445, 593, 614, 615, 618, 623, 626, 647, 843, 847, 998, 1001, 1003, 1007], "pressur": 373, "preston": [1040, 1041, 1042], "presum": [187, 289, 408, 416, 843], "prettenhof": [0, 398, 1035, 1036, 1037, 1038, 1039, 1040], "pretti": [188, 236, 268, 363, 376, 388, 865, 866, 1009, 1044], "preuss": 1051, "prev_scor": 56, "preval": [135, 319, 390, 704, 716, 1005], "prevalence_pos_label": [277, 704], "prevent": [2, 44, 89, 145, 147, 166, 186, 209, 213, 216, 310, 316, 317, 340, 355, 359, 376, 378, 380, 388, 389, 402, 404, 408, 413, 416, 443, 450, 489, 490, 563, 564, 593, 594, 613, 615, 732, 789, 865, 866, 893, 894, 896, 897, 898, 899, 1005, 1007, 1010, 1011, 1015, 1021, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "previou": [44, 79, 87, 104, 121, 138, 144, 145, 147, 155, 171, 176, 177, 186, 187, 188, 198, 199, 213, 243, 245, 246, 264, 270, 273, 277, 310, 315, 323, 351, 352, 353, 359, 363, 371, 376, 378, 380, 381, 382, 384, 388, 390, 391, 394, 407, 408, 415, 416, 469, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 634, 650, 652, 656, 657, 662, 664, 666, 670, 671, 672, 673, 680, 681, 682, 684, 711, 823, 839, 842, 857, 865, 866, 905, 922, 1001, 1005, 1009, 1015, 1025, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "previous": [47, 87, 91, 104, 135, 177, 187, 264, 268, 277, 284, 323, 371, 384, 388, 394, 408, 413, 416, 441, 444, 455, 526, 536, 543, 653, 662, 663, 670, 671, 672, 680, 681, 682, 908, 1001, 1015, 1024, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "previous_loss": [670, 671, 672, 681], "previs": 240, "price": [52, 108, 144, 145, 150, 155, 249, 316, 995, 1001, 1002, 1029], "priceless": 376, "prieur": 1048, "primal": [662, 663, 681, 908, 909, 1019, 1020], "primari": [390, 413, 517, 925, 1012, 1028, 1029], "primarili": [261, 275, 376, 390, 404, 408, 962, 1029, 1044, 1045], "primdal": 1043, "primit": 1050, "princ": 1048, "princip": [2, 43, 115, 116, 120, 123, 125, 126, 129, 131, 153, 184, 221, 232, 244, 247, 257, 263, 276, 293, 299, 315, 321, 356, 368, 408, 411, 420, 485, 506, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 552, 661, 692, 693, 694, 696, 697, 834, 857, 869, 888, 923, 951, 952, 1002, 1008, 1026, 1030, 1031, 1035], "principl": [135, 178, 295, 353, 376, 388, 390, 391, 412, 415, 952, 994, 1004, 1008, 1019, 1042], "print": [2, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 67, 69, 74, 78, 79, 81, 82, 83, 84, 86, 87, 92, 94, 95, 97, 101, 103, 104, 106, 107, 108, 112, 116, 117, 119, 121, 124, 127, 128, 129, 131, 135, 138, 141, 142, 143, 144, 146, 148, 150, 160, 161, 165, 166, 168, 169, 171, 172, 174, 176, 180, 186, 188, 189, 190, 192, 198, 199, 201, 204, 208, 209, 212, 214, 215, 216, 219, 220, 227, 228, 230, 233, 234, 237, 241, 243, 245, 246, 249, 253, 258, 263, 264, 268, 269, 270, 271, 273, 275, 278, 279, 283, 290, 294, 301, 303, 306, 307, 308, 312, 315, 317, 319, 320, 321, 323, 325, 326, 327, 329, 330, 333, 340, 351, 352, 353, 355, 358, 359, 363, 370, 371, 374, 377, 378, 384, 390, 399, 402, 409, 412, 415, 416, 418, 465, 468, 469, 473, 479, 491, 496, 504, 514, 515, 543, 546, 551, 552, 561, 562, 563, 564, 566, 567, 571, 572, 580, 586, 587, 588, 590, 591, 592, 594, 616, 621, 622, 634, 650, 651, 653, 654, 656, 657, 658, 660, 664, 665, 666, 667, 670, 671, 680, 681, 688, 700, 717, 721, 741, 799, 801, 802, 803, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 830, 831, 832, 833, 835, 837, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 865, 866, 867, 868, 869, 870, 878, 884, 888, 896, 906, 907, 908, 909, 910, 913, 915, 921, 933, 938, 965, 988, 995, 1005, 1006, 1007, 1008, 1013, 1021, 1035, 1037, 1043, 1044, 1046, 1050], "print_changed_onli": [469, 906, 1044, 1046, 1047], "print_datafram": 268, "print_progress": 970, "print_rout": 246, "printabl": 1028, "prior": [2, 43, 47, 56, 81, 82, 91, 99, 100, 101, 119, 170, 171, 177, 183, 184, 189, 194, 196, 198, 254, 256, 260, 261, 264, 270, 281, 300, 376, 378, 390, 394, 399, 408, 411, 413, 415, 417, 418, 466, 525, 538, 550, 551, 552, 553, 561, 615, 617, 618, 619, 623, 626, 627, 634, 648, 649, 650, 651, 655, 656, 658, 659, 660, 664, 665, 666, 676, 682, 685, 720, 801, 843, 844, 845, 846, 847, 855, 868, 869, 883, 910, 913, 971, 994, 997, 999, 1001, 1004, 1005, 1007, 1013, 1021, 1022, 1026, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1051], "prior_k": 551, "priori": [212, 229, 279, 289, 310, 390, 408, 415, 591, 597, 1004, 1051], "priorit": [407, 1025, 1042], "prioriti": [375, 636, 836, 837, 1025, 1038], "prioritis": 376, "priors_": [551, 552], "privaci": 1024, "privat": [0, 378, 380, 390, 391, 930, 1029, 1035, 1043, 1045, 1046, 1048, 1049], "privileg": [249, 384], "priyam": 1050, "priyank": 1053, "priyansh": 1053, "priyash": 1053, "prng": 114, "pro": [402, 1004], "proanthocyanin": 373, "prob_pos_clf": 62, "prob_pos_isoton": 62, "prob_pos_sigmoid": 62, "prob_pr": [439, 440], "prob_tru": [439, 440], "proba": [63, 65, 157, 438, 916, 918], "proba_": [910, 913, 1046], "proba_map": 89, "proba_neg_class": [63, 65], "proba_pos_class": [63, 65], "probabilist": [55, 65, 67, 114, 120, 121, 130, 131, 170, 171, 174, 177, 178, 184, 245, 264, 351, 390, 406, 414, 415, 438, 474, 477, 534, 536, 537, 543, 561, 591, 592, 614, 626, 647, 649, 680, 707, 745, 804, 830, 875, 910, 911, 913, 914, 998, 999, 1001, 1004, 1005, 1010, 1015, 1020, 1021, 1024, 1026, 1029, 1035, 1038, 1042], "probabilisticpca": [1035, 1038], "probabilities_": [89, 447], "probabilities_or_label": 571, "probabl": [0, 2, 5, 31, 53, 61, 65, 66, 71, 89, 108, 119, 134, 137, 148, 150, 156, 164, 170, 171, 172, 173, 184, 187, 190, 205, 224, 227, 228, 232, 236, 240, 242, 243, 264, 270, 272, 273, 276, 277, 280, 284, 287, 289, 308, 310, 314, 319, 321, 327, 332, 334, 346, 347, 363, 371, 372, 378, 382, 388, 390, 407, 408, 412, 413, 416, 417, 418, 434, 435, 436, 437, 438, 439, 440, 447, 448, 450, 506, 514, 517, 525, 529, 551, 552, 553, 555, 557, 559, 561, 563, 566, 569, 571, 572, 596, 597, 613, 614, 617, 618, 626, 631, 635, 636, 637, 662, 663, 675, 680, 696, 702, 704, 706, 707, 710, 711, 713, 716, 720, 724, 726, 730, 731, 733, 743, 744, 745, 760, 786, 788, 791, 792, 793, 798, 801, 802, 803, 804, 807, 808, 818, 826, 833, 834, 837, 839, 840, 843, 844, 845, 846, 847, 850, 853, 855, 858, 864, 865, 889, 901, 902, 903, 904, 905, 908, 910, 913, 916, 918, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1021, 1025, 1026, 1027, 1031, 1035, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1049], "probable_clust": 90, "probas_pr": [786, 1053], "probb_": [910, 913, 1046], "probe": 1013, "probinette4": 1047, "probl": [610, 611], "problem": [2, 11, 26, 43, 44, 45, 46, 51, 53, 54, 55, 64, 73, 88, 89, 91, 100, 121, 135, 138, 141, 147, 148, 171, 184, 189, 192, 194, 198, 199, 202, 205, 206, 207, 212, 214, 216, 229, 230, 234, 239, 240, 247, 249, 252, 268, 270, 275, 279, 280, 284, 285, 287, 289, 290, 295, 302, 314, 322, 326, 327, 337, 340, 344, 347, 348, 351, 352, 358, 359, 363, 371, 372, 373, 374, 375, 377, 378, 381, 382, 384, 385, 388, 390, 396, 406, 407, 408, 410, 412, 414, 415, 416, 417, 418, 419, 420, 445, 448, 450, 451, 453, 458, 463, 466, 479, 505, 510, 511, 517, 518, 519, 520, 525, 526, 530, 533, 535, 539, 541, 544, 545, 546, 547, 548, 549, 550, 553, 554, 559, 563, 566, 569, 573, 575, 592, 614, 635, 647, 652, 654, 656, 658, 659, 660, 661, 662, 663, 668, 669, 670, 672, 673, 676, 677, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 695, 697, 699, 712, 720, 723, 733, 734, 739, 742, 743, 787, 788, 791, 792, 801, 802, 805, 806, 807, 808, 809, 811, 812, 813, 814, 819, 820, 821, 822, 823, 824, 828, 836, 837, 838, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 874, 875, 881, 889, 892, 898, 899, 908, 909, 916, 918, 940, 952, 995, 996, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1019, 1022, 1025, 1027, 1029, 1030, 1031, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "problemat": [44, 187, 264, 266, 409, 995, 1043], "proc": [65, 111, 406, 416, 451, 693, 697, 843, 994, 1002, 1007, 1011], "proce": [84, 166, 196, 374, 380, 411, 412, 415, 441, 881, 1001], "procedur": [26, 81, 90, 141, 147, 169, 195, 200, 260, 272, 313, 317, 340, 351, 359, 376, 388, 389, 390, 391, 406, 410, 412, 413, 415, 417, 533, 539, 540, 542, 547, 548, 549, 555, 556, 557, 558, 561, 562, 596, 598, 605, 612, 648, 676, 678, 691, 732, 789, 850, 858, 865, 866, 885, 897, 925, 975, 994, 1001, 1007, 1015, 1018, 1019, 1020, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "proceed": [112, 371, 373, 408, 419, 440, 445, 513, 700, 712, 730, 760, 855, 905, 1005, 1017, 1018, 1019], "process": [0, 2, 20, 38, 44, 45, 64, 67, 68, 71, 81, 82, 84, 100, 103, 105, 107, 111, 113, 122, 123, 125, 135, 137, 143, 145, 147, 152, 153, 162, 186, 194, 197, 214, 216, 222, 223, 224, 225, 245, 246, 247, 249, 255, 256, 259, 261, 264, 270, 272, 273, 282, 287, 305, 310, 313, 321, 325, 330, 334, 344, 345, 349, 352, 353, 355, 363, 364, 365, 371, 375, 376, 378, 380, 382, 385, 388, 389, 390, 402, 408, 409, 410, 412, 413, 414, 415, 416, 417, 421, 449, 450, 476, 498, 506, 525, 536, 537, 538, 539, 540, 563, 564, 565, 591, 592, 594, 614, 615, 617, 618, 619, 621, 622, 623, 626, 627, 629, 631, 636, 637, 643, 647, 668, 676, 689, 690, 707, 727, 745, 785, 801, 803, 804, 807, 808, 818, 826, 829, 830, 831, 840, 841, 857, 871, 875, 877, 878, 879, 888, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 970, 994, 997, 1001, 1005, 1008, 1015, 1017, 1019, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "process_rout": [2, 246, 1052], "processor": [104, 155, 187, 419, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 473, 533, 537, 538, 539, 541, 544, 545, 547, 548, 550, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 597, 605, 610, 611, 614, 636, 638, 643, 651, 655, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 850, 851, 854, 856, 858, 859, 861, 862, 867, 870, 903, 904], "procter": 52, "prod": [352, 625], "prod_": 1007, "prod_i": 997, "proding": 1051, "produc": [53, 54, 63, 64, 80, 91, 103, 124, 147, 148, 149, 151, 198, 205, 276, 308, 332, 359, 364, 371, 372, 376, 378, 381, 390, 391, 408, 409, 412, 413, 415, 441, 444, 447, 453, 521, 538, 561, 565, 584, 591, 596, 597, 636, 637, 806, 807, 808, 816, 821, 824, 829, 873, 883, 910, 913, 996, 997, 1001, 1003, 1004, 1005, 1008, 1011, 1012, 1016, 1018, 1019, 1020, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "product": [2, 59, 104, 121, 156, 171, 176, 188, 344, 359, 363, 378, 379, 382, 385, 405, 413, 415, 452, 540, 542, 549, 585, 592, 593, 594, 617, 618, 637, 644, 668, 669, 689, 690, 765, 767, 779, 781, 880, 883, 900, 901, 953, 994, 997, 1001, 1003, 1015, 1017, 1019, 1020, 1024, 1029, 1031, 1043], "production": 1029, "prof": 382, "profession": 187, "professor": 1029, "profil": [212, 363, 376, 379, 523, 526, 1001, 1029], "profile_default": 382, "profit": [0, 264, 327, 1052], "prog": 373, "prognosi": 373, "program": [0, 84, 359, 364, 365, 373, 374, 376, 378, 382, 388, 510, 639, 674, 898, 899, 1001, 1020, 1021, 1024, 1025, 1028, 1035, 1037], "programmat": [378, 501, 1044], "progress": [44, 47, 48, 121, 158, 183, 206, 209, 295, 323, 373, 380, 381, 391, 399, 404, 408, 561, 562, 696, 837, 839, 842, 857, 865, 866, 1029, 1035, 1037, 1044, 1049], "prohibit": [186, 249, 412, 415, 631, 1010, 1018, 1042], "proj": [54, 653], "proj_gradi": 382, "proj_oper": 54, "project": [2, 38, 46, 48, 51, 54, 56, 70, 89, 92, 101, 120, 121, 123, 125, 127, 131, 184, 188, 232, 233, 234, 236, 238, 244, 247, 294, 299, 303, 337, 352, 363, 368, 370, 374, 375, 376, 381, 382, 385, 390, 391, 394, 405, 411, 413, 414, 420, 441, 447, 452, 453, 463, 475, 483, 484, 485, 486, 490, 504, 506, 533, 535, 536, 537, 539, 541, 543, 544, 545, 546, 550, 551, 575, 585, 592, 645, 646, 653, 676, 678, 692, 695, 699, 700, 838, 857, 885, 900, 901, 902, 951, 952, 999, 1001, 1002, 1003, 1006, 1008, 1009, 1011, 1018, 1021, 1026, 1029, 1031, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "projected_data": 243, "projected_dist": 243, "projectedgradientnmf": 1040, "prokopi": [1040, 1043], "prolin": [315, 373], "promin": [124, 390], "promis": [390, 1025], "promot": [187, 443, 712, 1024, 1046, 1048, 1052], "prompt": [374, 376, 380, 394, 401, 416], "prone": [65, 212, 257, 314, 388, 406], "pronounc": [75, 76, 86, 176], "proof": [388, 415, 902, 1017], "prop": [106, 113, 218, 257, 296, 339, 358], "propag": [2, 59, 69, 72, 73, 83, 97, 167, 184, 328, 371, 441, 455, 504, 514, 516, 701, 708, 709, 717, 718, 721, 722, 741, 797, 799, 868, 882, 903, 904, 905, 970, 971, 1009, 1026, 1027, 1030, 1031, 1035, 1047, 1050], "proper": [65, 89, 202, 205, 230, 264, 365, 378, 382, 406, 415, 450, 543, 555, 680, 952, 979, 1000, 1001, 1002, 1005, 1020, 1035, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "properli": [44, 53, 63, 89, 152, 176, 265, 283, 319, 365, 374, 376, 380, 384, 414, 908, 909, 910, 911, 912, 913, 914, 994, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "properti": [52, 63, 178, 179, 214, 229, 256, 292, 315, 358, 363, 369, 376, 378, 394, 405, 406, 408, 410, 413, 415, 417, 418, 423, 443, 446, 452, 453, 454, 465, 466, 544, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 594, 596, 597, 600, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 636, 650, 656, 659, 664, 666, 678, 679, 703, 708, 709, 712, 803, 804, 807, 808, 818, 826, 836, 837, 867, 868, 881, 882, 883, 889, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 997, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1015, 1018, 1020, 1021, 1022, 1025, 1040, 1044, 1045, 1048, 1049, 1052, 1053], "proport": [55, 64, 76, 150, 168, 199, 212, 219, 225, 239, 249, 273, 277, 293, 297, 300, 347, 349, 358, 363, 371, 406, 408, 410, 412, 413, 415, 416, 439, 440, 447, 470, 475, 517, 551, 552, 557, 559, 561, 562, 563, 564, 565, 566, 586, 587, 591, 594, 631, 636, 662, 663, 670, 671, 672, 678, 679, 680, 682, 700, 705, 716, 726, 805, 806, 807, 808, 821, 824, 834, 854, 855, 865, 866, 882, 908, 909, 910, 913, 914, 916, 918, 920, 922, 940, 994, 1004, 1005, 1008, 1011, 1019, 1020, 1021, 1040, 1052], "propos": [91, 110, 111, 290, 371, 376, 378, 388, 390, 408, 410, 415, 420, 451, 537, 610, 611, 680, 681, 682, 865, 866, 1001, 1004, 1008, 1019, 1042], "proprietari": 1021, "propto": [414, 1007], "prorokovi\u0107": 1053, "protect": [377, 380, 970], "protein": 370, "protocol": [402, 1005, 1024, 1038, 1051, 1052], "protocol_typ": 249, "prototyp": 1029, "prove": [122, 1029], "proven": [270, 999, 1003, 1029], "provid": [0, 2, 31, 32, 45, 48, 51, 53, 62, 65, 67, 71, 73, 78, 89, 94, 113, 121, 142, 150, 153, 155, 171, 177, 187, 188, 194, 199, 200, 202, 205, 213, 216, 233, 237, 240, 241, 246, 260, 264, 270, 271, 272, 276, 300, 303, 307, 310, 314, 319, 320, 322, 324, 338, 344, 347, 351, 352, 355, 358, 359, 363, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 384, 385, 388, 389, 390, 393, 394, 399, 402, 404, 405, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 422, 429, 438, 441, 443, 444, 445, 447, 448, 450, 451, 453, 460, 461, 465, 466, 483, 484, 485, 493, 495, 496, 498, 500, 503, 534, 535, 536, 537, 538, 540, 542, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 591, 593, 594, 596, 597, 604, 608, 614, 615, 631, 636, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 694, 698, 703, 715, 726, 739, 745, 746, 768, 778, 782, 792, 796, 798, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 820, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 865, 866, 868, 871, 873, 874, 875, 878, 879, 880, 883, 885, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 924, 926, 940, 945, 957, 961, 963, 980, 981, 982, 993, 994, 995, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "provinc": 316, "provost": [792, 1005], "proxi": [186, 187, 413, 417, 864, 1040], "prun": 382, "prune": [184, 354, 358, 417, 502, 559, 560, 561, 562, 566, 567, 596, 648, 834, 916, 917, 918, 919, 1008, 1026, 1027, 1031, 1035, 1038, 1045, 1046], "przybocki": 1005, "ps_lsvm_score": 192, "ps_lsvm_time": 192, "pseudo": [213, 378, 412, 420, 441, 453, 455, 463, 470, 471, 472, 474, 475, 476, 477, 535, 563, 564, 565, 631, 638, 643, 645, 646, 650, 651, 656, 657, 664, 665, 666, 667, 681, 695, 699, 807, 808, 816, 818, 857, 864, 900, 901, 905, 908, 909, 910, 913, 951, 952, 1001, 1017, 1040, 1049], "pseudo_likelihood": 864, "pseudocount": [538, 1043], "psf": 376, "psi": 413, "psi_1": 413, "psi_2": 413, "psi_n": 413, "pspachtholz": [1045, 1046, 1047], "psycholog": [408, 709, 720], "psychometrica": 639, "psychometrika": [694, 698, 1002], "pt": [51, 371, 417, 884, 1015], "pt_i": 300, "pt_j": 300, "ptocca": 1045, "ptp": 52, "pts_": 51, "pts_test": 51, "pts_train": 51, "pub": [237, 903], "public": [0, 111, 370, 376, 378, 380, 381, 388, 389, 390, 391, 412, 415, 469, 668, 675, 689, 690, 696, 906, 1001, 1009, 1035, 1040, 1041, 1046, 1047, 1048, 1051], "publicli": [376, 1045], "publish": [370, 371, 378, 380, 384, 390, 1017, 1025, 1047], "pubu": [226, 243, 296, 339], "pubu_r": 112, "puerta": 1050, "puggioni": 1039, "puhuk": [1049, 1050], "pujalt": 1049, "pulapakura": [1052, 1053], "pulido": 1048, "pulkit": [1043, 1044, 1046], "pull": [103, 322, 364, 374, 379, 390, 391, 1028, 1045], "puls": 373, "punctuat": [416, 591, 592, 594], "puneet": 1042, "puneeth": [1052, 1053], "puor": 124, "puor_r": 175, "pure": [112, 113, 117, 198, 212, 390, 408, 474, 480, 498, 559, 560, 561, 562, 566, 567, 568, 709, 719, 790, 799, 916, 917, 918, 919, 1015], "pure_emp_cov": 113, "pure_loc": 113, "pure_x": 113, "purepremium": 230, "puriti": [137, 920, 922], "purna": 1049, "purpl": [110, 119, 236], "purport": 1042, "purpos": [49, 52, 73, 117, 145, 150, 182, 209, 226, 227, 228, 232, 234, 247, 258, 260, 266, 267, 340, 341, 347, 351, 352, 359, 371, 376, 389, 390, 391, 394, 401, 405, 408, 409, 413, 415, 416, 417, 418, 830, 831, 868, 925, 1002, 1005, 1006, 1008, 1011, 1024, 1047, 1049, 1053], "pursu": 187, "pursuit": [2, 88, 122, 124, 130, 184, 193, 413, 475, 528, 533, 539, 544, 550, 668, 669, 689, 690, 1026, 1027, 1031, 1035], "push": [65, 376, 380, 406, 1028], "pushd": 384, "put": [76, 92, 162, 171, 173, 244, 251, 255, 284, 305, 312, 323, 334, 345, 349, 365, 378, 380, 381, 384, 402, 418, 444, 448, 460, 517, 618, 651, 665, 801, 885, 889, 897, 910, 911, 912, 913, 914, 941, 995, 1002, 1004, 1005, 1006, 1012, 1015], "putnam": 1041, "putschblo": 1048, "pvalu": [2, 595, 598, 599, 601, 602, 603, 833], "pvalue_iri": 276, "pvalue_rand": 276, "pvalues_": [165, 595, 598, 599, 601, 602, 603, 1035], "pvnguyen": 1039, "pwalchessen": 1047, "pwd": 384, "px": [141, 271], "pxd": 376, "py": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 364, 376, 377, 380, 382, 384, 390, 394, 416, 532, 648, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 883, 887, 947, 1005, 1024, 1026, 1035, 1037, 1041, 1045, 1049], "py3": 394, "py39": 394, "pyamg": [81, 394, 401, 408, 453, 463, 695, 699], "pyarrow": [394, 401], "pybrain": 1035, "pycon": [402, 1023], "pyd": 377, "pydata": [44, 376, 384, 394, 401, 402, 1023, 1029], "pydata_2013": 1029, "pydebug": 382, "pyflak": 378, "pyfunc": [703, 1008], "pyfuncdist": 703, "pymc": 1024, "pynndesc": 290, "pynndescenttransform": 290, "pyodid": 376, "pyoxid": 1048, "pypi": [364, 374, 378, 380, 382, 394, 1021, 1043, 1047, 1049, 1050, 1052], "pyplot": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 190, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 326, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 372, 376, 383, 439, 504, 635, 636, 701, 702, 704, 705, 706, 810, 827, 1032, 1049], "pyplpt": 370, "pypy3": 1043, "pysniak": 1038, "pystruct": 388, "pytabl": 370, "pytb": 384, "pytest": [2, 319, 364, 374, 376, 378, 379, 394, 401, 404, 945, 946, 947, 1045, 1048], "python": [0, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 363, 365, 370, 374, 376, 377, 378, 379, 380, 381, 384, 385, 388, 390, 394, 395, 401, 402, 404, 409, 416, 498, 510, 511, 584, 703, 815, 882, 1005, 1015, 1020, 1021, 1025, 1028, 1029, 1031, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "python2": 1043, "python3": [374, 394], "python37": 394, "pythonsoftwarefound": 394, "pythonx": 374, "pytorch": [46, 327, 388, 1024, 1025, 1051, 1052], "pytorch_enable_mps_fallback": 404, "pyx": [376, 377, 382, 384], "p\u00e9rez": 1043, "p\u00f6lsterl": [1042, 1045, 1048], "q": [52, 104, 116, 147, 212, 322, 405, 408, 413, 951, 1001, 1020], "q1": 511, "q327": 373, "q_": 1020, "q_m": 1021, "q_max": [886, 898], "q_min": [886, 898], "qaiser": 1052, "qda": [68, 373, 551, 552, 1027, 1031, 1040], "qdeffens": [1045, 1048], "qemu": 384, "qi": [511, 1047], "qian": [1041, 1046], "qiang": 1039, "qianm": 1047, "qid": [488, 510, 511, 1036, 1041], "qimu": 1041, "qin": [0, 373, 398, 416, 1042, 1043, 1044, 1045, 1046], "qingi": 1043, "qizhi": 1046, "qmarcou": 1052, "qn": 511, "qodari": 1053, "qp": 1020, "qr": [81, 214, 404, 536, 543, 546, 951, 952, 1002, 1041, 1052], "qt": [314, 885], "qtconsol": 382, "quad": [418, 1008, 1019], "quadcontourset": 635, "quadmesh": 635, "quadrant": 310, "quadrat": [2, 12, 44, 49, 66, 70, 112, 113, 114, 176, 184, 226, 249, 260, 272, 322, 441, 459, 462, 551, 552, 627, 635, 652, 662, 663, 673, 680, 684, 720, 913, 914, 1001, 1002, 1005, 1008, 1011, 1015, 1019, 1020, 1026, 1027, 1031, 1036], "quadraticdiscriminantanalysi": [2, 68, 71, 551, 999, 1006, 1008, 1035, 1040, 1042, 1050], "quadro": 1048, "quadv": 1049, "qualifi": 381, "qualit": [45, 46, 87, 89, 95, 141, 147, 212, 324, 371, 408, 440, 705, 1050], "qualiti": [0, 13, 28, 46, 59, 62, 73, 81, 83, 92, 124, 143, 150, 187, 218, 263, 268, 277, 278, 279, 344, 376, 384, 388, 390, 403, 408, 410, 413, 453, 463, 470, 475, 559, 560, 561, 562, 566, 567, 747, 818, 900, 901, 916, 917, 918, 919, 952, 1000, 1002, 1010, 1017, 1021, 1024, 1025, 1029, 1031], "quang": 1046, "quansight": 0, "quantifi": [13, 28, 44, 73, 83, 110, 176, 230, 264, 277, 327, 378, 390, 403, 575, 871, 1000, 1013, 1015, 1031], "quantil": [2, 80, 87, 97, 135, 137, 184, 193, 310, 313, 314, 372, 388, 415, 439, 440, 459, 521, 554, 555, 562, 564, 661, 674, 727, 749, 752, 754, 831, 873, 885, 886, 887, 897, 898, 1005, 1015, 1026, 1027, 1031, 1035, 1039, 1042, 1044, 1048, 1049, 1051, 1053], "quantile_list": 53, "quantile_rang": [310, 886, 898, 1041], "quantile_regress": 214, "quantile_transform": [2, 108, 885, 896, 1015, 1042, 1043, 1044, 1053], "quantileregressor": [2, 322, 1001, 1005, 1048, 1049, 1050], "quantiles_": [885, 1015, 1045], "quantiletransform": [2, 108, 188, 314, 409, 466, 884, 897, 995, 1015, 1042, 1043, 1044, 1045, 1046, 1051, 1053], "quantit": [44, 45, 46, 53, 63, 95, 147, 150, 158, 266, 285, 373], "quantiti": [52, 144, 205, 270, 321, 363, 390, 408, 415, 725, 726, 727, 728, 789, 864, 994, 996, 999, 1001, 1040], "quantiz": [72, 124, 184, 371, 444, 448, 450, 873, 1015, 1026], "quantum": 1003, "quartil": 886, "quartimax": [534, 1047], "quasi": [378, 865, 866, 1001], "quazi": [1042, 1043], "queensland": 373, "quentin": [1042, 1043, 1044, 1051, 1052], "queqichao": 1039, "queri": [194, 293, 303, 363, 414, 419, 445, 447, 451, 458, 554, 614, 615, 632, 648, 649, 730, 760, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 1005, 1008, 1021, 1024, 1028, 1037, 1039, 1040, 1043], "query_id": [488, 510, 511], "query_radiu": [848, 849], "question": [0, 160, 186, 264, 270, 347, 375, 376, 381, 384, 402, 412, 415, 837, 910, 913, 1001, 1004, 1005, 1011, 1029], "queue": [48, 1008, 1038], "quick": [44, 126, 252, 376, 378, 382, 394, 609, 834, 1005, 1006, 1015, 1029, 1032], "quicker": 1004, "quickest": 374, "quickli": [75, 250, 306, 319, 373, 376, 377, 412, 415, 696, 782, 1001, 1008, 1009, 1029, 1046], "quinlan": 1021, "quinonez": 1043, "quintana": 1005, "quit": [44, 53, 65, 87, 91, 117, 138, 160, 169, 187, 188, 205, 210, 230, 264, 278, 287, 322, 351, 363, 381, 389, 408, 416, 1000, 1002, 1007, 1029, 1043], "quiver": 123, "quot": [38, 52, 55, 103, 271, 351, 352, 364, 370, 371, 374, 376, 380, 394, 395, 404, 489, 490, 498, 1005, 1017, 1020, 1050], "quota": [1048, 1049], "quotat": 371, "quotient": 1005, "r": [0, 2, 48, 50, 51, 52, 53, 54, 62, 63, 64, 65, 75, 79, 99, 108, 110, 111, 112, 113, 117, 121, 128, 131, 135, 138, 139, 143, 147, 148, 149, 158, 165, 172, 173, 174, 178, 179, 180, 182, 183, 187, 197, 198, 201, 202, 212, 219, 222, 230, 237, 242, 245, 255, 258, 261, 269, 270, 273, 275, 276, 277, 280, 283, 289, 292, 293, 297, 301, 303, 316, 323, 342, 344, 353, 359, 371, 373, 377, 380, 388, 390, 402, 405, 406, 408, 410, 411, 412, 413, 415, 416, 425, 431, 438, 447, 452, 454, 466, 470, 475, 479, 483, 484, 485, 500, 506, 515, 522, 536, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 591, 592, 593, 594, 597, 609, 612, 614, 615, 631, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 689, 690, 696, 700, 720, 725, 726, 727, 728, 732, 734, 785, 789, 792, 803, 804, 818, 821, 826, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 865, 866, 879, 884, 896, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 921, 970, 995, 997, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1035, 1039, 1042, 1045, 1046, 1047, 1048, 1050, 1052], "r0": [807, 808], "r1": 572, "r2": [108, 136, 141, 155, 186, 188, 208, 245, 283, 409, 415, 556, 572, 677, 831, 866, 926, 1005, 1013, 1044], "r2007": 415, "r2_score": [2, 108, 186, 198, 208, 209, 378, 404, 415, 431, 466, 483, 484, 485, 556, 558, 560, 562, 564, 567, 570, 572, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 728, 732, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 994, 1005, 1036, 1038, 1044, 1048, 1049, 1053], "r2_score_ard": 198, "r2_score_enet": 198, "r2_score_lasso": 198, "r2_score_nnl": 208, "r2_score_ol": 208, "r2_with_abl": 186, "r2_without_": 186, "r3": 572, "r_": [51, 130, 225, 226, 256, 277, 296, 297, 339, 345, 349, 408, 711, 1005, 1021], "r_0": 994, "r_k": 277, "r_multi": 1013, "r_n": [277, 711, 1005], "r_regress": [2, 417, 609, 1048, 1049, 1052], "r_squar": 389, "raamana": [1043, 1044], "rabbit": [323, 325, 1015], "raccoon": [87, 124, 413], "raccoon_fac": [87, 124], "race": [187, 371, 498, 1038], "rachel": [1047, 1050], "rachelcjordan": 1046, "rachez": [1040, 1041], "rachit": [1041, 1047, 1050], "rachum": 1047, "radar": 1029, "radford": 1001, "radhakrishnan": 1043, "radial": [2, 45, 126, 171, 176, 178, 340, 344, 368, 453, 626, 695, 1003, 1020, 1031], "radian": [303, 703, 768], "radii": [848, 849], "radiu": [2, 297, 340, 373, 408, 443, 451, 692, 768, 785, 848, 849, 850, 851, 852, 856, 858, 859, 860, 862, 1008, 1037, 1039, 1049, 1052], "radius1": 100, "radius2": 100, "radius3": 100, "radius4": 100, "radius_neighbor": [323, 856, 858, 859, 860, 1039, 1044, 1045, 1047, 1048, 1049, 1050], "radius_neighbors_graph": [2, 408, 419, 445, 850, 851, 852, 854, 856, 858, 859, 860, 861, 1008, 1039, 1044, 1047], "radiusneighborsclassifi": [2, 323, 850, 851, 856, 859, 1006, 1008, 1035, 1037, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "radiusneighborsregressor": [2, 323, 850, 851, 856, 858, 1006, 1008, 1035, 1037, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "radiusneighborstransform": [2, 319, 852, 1008, 1045, 1047, 1049, 1050], "radostin": [1043, 1044], "raduspaimoc": 1046, "raf": 1044, "rafael": [1029, 1036, 1037, 1039, 1042], "rafal": [1050, 1051], "rafei": 1047, "raff": 1038, "raffaello": 1044, "rafiqu": [1043, 1044], "raghav": [0, 398, 1039, 1040, 1041, 1042, 1043, 1047], "raghavan": [413, 593, 843, 847, 1003, 1005, 1007], "raghu": [408, 443], "raghunathan": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "raghuv": [1050, 1051], "raghuwanshi": 1049, "rah": 645, "rahiel": 1039, "rahil": [1049, 1050, 1051, 1052, 1053], "rahimi": [645, 997], "rahmaan": 1045, "rahman": [1042, 1043, 1047], "rahn": [1042, 1045], "rahul": [1047, 1052], "rai": [0, 398, 1005, 1035, 1045, 1047, 1048], "raimundo": 1043, "rain": [44, 53, 188, 407, 1001], "rainbow": [62, 234], "rainfal": 1001, "rais": [2, 133, 213, 246, 247, 264, 273, 314, 322, 376, 378, 380, 381, 382, 385, 388, 390, 399, 402, 409, 412, 438, 444, 445, 448, 450, 466, 483, 484, 485, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 511, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 577, 579, 580, 591, 592, 593, 594, 606, 614, 615, 621, 633, 636, 639, 640, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 700, 702, 706, 713, 715, 716, 717, 718, 731, 733, 734, 742, 782, 786, 787, 788, 791, 792, 793, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 818, 822, 826, 827, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 857, 858, 859, 863, 865, 866, 867, 868, 871, 872, 873, 874, 875, 880, 881, 882, 886, 887, 888, 895, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 932, 934, 935, 937, 938, 945, 946, 956, 961, 965, 967, 988, 989, 990, 991, 993, 994, 1005, 1015, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "raisadz": 1053, "raise_exc": 715, "raise_except": 990, "raise_unknown": 967, "raise_warn": [273, 716, 990], "raj": [1052, 1053], "rajagopalan": [0, 398, 1043, 1047], "rajaona": [1041, 1042], "rajat": [1038, 1045], "rajdeep": 1044, "rajendra": 1043, "raji": [1050, 1051], "rakotoarison": [1042, 1043, 1045], "ralf": [1038, 1041, 1042, 1050, 1051, 1053], "ralph": 1053, "ram": [56, 87, 365, 402, 415, 900, 901, 1007, 1020, 1041, 1047, 1050, 1051], "ramakrishnan": [408, 443], "ramana": [1041, 1042], "ramanath": 1040, "ramesh": [371, 1029, 1038, 1041, 1045], "rameshwar": [1042, 1043], "ramil": [1043, 1044], "rammig": [1029, 1041], "ramo": 1050, "rampin": 1042, "ramyanp": [1047, 1048], "ramzi": 1047, "ram\u00edrez": 1005, "rand": [2, 54, 62, 73, 74, 75, 76, 80, 83, 92, 96, 128, 138, 152, 154, 164, 194, 198, 234, 235, 239, 245, 246, 285, 302, 320, 321, 326, 333, 334, 346, 352, 357, 385, 399, 546, 708, 709, 719, 761, 785, 790, 900, 901, 903, 904, 905, 1017, 1035, 1046, 1047], "rand_index": 709, "rand_scor": [2, 73, 408, 719, 1005, 1047], "randal": [888, 1039, 1049], "randi": 1041, "randint": [51, 73, 113, 119, 146, 183, 189, 235, 242, 246, 248, 282, 321, 326, 378, 381, 389, 399, 808, 825, 843, 844, 845, 847, 994, 995], "randn": [54, 70, 71, 75, 88, 99, 100, 112, 113, 124, 128, 151, 164, 171, 175, 186, 189, 202, 207, 208, 211, 225, 226, 229, 256, 259, 260, 265, 277, 279, 280, 285, 296, 297, 317, 320, 321, 326, 339, 344, 345, 349, 378, 381, 647, 674, 676, 682, 691, 825, 911, 914], "randolf": 1053, "random": [2, 14, 38, 44, 45, 46, 47, 51, 52, 53, 54, 59, 60, 62, 63, 64, 65, 68, 70, 71, 73, 75, 76, 80, 84, 86, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 122, 123, 124, 128, 134, 136, 138, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 158, 162, 164, 165, 168, 171, 172, 175, 177, 178, 180, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 202, 203, 207, 208, 210, 211, 212, 213, 214, 215, 218, 219, 221, 225, 226, 229, 230, 232, 233, 235, 236, 237, 238, 239, 244, 245, 246, 248, 249, 255, 256, 258, 259, 260, 261, 262, 265, 267, 268, 269, 270, 271, 273, 275, 277, 279, 280, 281, 282, 285, 289, 290, 295, 296, 297, 302, 305, 311, 313, 314, 317, 320, 321, 323, 325, 327, 329, 330, 333, 334, 339, 340, 342, 343, 344, 345, 346, 349, 351, 352, 363, 364, 368, 372, 379, 381, 388, 389, 390, 399, 403, 404, 406, 408, 416, 417, 421, 433, 441, 444, 448, 450, 452, 453, 454, 455, 459, 460, 461, 463, 465, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 489, 490, 491, 492, 494, 497, 498, 499, 504, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 537, 538, 540, 541, 542, 543, 546, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 585, 586, 587, 592, 610, 611, 614, 615, 631, 634, 636, 638, 643, 644, 645, 646, 647, 650, 651, 653, 654, 656, 657, 658, 662, 664, 665, 666, 667, 674, 675, 676, 680, 681, 682, 683, 691, 693, 694, 695, 696, 697, 698, 699, 705, 708, 709, 712, 735, 747, 785, 792, 797, 801, 802, 804, 805, 806, 807, 808, 809, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 833, 834, 839, 841, 842, 843, 844, 845, 847, 848, 849, 853, 857, 864, 865, 866, 868, 871, 873, 882, 885, 889, 897, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 937, 949, 951, 952, 973, 975, 978, 995, 997, 1000, 1002, 1004, 1005, 1009, 1010, 1011, 1013, 1015, 1020, 1021, 1026, 1027, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "random_": 202, "random_cat": [189, 1013], "random_choice_csc": 1045, "random_forest": 140, "random_from_data": [258, 801, 802, 1004], "random_label": 73, "random_num": [189, 1013], "random_offset_": [645, 646], "random_project": [2, 233, 243, 900, 901, 902, 1017, 1022, 1036, 1041, 1051, 1052], "random_sampl": [198, 848, 849, 853], "random_se": [50, 119, 143], "random_search": [271, 278], "random_st": [44, 45, 46, 47, 50, 52, 53, 55, 58, 59, 60, 62, 63, 64, 65, 67, 68, 74, 78, 79, 80, 81, 83, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 108, 114, 117, 119, 121, 123, 126, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 165, 166, 168, 171, 177, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 196, 197, 199, 205, 211, 212, 215, 216, 218, 219, 220, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 244, 247, 248, 249, 250, 252, 253, 255, 257, 258, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 287, 289, 290, 293, 294, 298, 299, 300, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 332, 338, 340, 341, 342, 347, 348, 351, 352, 355, 358, 359, 372, 378, 381, 385, 389, 390, 404, 407, 408, 409, 412, 413, 415, 416, 420, 433, 438, 439, 441, 444, 448, 450, 452, 453, 454, 455, 459, 460, 461, 463, 470, 475, 479, 488, 489, 492, 494, 497, 499, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 586, 587, 596, 597, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 636, 637, 638, 639, 642, 643, 644, 645, 646, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 714, 739, 792, 796, 797, 801, 802, 803, 805, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 853, 857, 864, 865, 866, 868, 873, 885, 889, 897, 900, 901, 908, 909, 910, 913, 915, 916, 917, 918, 919, 921, 922, 924, 926, 927, 949, 951, 952, 973, 975, 978, 994, 995, 997, 1000, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1015, 1020, 1021, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "random_state_": [378, 538, 631, 857, 1049], "random_tre": 568, "random_tree_embed": 140, "random_unlabeled_point": [321, 903, 904, 905], "random_weights_": [645, 646], "randomforest": [50, 143, 363, 415, 916, 917, 1040], "randomforestclassifi": [2, 64, 65, 68, 90, 139, 140, 141, 142, 143, 157, 189, 190, 251, 252, 267, 282, 319, 321, 326, 351, 359, 378, 389, 390, 406, 415, 417, 559, 560, 561, 563, 568, 569, 571, 807, 808, 826, 838, 918, 994, 995, 1006, 1013, 1029, 1032, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "randomforestregressor": [2, 50, 141, 154, 155, 158, 182, 183, 321, 326, 389, 415, 559, 560, 562, 564, 568, 570, 572, 636, 637, 918, 995, 1006, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "randomgeek78": 1049, "randomized_range_find": [2, 385, 1036, 1041], "randomized_svd": [2, 56, 385, 452, 454, 534, 543, 546, 548, 1035, 1036, 1041, 1048, 1049, 1050], "randomized_svd_low_rank": 1042, "randomizedlasso": 1042, "randomizedlogisticregress": 1042, "randomizedpca": [1029, 1035, 1037, 1038, 1040, 1041, 1042], "randomizedsearchcv": [2, 46, 104, 171, 271, 278, 321, 359, 389, 399, 404, 578, 994, 1005, 1019, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052, 1053], "randomli": [2, 53, 73, 84, 95, 104, 118, 138, 150, 151, 182, 184, 188, 229, 243, 247, 260, 265, 276, 287, 289, 329, 332, 359, 364, 385, 388, 389, 408, 412, 415, 418, 450, 459, 517, 525, 533, 539, 547, 548, 553, 561, 562, 563, 564, 565, 566, 567, 614, 615, 675, 683, 694, 698, 720, 801, 802, 864, 902, 916, 917, 918, 919, 1004, 1006, 1008, 1011, 1013, 1017, 1021, 1026, 1046, 1050, 1052], "randomst": [2, 45, 54, 59, 60, 62, 68, 71, 73, 80, 84, 95, 96, 113, 114, 117, 121, 123, 128, 136, 146, 147, 150, 151, 152, 154, 165, 171, 172, 175, 177, 178, 180, 182, 183, 186, 189, 194, 195, 196, 197, 198, 202, 207, 213, 214, 219, 226, 235, 239, 245, 246, 255, 258, 265, 273, 276, 277, 279, 280, 281, 282, 302, 305, 311, 313, 314, 317, 320, 321, 323, 325, 326, 329, 330, 334, 343, 357, 378, 381, 385, 390, 399, 413, 420, 421, 441, 444, 448, 450, 452, 453, 454, 455, 459, 460, 461, 463, 470, 471, 475, 476, 477, 479, 480, 481, 482, 489, 492, 494, 497, 499, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 586, 587, 610, 611, 614, 615, 631, 636, 638, 643, 644, 645, 646, 647, 650, 651, 653, 654, 656, 657, 658, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 676, 678, 680, 681, 682, 683, 691, 693, 694, 695, 696, 697, 698, 699, 705, 785, 797, 801, 802, 805, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 826, 832, 833, 834, 838, 839, 842, 843, 844, 845, 847, 848, 849, 853, 857, 864, 865, 866, 873, 885, 889, 897, 900, 901, 903, 904, 905, 908, 909, 910, 913, 914, 916, 917, 918, 919, 937, 951, 952, 973, 975, 978, 1015, 1031], "randomtreesembed": [2, 140, 153, 233, 415, 918, 995, 1036, 1043, 1044, 1048, 1049, 1050], "randomtreesembedding_": 568, "rang": [2, 44, 45, 46, 47, 48, 50, 52, 56, 58, 59, 63, 64, 65, 69, 70, 73, 74, 76, 78, 81, 82, 84, 85, 89, 94, 95, 97, 98, 110, 111, 113, 114, 135, 137, 138, 139, 142, 147, 150, 154, 164, 167, 168, 172, 187, 188, 192, 198, 202, 203, 205, 207, 210, 212, 213, 216, 219, 220, 228, 230, 233, 235, 242, 243, 248, 249, 255, 257, 260, 261, 264, 265, 269, 270, 271, 273, 274, 275, 277, 278, 279, 281, 282, 283, 285, 289, 294, 300, 302, 303, 308, 310, 315, 316, 319, 323, 324, 330, 340, 347, 351, 352, 356, 358, 364, 370, 371, 373, 376, 378, 382, 385, 390, 402, 408, 412, 415, 418, 441, 462, 470, 472, 473, 474, 475, 476, 477, 479, 482, 492, 496, 497, 516, 529, 543, 555, 556, 561, 562, 565, 591, 592, 594, 633, 636, 637, 642, 644, 652, 653, 673, 675, 680, 681, 682, 684, 696, 716, 735, 750, 792, 834, 840, 854, 856, 858, 859, 864, 878, 885, 886, 887, 893, 894, 897, 898, 901, 902, 951, 952, 994, 1001, 1005, 1009, 1019, 1025, 1029, 1040, 1041, 1042, 1043, 1045, 1048, 1051], "range_n_clust": 94, "range_n_outli": 113, "rangeindex": 498, "rangl": [997, 1005, 1019, 1020], "ranjanikrishnan": 1048, "rank": [2, 44, 56, 63, 112, 125, 128, 142, 167, 189, 190, 230, 268, 270, 278, 372, 403, 405, 406, 410, 411, 413, 415, 416, 510, 511, 523, 526, 551, 552, 596, 597, 609, 652, 661, 673, 684, 700, 724, 730, 731, 743, 744, 760, 792, 798, 807, 808, 952, 994, 996, 997, 1002, 1013, 1015, 1029, 1031, 1036, 1041, 1044, 1045, 1049, 1050, 1053], "rank_": 661, "rank_t": 804, "rank_test_": 274, "rank_test_precis": [268, 274], "rank_test_recal": 268, "rank_test_scor": [270, 278, 804, 818, 1041], "rankdata": 1042, "ranked_exposur": [212, 230], "ranked_frequ": 212, "ranked_pure_premium": 230, "ranking_": [167, 596, 597], "rankylau": 1043, "ransac": [2, 184, 193, 218, 229, 526, 653, 661, 675, 682, 683, 1026], "ransacregressor": [2, 215, 218, 229, 399, 653, 682, 683, 1001, 1006, 1038, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1053], "rao": [412, 1047, 1050], "raphael": 1052, "rapha\u00ebl": 1045, "raphson": [652, 673, 684], "rapid": 1029, "rapidli": [216, 272, 1020, 1029], "rare": [65, 188, 316, 359, 380, 388, 390, 393, 406, 408, 412, 592, 652, 662, 663, 673, 684, 908, 939, 1001, 1015, 1029, 1042, 1043, 1044, 1048, 1050, 1053], "rarer": [351, 353, 416], "raschka": [1040, 1041, 1042, 1043, 1044, 1047], "rashchedrin": 1042, "rasmu": [192, 1042], "rasmussen": [176, 418, 614, 615, 618, 623, 626], "raspberri": 394, "raster": 103, "rastgoo": 1052, "rastogi": 1043, "rastrojo": [408, 709], "rasul": [1040, 1042, 1043], "rat": [51, 303, 371, 500], "rate": [2, 44, 135, 139, 144, 150, 164, 188, 212, 219, 230, 243, 249, 264, 267, 270, 279, 280, 306, 307, 308, 365, 376, 407, 408, 409, 413, 417, 447, 467, 538, 555, 556, 561, 562, 563, 564, 595, 598, 599, 601, 602, 603, 609, 648, 649, 672, 680, 681, 682, 696, 702, 706, 731, 786, 793, 864, 865, 866, 902, 994, 1001, 1002, 1005, 1008, 1009, 1019, 1021, 1029, 1039, 1043, 1044], "rather": [52, 65, 87, 114, 135, 138, 150, 182, 187, 212, 213, 226, 249, 284, 314, 315, 351, 352, 359, 364, 372, 374, 376, 378, 381, 382, 384, 388, 389, 390, 391, 408, 412, 413, 415, 416, 418, 449, 462, 464, 465, 468, 567, 584, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 633, 650, 651, 656, 657, 664, 665, 666, 667, 785, 818, 839, 841, 842, 871, 908, 909, 920, 925, 952, 999, 1001, 1002, 1005, 1007, 1008, 1012, 1025, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1050, 1051, 1053], "ratio": [2, 47, 87, 100, 106, 129, 184, 243, 245, 258, 262, 363, 376, 408, 410, 412, 415, 451, 457, 495, 496, 517, 543, 551, 552, 553, 635, 662, 714, 716, 720, 729, 734, 740, 743, 786, 787, 788, 791, 799, 831, 834, 854, 855, 901, 973, 999, 1011, 1021, 1026, 1050, 1052], "ration": [2, 176, 264, 627, 1003], "rationalquadrat": [2, 176, 180, 418, 620], "raton": 1001, "raul": [1037, 1038], "rausch": [1043, 1044, 1047], "rauwuckl": 1047, "ravel": [2, 45, 54, 56, 58, 64, 78, 87, 88, 92, 112, 130, 136, 138, 143, 147, 153, 154, 155, 162, 171, 173, 175, 176, 177, 178, 187, 194, 203, 204, 206, 212, 225, 226, 233, 237, 239, 243, 245, 249, 253, 257, 259, 264, 273, 277, 279, 284, 290, 295, 296, 302, 303, 305, 306, 307, 308, 312, 313, 323, 327, 334, 340, 345, 346, 348, 349, 351, 357, 466, 495, 496, 497, 635, 722, 991, 1005, 1051], "ravi": [1047, 1050], "raw": [2, 17, 44, 52, 53, 55, 73, 113, 123, 155, 176, 187, 192, 308, 317, 331, 353, 363, 371, 378, 384, 390, 406, 408, 410, 413, 416, 470, 475, 503, 504, 505, 561, 562, 563, 565, 585, 591, 592, 593, 594, 638, 681, 694, 698, 709, 790, 854, 912, 1002, 1005, 1009, 1011, 1012, 1015, 1018, 1036, 1040, 1043, 1046, 1052], "raw_coef_": [908, 909], "raw_covariance_": [410, 470, 475], "raw_data": 353, "raw_docu": [591, 594], "raw_location_": [410, 470, 475], "raw_model": 317, "raw_pixel_classifi": 308, "raw_support_": [470, 475], "raw_target_regr": 409, "raw_valu": [725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 1005, 1043, 1046], "raw_x": [416, 585], "raytheon": 52, "raz": 1049, "ra\u00fal": 1044, "rb": [48, 402], "rbf": [2, 45, 46, 47, 50, 51, 67, 68, 126, 156, 162, 171, 172, 173, 175, 176, 177, 178, 179, 180, 184, 192, 226, 238, 239, 245, 268, 270, 272, 275, 296, 334, 335, 337, 346, 368, 396, 409, 413, 415, 453, 463, 504, 506, 537, 543, 614, 615, 616, 617, 620, 622, 623, 624, 625, 627, 628, 635, 643, 644, 645, 646, 647, 680, 695, 769, 778, 780, 804, 815, 818, 824, 868, 888, 903, 904, 908, 910, 911, 912, 913, 914, 994, 997, 998, 1002, 1005, 1011, 1015, 1018, 1026, 1031, 1041, 1046], "rbf_featur": [645, 997], "rbf_kernel": [2, 404, 769, 1003, 1039], "rbf_svc": [334, 1020], "rbfsampler": [2, 244, 643, 644, 646, 997, 1039, 1049, 1050], "rbm": [2, 308, 864, 865, 866, 1010], "rbm_features_classifi": 308, "rc": [226, 380], "rceil": [405, 1011], "rcond": 130, "rcparam": [48, 239, 244, 317], "rcv1": [2, 369, 499, 1031, 1040], "rcwoolston": 1046, "rd": 416, "rd9e56ef97513": 2, "rda": 373, "rdbu": [68, 71, 121, 228, 305, 340, 345], "rdbu_r": [88, 114, 131, 340], "rdownload": 48, "rdylbu": [143, 356], "re": [2, 44, 48, 54, 64, 65, 90, 104, 135, 144, 174, 186, 187, 230, 246, 256, 260, 273, 275, 279, 320, 353, 364, 376, 377, 378, 384, 389, 391, 399, 406, 412, 416, 470, 471, 472, 473, 474, 475, 476, 477, 493, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 613, 650, 656, 664, 666, 806, 821, 824, 916, 917, 918, 919, 1001, 1006, 1008, 1015, 1020, 1025, 1029, 1035, 1039, 1040, 1042, 1044], "reach": [95, 141, 145, 169, 177, 212, 214, 228, 230, 264, 272, 323, 340, 358, 381, 391, 394, 408, 413, 417, 451, 458, 510, 511, 596, 597, 631, 648, 649, 650, 651, 656, 657, 658, 659, 660, 664, 665, 666, 667, 670, 671, 672, 680, 681, 682, 683, 685, 686, 687, 688, 733, 734, 787, 801, 802, 865, 866, 905, 994, 1005, 1009, 1019, 1021, 1029, 1046, 1050, 1051, 1052], "reachability_": [99, 408, 451, 456, 457, 458], "reachabl": [2, 89, 99, 447, 451, 456, 457, 458, 854, 958], "react": 302, "reactiv": 382, "read": [48, 53, 56, 121, 232, 277, 319, 320, 321, 323, 325, 363, 370, 377, 378, 379, 380, 381, 383, 384, 388, 389, 390, 396, 402, 408, 419, 420, 421, 422, 425, 431, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 614, 615, 617, 618, 619, 620, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 948, 994, 1001, 1005, 1006, 1024, 1029, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1053], "read_byt": 48, "read_csv": [52, 381, 498, 1050], "read_csv_kwarg": [498, 1051], "read_parquet": 53, "readabl": [114, 271, 322, 381, 382, 384, 536, 1044, 1047, 1048, 1049, 1050], "reader": [46, 78, 322, 365, 376], "readi": [44, 47, 176, 213, 264, 371, 376, 380, 384, 465], "readili": [323, 413, 1021, 1029], "readm": [376, 384, 416, 495], "readonli": [908, 909, 1048, 1050, 1051], "readonly_memmap": 1052, "readthedoc": 390, "real": [53, 68, 71, 89, 91, 107, 110, 112, 113, 135, 150, 174, 187, 216, 236, 239, 249, 263, 264, 276, 285, 294, 297, 311, 312, 339, 344, 353, 357, 363, 369, 370, 373, 380, 382, 385, 388, 389, 390, 405, 406, 408, 410, 412, 413, 415, 416, 470, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 512, 553, 554, 557, 558, 559, 560, 561, 562, 566, 567, 595, 597, 598, 599, 600, 601, 602, 603, 635, 703, 708, 728, 732, 756, 759, 761, 789, 799, 833, 865, 866, 910, 911, 912, 913, 914, 917, 919, 995, 996, 997, 1002, 1005, 1007, 1009, 1010, 1011, 1021, 1023, 1026, 1031, 1035, 1048, 1052], "real_cov": [110, 111, 421, 471, 474, 475, 476, 477, 480, 481, 482], "real_data": 294, "realist": [44, 48, 272, 279, 280, 337, 371, 1005], "realiti": 372, "realiz": [212, 1029], "realli": [110, 189, 202, 380, 381, 382, 1005, 1011, 1029, 1049], "reappli": 415, "rearrang": [59, 60, 405], "reason": [44, 48, 52, 65, 78, 87, 147, 150, 169, 187, 188, 192, 212, 213, 220, 230, 239, 243, 244, 246, 249, 264, 267, 270, 271, 276, 283, 287, 290, 311, 315, 344, 352, 353, 359, 363, 364, 365, 371, 375, 376, 377, 378, 380, 384, 388, 389, 390, 391, 407, 408, 409, 410, 413, 415, 416, 510, 534, 576, 577, 642, 650, 656, 658, 676, 691, 696, 767, 804, 818, 852, 857, 864, 883, 905, 924, 926, 927, 945, 946, 947, 994, 995, 1000, 1001, 1002, 1005, 1007, 1008, 1009, 1011, 1015, 1019, 1020, 1021, 1029, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "reassign": [84, 376, 448, 450, 1036, 1040], "reassignment_ratio": 450, "rebalanc": 390, "rebas": [376, 380], "rebecca": 1042, "rebekah": [1043, 1044, 1045], "reboul": 1045, "rebuild": [363, 374, 402, 416, 443], "rebuilt": [69, 374, 848, 849], "rec": [58, 353, 371, 645], "rec_l1": 54, "rec_l2": 54, "rec_macro": 412, "recal": [2, 63, 114, 126, 184, 240, 249, 262, 264, 268, 287, 376, 390, 407, 408, 506, 607, 704, 710, 711, 712, 716, 717, 731, 733, 734, 735, 786, 787, 788, 791, 792, 826, 834, 837, 869, 888, 892, 908, 1001, 1021, 1026, 1038, 1039, 1042, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "recalcul": [250, 252, 408, 1032, 1035], "recall_macro": [412, 1005], "recall_scor": [2, 63, 264, 277, 412, 712, 788, 1005, 1035, 1037, 1038, 1039, 1040, 1045, 1051], "recant": 391, "receiv": [0, 2, 160, 184, 240, 246, 252, 262, 264, 265, 267, 272, 353, 359, 376, 378, 384, 390, 407, 412, 415, 506, 662, 706, 710, 712, 731, 786, 792, 793, 823, 834, 836, 837, 875, 913, 1006, 1009, 1010, 1019, 1026, 1045, 1046], "recent": [53, 374, 381, 384, 388, 390, 408, 469, 540, 567, 1019, 1029, 1038, 1047], "recht": [645, 997], "recip": [380, 402, 1002, 1029], "reciproc": [372, 1005], "reckon": 371, "recogn": [44, 45, 66, 85, 87, 117, 124, 167, 184, 213, 263, 294, 322, 329, 330, 382, 399, 408, 416, 504, 701, 717, 834, 913, 1005, 1026, 1052], "recognit": [43, 49, 55, 121, 184, 248, 308, 315, 369, 381, 413, 496, 504, 534, 536, 543, 701, 712, 717, 745, 773, 792, 793, 801, 818, 834, 888, 913, 997, 1001, 1005, 1006, 1010, 1020, 1022, 1026, 1031, 1035], "recommend": [117, 182, 205, 229, 240, 246, 266, 279, 314, 321, 344, 363, 364, 370, 371, 374, 376, 378, 382, 384, 388, 394, 402, 411, 412, 413, 415, 417, 439, 448, 450, 452, 461, 498, 510, 537, 540, 546, 551, 563, 564, 571, 585, 586, 592, 609, 615, 635, 636, 642, 662, 663, 674, 680, 696, 701, 702, 704, 706, 810, 816, 818, 827, 864, 871, 873, 880, 887, 888, 893, 894, 896, 897, 898, 899, 901, 910, 913, 952, 993, 994, 1002, 1005, 1007, 1009, 1012, 1015, 1017, 1019, 1020, 1021, 1023, 1029, 1031, 1037, 1038, 1044, 1045, 1046, 1047, 1049, 1051], "recompil": [377, 382, 394], "recomput": [89, 90, 250, 252, 292, 319, 470, 475, 1001, 1017, 1040, 1051], "reconstruct": [2, 43, 56, 59, 100, 121, 122, 126, 184, 211, 235, 236, 323, 402, 413, 416, 417, 483, 484, 485, 533, 535, 537, 539, 540, 541, 542, 544, 545, 547, 548, 550, 586, 590, 656, 676, 692, 693, 697, 900, 901, 1001, 1002, 1026, 1049], "reconstruct_from_patches_2d": [2, 124, 416, 586], "reconstruction_err_": [540, 542], "reconstruction_error": 692, "reconstruction_error_": 693, "record": [2, 51, 122, 139, 150, 189, 246, 264, 316, 353, 363, 376, 402, 408, 410, 451, 458, 500, 624, 647, 696, 775, 778, 782, 783, 784, 785, 831, 854, 1048, 1049], "recov": [76, 99, 114, 122, 123, 128, 144, 171, 186, 198, 211, 212, 216, 232, 283, 353, 410, 414, 417, 420, 461, 535, 561, 1001, 1002, 1004, 1025, 1041], "recoveri": [52, 114, 198, 211, 410, 417], "recreat": 250, "rect": [48, 86, 194], "rect_colorbar": 310, "rect_histi": 310, "rect_histx": 310, "rect_scatt": 310, "rectangl": 48, "rectangular": [371, 390, 952, 1025], "rectifi": [865, 866], "recurs": [2, 18, 53, 151, 160, 163, 166, 169, 184, 265, 268, 269, 273, 275, 284, 294, 355, 408, 412, 441, 442, 443, 446, 464, 504, 517, 565, 596, 597, 600, 605, 636, 637, 662, 823, 868, 878, 1005, 1008, 1011, 1012, 1021, 1026, 1027, 1031, 1035, 1045, 1046], "recursionerror": 1053, "red": [49, 50, 51, 64, 70, 71, 94, 112, 119, 121, 122, 123, 138, 155, 158, 180, 192, 194, 195, 203, 210, 237, 250, 265, 276, 303, 306, 311, 315, 331, 340, 357, 374, 390, 408, 413, 1006], "reda": 1041, "redden": 1046, "reddi": [1042, 1043, 1044, 1049, 1052], "redefin": [59, 147, 187], "redesign": [388, 1035], "redirects_en": 56, "redirects_filenam": 56, "redirects_url": 56, "redistribut": 443, "redo": 352, "reduc": [2, 38, 44, 47, 78, 81, 82, 87, 104, 105, 110, 138, 147, 149, 150, 153, 166, 187, 194, 195, 198, 210, 216, 217, 220, 241, 243, 246, 249, 271, 277, 287, 299, 312, 315, 316, 324, 352, 353, 359, 368, 370, 373, 376, 382, 388, 390, 402, 406, 407, 408, 410, 412, 413, 415, 416, 417, 419, 445, 446, 451, 458, 461, 495, 536, 546, 551, 557, 558, 559, 560, 565, 566, 567, 568, 575, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 614, 631, 647, 656, 676, 677, 678, 679, 691, 696, 699, 785, 804, 807, 808, 810, 818, 827, 829, 830, 831, 832, 835, 877, 878, 885, 897, 900, 901, 908, 909, 916, 917, 918, 919, 994, 997, 999, 1000, 1001, 1002, 1005, 1008, 1017, 1018, 1020, 1022, 1035, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1051, 1053], "reduce_dim": [105, 251, 269, 409], "reduce_dim__k": 105, "reduce_dim__n_compon": [105, 269, 409], "reduce_func": [785, 1046], "reduced_data": 92, "reducer_label": 105, "reduct": [2, 11, 46, 58, 88, 91, 102, 106, 117, 121, 129, 138, 153, 184, 231, 233, 234, 237, 243, 247, 291, 298, 300, 323, 337, 359, 363, 368, 408, 409, 411, 413, 415, 417, 469, 483, 484, 485, 486, 504, 532, 534, 536, 537, 540, 541, 542, 543, 546, 549, 551, 555, 556, 559, 560, 561, 562, 566, 567, 568, 602, 610, 692, 693, 694, 695, 696, 697, 785, 804, 834, 850, 857, 864, 868, 869, 878, 888, 906, 908, 916, 917, 918, 919, 997, 1002, 1017, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1036, 1037, 1038, 1041, 1049, 1050, 1051], "redund": [63, 65, 131, 168, 256, 261, 326, 359, 372, 375, 376, 381, 390, 406, 517, 638, 1047], "redundantli": 390, "ref": [376, 384, 995, 1041], "ref_lin": 439, "refactor": [323, 428, 1035, 1037, 1038, 1039, 1045, 1048, 1049, 1050], "refer": [44, 45, 73, 74, 94, 97, 104, 112, 127, 135, 148, 150, 155, 169, 176, 180, 189, 200, 230, 246, 249, 264, 270, 275, 276, 277, 284, 293, 300, 310, 319, 320, 321, 322, 323, 324, 325, 326, 327, 352, 364, 370, 371, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 388, 389, 390, 391, 394, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 458, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 500, 505, 513, 515, 517, 518, 519, 520, 521, 522, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 593, 596, 597, 598, 605, 610, 611, 614, 615, 618, 623, 626, 627, 631, 632, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 651, 653, 655, 657, 659, 660, 662, 665, 667, 669, 670, 671, 672, 675, 677, 679, 680, 682, 683, 686, 687, 692, 693, 694, 695, 696, 697, 698, 699, 700, 705, 708, 709, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 744, 745, 747, 760, 762, 763, 773, 787, 789, 790, 792, 793, 796, 797, 799, 801, 802, 804, 805, 806, 807, 808, 809, 810, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 843, 844, 845, 847, 850, 853, 854, 855, 857, 864, 865, 866, 868, 873, 874, 875, 877, 878, 880, 881, 882, 884, 885, 886, 888, 889, 896, 901, 902, 903, 904, 905, 906, 908, 910, 911, 913, 914, 916, 917, 918, 919, 939, 945, 947, 952, 970, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1028, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "referenc": [373, 376, 378, 384, 390, 900, 901, 1008, 1042, 1048], "references_": 885, "refin": [63, 114, 473, 713, 1005], "refit": [142, 160, 166, 168, 184, 262, 269, 271, 274, 277, 278, 282, 390, 407, 412, 418, 504, 569, 570, 631, 663, 669, 717, 804, 807, 808, 818, 826, 834, 913, 994, 1001, 1005, 1026, 1042, 1043, 1044, 1053], "refit_strategi": 268, "refit_time_": [804, 807, 808, 818, 1043], "reflect": [52, 76, 81, 82, 112, 119, 122, 144, 188, 189, 212, 230, 279, 294, 352, 372, 375, 376, 380, 390, 393, 405, 451, 457, 1002, 1005, 1011, 1013, 1036, 1044, 1053], "reformul": 375, "refrain": [213, 376], "refurbish": 7, "refus": [264, 388, 898, 899], "reg": [148, 187, 195, 246, 311, 320, 345, 415, 560, 562, 570, 654, 655, 657, 658, 659, 660, 661, 667, 668, 669, 674, 675, 682, 683, 693, 697, 919, 1001, 1040], "reg1": [158, 415], "reg2": [158, 415], "reg3": [158, 415], "reg_covar": [255, 801, 802], "reg_nnl": 208, "reg_ol": 208, "reg_param": 552, "regard": [0, 11, 45, 47, 51, 53, 87, 89, 104, 126, 127, 161, 171, 176, 188, 189, 202, 214, 234, 245, 249, 272, 279, 280, 293, 352, 371, 376, 377, 381, 388, 390, 396, 402, 408, 413, 415, 416, 418, 444, 448, 453, 460, 463, 503, 618, 623, 660, 662, 705, 747, 802, 810, 826, 827, 832, 850, 851, 998, 1001, 1005, 1007, 1008, 1010, 1012, 1019, 1020, 1021, 1042, 1045], "regardless": [230, 271, 272, 273, 364, 376, 408, 537, 636, 637, 662, 708, 719, 1005, 1017, 1043, 1050, 1051], "regedit": 394, "regener": 873, "regex": [270, 353, 465, 467], "regexp": [591, 592, 594], "regim": [44, 390, 908, 909, 1004], "region": [52, 56, 60, 63, 72, 82, 83, 87, 90, 100, 124, 156, 178, 184, 187, 212, 230, 239, 243, 244, 261, 302, 313, 340, 347, 373, 383, 390, 408, 415, 418, 449, 451, 457, 463, 590, 1002, 1005, 1008, 1011, 1015, 1019, 1021, 1026], "region_1": 316, "region_2": 316, "regist": [2, 198, 351, 382, 974], "register_parallel_backend": [2, 1043, 1053], "registri": [374, 394, 1024], "regr": [409, 556, 558, 567, 650, 651, 671, 841, 866, 909, 911, 914, 1020], "regr_1": [136, 357], "regr_2": [136, 357], "regr_3": 357, "regr_multirf": 154, "regr_rf": 154, "regress": [2, 14, 20, 23, 25, 32, 41, 47, 50, 54, 63, 65, 67, 88, 102, 104, 112, 113, 115, 122, 123, 124, 134, 135, 138, 140, 141, 142, 145, 146, 149, 150, 151, 154, 155, 161, 167, 170, 172, 180, 182, 183, 184, 186, 187, 188, 189, 190, 193, 196, 197, 198, 199, 201, 203, 207, 208, 213, 215, 216, 217, 218, 223, 228, 235, 238, 240, 248, 249, 253, 264, 266, 278, 281, 283, 284, 285, 287, 289, 291, 293, 307, 308, 310, 311, 315, 321, 322, 323, 324, 326, 335, 347, 351, 354, 355, 358, 364, 365, 368, 369, 371, 373, 376, 378, 381, 384, 385, 388, 389, 390, 403, 406, 410, 411, 412, 413, 415, 417, 431, 438, 465, 466, 475, 485, 490, 491, 494, 498, 503, 504, 506, 507, 514, 518, 519, 520, 526, 530, 533, 537, 539, 541, 543, 544, 545, 547, 548, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 572, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 609, 612, 614, 615, 618, 619, 626, 627, 629, 635, 636, 637, 638, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 698, 705, 710, 725, 727, 728, 732, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 789, 794, 795, 804, 807, 808, 810, 818, 827, 831, 832, 834, 835, 837, 839, 841, 842, 850, 851, 856, 858, 859, 865, 866, 868, 869, 872, 873, 875, 881, 882, 883, 885, 888, 889, 892, 897, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 922, 926, 928, 934, 937, 939, 956, 994, 995, 997, 1000, 1002, 1012, 1013, 1015, 1016, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "regression_data": 47, "regression_model": 1042, "regression_test": 384, "regressioncriterion": 1043, "regressionregressionramdomizedpcaramdom": 396, "regressor": [2, 31, 44, 108, 117, 148, 154, 155, 158, 171, 176, 183, 184, 187, 193, 195, 197, 198, 209, 212, 213, 215, 218, 229, 230, 246, 273, 285, 295, 315, 320, 321, 363, 376, 378, 388, 390, 406, 409, 418, 431, 434, 435, 437, 466, 483, 484, 485, 486, 526, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 567, 568, 569, 570, 571, 572, 608, 609, 612, 615, 636, 637, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 682, 683, 705, 836, 837, 840, 841, 842, 851, 859, 864, 865, 866, 869, 875, 883, 888, 889, 909, 911, 914, 916, 917, 918, 919, 922, 926, 927, 928, 943, 945, 994, 995, 1001, 1005, 1006, 1008, 1013, 1019, 1024, 1026, 1027, 1031, 1035, 1036, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1050, 1052], "regressor_": [187, 466, 596, 597, 600], "regressor__sample_weight": 212, "regressor_tag": 927, "regressor_with_": 186, "regressor_without_": 186, "regressorchain": [2, 399, 839, 841, 1043, 1046, 1050], "regressormixin": [2, 246, 378, 390, 466, 928, 1046], "regressortag": [2, 927], "regul": 0, "regular": [2, 63, 65, 68, 72, 76, 91, 92, 93, 94, 95, 104, 106, 111, 126, 134, 143, 145, 146, 148, 153, 160, 162, 171, 172, 173, 175, 178, 180, 182, 184, 186, 193, 194, 195, 197, 198, 200, 201, 202, 204, 208, 209, 210, 212, 219, 226, 228, 230, 245, 256, 262, 263, 266, 271, 272, 274, 295, 296, 304, 306, 307, 308, 312, 313, 314, 315, 316, 317, 334, 335, 337, 339, 340, 341, 344, 345, 351, 353, 355, 363, 376, 388, 389, 406, 408, 410, 411, 413, 414, 415, 418, 438, 444, 448, 472, 473, 477, 479, 480, 481, 482, 506, 514, 516, 517, 522, 524, 526, 530, 540, 541, 542, 545, 549, 550, 552, 561, 563, 564, 591, 592, 594, 642, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 693, 697, 739, 745, 754, 801, 802, 821, 827, 834, 835, 865, 866, 869, 888, 908, 909, 910, 911, 913, 914, 915, 994, 995, 997, 998, 999, 1000, 1002, 1004, 1010, 1011, 1015, 1018, 1019, 1020, 1026, 1027, 1029, 1031, 1035, 1036, 1037, 1039, 1040, 1044, 1045, 1047, 1048, 1053], "regularis": [216, 421, 474, 476], "regularli": [143, 287, 388, 1007], "regulatori": 150, "rehan": 1050, "rehman": 1043, "reiichiro": [1042, 1043], "reilli": 1052, "reimburs": 264, "reimplement": [382, 388, 390, 1041, 1045], "reinforc": 1025, "reinit": 384, "reiniti": 388, "reinstal": 394, "reintroduc": 1051, "reitsam": 1047, "reject": [247, 264, 390, 391, 525, 675, 731, 934, 935, 1001, 1005, 1043], "rel": [44, 46, 48, 56, 59, 65, 89, 95, 126, 142, 176, 190, 192, 195, 212, 230, 258, 283, 296, 297, 311, 320, 323, 340, 344, 351, 352, 371, 375, 378, 384, 390, 406, 408, 412, 415, 416, 418, 441, 444, 448, 450, 460, 523, 526, 533, 536, 539, 543, 547, 548, 559, 560, 561, 562, 566, 567, 568, 607, 653, 662, 663, 675, 676, 678, 694, 698, 733, 750, 751, 804, 807, 808, 810, 818, 827, 832, 835, 848, 849, 853, 865, 866, 877, 878, 888, 904, 908, 909, 910, 913, 915, 916, 917, 918, 919, 1001, 1002, 1005, 1007, 1008, 1009, 1011], "relabel": [375, 822, 823, 905], "relat": [8, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 371, 372, 375, 376, 378, 380, 381, 383, 384, 385, 388, 390, 391, 393, 399, 402, 407, 408, 409, 410, 411, 412, 413, 415, 418, 451, 465, 470, 498, 551, 552, 564, 565, 643, 677, 681, 696, 705, 727, 747, 825, 831, 855, 866, 867, 869, 872, 873, 878, 881, 883, 884, 887, 896, 912, 994, 997, 999, 1005, 1006, 1008, 1009, 1012, 1015, 1020, 1021, 1022, 1025, 1026, 1028, 1031, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1048, 1051], "relate_point": 300, "relationship": [2, 44, 53, 59, 135, 136, 150, 177, 186, 187, 194, 198, 201, 205, 212, 214, 215, 277, 284, 289, 311, 317, 390, 408, 410, 412, 463, 498, 640, 718, 1002, 1005, 1007, 1008, 1012, 1013, 1040], "relative_tim": 258, "relax": [47, 408, 416, 454, 1018, 1042], "releas": [0, 55, 89, 104, 133, 139, 140, 142, 152, 169, 182, 183, 188, 189, 192, 212, 213, 214, 241, 246, 250, 251, 252, 253, 264, 265, 282, 284, 292, 316, 332, 364, 374, 376, 377, 379, 384, 388, 390, 416, 444, 447, 448, 465, 468, 491, 492, 498, 503, 504, 506, 514, 517, 523, 526, 540, 543, 563, 564, 566, 567, 569, 602, 605, 632, 634, 636, 638, 644, 650, 652, 656, 662, 673, 684, 692, 701, 705, 706, 721, 722, 736, 746, 752, 782, 792, 799, 803, 804, 805, 807, 808, 810, 818, 826, 827, 830, 831, 834, 850, 852, 869, 873, 878, 881, 882, 883, 887, 888, 889, 905, 906, 908, 913, 916, 917, 947, 1021, 1026, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "release_highlight": 1026, "relev": [47, 49, 58, 109, 113, 184, 194, 207, 215, 270, 271, 277, 359, 363, 365, 371, 373, 375, 376, 378, 381, 382, 390, 391, 399, 410, 411, 417, 418, 438, 444, 445, 448, 450, 466, 471, 475, 483, 484, 485, 535, 536, 538, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 730, 744, 760, 803, 805, 806, 807, 808, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 886, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 1005, 1006, 1011, 1022, 1025, 1026, 1038, 1043, 1049], "reli": [126, 141, 144, 169, 190, 200, 202, 287, 290, 320, 324, 351, 363, 364, 378, 381, 384, 385, 388, 390, 404, 405, 408, 413, 415, 416, 551, 596, 600, 610, 611, 782, 832, 835, 873, 957, 970, 994, 997, 999, 1001, 1005, 1008, 1013, 1015, 1020, 1029, 1043, 1044, 1045, 1049, 1051, 1052], "reliabl": [2, 63, 65, 406, 412, 439, 440, 650, 1021, 1029], "relianc": [126, 216], "religion": [58, 271, 351, 352, 353, 371, 1006], "reloc": 1044, "relova": 1048, "relu": [865, 866], "remain": [48, 63, 65, 104, 135, 142, 146, 148, 168, 187, 212, 216, 228, 255, 268, 272, 276, 279, 405, 408, 409, 410, 412, 416, 447, 465, 468, 517, 518, 523, 530, 536, 572, 614, 615, 767, 773, 807, 808, 809, 812, 814, 843, 844, 845, 847, 956, 994, 995, 997, 1004, 1005, 1009, 1015, 1021, 1025, 1037, 1043, 1049, 1052], "remaind": [44, 144, 187, 202, 212, 214, 230, 249, 324, 355, 409, 465, 468, 1035, 1042, 1043, 1044, 1047, 1048, 1051, 1053], "remaining_column": 465, "remark": [89, 117, 169, 264, 365, 376, 1015], "remedi": 229, "rememb": [89, 378, 380, 381, 394, 416, 1008, 1012, 1021], "remi": 1042, "remind": [246, 391], "reminisc": 124, "remot": [192, 330, 376, 379], "remov": [1, 2, 45, 55, 56, 88, 89, 103, 108, 167, 169, 182, 183, 187, 190, 271, 310, 317, 319, 320, 321, 326, 351, 352, 355, 359, 368, 371, 375, 376, 377, 378, 380, 381, 385, 390, 394, 401, 408, 409, 412, 415, 416, 418, 419, 428, 443, 445, 446, 451, 458, 483, 484, 485, 486, 489, 490, 536, 537, 540, 542, 543, 555, 569, 570, 571, 572, 582, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 615, 634, 648, 658, 659, 660, 662, 663, 677, 679, 683, 696, 704, 706, 713, 746, 782, 783, 784, 786, 804, 807, 808, 810, 818, 827, 832, 833, 835, 855, 867, 868, 872, 873, 885, 886, 888, 897, 905, 923, 932, 934, 935, 945, 946, 947, 995, 1002, 1008, 1021, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "remove_zero_eig": [537, 1037, 1044], "rempfler": 1046, "renaissance0n": 1053, "renam": [127, 148, 190, 260, 271, 319, 376, 380, 408, 448, 460, 465, 472, 473, 479, 529, 538, 555, 556, 557, 558, 559, 560, 565, 566, 567, 568, 782, 881, 932, 934, 935, 1035, 1036, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "rename_axi": 270, "render": [87, 208, 216, 376, 378, 380, 381, 382, 390, 553, 592, 635, 704, 706, 885, 897, 920, 922, 1004, 1021, 1048, 1052], "rene": 1048, "renni": [2, 843, 845, 1007, 1043], "renorm": 64, "rent": 44, "rental": [44, 53, 188, 1012], "reorder": [59, 390, 701, 722, 1043], "reordered_data": 59, "reordered_row": 59, "reorgan": 1041, "rep": 373, "reparameter": 1020, "reparametr": 347, "repartit": 44, "repeat": [2, 50, 70, 100, 111, 113, 146, 169, 171, 177, 178, 188, 192, 214, 264, 265, 270, 271, 282, 287, 330, 352, 353, 378, 385, 390, 391, 405, 406, 408, 413, 416, 417, 591, 596, 610, 611, 619, 631, 638, 663, 809, 819, 820, 823, 940, 995, 1004, 1021, 1031, 1043, 1045], "repeatedkfold": [2, 187, 412, 809, 820, 1042], "repeatedli": [135, 323, 359, 390, 408, 415, 418, 510, 548, 670, 671, 680, 681, 682, 785, 995, 1009], "repeatedstratifiedkfold": [2, 270, 284, 287, 412, 819, 823, 1042], "repercuss": 315, "repetit": [270, 284, 287, 381, 412, 819, 820, 1013, 1049], "replac": [2, 44, 63, 112, 125, 135, 150, 171, 176, 178, 182, 188, 199, 213, 253, 273, 290, 312, 317, 321, 342, 374, 376, 380, 382, 385, 390, 402, 409, 412, 415, 416, 442, 446, 465, 505, 517, 557, 558, 565, 585, 591, 592, 593, 594, 610, 611, 631, 634, 638, 643, 645, 732, 789, 810, 816, 818, 827, 867, 868, 871, 891, 904, 905, 911, 924, 926, 973, 975, 978, 994, 995, 997, 1001, 1005, 1015, 1020, 1021, 1024, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "replai": [807, 808], "repli": [55, 375, 376, 379], "replic": [270, 375, 1031], "repo": [376, 380, 1025, 1028], "report": [0, 2, 44, 48, 53, 69, 103, 108, 166, 179, 200, 264, 268, 278, 284, 287, 319, 329, 359, 371, 375, 377, 378, 379, 382, 384, 388, 390, 394, 402, 408, 412, 615, 653, 662, 668, 689, 690, 704, 717, 733, 734, 742, 787, 788, 791, 837, 846, 865, 866, 903, 921, 1001, 1008, 1013, 1024, 1025, 1028, 1036, 1039, 1042, 1043, 1045, 1046, 1048, 1050, 1051], "reporthook": 48, "repositori": [44, 48, 53, 192, 264, 325, 369, 371, 373, 374, 376, 378, 380, 384, 388, 391, 394, 506, 1024, 1028, 1031], "repr": [580, 1046, 1047, 1049], "repreat": 270, "repres": [44, 48, 50, 52, 53, 55, 59, 64, 69, 71, 80, 83, 84, 87, 121, 123, 129, 130, 142, 151, 187, 194, 205, 214, 216, 217, 221, 234, 236, 244, 249, 258, 263, 264, 267, 270, 273, 277, 295, 312, 344, 351, 353, 358, 365, 368, 371, 373, 378, 388, 389, 390, 391, 402, 406, 408, 412, 413, 414, 415, 416, 417, 439, 443, 447, 453, 464, 465, 471, 472, 473, 474, 475, 476, 477, 489, 491, 492, 494, 496, 498, 500, 502, 503, 504, 506, 507, 512, 529, 536, 538, 540, 542, 543, 549, 552, 557, 565, 584, 591, 594, 597, 633, 636, 638, 644, 680, 682, 701, 703, 705, 715, 734, 747, 793, 804, 806, 817, 818, 821, 824, 826, 831, 833, 834, 837, 838, 844, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 866, 875, 881, 882, 905, 908, 909, 934, 935, 956, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1016, 1018, 1019, 1021, 1041, 1043, 1046, 1047, 1050, 1053], "represent": [2, 44, 56, 59, 87, 104, 121, 124, 153, 187, 192, 198, 232, 233, 234, 246, 251, 287, 300, 308, 352, 353, 359, 368, 370, 379, 390, 402, 408, 409, 413, 414, 415, 422, 464, 533, 537, 539, 542, 544, 550, 568, 591, 593, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 647, 650, 656, 662, 663, 664, 666, 670, 671, 672, 680, 681, 682, 773, 801, 802, 810, 827, 864, 877, 881, 882, 886, 888, 901, 908, 920, 922, 925, 931, 948, 970, 997, 1002, 1004, 1006, 1008, 1009, 1010, 1012, 1015, 1020, 1025, 1035, 1036, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "reproduc": [45, 52, 94, 135, 187, 192, 200, 279, 287, 308, 364, 375, 376, 378, 379, 384, 388, 390, 408, 412, 413, 416, 420, 441, 455, 461, 470, 475, 489, 492, 494, 497, 499, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 553, 555, 556, 557, 558, 561, 562, 563, 564, 565, 610, 611, 614, 615, 638, 643, 644, 645, 646, 650, 651, 654, 656, 657, 658, 664, 665, 666, 667, 670, 671, 672, 675, 680, 682, 683, 693, 694, 696, 697, 698, 797, 801, 802, 805, 806, 807, 808, 809, 810, 816, 818, 819, 820, 821, 822, 823, 824, 832, 833, 834, 838, 839, 842, 853, 857, 864, 865, 866, 873, 885, 889, 897, 900, 901, 908, 909, 910, 913, 951, 952, 975, 978, 997, 1024, 1028, 1035, 1043, 1048, 1049], "reproduct": [388, 1001], "request": [2, 48, 56, 81, 212, 230, 246, 322, 364, 370, 374, 375, 379, 390, 391, 399, 402, 413, 416, 417, 438, 444, 445, 448, 450, 466, 483, 484, 485, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 593, 602, 603, 614, 615, 636, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 703, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 961, 963, 1005, 1008, 1028, 1041, 1042, 1043, 1052, 1053], "request_rout": 246, "requir": [31, 32, 44, 47, 54, 63, 81, 87, 89, 91, 92, 101, 103, 125, 127, 140, 141, 144, 145, 148, 150, 151, 155, 169, 188, 198, 202, 212, 232, 234, 240, 243, 246, 249, 253, 264, 271, 279, 281, 284, 290, 292, 310, 315, 321, 322, 351, 352, 353, 370, 373, 374, 376, 377, 378, 382, 384, 388, 390, 391, 394, 395, 399, 402, 404, 408, 409, 410, 412, 413, 415, 416, 417, 419, 425, 431, 438, 439, 440, 445, 447, 451, 453, 458, 463, 465, 468, 470, 483, 484, 485, 498, 510, 523, 526, 537, 543, 551, 552, 553, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 574, 582, 583, 584, 605, 614, 615, 623, 631, 636, 637, 638, 647, 650, 651, 656, 657, 662, 663, 670, 671, 672, 675, 678, 679, 680, 681, 682, 690, 693, 695, 696, 697, 699, 703, 728, 733, 734, 751, 753, 756, 767, 787, 788, 791, 803, 804, 807, 808, 811, 813, 818, 826, 831, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 868, 869, 870, 872, 882, 883, 884, 888, 896, 900, 901, 903, 904, 908, 909, 910, 913, 916, 917, 918, 919, 925, 927, 928, 934, 935, 945, 947, 961, 964, 970, 990, 993, 994, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1019, 1020, 1021, 1025, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "requires_fit": [927, 988], "requires_i": [425, 431, 993, 1046], "requires_positive_x": [1045, 1050], "requires_vector_input": [616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "rerais": 1052, "rerun": [78, 384], "resampl": [2, 86, 147, 187, 230, 294, 385, 388, 390, 557, 558, 978, 1025, 1044, 1048], "resampled_arrai": 975, "rescal": [44, 81, 82, 89, 126, 196, 200, 235, 249, 310, 349, 410, 415, 420, 470, 471, 472, 473, 474, 475, 476, 477, 535, 540, 650, 653, 656, 880, 886, 910, 911, 912, 913, 914, 1005, 1015, 1039, 1040], "rescaled_coin": [81, 82], "rescu": [402, 416], "research": [0, 186, 264, 270, 276, 287, 371, 373, 388, 408, 503, 515, 639, 649, 696, 739, 833, 838, 994, 1002, 1006, 1008, 1020, 1025, 1029], "resembl": [75, 216, 246], "reserv": [264, 376, 563, 564, 1029], "reservoir": 973, "reservoir_sampl": 973, "reset": [253, 359, 378, 384, 536, 680, 681, 682, 848, 849, 877, 878, 888, 993, 1037], "reset_n_cal": [848, 849], "reshama": [0, 361, 366, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1053], "reshap": [2, 44, 45, 46, 54, 62, 69, 81, 82, 84, 85, 87, 88, 92, 105, 112, 116, 121, 124, 130, 138, 143, 153, 162, 167, 171, 173, 174, 175, 176, 177, 178, 180, 194, 204, 225, 226, 228, 229, 233, 235, 237, 239, 244, 248, 259, 268, 294, 296, 303, 305, 307, 308, 311, 312, 313, 317, 319, 322, 323, 325, 326, 334, 339, 340, 345, 348, 349, 388, 405, 413, 415, 416, 446, 466, 587, 635, 736, 834, 883, 887, 1001, 1015, 1021, 1040], "resid": 371, "residenti": 155, "residu": [2, 108, 214, 266, 431, 466, 483, 484, 485, 554, 556, 558, 560, 562, 564, 567, 570, 572, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 675, 676, 677, 678, 682, 683, 689, 690, 705, 748, 789, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1001, 1005, 1047, 1048, 1050], "residual_metr": 1041, "residual_threshold": [229, 675, 1001, 1048], "residual_vs_predict": [44, 53, 108, 266, 324, 705], "residues_": 1040, "resign": 391, "resili": 416, "resist": [112, 113, 376], "resiz": [46, 81, 82, 250, 371, 495, 496], "resolut": [44, 51, 56, 130, 188, 302, 303, 340, 391, 406, 1045], "resolv": [56, 375, 379, 380, 384, 391, 416, 447, 453, 463, 695, 699, 952, 995, 1005, 1042, 1044, 1045, 1048, 1053], "resort": [272, 371, 402, 557, 1045], "resourc": [56, 78, 147, 150, 182, 212, 307, 321, 362, 379, 388, 390, 407, 415, 807, 808, 994, 1006, 1025, 1029, 1031, 1043, 1048, 1049], "resourcewarn": 1038, "resp": [371, 415, 600, 801, 802, 1019, 1043], "respect": [65, 89, 101, 126, 127, 135, 139, 141, 143, 152, 179, 192, 194, 198, 202, 214, 226, 229, 232, 234, 240, 243, 245, 249, 260, 264, 279, 296, 297, 308, 315, 323, 337, 344, 358, 363, 364, 371, 372, 376, 406, 408, 411, 413, 415, 416, 418, 447, 465, 468, 471, 472, 473, 474, 475, 476, 477, 536, 542, 543, 549, 555, 563, 564, 600, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 632, 640, 647, 675, 694, 698, 716, 732, 786, 789, 801, 802, 844, 854, 865, 866, 920, 922, 993, 994, 998, 999, 1001, 1002, 1005, 1008, 1009, 1010, 1011, 1015, 1020, 1024, 1028, 1029, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "respond": [187, 376, 408], "respons": [0, 26, 188, 212, 215, 246, 280, 283, 373, 376, 378, 390, 408, 409, 415, 447, 465, 483, 484, 485, 569, 570, 635, 636, 637, 678, 679, 702, 704, 706, 746, 801, 802, 1006, 1012, 1052], "response_method": [49, 67, 71, 90, 137, 151, 156, 205, 221, 226, 273, 293, 298, 301, 315, 327, 336, 337, 339, 344, 356, 635, 636, 637, 702, 704, 706, 746, 803, 826, 1005, 1052], "rest": [2, 31, 63, 67, 144, 148, 184, 193, 198, 203, 227, 246, 249, 258, 287, 319, 333, 337, 382, 390, 418, 514, 614, 635, 648, 662, 663, 680, 758, 792, 836, 837, 838, 857, 908, 910, 913, 1001, 1005, 1006, 1009, 1012, 1020, 1026, 1029, 1039, 1040, 1049, 1050, 1051, 1053], "restart": [91, 177, 379, 384, 448, 533, 539, 540, 545, 547, 548, 614, 615, 1002, 1048], "restor": [1038, 1043, 1044, 1045, 1046, 1050], "restrict": [2, 65, 100, 101, 106, 161, 182, 184, 203, 205, 229, 304, 378, 382, 406, 408, 415, 416, 466, 495, 504, 534, 584, 614, 657, 658, 659, 660, 662, 686, 687, 717, 786, 792, 793, 834, 856, 858, 859, 860, 862, 864, 865, 866, 868, 894, 1005, 1021, 1026, 1030, 1031, 1035, 1037, 1045, 1047, 1052], "restructuredtext": 376, "result": [0, 2, 28, 38, 44, 45, 46, 49, 53, 54, 58, 62, 63, 64, 67, 69, 71, 73, 76, 78, 79, 80, 81, 87, 88, 89, 94, 96, 100, 104, 106, 108, 113, 117, 121, 124, 126, 131, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 162, 168, 169, 171, 173, 175, 177, 179, 182, 187, 188, 189, 190, 195, 199, 201, 202, 203, 205, 208, 213, 214, 216, 220, 226, 227, 230, 232, 233, 236, 239, 242, 244, 250, 255, 260, 261, 263, 264, 265, 268, 270, 271, 273, 276, 277, 278, 279, 281, 282, 284, 287, 290, 292, 296, 305, 306, 307, 310, 311, 312, 315, 319, 321, 323, 324, 325, 326, 327, 329, 332, 334, 340, 344, 345, 347, 351, 353, 358, 363, 364, 365, 370, 371, 373, 376, 380, 381, 382, 384, 388, 389, 390, 391, 402, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 433, 441, 442, 444, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 460, 463, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 480, 490, 510, 511, 513, 515, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 582, 583, 584, 585, 587, 591, 592, 594, 610, 611, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 634, 635, 636, 638, 640, 644, 647, 656, 657, 662, 668, 669, 670, 671, 679, 680, 681, 682, 690, 693, 694, 695, 696, 697, 698, 699, 712, 714, 715, 716, 721, 729, 730, 732, 733, 734, 735, 736, 740, 741, 742, 758, 760, 761, 768, 775, 778, 782, 783, 784, 785, 787, 788, 789, 791, 797, 798, 801, 802, 804, 806, 807, 808, 809, 814, 818, 819, 820, 823, 824, 829, 835, 836, 837, 839, 840, 841, 842, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 872, 873, 881, 882, 885, 886, 889, 897, 901, 905, 908, 910, 913, 916, 917, 918, 919, 920, 921, 934, 935, 945, 951, 952, 954, 959, 969, 970, 975, 978, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1024, 1025, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "results_df": [220, 270, 316], "results_for_preval": 273, "results_sc": 347, "retail": 1029, "retain": [2, 194, 390, 408, 411, 412, 416, 438, 444, 445, 448, 450, 466, 483, 484, 485, 496, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 699, 700, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 881, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 1018, 1035], "retbin": 1015, "retent": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "retrac": 246, "retract": 376, "retrain": [402, 1025, 1051, 1053], "retri": [189, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 1043, 1049, 1053], "retriev": [2, 117, 187, 216, 277, 352, 358, 380, 390, 413, 416, 417, 469, 498, 593, 596, 597, 630, 657, 667, 688, 703, 730, 734, 736, 737, 760, 785, 843, 847, 880, 906, 1001, 1003, 1005, 1007, 1024, 1025, 1040, 1045, 1047, 1049, 1052], "return": [2, 31, 44, 46, 47, 48, 50, 51, 53, 54, 56, 58, 62, 63, 65, 70, 71, 73, 76, 87, 90, 95, 103, 108, 119, 127, 128, 130, 133, 135, 138, 140, 146, 147, 150, 151, 155, 169, 174, 177, 179, 183, 188, 190, 194, 195, 200, 202, 205, 212, 213, 220, 221, 222, 230, 246, 249, 252, 253, 258, 260, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 277, 285, 290, 295, 300, 303, 308, 310, 312, 315, 319, 327, 336, 340, 351, 353, 355, 358, 363, 369, 370, 371, 376, 377, 378, 382, 383, 385, 388, 390, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 930, 931, 932, 934, 935, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 973, 974, 975, 976, 977, 978, 979, 985, 988, 989, 990, 991, 992, 993, 995, 1005, 1008, 1012, 1013, 1020, 1021, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "return_a": [588, 589, 970, 1038], "return_cent": [514, 1046], "return_cod": 548, "return_cost": [472, 473, 479], "return_count": [332, 352, 860], "return_cov": [390, 569, 570, 615, 868], "return_dist": [464, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 1008, 1039], "return_distribut": [119, 525], "return_estim": [44, 187, 284, 326, 412, 831, 1043], "return_ind": 525, "return_indic": [412, 831, 1051], "return_inner_stat": 1049, "return_intercept": [691, 1044], "return_invers": [149, 378], "return_log": [848, 849], "return_model": [1037, 1039], "return_n_it": [420, 455, 460, 479, 547, 548, 650, 651, 656, 657, 664, 665, 666, 667, 685, 686, 687, 688, 689, 690, 691, 698, 1049], "return_norm": [895, 1042], "return_path": [686, 687, 689, 690], "return_std": [171, 176, 177, 178, 180, 194, 195, 390, 554, 569, 570, 615, 617, 618, 619, 620, 629, 631, 648, 649, 868, 1042, 1043, 1047, 1052], "return_sum_weight": 985, "return_tim": [272, 832, 1045], "return_train_scor": [141, 274, 284, 316, 412, 804, 807, 808, 818, 831, 1041, 1042, 1044], "return_x_i": [45, 47, 55, 92, 103, 104, 105, 106, 121, 141, 144, 158, 160, 161, 165, 182, 183, 189, 190, 192, 200, 201, 202, 204, 209, 219, 227, 228, 240, 248, 249, 252, 253, 266, 269, 272, 277, 278, 287, 289, 292, 299, 306, 307, 308, 315, 319, 321, 323, 324, 325, 326, 332, 343, 353, 355, 369, 381, 382, 389, 402, 408, 409, 412, 415, 417, 420, 428, 447, 489, 490, 491, 492, 494, 496, 497, 498, 499, 502, 503, 504, 506, 507, 512, 534, 535, 536, 537, 560, 563, 564, 569, 570, 595, 598, 599, 601, 602, 603, 604, 605, 614, 623, 624, 626, 627, 642, 643, 662, 663, 672, 677, 678, 679, 692, 693, 694, 695, 697, 699, 705, 715, 792, 807, 808, 810, 836, 841, 852, 857, 860, 917, 918, 919, 995, 1000, 1005, 1006, 1007, 1008, 1015, 1032, 1041, 1043, 1045, 1048], "return_x_mean": 420, "reuben": 1035, "reus": [53, 171, 206, 264, 271, 319, 353, 378, 390, 408, 409, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 638, 650, 652, 653, 656, 662, 664, 666, 670, 671, 672, 673, 680, 681, 682, 684, 865, 866, 1013, 1017, 1029, 1042, 1052], "reuter": [363, 371], "reuters21578": 48, "reuterspars": 48, "rev": [376, 610, 611], "revamp": [378, 1045], "reveal": [44, 53, 187, 189, 351, 382, 405, 1002, 1051], "revers": [108, 169, 217, 270, 536, 543, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 615, 793, 868, 1005, 1035, 1036, 1045, 1047, 1051], "revert": [122, 404, 634, 636, 637, 1042, 1047, 1052], "review": [287, 316, 363, 371, 378, 379, 381, 382, 388, 391, 412, 413, 537, 543, 1005, 1015], "revillet": 1035, "revis": [391, 674], "revisit": [408, 419, 445], "revolv": 1002, "reward": 376, "reweight": [135, 352, 390, 410, 415, 593, 594, 652, 673, 684], "reweight_covari": [470, 475], "rewrit": [382, 388, 1021, 1035], "rewritten": [376, 653, 1037, 1039], "rey": 1050, "reza": 1045, "rezazadeh": 1048, "rf": [140, 141, 154, 157, 158, 189, 319, 359, 415, 569, 571, 572], "rf_123": 359, "rf__n_estim": 415, "rf_appli": 140, "rf_cst": 326, "rf_inst": 359, "rf_leaves_yield": 140, "rf_model": 140, "rf_no_cst": 326, "rf_pipelin": 155, "rfc": [65, 252, 319, 1032], "rfc_disp": [252, 319, 1032], "rfe": [2, 167, 168, 399, 417, 597, 600, 605, 1035, 1039, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "rfecv": [2, 168, 399, 417, 596, 600, 605, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1051, 1052, 1053], "rgb": [371, 416, 495, 496, 586, 587, 590], "rgr_lasso": 54, "rgr_ridg": 54, "rhinehart": 1042, "rho": [223, 413, 681, 1001, 1019, 1036], "rho_k": 414, "ri": [408, 709, 790], "ribeiro": [593, 734, 1048], "ricardo": [1038, 1048, 1049, 1052], "ricardojnf": 1048, "riccadonna": 747, "riccardo": [1046, 1052], "rice": [51, 303, 371, 500, 1048], "rich": [86, 150, 384, 388, 408, 440, 1029, 1046, 1049], "richard": [371, 417, 662, 1036, 1045, 1047, 1049, 1050, 1053], "richardscottoz": 1048, "richer": [86, 130, 408], "richi": 1043, "rick": 1046, "ricker": 130, "ricker_funct": 130, "ricker_matrix": 130, "rickiepark": 1042, "rid": [49, 1019], "riddel": [1038, 1040, 1042], "ridg": [2, 25, 45, 50, 54, 88, 108, 122, 123, 138, 155, 160, 169, 170, 176, 177, 178, 182, 184, 186, 187, 188, 193, 194, 198, 206, 209, 212, 213, 238, 248, 283, 311, 346, 347, 351, 363, 388, 404, 413, 415, 418, 526, 537, 541, 545, 615, 619, 626, 629, 647, 648, 649, 651, 653, 661, 665, 677, 678, 679, 682, 691, 705, 754, 804, 810, 818, 841, 914, 1005, 1006, 1013, 1015, 1019, 1020, 1026, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "ridge_alpha": [541, 545, 1042], "ridge_cv": 108, "ridge_cv_with_trans_target": 108, "ridge_glm": 212, "ridge_regress": [2, 1043, 1044, 1050], "ridgeclassifi": [2, 351, 363, 676, 677, 679, 1001, 1006, 1040, 1044, 1048, 1049, 1050, 1053], "ridgeclassifiercv": [2, 399, 677, 678, 792, 1001, 1005, 1006, 1043, 1045, 1046, 1048, 1049, 1053], "ridgecv": [2, 44, 108, 155, 169, 187, 248, 390, 399, 415, 570, 647, 676, 679, 1001, 1006, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "ridgewai": [146, 415], "riedmann": 1047, "ries": 1049, "rifkin": 1001, "right": [46, 47, 51, 52, 54, 55, 68, 71, 75, 78, 79, 80, 85, 87, 94, 96, 98, 111, 112, 114, 119, 123, 124, 126, 127, 128, 130, 135, 137, 138, 139, 147, 148, 149, 150, 157, 165, 171, 174, 183, 190, 201, 203, 213, 214, 215, 216, 218, 219, 222, 223, 239, 242, 243, 255, 257, 258, 260, 261, 264, 265, 266, 270, 273, 277, 280, 281, 283, 284, 295, 303, 305, 308, 310, 312, 315, 325, 326, 330, 340, 342, 344, 347, 349, 351, 356, 358, 359, 376, 378, 384, 388, 389, 391, 405, 407, 408, 411, 413, 414, 415, 418, 465, 483, 484, 485, 486, 536, 543, 546, 559, 560, 561, 562, 563, 564, 566, 567, 568, 590, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 639, 680, 682, 704, 706, 873, 916, 917, 918, 919, 920, 938, 952, 994, 997, 999, 1001, 1003, 1005, 1007, 1008, 1012, 1017, 1019, 1020, 1021, 1029, 1031, 1037, 1043, 1049, 1051, 1052], "right_impur": [559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919], "rightarrow": [418, 623, 1009], "rijn": [370, 1043], "rileran": 1049, "rio": [1045, 1047, 1048, 1049], "rise": 176, "rishabh": 1049, "rishi": 1047, "rishikesh": 1042, "risk": [16, 49, 89, 150, 212, 216, 230, 311, 347, 359, 375, 376, 390, 402, 407, 412, 415, 569, 570, 893, 894, 896, 897, 898, 899, 1001, 1005, 1029, 1042], "riski": 230, "riskiest": [212, 230], "ritchi": 1046, "rithvik": 1047, "ritter": [1049, 1050], "rival": [44, 905, 1018], "rk": 99, "rkf": [412, 819], "rl2007": 1001, "rlm": 1045, "rm": [112, 174, 380, 384, 410], "rmse": [44, 53, 113, 150, 316, 1005, 1046], "rmse_": 316, "rmse_test_mean": 316, "rmse_test_scor": 316, "rmse_test_std": 316, "rmse_train_mean": 316, "rmse_train_scor": 316, "rmse_train_std": 316, "rmsle": 1005, "rmtree": [88, 105, 409], "rna": 388, "rnd": 311, "rng": [45, 59, 60, 68, 71, 73, 80, 84, 96, 113, 117, 121, 123, 128, 136, 147, 150, 151, 152, 154, 171, 172, 175, 177, 178, 180, 182, 183, 186, 189, 194, 195, 196, 197, 198, 202, 207, 213, 214, 219, 226, 239, 245, 246, 248, 255, 265, 273, 276, 281, 282, 302, 305, 314, 317, 320, 321, 323, 325, 326, 329, 330, 334, 343, 357, 359, 364, 378, 381, 399, 421, 471, 475, 476, 477, 479, 480, 481, 482, 647, 653, 674, 676, 682, 691, 816, 843, 844, 845, 847, 848, 849, 853, 856, 858, 859, 860, 885, 897, 900, 901, 903, 904, 905, 914], "ro": 64, "road": 388, "rob": [1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1047, 1050], "robert": [0, 200, 287, 373, 398, 413, 530, 537, 632, 660, 725, 727, 728, 739, 874, 995, 1001, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1050, 1053], "roberto": [408, 443, 1053], "robertson": 1048, "robin": [182, 183, 631, 995, 1041, 1044, 1049, 1050], "robinson": 1048, "robl": 1042, "robson": 1045, "robust": [2, 49, 71, 95, 97, 109, 111, 145, 147, 183, 184, 187, 188, 193, 203, 214, 216, 229, 239, 249, 285, 310, 325, 365, 373, 384, 408, 415, 416, 447, 449, 470, 471, 474, 475, 476, 477, 526, 536, 561, 562, 653, 661, 674, 675, 682, 683, 754, 838, 869, 883, 885, 886, 897, 903, 950, 1005, 1009, 1011, 1015, 1018, 1019, 1024, 1026, 1027, 1029, 1030, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1051], "robust_contour": 112, "robust_cov": 112, "robust_mah": 112, "robust_scal": [2, 886, 897, 1043], "robustli": [8, 215], "robustscal": [2, 249, 885, 898, 995, 1015, 1040, 1041, 1043, 1045, 1046, 1047, 1051], "roc": [2, 51, 63, 140, 169, 184, 238, 240, 249, 250, 262, 264, 265, 272, 326, 327, 383, 406, 407, 412, 506, 512, 566, 662, 706, 710, 711, 712, 731, 786, 792, 793, 823, 834, 837, 875, 913, 1011, 1026, 1032, 1037, 1038, 1040, 1041, 1045, 1047, 1051], "roc_auc": [51, 169, 270, 274, 279, 280, 383, 638, 706, 737, 1005, 1032], "roc_auc_ovo": [1005, 1045], "roc_auc_ovo_weight": [1005, 1045], "roc_auc_ovr": [1005, 1045], "roc_auc_ovr_weight": [1005, 1045], "roc_auc_scor": [2, 63, 169, 270, 279, 319, 326, 706, 710, 711, 712, 793, 1005, 1037, 1038, 1043, 1045, 1049, 1050], "roc_curv": [2, 51, 240, 267, 279, 706, 710, 731, 786, 792, 1005, 1035, 1036, 1037, 1040, 1041, 1043, 1048, 1051, 1053], "roc_displai": 240, "rocchio": [351, 855], "rocco": [1048, 1049, 1050], "roccurvedisplai": [2, 140, 249, 252, 264, 267, 279, 280, 319, 383, 792, 793, 1011, 1032, 1045, 1051, 1052, 1053], "rock": 113, "rocklin": [375, 381], "roddi": [1044, 1045], "rodent": [51, 303, 371, 500], "roderick": 995, "rodion": 1048, "rodrigo": [1043, 1053], "rodrigu": [1042, 1043, 1048], "roeder": 1045, "roehr": [1051, 1052], "roei": 1047, "roeschk": 1044, "roger": [727, 1042, 1043, 1047], "rogerstanimoto": [451, 458, 703, 782, 783, 784, 1008], "rogerstanimotodist": 703, "rohan": [1040, 1041, 1043, 1044, 1048], "rohit": [1038, 1039, 1043, 1044], "roi": [1035, 1049], "roi_siz": 88, "roic": 1050, "rok": 1045, "rokem": [1035, 1041], "rokhlin": [537, 543, 952], "roland": [1037, 1038], "rolando": [1036, 1037], "role": [0, 279, 363, 375, 413], "roll": [2, 101, 184, 231, 232, 237, 379, 408, 532, 696, 697, 945, 1026, 1029, 1045, 1050], "rolling_max": 53, "rolling_mean": 53, "rolling_min": 53, "romain": [1042, 1047], "roman": [0, 398, 631, 922, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "roman4oo": 1050, "romaniuk": 1039, "romero": 1053, "romijnd": 1047, "romuald": 1044, "ron": [0, 398, 1035], "ronald": [371, 1009, 1038, 1048], "ronan": [1035, 1038, 1043], "ronchetti": [653, 1001], "rong": 1020, "ronrubin": [668, 689, 690, 1001], "ronsin": [1043, 1044, 1052], "room": [310, 371, 381, 408, 1028], "roopam": [1043, 1044], "root": [2, 44, 112, 150, 196, 358, 373, 376, 384, 408, 443, 503, 543, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 643, 794, 795, 916, 917, 918, 919, 920, 922, 1005, 1011, 1021, 1037, 1043, 1044, 1045, 1046, 1049, 1050], "root_": 443, "root_mean_squared_error": [2, 53, 150, 404, 1005, 1052], "root_mean_squared_log_error": [2, 404, 1005, 1052], "rope": 270, "rope_interv": 270, "rope_prob": 270, "rori": 1046, "rosa": 1050, "rosal": 412, "rosati": 1053, "rose": 371, "rosenberg": [408, 721, 741, 799], "rosenfeld": 1043, "ross": [536, 610, 611, 1021, 1049, 1050], "rosset": [135, 415, 521, 555], "rossi": 1038, "rosslimlinyang_ijcv": 536, "rostamizadeh": 994, "rostomyan": 1043, "rotat": [48, 76, 116, 120, 123, 126, 128, 146, 157, 184, 190, 235, 281, 282, 289, 340, 346, 411, 413, 418, 420, 506, 534, 543, 552, 618, 701, 888, 920, 1001, 1026, 1046, 1047], "rotation_mod": 281, "rotations_": 552, "roth": [1040, 1043, 1050], "rough": [26, 396, 1011], "roughli": [135, 147, 202, 261, 280, 290, 315, 363, 390, 413, 416, 521, 1002, 1035], "rouli": 1038, "round": [47, 49, 63, 116, 141, 150, 182, 183, 219, 230, 270, 276, 312, 314, 390, 451, 457, 458, 566, 567, 596, 597, 600, 631, 696, 717, 806, 816, 873, 905, 920, 922, 995, 1009, 1021, 1037, 1039, 1041, 1043, 1044, 1046, 1048, 1049, 1051, 1052], "rounded_list": 816, "rouseeuw1984": 475, "rousseeuw": [112, 113, 408, 410, 470, 475, 796, 797, 1011], "rousseuw": [112, 113], "rout": [2, 62, 133, 184, 196, 238, 264, 327, 378, 422, 425, 428, 431, 432, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 961, 962, 963, 964, 988, 1026, 1031, 1049, 1051], "route_param": [246, 961], "routed_param": [246, 964], "routemappingpair": 961, "router": [2, 246, 390, 399, 961, 962, 963, 964], "routerconsumerclassifi": 246, "routin": [326, 365, 370, 373, 376, 377, 378, 379, 384, 388, 390, 417, 676, 678, 691, 851, 910, 911, 912, 913, 914, 1002, 1008, 1015, 1016, 1019, 1029, 1035, 1049, 1050, 1051], "routing_info": 961, "routlei": 1041, "rouvinen": 1040, "roux": [662, 1001, 1018], "row": [2, 44, 58, 59, 60, 63, 65, 71, 80, 94, 108, 119, 141, 143, 153, 156, 182, 213, 214, 240, 243, 249, 250, 264, 312, 358, 363, 371, 378, 385, 389, 390, 405, 408, 411, 416, 423, 443, 444, 448, 450, 451, 452, 454, 457, 458, 460, 465, 469, 489, 491, 492, 494, 495, 496, 497, 502, 503, 504, 506, 507, 512, 513, 515, 528, 536, 544, 550, 553, 593, 594, 624, 632, 636, 647, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 696, 700, 701, 714, 722, 723, 729, 762, 763, 767, 770, 772, 773, 774, 775, 777, 778, 780, 782, 783, 784, 785, 801, 802, 837, 843, 844, 845, 846, 847, 853, 856, 857, 858, 859, 860, 863, 874, 878, 880, 881, 883, 893, 894, 895, 898, 899, 902, 906, 925, 930, 934, 935, 952, 975, 978, 982, 984, 986, 987, 990, 991, 994, 995, 997, 999, 1001, 1003, 1005, 1006, 1008, 1015, 1016, 1019, 1020, 1025, 1042, 1043, 1044, 1045, 1050], "row_compl": 58, "row_id_attribut": 370, "row_idx": [60, 212], "row_idx_shuffl": 59, "row_ind": [423, 452, 454], "row_indic": 150, "row_labels_": [58, 59, 60, 405, 452, 454], "row_norm": 258, "rowan": 1050, "rowei": [693, 697, 857, 1002, 1008], "rows_": [58, 405, 423, 452, 454], "royal": [543, 631, 884, 896, 1019], "rp": 243, "rpath": 374, "rr2007": 997, "rragundez": 1043, "rsalakhu": 648, "rsh": [282, 321], "rskf": 820, "rsme": 1005, "rsnegrin": 1049, "rsplit": [46, 56, 271], "rst": [364, 376, 384, 1035], "rstride": 188, "rt": 140, "rt_model": 140, "rtn": 52, "rtol": [378, 848, 849, 853], "ruben": 1050, "rubi": 1047, "rubia": 1038, "rubial": 1048, "rubin": 995, "rubinstein": [668, 689, 690], "rubric": 1002, "ruchitagard": 1045, "rudi": 1041, "rudresh": 1050, "ruff": [376, 394, 401], "ruifeng": [1041, 1042, 1047], "ruin": 376, "ruiter": 1050, "rule": [2, 13, 28, 44, 65, 141, 192, 205, 264, 356, 358, 359, 363, 373, 376, 377, 378, 388, 390, 391, 403, 406, 407, 408, 412, 413, 415, 417, 538, 551, 552, 553, 554, 555, 563, 564, 571, 572, 597, 605, 638, 649, 662, 663, 670, 671, 672, 677, 679, 680, 681, 682, 710, 711, 715, 804, 807, 808, 810, 818, 826, 827, 830, 831, 832, 833, 835, 857, 908, 921, 994, 999, 1007, 1008, 1019, 1021, 1031, 1037, 1040, 1047, 1052], "ruleset": 1021, "rumelhart": 1009, "rumsfeld": 371, "run": [44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 374, 376, 377, 378, 380, 381, 382, 383, 384, 388, 390, 391, 394, 395, 402, 404, 408, 410, 412, 415, 418, 419, 420, 438, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 463, 465, 468, 469, 472, 473, 533, 534, 535, 536, 537, 539, 541, 543, 544, 545, 547, 548, 550, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 585, 595, 597, 598, 599, 601, 602, 603, 605, 614, 615, 634, 638, 644, 650, 651, 653, 655, 656, 657, 659, 660, 664, 665, 666, 667, 686, 687, 692, 693, 694, 695, 696, 697, 698, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 840, 841, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 866, 867, 870, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 925, 945, 947, 975, 978, 994, 1004, 1006, 1009, 1018, 1020, 1021, 1024, 1025, 1029, 1035, 1038, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1051], "run_histori": 48, "run_id": 95, "run_tim": [227, 228], "rung": 1015, "runnabl": [55, 380, 381], "runtim": [31, 48, 50, 92, 135, 199, 227, 229, 244, 308, 312, 364, 378, 379, 388, 390, 402, 408, 415, 451, 565, 683, 818, 908, 909, 910, 911, 912, 913, 914, 1019, 1020, 1038, 1042, 1043, 1049, 1050, 1052, 1053], "runtime_histori": 48, "runxfail": 384, "rupesh": 1038, "rush": [44, 53, 376], "rushabh": 1046, "rushil": [1050, 1051], "russ": [632, 995], "russel": [1041, 1042], "russellrao": [451, 458, 703, 782, 783, 784, 1008], "russellraodist": 703, "russian": 416, "ruth": 1045, "rutter": 1048, "ruusmann": 1041, "rv": [0, 808, 816, 818, 994, 1035, 1036, 1039, 1040, 1041, 1042, 1043], "rvd": [470, 475], "rvdriessen": [470, 475], "rw2006": [418, 614, 615], "rwelsch427": 1053, "ryad": 1041, "ryan": [1038, 1041, 1043, 1044], "ryb": 356, "ryder": 52, "ryotaro": 1047, "r\u00e9my": 1041, "r\u00fcdiger": [1043, 1044, 1046], "s1": [122, 169, 179, 373], "s2": [122, 179, 373, 552], "s22": 500, "s3": [122, 373], "s4": 373, "s5": [373, 1013], "s6": 373, "s_": [122, 274, 1001, 1002, 1013, 1015], "s__p": 868, "s_color": 232, "s_hessian": 232, "s_i": [408, 1001, 1015], "s_ica_": 123, "s_isomap": 232, "s_j": 408, "s_ltsa": 232, "s_mod": 232, "s_pca_": 123, "s_point": 232, "s_scale": 232, "s_spectral": 232, "s_standard": 232, "s_t_sne": 232, "sa": [371, 494], "saaba": 1040, "saad": 1053, "sabharw": 1045, "sabri": 1050, "sach": 52, "sachdev": 1050, "sachdeva": 1042, "sachin": [1042, 1043, 1049], "sackei": 1045, "saclai": 0, "sacr": 1024, "sad": [822, 823], "sadak": 1047, "sadhana": 1043, "sadli": 147, "sadra": 1051, "sad\u0142ocha": 1048, "saeed": 1005, "saeger": [1040, 1041, 1042], "safari": 1015, "safe": [2, 73, 187, 202, 264, 352, 376, 378, 408, 409, 433, 466, 510, 511, 569, 570, 596, 600, 778, 782, 832, 833, 835, 867, 902, 970, 976, 1008, 1041, 1042, 1043, 1048, 1049], "safe_copi": 1042, "safe_index": [385, 1045], "safe_mask": [2, 385], "safe_realloc": 1038, "safe_sparse_dot": [2, 385, 1045], "safe_sqr": [2, 385], "safeguard": 402, "safer": [352, 359, 374, 408, 412, 1035], "safest": [212, 230, 359, 370], "safeti": [388, 409, 970, 1025, 1045], "safikh": 1050, "safiuddin": 1050, "sag": [219, 662, 663, 676, 678, 691, 1001, 1019, 1040, 1041, 1042, 1044, 1045], "sag_solv": 1044, "saga": [67, 204, 227, 228, 662, 663, 676, 678, 691, 818, 1001, 1042, 1044], "sagar": 1045, "sagnik": 1043, "saha": 1049, "sahil": 1051, "sahin": 1045, "sahu": 1047, "sai": [199, 239, 347, 376, 406, 408, 409, 413, 415, 416, 447, 448, 502, 506, 512, 681, 994, 1011, 1018, 1029, 1052, 1053], "said": [150, 187, 239, 271, 371, 376, 796, 1003, 1011], "saihttam": 1041, "sailesh": [1042, 1043], "saint": 1041, "saito": [413, 540, 542, 549, 1042], "saiw": 1041, "sake": [44, 65, 147, 150, 183, 187, 212, 315, 344, 351, 353, 384, 388, 674], "saket": [1039, 1040, 1047], "sakinaouisrani": 1049, "salahuddin": 1050, "salakhutdinov": [648, 857, 1008], "salamin": 1039, "sale": [144, 249, 270, 1005, 1029], "saleem": 1045, "salerno": 373, "salim": [1052, 1053], "sallisaw": [409, 467], "salman": [0, 397, 1050, 1051, 1052, 1053], "salt": [68, 244, 312, 1049], "salvator": [1035, 1049, 1050, 1052, 1053], "salz": 1042, "salzmann": [212, 230], "sam": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "sambhav": 1046, "same": [2, 26, 44, 47, 48, 53, 59, 64, 71, 73, 76, 80, 87, 89, 91, 92, 98, 104, 105, 119, 121, 123, 126, 128, 130, 136, 138, 142, 144, 147, 148, 150, 153, 169, 171, 187, 188, 190, 199, 200, 202, 207, 212, 213, 214, 220, 230, 246, 250, 260, 264, 265, 266, 267, 268, 270, 271, 273, 275, 276, 278, 283, 284, 290, 293, 295, 307, 310, 311, 313, 315, 316, 319, 321, 332, 340, 351, 352, 353, 358, 359, 363, 364, 365, 370, 371, 373, 375, 376, 378, 380, 382, 384, 385, 388, 389, 390, 391, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 433, 439, 440, 447, 451, 457, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 495, 497, 498, 500, 506, 510, 511, 533, 534, 537, 538, 539, 540, 541, 542, 545, 549, 551, 553, 554, 555, 556, 559, 561, 562, 563, 564, 566, 567, 569, 570, 592, 593, 605, 606, 609, 614, 615, 617, 626, 631, 632, 633, 636, 637, 650, 653, 656, 657, 659, 662, 663, 667, 670, 671, 672, 676, 677, 678, 679, 680, 681, 682, 688, 691, 703, 708, 709, 716, 717, 719, 721, 730, 735, 736, 740, 759, 760, 761, 782, 783, 784, 790, 792, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 812, 813, 818, 822, 823, 826, 827, 829, 830, 831, 832, 833, 834, 835, 850, 851, 852, 856, 858, 859, 860, 871, 872, 873, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 890, 897, 908, 909, 916, 918, 929, 936, 940, 952, 970, 975, 978, 979, 989, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1025, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "same_kind": 1052, "samesh": [1045, 1046], "samm": [135, 415, 555, 1051, 1052], "samoocha": 1043, "sampl": [2, 28, 31, 38, 44, 45, 48, 51, 54, 62, 63, 64, 65, 69, 70, 71, 73, 75, 77, 78, 79, 81, 83, 87, 90, 91, 92, 93, 94, 99, 112, 113, 114, 117, 119, 121, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 150, 151, 156, 157, 158, 166, 168, 169, 171, 175, 176, 177, 178, 180, 182, 184, 187, 188, 192, 193, 198, 199, 200, 202, 205, 212, 214, 216, 219, 220, 222, 223, 224, 226, 228, 229, 230, 232, 239, 243, 244, 246, 247, 249, 255, 256, 258, 259, 260, 261, 262, 264, 265, 269, 270, 272, 273, 274, 276, 278, 282, 284, 285, 289, 290, 294, 295, 296, 297, 299, 300, 301, 303, 307, 310, 312, 313, 314, 315, 317, 319, 321, 322, 324, 326, 327, 329, 331, 332, 333, 334, 335, 336, 338, 340, 342, 344, 345, 347, 348, 351, 352, 356, 358, 363, 369, 371, 372, 375, 376, 378, 379, 388, 389, 399, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 425, 426, 427, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 457, 458, 459, 462, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 614, 615, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 691, 692, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 740, 741, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 767, 768, 772, 773, 774, 775, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 871, 872, 873, 874, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 930, 934, 935, 939, 940, 952, 956, 973, 975, 978, 979, 982, 985, 993, 994, 995, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sample_i": [180, 418, 615, 1049], "sample_id": [358, 371, 499], "sample_interv": 642, "sample_interval_": 1051, "sample_posterior": [183, 631, 995], "sample_s": [92, 244, 352, 797], "sample_score_mean": 274, "sample_score_std": 274, "sample_silhouette_valu": 94, "sample_step": 642, "sample_weight": [62, 196, 212, 225, 230, 246, 320, 325, 326, 349, 376, 378, 390, 399, 408, 415, 419, 425, 431, 438, 444, 445, 448, 450, 460, 461, 466, 470, 483, 484, 485, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 614, 615, 636, 637, 638, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 701, 702, 704, 706, 707, 711, 712, 713, 716, 717, 720, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 739, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 800, 803, 804, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 873, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 964, 992, 1005, 1019, 1020, 1021, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "sample_weight1": 246, "sample_weight2": 246, "sample_weight_const": 349, "sample_weight_last_ten": 349, "sample_weight_vect": 940, "sample_without_replac": [2, 385, 1041], "samples_weight": 225, "samplewis": [758, 1005], "samson": 1042, "samuel": [700, 1029, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "samuela": 1038, "samu\u00ebl": 1042, "san": [373, 416, 1017], "sanchez": [1043, 1044], "sandbox": 402, "sandeep": 1047, "sander": [408, 419, 445, 447, 451, 458, 854, 1011, 1044, 1045], "sandi": 1048, "sandip": [1052, 1053], "sandra": [1044, 1050], "sandro": [1043, 1050], "sandrocasagrand": [1043, 1044], "sandrovskii": 1042, "sane": 378, "sangam": 1050, "sangamswadik": 1050, "sangeeth": 1044, "saniti": [379, 872, 1005, 1035, 1036], "sanjabi": 1045, "sanjai": 1049, "sanjai_3": [1050, 1051], "sanjoi": [902, 1017], "sano": 1049, "sanofi": 52, "santa": [179, 1050], "santana": [1046, 1049], "santhanam": 1043, "santhosh": 1046, "santhoshbala18": 1046, "santi": [1040, 1042, 1043], "santiago": 1046, "sap": 52, "sapiro": [413, 533, 539], "saqib": 1043, "sara": 1048, "sarah": [1042, 1044, 1047], "sarahremu": [1050, 1053], "sarajpoor": 1050, "sarat": 1046, "sarawagi": 787, "sarra": 1045, "sartaj": 1041, "sasank": 1041, "sashka": [1050, 1051], "sass": [376, 394, 401], "sassenhagen": [1047, 1052], "sat": [44, 150, 188, 416], "satellit": 1008, "satisfi": [408, 654, 658, 703, 721, 740, 741, 848, 849], "satish": 1043, "sato": 1038, "satrajit": [0, 398, 1035, 1036], "satur": [73, 187, 310], "sauerbrei": 1015, "sauerkraut": 416, "saul": [693, 697, 1002, 1042, 1043, 1045], "saurabh": [1039, 1040, 1041, 1042, 1043, 1047], "saval": 1044, "savard": 1035, "save": [87, 103, 105, 249, 308, 375, 376, 380, 382, 383, 384, 390, 402, 412, 420, 469, 493, 536, 537, 631, 848, 849, 906, 1001, 1005, 1015, 1021, 1029, 1035, 1038, 1042, 1045, 1053], "savkomax": 1050, "saw": [122, 213, 216], "sawtooth": 122, "say_hello": 965, "sc": [370, 408], "scaja": 1052, "scala": 1025, "scalabl": [78, 80, 96, 184, 191, 244, 262, 324, 352, 376, 408, 415, 416, 449, 492, 504, 592, 644, 810, 821, 832, 834, 846, 869, 878, 880, 908, 910, 913, 914, 997, 1000, 1002, 1005, 1018, 1020, 1026, 1029, 1035, 1038, 1039, 1045, 1046, 1049, 1050], "scalar": [2, 121, 322, 327, 382, 390, 404, 409, 418, 420, 465, 468, 526, 535, 619, 620, 621, 626, 627, 631, 632, 634, 742, 746, 930, 938, 997, 1009, 1011, 1015, 1019, 1024, 1045, 1046, 1049, 1051], "scalarmapp": 67, "scale": [2, 37, 44, 45, 52, 63, 65, 73, 76, 79, 81, 82, 90, 92, 95, 104, 105, 111, 114, 117, 123, 126, 145, 152, 169, 171, 172, 173, 176, 177, 178, 184, 188, 192, 195, 196, 200, 204, 212, 214, 216, 226, 227, 228, 230, 231, 234, 239, 245, 249, 260, 267, 270, 271, 272, 273, 277, 293, 295, 306, 307, 308, 309, 310, 314, 320, 323, 325, 326, 334, 335, 337, 340, 344, 359, 362, 363, 368, 369, 370, 373, 376, 381, 385, 388, 389, 390, 408, 409, 413, 415, 416, 417, 418, 447, 448, 451, 452, 458, 465, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 503, 512, 516, 517, 526, 536, 540, 542, 543, 549, 551, 552, 563, 564, 585, 593, 594, 600, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 635, 636, 645, 648, 649, 650, 651, 653, 656, 662, 663, 664, 665, 666, 676, 678, 680, 681, 682, 685, 691, 692, 693, 694, 696, 698, 703, 707, 720, 745, 751, 761, 763, 773, 779, 781, 818, 821, 834, 835, 836, 848, 849, 850, 865, 866, 869, 872, 877, 878, 880, 883, 885, 886, 888, 893, 894, 895, 897, 898, 900, 901, 908, 909, 910, 911, 912, 913, 914, 979, 980, 981, 982, 985, 994, 997, 998, 1001, 1005, 1006, 1007, 1008, 1009, 1013, 1019, 1020, 1025, 1026, 1029, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scale_": [653, 877, 878, 886, 888, 898, 1015, 1040], "scaled_clf": 315, "scaled_pca": 315, "scaled_x_train": 315, "scaler": [46, 104, 106, 167, 184, 228, 229, 244, 249, 251, 253, 284, 293, 298, 309, 314, 315, 324, 340, 343, 359, 381, 409, 412, 491, 662, 663, 676, 678, 691, 868, 877, 878, 880, 884, 885, 886, 888, 893, 894, 895, 896, 897, 898, 899, 1009, 1015, 1019, 1026, 1035, 1040, 1043, 1048], "scaler2": 253, "scalewai": 384, "scaling_": 552, "scalings_": [551, 552], "scanpi": 1052, "scatter": [44, 49, 51, 52, 62, 67, 68, 71, 74, 75, 78, 79, 80, 83, 86, 90, 91, 92, 93, 94, 96, 101, 112, 117, 119, 123, 125, 126, 127, 129, 136, 137, 141, 143, 151, 153, 154, 156, 162, 164, 171, 172, 173, 175, 177, 178, 179, 180, 186, 187, 192, 195, 203, 205, 209, 210, 213, 214, 215, 221, 224, 225, 226, 229, 232, 233, 234, 235, 236, 237, 239, 244, 245, 247, 255, 256, 257, 258, 259, 260, 261, 265, 271, 273, 285, 290, 293, 296, 297, 298, 299, 300, 301, 302, 305, 310, 312, 313, 315, 323, 331, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 351, 356, 357, 372, 410, 635, 705, 999, 1001], "scatter_": 705, "scatter_fig": 141, "scatter_handl": 205, "scatter_kwarg": [44, 53, 108, 155, 187, 705], "scatter_label": 205, "scatter_trac": 141, "scatterplot": [116, 194, 270], "scatterpoint": [125, 129, 235, 257, 331], "scenario": [91, 103, 150, 171, 192, 216, 273, 359, 383, 394, 407, 412, 415, 539, 545, 547, 548, 999, 1005, 1015, 1045], "scene": [373, 384, 1008, 1010, 1048], "schapir": [51, 287, 303, 371, 415, 500, 555, 556], "schedul": [150, 306, 364, 380, 680, 681, 682, 865, 866, 1019, 1029, 1042], "scheidegg": 1035, "scheme": [279, 295, 316, 317, 371, 380, 390, 408, 412, 414, 416, 568, 593, 662, 663, 709, 817, 851, 875, 876, 879, 881, 885, 889, 892, 897, 908, 913, 994, 1001, 1015, 1019, 1035, 1043, 1046, 1047, 1052, 1053], "scherer": 1041, "scheubrein": 1047, "schloss": 1005, "schl\u00fcter": [1035, 1043], "schmerler": 1050, "schmid": [762, 763, 1003], "schmidt": [662, 1001, 1038], "schmitt": [1045, 1046], "schmitz": 1052, "schneider": [1048, 1053], "schoelkopf": 904, "schoentgen": [1043, 1044], "schofield": 1035, "schole": 1047, "scholkopf1997": 413, "scholkopf1998": 1015, "scholz": 1053, "school": [176, 187, 373, 408, 792, 1005], "schreiber": [0, 398, 1040, 1041, 1042], "schroeder": 371, "schubert": [408, 419, 445, 451, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1053], "schucker": 1041, "schuder": [1043, 1044, 1045], "schuetz": [843, 847], "schuldt": 1039, "schult": 56, "schulz": 1035, "schumach": [1038, 1039, 1040], "schut": 1035, "schwardt": 1035, "schwartz": [1035, 1037, 1049], "schwetlick": [1046, 1047], "sch\u00f6lkopf": [45, 413, 537, 874, 1011, 1015, 1020], "sch\u00f6nberger": [1037, 1038], "sch\u00fctze": [413, 593, 1003, 1005, 1007], "sci": [58, 103, 351, 352, 353, 371, 388, 489, 693, 697, 879, 1002, 1015], "scibol": 1046, "scienc": [0, 74, 112, 179, 187, 287, 370, 373, 388, 408, 441, 455, 540, 542, 549, 692, 693, 697, 855, 995, 997, 1001, 1002, 1005, 1008, 1017, 1025, 1029, 1043], "scientif": [0, 69, 244, 370, 374, 388, 394, 408, 453, 463, 503, 1029, 1031], "scientist": [995, 1029], "scikera": 1024, "scikit": [2, 15, 31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 364, 365, 368, 370, 371, 372, 373, 375, 376, 379, 382, 383, 384, 385, 389, 390, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 428, 430, 431, 432, 439, 444, 447, 448, 451, 458, 465, 466, 468, 469, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 514, 517, 523, 526, 540, 543, 563, 564, 566, 567, 569, 579, 584, 585, 586, 592, 602, 605, 613, 615, 630, 632, 634, 636, 638, 642, 644, 650, 652, 656, 662, 673, 684, 692, 701, 704, 705, 706, 721, 722, 736, 746, 752, 782, 783, 784, 792, 799, 803, 804, 805, 806, 807, 808, 809, 810, 818, 821, 822, 823, 824, 825, 826, 827, 830, 831, 834, 836, 837, 850, 852, 868, 869, 871, 873, 875, 878, 880, 881, 882, 883, 887, 888, 889, 892, 905, 906, 908, 913, 916, 917, 924, 926, 945, 947, 957, 970, 971, 994, 995, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1021, 1023, 1026, 1028, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scikit_learn": 1024, "scikit_learn_data": [371, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501], "scipi": [0, 2, 46, 54, 56, 58, 77, 81, 82, 87, 88, 110, 111, 114, 122, 124, 128, 146, 171, 187, 190, 199, 203, 256, 260, 261, 267, 270, 278, 282, 290, 295, 300, 308, 320, 321, 326, 327, 329, 330, 363, 370, 371, 374, 376, 378, 382, 384, 385, 388, 389, 390, 394, 401, 402, 404, 405, 408, 413, 416, 451, 452, 453, 454, 458, 463, 464, 498, 505, 510, 534, 536, 537, 543, 546, 584, 585, 588, 589, 591, 592, 614, 615, 652, 653, 657, 661, 662, 663, 667, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 684, 688, 691, 695, 696, 699, 723, 764, 767, 782, 783, 784, 785, 796, 797, 808, 816, 818, 834, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 871, 880, 881, 886, 887, 888, 891, 895, 898, 899, 908, 910, 911, 913, 914, 949, 953, 954, 959, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 994, 995, 1001, 1003, 1006, 1008, 1009, 1015, 1019, 1020, 1023, 1025, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "sckit": 1051, "scls19fr": 1040, "scognamiglio": 415, "scope": [46, 264, 363, 365, 376, 388, 416, 1024, 1025], "score": [0, 2, 13, 28, 44, 48, 51, 53, 59, 60, 62, 63, 64, 65, 68, 70, 73, 92, 94, 104, 105, 106, 108, 110, 114, 117, 128, 133, 135, 137, 143, 144, 145, 146, 147, 150, 151, 154, 155, 161, 164, 165, 169, 182, 184, 186, 187, 188, 189, 190, 192, 198, 204, 205, 208, 212, 214, 218, 220, 228, 230, 239, 244, 245, 246, 249, 253, 259, 262, 264, 268, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 284, 285, 287, 289, 297, 298, 299, 305, 306, 307, 312, 315, 316, 317, 319, 320, 321, 322, 326, 327, 332, 333, 340, 347, 351, 352, 355, 359, 371, 376, 378, 381, 389, 390, 402, 403, 404, 405, 406, 407, 409, 411, 413, 415, 417, 425, 427, 431, 438, 444, 448, 450, 453, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 504, 506, 534, 538, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606, 607, 609, 612, 614, 615, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 702, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 746, 759, 760, 761, 786, 787, 788, 789, 790, 791, 792, 793, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 818, 823, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 857, 858, 859, 864, 865, 866, 868, 888, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 924, 926, 954, 994, 997, 1001, 1003, 1008, 1011, 1013, 1015, 1019, 1026, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "score_clf1": 70, "score_clf2": 70, "score_clf3": 70, "score_df": 63, "score_differ": 275, "score_estim": [212, 230], "score_full_data": 182, "score_func": [73, 417, 595, 598, 599, 601, 602, 603, 746, 1035, 1037, 1052], "score_iri": 276, "score_iterative_imput": 182, "score_label": [230, 276], "score_mean": 343, "score_nam": [63, 73, 245, 272, 325, 352, 810, 827], "score_param": [596, 597, 663, 1052], "score_rand": 276, "score_sampl": [259, 295, 296, 297, 303, 390, 414, 470, 534, 543, 565, 681, 801, 802, 804, 807, 808, 818, 853, 854, 864, 868, 912, 1011, 1038, 1043, 1045, 1047], "score_simple_imput": 182, "score_std": 343, "score_tim": [272, 412, 831, 832], "score_times_nb": 272, "score_times_svm": 272, "score_typ": [245, 272, 283, 325, 810, 827, 1051], "score_valu": 352, "scorer": [2, 150, 155, 230, 246, 264, 274, 326, 390, 399, 407, 412, 415, 417, 563, 564, 597, 605, 638, 663, 677, 679, 715, 736, 737, 746, 804, 807, 808, 810, 818, 826, 827, 830, 831, 832, 833, 835, 962, 994, 1001, 1005, 1013, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scorer1_nam": 412, "scorer2_nam": 412, "scorer_": [804, 807, 808, 818], "scorer_nam": [274, 804, 818], "scores_": [194, 195, 595, 598, 599, 601, 602, 603, 648, 649, 663, 1035, 1045], "scores_df": 53, "scores_glm_pure_premium": 230, "scores_matrix": 281, "scores_max": 56, "scores_product_model": 230, "scores_std": 160, "scoring_cal": 715, "scoring_inner_cv": 326, "scoring_on_bootstrap": 273, "scoring_weight": 399, "scott": [414, 853, 1035, 1036, 1041, 1043, 1044, 1045, 1050, 1051], "scottlog": 1053, "scratch": [377, 443, 1005, 1037], "screen": [49, 1048], "screenporch": 144, "screenshot": 374, "script": [78, 138, 243, 246, 326, 351, 352, 353, 359, 364, 376, 377, 378, 379, 380, 382, 388, 390, 394, 402, 416, 1025, 1028], "scroll": 396, "scrollbar": 381, "scrutin": 279, "scullei": 408, "sdenton4": 1038, "sdg_param": 333, "se": [234, 373, 394], "seabold": [1038, 1040, 1041], "seaborn": [73, 127, 136, 150, 186, 187, 194, 198, 260, 270, 376, 394, 401, 1024], "seagreen": 207, "seal": 1041, "seamu": 1037, "sean": [1047, 1048, 1050], "seanpwilliam": 1042, "sear": 1041, "search": [2, 46, 53, 65, 81, 88, 104, 105, 106, 107, 147, 164, 166, 168, 171, 184, 230, 245, 246, 260, 262, 264, 269, 271, 274, 275, 277, 282, 289, 290, 292, 294, 308, 312, 324, 340, 346, 351, 359, 373, 374, 376, 378, 388, 390, 403, 408, 409, 412, 415, 416, 417, 419, 444, 449, 451, 453, 458, 459, 462, 465, 472, 473, 479, 504, 517, 524, 559, 560, 561, 562, 566, 567, 568, 582, 602, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 632, 657, 680, 692, 693, 696, 697, 717, 732, 789, 792, 804, 807, 808, 815, 816, 818, 820, 834, 835, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 868, 913, 916, 917, 918, 919, 958, 992, 998, 1000, 1002, 1005, 1008, 1009, 1019, 1021, 1025, 1026, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049, 1050, 1052], "search_05p": 147, "search_95p": 147, "search_cv": 104, "searchcv": [389, 1050], "searchforpass": 1051, "searchgrid": 1025, "searchsort": 51, "season": [44, 53, 176, 188, 213, 375], "seasonal_kernel": 176, "sebastian": [1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "sebastien": 1043, "sebastin": [1042, 1043], "sebasti\u00e1n": 1041, "seberg": 1036, "sec": [50, 220, 234, 237, 290], "sec65": 1050, "secant": 646, "second": [47, 50, 55, 62, 64, 71, 75, 78, 95, 101, 103, 108, 117, 128, 130, 131, 135, 136, 142, 143, 152, 155, 171, 172, 179, 188, 196, 214, 220, 229, 243, 244, 245, 246, 247, 250, 261, 264, 270, 278, 282, 295, 315, 340, 351, 359, 363, 371, 378, 382, 390, 405, 407, 408, 412, 413, 415, 416, 418, 465, 468, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 506, 512, 555, 586, 591, 592, 593, 594, 625, 628, 635, 636, 703, 716, 720, 762, 763, 767, 768, 770, 771, 778, 779, 780, 781, 782, 785, 804, 807, 808, 818, 832, 838, 839, 842, 845, 856, 858, 859, 860, 865, 866, 994, 995, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1016, 1021, 1050], "secondari": [639, 1039], "secondli": [374, 388, 408, 415, 661, 1001], "sect": 45, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 73, 121, 126, 138, 145, 150, 155, 160, 161, 162, 176, 180, 186, 187, 188, 190, 194, 198, 200, 202, 214, 236, 240, 246, 249, 251, 264, 268, 270, 273, 279, 315, 316, 317, 321, 351, 352, 353, 359, 369, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 391, 399, 406, 407, 409, 411, 412, 413, 415, 416, 417, 418, 440, 444, 460, 536, 618, 623, 626, 641, 649, 792, 802, 910, 913, 994, 999, 1001, 1005, 1006, 1008, 1009, 1011, 1012, 1019, 1020, 1021, 1022, 1035, 1037, 1038, 1039, 1042], "sector": 187, "secur": [380, 390, 1024, 1025, 1029, 1031], "sed": [380, 1035], "sedamaki": 1049, "sedykh": 1050, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 53, 59, 62, 63, 65, 73, 80, 83, 84, 87, 89, 91, 92, 96, 98, 99, 101, 102, 112, 117, 121, 126, 127, 131, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 150, 152, 155, 160, 165, 166, 167, 169, 171, 176, 177, 178, 182, 184, 187, 188, 190, 192, 194, 195, 196, 198, 204, 205, 213, 214, 215, 216, 218, 229, 230, 232, 234, 241, 243, 246, 249, 250, 251, 253, 256, 257, 258, 263, 264, 265, 267, 269, 270, 271, 272, 273, 275, 277, 279, 280, 281, 284, 285, 287, 290, 296, 297, 299, 303, 310, 316, 317, 319, 320, 321, 322, 323, 324, 325, 331, 340, 344, 347, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 368, 369, 370, 371, 373, 374, 375, 376, 378, 380, 382, 383, 384, 388, 389, 390, 396, 402, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 483, 484, 485, 486, 488, 489, 492, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 614, 615, 618, 623, 626, 627, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 709, 710, 712, 715, 717, 747, 767, 778, 782, 783, 784, 785, 792, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 951, 952, 973, 975, 978, 988, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "seed": [2, 47, 51, 64, 65, 71, 75, 76, 80, 86, 88, 91, 93, 94, 98, 99, 104, 110, 111, 112, 119, 122, 138, 143, 162, 164, 189, 203, 208, 210, 215, 218, 221, 225, 229, 235, 256, 258, 259, 260, 261, 273, 276, 285, 295, 296, 297, 344, 345, 349, 352, 359, 364, 378, 385, 388, 390, 408, 412, 413, 444, 448, 449, 451, 453, 458, 460, 461, 462, 463, 472, 473, 474, 538, 546, 555, 556, 557, 558, 561, 562, 631, 650, 651, 656, 657, 664, 665, 666, 667, 681, 693, 695, 697, 699, 801, 802, 808, 839, 842, 857, 911, 937, 951, 952, 969, 973, 994, 995, 1000, 1002, 1039, 1040, 1044, 1045, 1051], "seeger": [643, 997], "seek": [232, 234, 236, 375, 376, 388, 391, 510, 511, 1002], "seel": 1049, "seem": [44, 49, 53, 81, 89, 147, 150, 177, 188, 212, 236, 239, 271, 287, 306, 314, 347, 352, 375, 376, 381, 407, 412, 503, 1001, 1005], "seemingli": [230, 359, 388], "seen": [56, 63, 76, 89, 100, 114, 124, 130, 142, 147, 150, 187, 188, 236, 242, 246, 306, 310, 340, 351, 371, 378, 380, 389, 390, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 523, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 627, 631, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 979, 985, 994, 1000, 1005, 1008, 1009, 1015, 1021, 1029, 1047, 1048, 1049, 1050, 1051, 1052], "segfault": [364, 377, 1035, 1043, 1048], "segment": [52, 54, 56, 60, 72, 82, 87, 124, 184, 235, 242, 371, 384, 408, 416, 453, 463, 510, 511, 695, 864, 1005, 1026, 1029, 1043, 1045, 1047], "seguin": 1040, "sei": 416, "seismic_r": [194, 198], "sejourn": 1044, "sel": [399, 417], "seladu": 1051, "seldom": 908, "sele": [1049, 1050], "select": [2, 18, 30, 44, 47, 49, 50, 53, 59, 71, 72, 80, 85, 89, 91, 96, 102, 104, 107, 114, 119, 120, 121, 130, 131, 135, 137, 144, 147, 150, 155, 164, 166, 176, 178, 187, 188, 190, 192, 193, 195, 197, 198, 199, 201, 211, 216, 220, 227, 230, 233, 239, 243, 245, 249, 254, 255, 256, 264, 268, 269, 270, 271, 275, 283, 284, 294, 310, 315, 321, 325, 327, 329, 330, 333, 335, 340, 347, 351, 352, 353, 359, 363, 371, 373, 374, 376, 378, 380, 384, 389, 390, 405, 408, 409, 410, 413, 415, 416, 418, 444, 446, 447, 448, 450, 452, 454, 459, 460, 461, 465, 467, 468, 473, 474, 477, 489, 490, 494, 495, 498, 499, 502, 503, 504, 506, 514, 517, 534, 536, 537, 542, 543, 546, 551, 553, 560, 561, 562, 565, 567, 584, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 631, 635, 636, 649, 650, 651, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 675, 677, 680, 682, 686, 687, 695, 696, 701, 716, 720, 722, 758, 792, 796, 797, 801, 802, 804, 807, 808, 809, 810, 818, 830, 831, 832, 834, 836, 850, 851, 852, 854, 856, 858, 859, 860, 868, 869, 873, 878, 884, 888, 905, 908, 909, 913, 916, 917, 918, 919, 930, 973, 974, 999, 1000, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "select__k": 994, "select_dtyp": [108, 144, 324, 467], "selected_featur": 190, "selected_features_nam": 190, "selectfdr": [2, 417, 595, 599, 601, 602, 603, 609, 1039, 1041, 1042, 1051], "selectfpr": [2, 376, 417, 595, 598, 601, 602, 603, 609, 1051], "selectfrommodel": [2, 169, 390, 399, 596, 605, 606, 1027, 1031, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1051, 1052], "selectfw": [2, 417, 595, 598, 599, 602, 603, 609, 1051], "selectkbest": [2, 105, 107, 165, 166, 323, 359, 376, 399, 409, 417, 584, 595, 598, 599, 601, 603, 609, 994, 1036, 1041, 1051, 1052], "selector": [2, 53, 104, 165, 166, 249, 347, 384, 416, 417, 467, 584, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 1037, 1045, 1047, 1051], "selectormixin": [2, 1046], "selectpercentil": [2, 88, 104, 253, 343, 417, 595, 598, 599, 601, 602, 606, 609, 1036, 1041, 1051, 1052], "self": [2, 48, 58, 63, 65, 90, 99, 119, 133, 179, 184, 190, 246, 284, 290, 328, 334, 340, 370, 376, 377, 378, 381, 382, 383, 384, 408, 416, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 502, 510, 511, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 707, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 818, 822, 823, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 957, 961, 962, 964, 965, 970, 978, 993, 1008, 1025, 1026, 1027, 1029, 1031, 1037, 1042, 1049], "self_request": 246, "self_training_clf": 332, "self_training_model": [321, 905], "selftrain": 333, "selftrainingclassifi": [2, 321, 332, 333, 334, 399, 1018, 1047, 1052], "seljak": 1050, "sell": 108, "selvan": 1047, "semant": [55, 351, 352, 390, 546, 1030, 1031, 1037], "semi": [2, 39, 58, 68, 143, 162, 173, 244, 247, 312, 321, 336, 337, 340, 344, 371, 390, 489, 506, 537, 591, 593, 680, 733, 834, 868, 872, 903, 904, 905, 913, 1003, 1008, 1011, 1026, 1027, 1031, 1035, 1047, 1050], "semi_supervis": [2, 184, 321, 323, 328, 329, 330, 331, 332, 333, 334, 399, 903, 904, 905, 1006, 1018, 1026, 1036, 1041, 1042, 1049, 1050], "semiconductor": 1029, "semidefinit": [1015, 1020], "semilogi": [201, 243], "semilogx": [160, 201, 202], "semin": 415, "seminar": 1005, "semisupervis": [329, 390], "sen": [2, 151, 184, 193, 215, 218, 310, 653, 661, 675, 682, 683, 1026], "send": [376, 380, 391, 408, 420, 535], "sender": [351, 371], "sendyk": 1044, "seng": 1047, "senger": [0, 1051, 1052, 1053], "senior": [1015, 1029], "sens": [43, 44, 53, 56, 63, 89, 100, 177, 184, 187, 192, 243, 310, 316, 330, 340, 359, 363, 376, 377, 390, 408, 410, 412, 417, 463, 470, 471, 472, 473, 474, 475, 476, 477, 613, 656, 659, 660, 676, 805, 815, 905, 999, 1001, 1008, 1009, 1011, 1015, 1018, 1026], "sensibl": [86, 182, 283, 287, 352, 1001, 1015], "sensit": [44, 80, 89, 112, 113, 138, 147, 184, 188, 214, 215, 216, 239, 240, 249, 262, 274, 277, 284, 310, 327, 340, 364, 365, 391, 407, 410, 415, 453, 463, 498, 553, 563, 613, 662, 696, 704, 706, 716, 717, 722, 746, 788, 791, 792, 803, 804, 826, 834, 869, 888, 906, 1000, 1001, 1002, 1004, 1005, 1009, 1011, 1019, 1020, 1026, 1039, 1053], "sensor": 198, "sent": [150, 408, 837, 1021], "sentenc": [103, 353, 371, 391, 416], "seoeun": 1051, "sep": [119, 279], "sepal": [127, 129, 131, 143, 173, 293, 324, 337, 373, 1015], "sepal_col": 324, "separ": [53, 54, 62, 63, 67, 68, 76, 89, 94, 96, 100, 106, 112, 120, 121, 123, 126, 135, 137, 140, 153, 174, 183, 184, 188, 189, 192, 193, 205, 211, 213, 233, 247, 257, 270, 273, 279, 280, 310, 312, 315, 321, 332, 335, 336, 338, 339, 340, 344, 345, 351, 359, 363, 372, 373, 378, 381, 384, 388, 390, 402, 406, 408, 409, 410, 413, 415, 416, 418, 420, 465, 514, 521, 535, 540, 542, 543, 549, 551, 584, 591, 592, 594, 614, 635, 642, 650, 651, 677, 680, 681, 694, 698, 729, 736, 749, 750, 752, 757, 796, 823, 840, 841, 867, 868, 910, 912, 913, 918, 919, 994, 995, 997, 999, 1001, 1002, 1004, 1011, 1012, 1015, 1019, 1020, 1026, 1035, 1038, 1040, 1041, 1045, 1047, 1048, 1051, 1052], "seper": 555, "septemb": [738, 1005, 1035, 1038, 1041, 1043, 1048, 1051, 1053], "seq": 637, "seq_dataset": [1035, 1045], "seqlearn": 388, "sequenc": [2, 52, 135, 143, 200, 235, 378, 390, 409, 412, 413, 415, 416, 505, 514, 555, 556, 563, 564, 571, 572, 584, 585, 591, 592, 594, 650, 804, 807, 815, 834, 868, 892, 955, 956, 967, 975, 978, 1035, 1038, 1040, 1041], "sequencekernel": 179, "sequenti": [2, 53, 143, 163, 166, 184, 207, 271, 321, 374, 413, 415, 416, 502, 503, 536, 596, 600, 605, 606, 608, 609, 650, 651, 656, 657, 662, 664, 665, 666, 667, 677, 792, 868, 869, 888, 995, 1013, 1019, 1026, 1027, 1031, 1035, 1044, 1047], "sequentialfeatureselector": [2, 169, 399, 417, 596, 600, 606, 1047, 1048, 1049, 1050, 1051], "sergei": [408, 1037, 1041, 1042, 1043, 1044, 1045], "sergeyf": 1037, "sergio": [1035, 1037, 1038, 1047, 1050], "sergiodsr": 1046, "sergul": [1042, 1043, 1046], "seri": [2, 43, 44, 52, 59, 114, 142, 147, 150, 184, 186, 189, 190, 197, 212, 214, 216, 232, 253, 275, 284, 317, 323, 329, 368, 371, 381, 390, 408, 490, 491, 492, 493, 494, 498, 502, 503, 504, 506, 507, 512, 543, 564, 694, 698, 705, 746, 749, 750, 752, 794, 825, 830, 831, 834, 930, 996, 1001, 1002, 1006, 1008, 1019, 1024, 1026, 1038, 1041, 1042, 1043, 1047, 1050, 1052, 1053], "serial": [390, 402, 422, 960, 1024, 1025, 1035, 1043, 1047, 1052], "serializetostr": 402, "serious": 1007, "serum": 373, "serv": [103, 125, 135, 177, 264, 273, 344, 409, 553, 997, 1031, 1049], "server": [0, 363, 373, 374, 376, 498, 1028, 1043], "servic": [0, 44, 240, 249, 376, 380, 402, 1029, 1043], "sess": 402, "session": [378, 382, 388, 394, 1023, 1029], "set": [2, 3, 8, 20, 28, 38, 43, 44, 45, 46, 47, 48, 51, 53, 54, 59, 63, 64, 65, 67, 68, 71, 73, 77, 78, 80, 81, 83, 84, 87, 88, 89, 91, 92, 94, 96, 98, 99, 100, 103, 104, 106, 112, 113, 114, 117, 121, 126, 127, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 157, 160, 165, 166, 169, 171, 177, 178, 179, 184, 186, 187, 188, 189, 190, 194, 198, 200, 201, 202, 204, 205, 206, 208, 209, 211, 212, 213, 214, 217, 220, 225, 226, 230, 232, 233, 234, 239, 240, 241, 242, 244, 245, 246, 249, 253, 255, 257, 259, 260, 263, 265, 268, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 283, 285, 287, 289, 292, 296, 297, 298, 299, 300, 303, 306, 307, 308, 310, 312, 314, 315, 316, 317, 319, 321, 322, 326, 329, 330, 333, 334, 337, 339, 342, 344, 347, 351, 352, 353, 357, 358, 359, 363, 364, 365, 368, 369, 371, 373, 374, 376, 378, 380, 381, 383, 384, 389, 390, 391, 394, 399, 402, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 425, 426, 427, 430, 431, 432, 433, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 489, 490, 495, 497, 498, 499, 501, 504, 505, 510, 511, 512, 517, 525, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 703, 704, 705, 706, 707, 715, 717, 718, 723, 725, 727, 730, 731, 732, 733, 734, 735, 738, 742, 744, 749, 750, 752, 754, 755, 757, 760, 783, 784, 786, 787, 788, 789, 791, 793, 794, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 934, 935, 945, 947, 952, 956, 960, 961, 973, 974, 975, 978, 979, 985, 988, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "set1": [270, 299, 300], "set_": [246, 399, 1053], "set_alpha": [71, 255, 256, 257, 260, 261], "set_arrai": [52, 235, 242], "set_aspect": [44, 123, 174, 223, 257, 348], "set_autoscaley_on": 78, "set_axis_bgcolor": 114, "set_axis_off": 69, "set_axisbelow": 50, "set_box_aspect": 71, "set_clim": 294, "set_clip_box": [71, 255, 256, 257, 260, 261], "set_color": [47, 223], "set_config": [2, 246, 251, 253, 264, 317, 320, 326, 363, 364, 399, 409, 438, 444, 445, 448, 450, 465, 466, 469, 473, 483, 484, 485, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 596, 597, 600, 605, 614, 615, 630, 631, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 869, 871, 873, 874, 875, 880, 887, 888, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 1044, 1046, 1049, 1051], "set_constrained_layout_pad": 121, "set_edgecolor": 121, "set_facecolor": [114, 255], "set_fit_request": [246, 326, 399, 438, 444, 445, 448, 450, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 639, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 694, 840, 841, 843, 844, 845, 846, 847, 853, 873, 887, 888, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919], "set_fmt_str_length": 53, "set_i": 91, "set_index": [63, 135, 147, 202, 230, 270, 316, 352], "set_inverse_transform_request": [535, 875, 888], "set_label": [76, 174, 243], "set_label_posit": 47, "set_linewidth": [52, 235, 242], "set_major_formatt": [232, 234, 237, 290, 295], "set_major_loc": [232, 295], "set_output": [184, 188, 238, 251, 315, 316, 379, 388, 432, 443, 444, 446, 448, 450, 465, 469, 483, 484, 485, 486, 498, 506, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 568, 569, 570, 571, 572, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 662, 692, 693, 696, 834, 852, 857, 860, 864, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 906, 1026, 1050, 1051, 1052], "set_param": [124, 131, 139, 144, 147, 188, 189, 195, 200, 202, 206, 216, 220, 244, 249, 253, 264, 283, 293, 319, 343, 352, 379, 390, 408, 409, 415, 418, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 995, 1011, 1035, 1041, 1042, 1043, 1048, 1049], "set_partial_fit_request": [450, 670, 671, 672, 680, 681, 682, 836, 837, 840, 841, 843, 844, 845, 846, 847, 865, 888], "set_path_effect": 76, "set_posit": [101, 223, 310], "set_predict_request": [246, 483, 484, 485, 554, 615, 648, 649], "set_printopt": 263, "set_prop_cycl": 213, "set_score_request": [246, 264, 326, 399, 438, 444, 448, 450, 466, 483, 484, 485, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 803, 826, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 858, 859, 865, 866, 868, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 1005], "set_siz": 297, "set_size_inch": [94, 160, 250], "set_split_request": [805, 806, 811, 813, 822], "set_start_method": 388, "set_stat": 994, "set_tick_param": 255, "set_ticklabel": [127, 351], "set_titl": [48, 50, 55, 63, 65, 67, 68, 69, 71, 78, 79, 87, 89, 91, 94, 98, 99, 105, 108, 112, 119, 126, 131, 135, 140, 142, 145, 151, 153, 155, 156, 180, 182, 183, 186, 187, 188, 189, 190, 194, 195, 202, 204, 205, 210, 212, 213, 214, 220, 232, 233, 236, 237, 242, 244, 245, 249, 250, 255, 263, 264, 265, 266, 267, 270, 272, 273, 277, 281, 282, 284, 287, 289, 290, 293, 294, 295, 300, 305, 306, 310, 311, 312, 313, 314, 315, 319, 323, 329, 330, 337, 344, 347, 348, 349, 351, 355, 372], "set_transform_request": [246, 483, 484, 485, 535, 538, 593, 871, 874, 880, 888], "set_vis": [55, 71, 294, 300, 310], "set_xlabel": [47, 50, 87, 94, 105, 106, 108, 119, 126, 145, 180, 182, 183, 186, 188, 189, 190, 192, 202, 208, 210, 212, 214, 227, 228, 244, 264, 270, 272, 276, 281, 282, 284, 287, 295, 310, 311, 315, 332, 352, 353, 355], "set_xlim": [68, 78, 94, 108, 112, 119, 140, 153, 183, 188, 210, 212, 217, 244, 255, 274, 276, 287, 295, 305, 310, 312, 313, 314, 315, 320, 326, 348], "set_xscal": [202, 217], "set_xtick": [44, 48, 50, 68, 79, 94, 98, 131, 153, 157, 188, 190, 204, 228, 244, 255, 281, 282, 289, 305, 307, 312, 313, 337], "set_xticklabel": [48, 50, 112, 131, 157, 174, 188, 190, 281, 282, 289], "set_ylabel": [47, 48, 50, 67, 71, 87, 94, 99, 105, 106, 108, 112, 119, 126, 131, 135, 142, 145, 180, 188, 192, 202, 204, 208, 210, 212, 214, 216, 227, 244, 255, 264, 270, 272, 276, 281, 282, 284, 289, 295, 310, 311, 315, 319, 332, 347, 352, 355], "set_ylim": [48, 50, 68, 78, 94, 105, 119, 140, 152, 153, 180, 188, 195, 210, 212, 213, 244, 255, 274, 289, 295, 305, 310, 312, 313, 315, 320, 326, 332, 348], "set_yscal": [145, 212], "set_ytick": [44, 68, 79, 94, 98, 131, 153, 182, 183, 190, 204, 228, 255, 281, 305, 307, 312, 313, 337, 353], "set_yticklabel": [131, 174, 182, 183, 190, 281, 353], "set_zord": 123, "setdefault": [56, 923], "setdiff1d": 346, "seth": 1041, "sethdandridg": 1039, "setminu": 1021, "setosa": [127, 129, 279, 280, 373, 506], "setp": [48, 50, 281, 285], "settabl": 1005, "settingwithcopywarn": 188, "setup": [277, 279, 363, 374, 378, 382, 384, 1008], "setuptool": 1053, "seuclidean": [451, 458, 703, 782, 783, 784, 1008, 1043, 1046, 1047], "seuclideandist": 703, "seung": 413, "seven": [371, 998], "seventh": [513, 1017], "sever": [0, 44, 49, 52, 53, 63, 65, 68, 71, 73, 89, 90, 91, 95, 107, 138, 150, 153, 155, 158, 166, 171, 176, 177, 184, 187, 192, 198, 202, 212, 216, 231, 232, 235, 236, 237, 243, 257, 265, 270, 275, 284, 290, 292, 306, 310, 322, 347, 351, 352, 363, 370, 371, 373, 376, 378, 381, 384, 388, 390, 405, 408, 409, 412, 414, 415, 416, 418, 448, 450, 465, 488, 501, 510, 511, 540, 557, 558, 561, 562, 565, 566, 567, 572, 591, 592, 594, 614, 649, 650, 656, 692, 693, 694, 695, 696, 697, 801, 802, 804, 807, 808, 818, 836, 837, 843, 844, 845, 846, 847, 867, 868, 875, 892, 916, 917, 918, 919, 937, 994, 997, 1002, 1005, 1006, 1008, 1013, 1015, 1019, 1021, 1022, 1023, 1024, 1026, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1048, 1051, 1052], "sevin": 1043, "sewook": 1045, "sex": [104, 187, 189, 253, 324, 373, 498, 1013], "seyedsaman": 1049, "sf": [169, 270, 321, 371, 417, 494, 605], "sfm": 169, "sfs_backward": 169, "sfs_forward": 169, "sfu": [408, 443], "sgd": [2, 47, 48, 51, 125, 127, 130, 137, 146, 147, 156, 174, 175, 184, 193, 196, 204, 219, 226, 239, 246, 259, 278, 303, 306, 307, 322, 341, 342, 345, 349, 351, 356, 359, 365, 506, 514, 635, 653, 670, 671, 672, 675, 680, 681, 682, 683, 865, 866, 994, 1009, 1026, 1027, 1031, 1035, 1038, 1039, 1040, 1042, 1046, 1048], "sgdclassifi": [2, 26, 47, 48, 219, 220, 221, 222, 223, 224, 225, 244, 278, 333, 342, 351, 359, 363, 365, 378, 382, 390, 406, 416, 642, 644, 645, 646, 650, 662, 670, 672, 908, 913, 997, 1001, 1006, 1019, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "sgdoneclasssvm": [2, 226, 239, 322, 912, 1011, 1019, 1048, 1050, 1051, 1052, 1053], "sgdregressor": [2, 26, 50, 223, 363, 365, 388, 650, 653, 671, 675, 680, 683, 866, 909, 914, 1001, 1019, 1037, 1039, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1053], "sgkf": [412, 822], "sgm": 48, "sgml": [48, 363], "sh": [281, 384, 994], "sh_color": 236, "sh_err": 236, "sh_lle": 236, "sh_point": 236, "sh_tsne": 236, "sha256": [48, 53, 493, 1050], "shack": [1045, 1046, 1047], "shade": [59, 87, 167, 293, 298, 336, 413], "shader": 404, "shadi": [1050, 1051], "shadow": [125, 129, 130, 235, 331, 346, 353, 416], "shagun": 1041, "shah": [1039, 1040, 1041, 1047, 1053], "shaharyar": 1053, "shahebaz": 1043, "shahriar": 1037, "shaikh": [0, 361, 366, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1053], "shail": 1047, "shakerimoff": 1049, "shalev": [670, 671, 1001, 1019], "shalil": 1043, "shall": 176, "shallow": [382, 415, 563, 564, 923], "shamsi": 1043, "shandeng123": 1049, "shane": [1044, 1047, 1050], "shanghai": [693, 697, 1002], "shangwu": [1043, 1044], "shankar": 1045, "shanmuga": 1041, "shanno": 1001, "shannon": [559, 566, 916, 918, 1002, 1021], "shantanu": 787, "shao": [1047, 1048, 1049], "shape": [2, 44, 45, 46, 48, 49, 50, 51, 53, 54, 56, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 77, 81, 82, 85, 86, 87, 88, 89, 92, 94, 95, 100, 103, 107, 108, 112, 121, 122, 124, 136, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 162, 165, 167, 172, 173, 175, 177, 178, 182, 183, 184, 188, 189, 200, 202, 205, 212, 214, 219, 221, 224, 225, 226, 227, 228, 231, 233, 234, 235, 239, 242, 243, 244, 245, 246, 248, 249, 255, 257, 259, 260, 261, 268, 270, 272, 273, 276, 277, 279, 280, 290, 295, 296, 300, 303, 305, 307, 312, 313, 319, 321, 324, 325, 331, 332, 334, 337, 340, 343, 344, 345, 348, 349, 351, 352, 358, 363, 369, 370, 371, 376, 378, 390, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 931, 936, 939, 940, 945, 950, 952, 954, 958, 959, 966, 968, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 993, 995, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1051, 1052], "shape_fit_": [910, 911, 912, 913, 914], "shape_img": 588, "sharad": 1043, "sharan": [1042, 1043], "share": [71, 116, 153, 187, 260, 351, 358, 359, 363, 364, 378, 384, 402, 408, 413, 416, 551, 672, 708, 712, 801, 802, 807, 808, 999, 1012, 1028, 1035, 1037, 1043, 1045, 1047, 1050], "shared_yax": 141, "sharedmem": 1043, "sharei": [44, 53, 71, 108, 119, 126, 131, 156, 180, 188, 205, 209, 212, 214, 220, 272, 281, 283, 284, 295, 311, 316, 346, 347, 352, 372], "sharex": [44, 47, 55, 71, 106, 119, 126, 156, 180, 188, 205, 209, 214, 272, 283, 284, 295, 332, 372], "sharma": [1039, 1041, 1043, 1044, 1046, 1047, 1049, 1052, 1053], "sharmadharmp": 1049, "sharon": 371, "sharova": 1042, "sharp": [44, 188, 1012, 1015], "sharper": 730, "shashank": [1041, 1047], "shaun": 1036, "shawpan": 1041, "shaymernaturalint": 1049, "she": [376, 898, 899, 1045], "shea": [1043, 1044], "shebanov": [1043, 1044], "sheep": 1029, "sheer": [376, 1029], "sheerman": 1035, "sheet": 1037, "sheetscikit": 396, "shekhar": 1041, "shell": [377, 384, 388], "shellyfung": 1050, "shen": 1048, "sheng": 1045, "shengxiduan": 1041, "shenhanc78": 1043, "sheni": 1047, "shenk": 1043, "shenoi": 1042, "sherlock": [632, 995], "sheth": 1043, "shetti": 1048, "shi": [408, 453, 463, 695], "shibata": 1045, "shiebler": 1041, "shield": 390, "shift": [2, 53, 72, 74, 80, 83, 98, 184, 194, 235, 260, 295, 308, 310, 344, 410, 414, 441, 449, 459, 462, 470, 514, 517, 693, 697, 854, 877, 1015, 1026, 1030, 1031, 1035, 1039, 1043], "shifted_gaussian": 259, "shifted_opposite_lof_scor": 854, "shih": [845, 1007], "shiki": 1046, "shilt": 1038, "shinehid": 1048, "shinitski": 1052, "shinnar": 1048, "shinsuk": 1050, "ship": [155, 183, 356, 364, 374, 394, 416, 1001, 1035, 1044], "shiqiao": [0, 398, 1035, 1036], "shirsat": 1050, "shiva": [1050, 1051], "shivam": [1043, 1044, 1045], "shivamgargsya": [1042, 1046, 1048], "shivan": 1040, "shivram": 1043, "shiyu": 1044, "shleifer": [1041, 1042], "shmelkov": 1040, "shoaib": 1050, "shoemak": 1046, "shogo": [1050, 1051], "shooter23": [1047, 1048], "shop": 1029, "short": [45, 127, 144, 151, 204, 268, 307, 376, 384, 412, 416, 420, 1001, 1002, 1008, 1028, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "short_nam": 56, "shortcom": 1001, "shortcut": [384, 402, 418], "shorten": [376, 1020, 1048], "shorten_param": 271, "shorter": [44, 177, 258, 388, 408, 413, 451, 458, 565, 701, 1007, 1011, 1046], "shortest": [2, 75, 381, 385, 692, 958, 1002, 1048], "shortest_path": 1048, "shorthand": [92, 390, 409, 468, 563, 564, 869, 870, 1038], "shortli": 378, "shortlog": 380, "shortname_slic": 56, "shota": 1041, "should": [44, 45, 46, 48, 49, 53, 55, 56, 63, 65, 68, 73, 87, 133, 135, 138, 141, 144, 147, 150, 169, 182, 187, 192, 194, 195, 198, 205, 212, 230, 239, 244, 245, 246, 249, 264, 270, 273, 276, 277, 279, 284, 287, 290, 311, 312, 317, 331, 340, 347, 352, 359, 363, 364, 365, 371, 374, 375, 376, 378, 380, 381, 383, 384, 385, 389, 390, 394, 399, 402, 404, 406, 407, 408, 410, 412, 413, 415, 416, 417, 418, 419, 420, 422, 425, 431, 438, 441, 443, 444, 445, 446, 448, 450, 451, 453, 455, 458, 459, 460, 463, 464, 465, 466, 468, 475, 483, 484, 485, 486, 488, 498, 505, 510, 511, 518, 523, 525, 526, 529, 534, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 591, 592, 593, 594, 596, 597, 600, 605, 610, 611, 614, 615, 624, 631, 632, 633, 635, 636, 637, 639, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 691, 693, 694, 695, 696, 697, 698, 699, 700, 705, 713, 731, 732, 746, 770, 775, 778, 782, 783, 784, 785, 786, 789, 792, 793, 796, 803, 805, 806, 811, 812, 813, 814, 821, 822, 823, 824, 826, 830, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 865, 866, 868, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 887, 888, 889, 891, 895, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 934, 938, 940, 943, 952, 957, 961, 965, 970, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 993, 994, 995, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1010, 1011, 1012, 1015, 1018, 1019, 1020, 1021, 1025, 1028, 1029, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "shouldn": [256, 261, 376], "show": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 177, 179, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 326, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 355, 356, 357, 358, 364, 365, 372, 376, 382, 388, 389, 394, 395, 399, 405, 406, 407, 410, 412, 413, 414, 415, 417, 418, 439, 504, 561, 596, 597, 635, 636, 701, 702, 704, 705, 706, 717, 810, 827, 850, 868, 920, 921, 922, 994, 997, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1019, 1020, 1037, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053], "show_top10": 371, "show_vers": [2, 363, 374, 376, 384, 394, 395, 1043], "show_weight": 921, "show_with_diff": 124, "showcas": [133, 136, 141, 144, 147, 148, 150, 184, 378], "shown": [63, 91, 133, 137, 141, 147, 180, 186, 188, 198, 203, 210, 230, 237, 239, 244, 249, 257, 270, 273, 276, 279, 287, 295, 306, 307, 310, 311, 312, 329, 347, 351, 352, 376, 381, 391, 406, 408, 409, 412, 413, 414, 416, 418, 439, 461, 636, 702, 704, 705, 706, 717, 804, 818, 920, 922, 1001, 1002, 1005, 1008, 1015, 1019, 1020, 1021, 1039, 1044, 1045, 1046, 1049], "shown_imag": 233, "shrankhla": 1050, "shreesha": [1051, 1052], "shreya": 1045, "shrink": [64, 114, 121, 148, 188, 198, 208, 210, 216, 232, 259, 283, 310, 347, 413, 561, 562, 680, 682, 855, 865, 866, 910, 911, 912, 913, 914, 1008, 1020], "shrink_threshold": [301, 855, 1008, 1035, 1047], "shrinkag": [2, 70, 109, 111, 114, 128, 149, 184, 301, 421, 470, 471, 474, 475, 476, 477, 478, 480, 481, 482, 541, 545, 551, 563, 564, 804, 855, 1001, 1015, 1026, 1027, 1031, 1035, 1039, 1040, 1042], "shrinkage_": [110, 111, 474, 476], "shrinkage_coeffici": 481, "shroff": 1053, "shrunk": [2, 110, 128, 310, 317, 325, 421, 474, 476, 477, 480, 481, 482, 551, 889, 999, 1019, 1030, 1031], "shrunk_cov": [421, 480, 482], "shrunk_cov_scor": 128, "shrunk_covari": [2, 410, 1052], "shrunkcovari": [2, 110, 128, 410, 470, 471, 474, 475, 476], "shrunken": [855, 1035], "shu": [1036, 1039, 1043], "shuangchi": [1049, 1050], "shubernetskii": 1037, "shubh": 1046, "shubhal": 1052, "shubham": [1042, 1045, 1053], "shubhanshu": 1047, "shubhraneel": 1049, "shuckle16": 1041, "shuffl": [2, 50, 53, 55, 59, 60, 62, 65, 69, 94, 95, 121, 141, 142, 143, 150, 155, 183, 198, 209, 220, 221, 226, 239, 271, 275, 276, 283, 290, 317, 329, 330, 331, 332, 342, 351, 352, 359, 371, 385, 390, 403, 470, 475, 489, 490, 492, 494, 497, 499, 505, 513, 514, 515, 516, 517, 521, 524, 526, 533, 539, 541, 542, 548, 549, 555, 556, 557, 558, 566, 567, 569, 570, 605, 608, 610, 662, 663, 670, 671, 672, 676, 678, 680, 681, 682, 691, 804, 805, 806, 807, 808, 809, 810, 818, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 865, 866, 889, 908, 909, 910, 913, 951, 952, 973, 975, 1000, 1001, 1006, 1013, 1019, 1020, 1031, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "shuffle_param": 347, "shuffled_arrai": 978, "shufflesplit": [2, 265, 272, 347, 412, 806, 812, 814, 824, 834, 1035, 1036, 1038, 1040, 1041], "shuhei": 1048, "shuhua": 1047, "shutil": [88, 105, 409], "shuzh": 1045, "shwartz": [670, 671, 1001, 1019], "shwed": 1043, "shyam": 1048, "siam": [408, 412, 453, 461, 463, 537, 543], "siang": 1038, "siavash": 1048, "siavrez": 1049, "sibsp": 189, "sid": 1042, "siddharth": [1042, 1046], "siddiqui": 1053, "side": [44, 65, 93, 147, 206, 216, 230, 234, 242, 264, 310, 344, 351, 359, 371, 388, 406, 409, 412, 413, 416, 425, 431, 517, 804, 818, 1001, 1002, 1005, 1007, 1020, 1044], "sidebar": 376, "sidhpura": 1050, "siebert": 1043, "sievert": 1045, "siftikha": 1043, "sig": 122, "sigkdd": [370, 371, 513, 680, 889, 1015, 1017], "sigma": [54, 81, 82, 88, 112, 128, 147, 268, 270, 405, 410, 413, 415, 618, 653, 999, 1001, 1003, 1007, 1010], "sigma2": [536, 543], "sigma_": [410, 648, 649, 1048, 1052], "sigma_0": [174, 175, 180, 418, 618], "sigma_0_bound": [180, 618], "sigma_i": [1007, 1015], "sigma_k": [413, 999], "sigmod": [408, 451, 458, 854, 1011], "sigmoid": [2, 62, 63, 64, 65, 368, 415, 438, 453, 537, 563, 624, 643, 647, 769, 778, 781, 865, 866, 910, 911, 912, 913, 914, 1010, 1020, 1031, 1048, 1052], "sigmoid_kernel": [2, 404, 769, 1003], "sign": [76, 111, 117, 122, 125, 137, 198, 260, 305, 347, 376, 408, 413, 416, 546, 585, 592, 609, 639, 640, 662, 663, 670, 672, 678, 679, 680, 681, 739, 746, 908, 912, 950, 952, 969, 1001, 1005, 1010, 1015, 1019, 1020, 1035, 1039, 1044, 1048, 1050, 1053], "signal": [2, 11, 54, 113, 121, 122, 123, 130, 145, 147, 171, 176, 177, 184, 193, 194, 199, 200, 201, 202, 207, 208, 211, 213, 261, 283, 322, 408, 410, 416, 417, 418, 421, 476, 505, 523, 528, 533, 536, 539, 543, 547, 548, 629, 648, 649, 650, 651, 656, 657, 667, 668, 676, 688, 689, 690, 789, 825, 834, 882, 1001, 1005, 1022, 1026, 1029, 1030, 1031], "signatur": [246, 351, 352, 371, 489, 490, 559, 560, 566, 567, 597, 614, 615, 663, 677, 679, 715, 746, 810, 827, 830, 832, 835, 881, 945, 964, 994, 1042, 1048, 1052], "signif": [46, 997], "signifi": [408, 584, 815, 1010], "signific": [2, 44, 89, 141, 147, 164, 165, 167, 184, 216, 230, 262, 270, 289, 290, 359, 370, 371, 388, 408, 411, 412, 415, 506, 534, 536, 551, 631, 662, 663, 670, 671, 672, 680, 681, 682, 823, 833, 908, 910, 911, 912, 913, 914, 994, 1004, 1005, 1008, 1026, 1035, 1037, 1038, 1039, 1043], "significantli": [44, 62, 63, 65, 73, 110, 111, 135, 141, 145, 147, 150, 169, 187, 188, 189, 212, 216, 220, 228, 230, 264, 270, 290, 320, 321, 352, 353, 359, 364, 380, 408, 413, 415, 416, 421, 470, 475, 480, 481, 540, 542, 549, 560, 567, 650, 651, 656, 657, 664, 665, 666, 667, 688, 696, 848, 849, 997, 1001, 1002, 1008, 1013, 1020, 1035, 1037, 1038, 1042, 1043, 1048, 1049, 1050], "sijaranamu": 1041, "silent": [246, 416, 584, 864, 1015, 1040, 1041, 1043, 1044, 1048, 1049], "silhouett": [2, 59, 72, 74, 83, 91, 92, 184, 352, 448, 514, 796, 797, 1026, 1035, 1039], "silhouette_avg": 94, "silhouette_sampl": [2, 94, 797, 1039, 1041, 1043, 1051], "silhouette_scor": [2, 74, 83, 92, 94, 352, 376, 408, 1035, 1039, 1041, 1043, 1045, 1049], "silicon": 374, "silk": 1049, "sillanp\u00e4\u00e4": 1035, "silva": [406, 692, 1002, 1046, 1048, 1053], "silverman": [414, 853, 1050], "silverthorn": 1035, "silvestrin": 1052, "sim": 413, "sim4n6": 1050, "simd": [390, 1050], "similar": [2, 44, 45, 47, 52, 56, 59, 63, 64, 71, 73, 83, 85, 91, 94, 108, 117, 121, 125, 135, 147, 168, 171, 178, 186, 187, 188, 189, 198, 205, 212, 214, 226, 232, 234, 235, 236, 239, 245, 246, 261, 264, 267, 270, 273, 276, 277, 278, 287, 289, 290, 310, 322, 339, 344, 347, 352, 353, 359, 363, 368, 370, 372, 375, 376, 378, 381, 382, 384, 385, 388, 390, 402, 405, 406, 408, 411, 412, 413, 415, 416, 417, 418, 419, 441, 444, 445, 451, 453, 455, 456, 505, 510, 511, 538, 585, 592, 593, 594, 613, 614, 681, 696, 699, 707, 709, 719, 723, 729, 732, 733, 735, 738, 742, 744, 759, 764, 765, 790, 796, 797, 800, 801, 802, 830, 835, 880, 901, 904, 908, 909, 910, 911, 925, 935, 994, 997, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1031, 1035, 1039, 1040, 1041, 1043, 1047, 1048], "similarli": [44, 52, 73, 89, 119, 151, 188, 190, 198, 202, 212, 240, 249, 264, 270, 305, 310, 325, 327, 340, 359, 364, 372, 374, 378, 381, 388, 390, 402, 404, 405, 411, 412, 416, 733, 734, 742, 787, 788, 791, 826, 1000, 1002, 1003, 1005, 1012, 1019, 1020, 1022, 1043, 1049, 1051], "simmon": 1029, "simon": [1001, 1029, 1038, 1039, 1048, 1049, 1050, 1051], "simona": [1046, 1047, 1048], "simonamaggio": [1046, 1047, 1048], "simoncw": 1045, "simonpl": 1040, "simpl": [2, 13, 38, 44, 65, 89, 104, 108, 110, 116, 117, 121, 141, 145, 178, 184, 188, 198, 213, 229, 252, 271, 287, 291, 294, 303, 323, 336, 351, 353, 356, 359, 374, 376, 378, 379, 380, 381, 383, 388, 389, 390, 391, 399, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 422, 429, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 516, 524, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 790, 792, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 960, 997, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1015, 1017, 1019, 1021, 1025, 1026, 1029, 1032, 1035], "simplefilt": 402, "simpleimput": [2, 104, 155, 182, 183, 189, 241, 251, 253, 320, 323, 359, 390, 631, 632, 633, 995, 1015, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "simplepipelin": 246, "simpler": [148, 190, 205, 230, 319, 340, 363, 375, 408, 413, 1001, 1006, 1040], "simplest": [87, 412, 1002], "simplex": [64, 674, 801, 883], "simpli": [75, 117, 153, 171, 179, 236, 247, 249, 279, 303, 321, 322, 363, 371, 376, 378, 381, 388, 390, 410, 411, 412, 413, 415, 416, 486, 699, 766, 769, 875, 954, 997, 1005, 1006, 1007, 1008, 1019, 1042, 1043, 1044], "simplic": [44, 54, 68, 198, 209, 344, 351, 353, 390, 414, 1008, 1009, 1010, 1020], "simplif": [372, 375, 381, 1035, 1041], "simplifi": [44, 104, 200, 246, 340, 375, 377, 381, 408, 411, 517, 564, 867, 868, 1005, 1007, 1015], "simplist": [212, 416], "simul": [111, 123, 150, 187, 207, 247, 270, 1029], "simultan": [59, 89, 122, 205, 274, 278, 325, 347, 357, 368, 405, 408, 994, 1005, 1006, 1021, 1029, 1042], "sin": [44, 54, 75, 122, 136, 146, 147, 152, 154, 164, 171, 177, 178, 180, 194, 195, 198, 207, 213, 218, 234, 245, 261, 302, 311, 320, 326, 346, 357, 418, 518, 619, 703, 768], "sin_transform": 44, "sina": 1048, "sinayev": 1037, "sinc": [0, 44, 45, 51, 53, 63, 71, 73, 83, 87, 89, 100, 103, 104, 105, 122, 144, 160, 166, 169, 171, 176, 187, 188, 190, 192, 197, 205, 212, 214, 216, 229, 240, 244, 245, 246, 257, 260, 264, 266, 270, 272, 273, 279, 280, 283, 284, 287, 289, 290, 292, 293, 316, 322, 323, 334, 337, 340, 347, 351, 352, 353, 359, 364, 371, 374, 376, 377, 378, 380, 381, 384, 388, 389, 390, 394, 399, 402, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 425, 428, 438, 443, 446, 447, 451, 454, 457, 470, 483, 484, 485, 486, 498, 538, 540, 542, 549, 551, 552, 553, 554, 555, 557, 559, 561, 563, 564, 565, 566, 569, 571, 591, 592, 594, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 636, 637, 642, 655, 659, 662, 663, 670, 672, 677, 678, 679, 680, 683, 696, 711, 713, 739, 746, 782, 786, 793, 803, 804, 807, 808, 818, 826, 832, 833, 835, 836, 837, 838, 839, 843, 844, 845, 846, 847, 850, 855, 858, 865, 866, 868, 873, 898, 899, 903, 904, 905, 908, 910, 913, 916, 918, 932, 934, 935, 945, 952, 961, 994, 997, 998, 999, 1001, 1002, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1029, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "sinclert": 1043, "sind": 416, "sine": [2, 44, 171, 176, 177, 184, 207, 218, 254, 255, 256, 257, 259, 260, 357, 372, 619, 801, 802, 1004, 1021, 1026], "singer": [287, 670, 671, 739, 1001, 1005, 1019, 1020], "singh": [1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "singl": [2, 31, 32, 71, 75, 86, 87, 89, 92, 95, 96, 105, 123, 134, 135, 136, 143, 144, 154, 169, 171, 177, 182, 184, 188, 190, 192, 198, 209, 212, 214, 216, 250, 252, 260, 264, 266, 279, 287, 307, 323, 325, 340, 351, 352, 353, 356, 357, 359, 363, 364, 370, 371, 376, 381, 383, 384, 385, 388, 389, 390, 399, 406, 407, 409, 411, 412, 413, 415, 416, 417, 433, 438, 441, 442, 446, 447, 448, 450, 455, 465, 467, 468, 495, 496, 498, 508, 511, 536, 555, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 585, 595, 602, 603, 605, 609, 631, 636, 638, 647, 670, 671, 677, 680, 681, 682, 694, 696, 698, 714, 715, 725, 726, 727, 728, 729, 740, 741, 742, 745, 778, 789, 801, 802, 804, 807, 808, 818, 825, 826, 830, 831, 833, 834, 837, 845, 848, 849, 853, 865, 866, 867, 877, 878, 881, 882, 883, 888, 889, 903, 904, 916, 917, 918, 919, 928, 930, 968, 991, 994, 1000, 1001, 1002, 1005, 1006, 1008, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1026, 1029, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "single_output": [378, 928], "single_prior": 180, "single_source_shortest_path_length": [2, 385], "singleton": [364, 812, 937, 1048, 1051], "singular": [2, 121, 385, 405, 408, 411, 452, 454, 483, 484, 485, 486, 523, 526, 536, 540, 542, 543, 546, 549, 551, 552, 661, 676, 677, 678, 691, 952, 1001, 1002, 1004, 1030, 1031, 1041, 1042, 1053], "singular_": 661, "singular_values_": [536, 543, 546, 1042], "sinha": [1043, 1052, 1053], "sinhrk": [1039, 1040], "sink": [645, 997], "sinoisoid": 147, "sinusoid": [122, 136, 147, 198, 245, 649, 998], "sio": 402, "siola": [1050, 1051], "sip\u0151cz": [1045, 1046, 1047, 1051, 1053], "siqi": 1049, "siqueira": 1045, "sir": 373, "sister": 1024, "site": [374, 376, 384, 394, 415, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 1029, 1043], "situat": [63, 80, 91, 105, 186, 187, 218, 239, 273, 376, 384, 402, 410, 412, 413, 415, 469, 530, 536, 585, 881, 884, 896, 906, 999, 1001, 1007, 1008, 1018, 1021, 1043], "situp": 373, "sivamani": 1045, "sivaprasad": [1038, 1039], "six": [213, 233, 314, 373, 1044], "sixteenth": 1017, "sixth": 371, "size": [38, 43, 44, 45, 46, 48, 51, 52, 53, 54, 62, 65, 68, 70, 73, 75, 76, 78, 80, 81, 82, 86, 88, 89, 91, 92, 94, 95, 96, 100, 101, 106, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 128, 130, 138, 146, 147, 150, 151, 152, 165, 171, 173, 174, 177, 178, 184, 186, 188, 189, 194, 195, 196, 197, 199, 203, 208, 210, 213, 214, 215, 218, 225, 226, 232, 237, 239, 242, 243, 244, 245, 246, 248, 249, 257, 263, 266, 268, 270, 272, 273, 275, 276, 277, 287, 296, 297, 298, 305, 308, 311, 312, 313, 314, 317, 320, 323, 325, 326, 330, 334, 336, 338, 339, 340, 347, 349, 351, 352, 353, 355, 363, 364, 365, 371, 372, 376, 381, 385, 388, 389, 390, 394, 399, 405, 406, 408, 410, 412, 413, 416, 418, 419, 421, 445, 446, 447, 449, 450, 451, 458, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 495, 496, 497, 517, 529, 536, 538, 540, 542, 549, 559, 560, 561, 562, 563, 564, 566, 567, 586, 590, 591, 597, 636, 637, 647, 661, 670, 671, 683, 687, 696, 699, 709, 723, 742, 744, 747, 785, 797, 806, 809, 810, 814, 821, 824, 825, 826, 829, 832, 834, 843, 844, 845, 847, 850, 851, 852, 853, 854, 856, 858, 859, 860, 865, 866, 883, 885, 897, 902, 906, 910, 911, 912, 913, 914, 916, 917, 918, 919, 922, 951, 955, 956, 967, 968, 970, 973, 979, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1017, 1019, 1020, 1021, 1028, 1029, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051, 1053], "size_cluster_i": 94, "size_mb": 351, "sizeabl": [806, 821, 824], "sk": 552, "skaft": 1049, "skeleton": 1038, "sketch": [2, 24, 192, 365, 368, 385, 643, 644, 645, 969, 1031, 1047], "skew": [2, 49, 147, 215, 243, 249, 310, 325, 368, 406, 412, 643, 644, 645, 646, 884, 896, 1001, 1015, 1031, 1038, 1042, 1051], "skewed": [646, 1042], "skewedchi2sampl": [2, 642, 643, 644, 645, 997, 1042, 1049, 1050], "skf": [257, 412, 823], "skfold": 332, "skforecast": 1024, "skill": 1005, "skimag": [81, 82, 370], "skip": [364, 376, 385, 404, 416, 469, 650, 651, 656, 664, 665, 666, 675, 685, 906, 927, 945, 946, 1039, 1042, 1045, 1047, 1049, 1051], "skip_check_arrai": 993, "skip_complet": 631, "skip_comput": 1045, "skip_parameter_valid": [469, 906, 1051], "skipper": [1038, 1040, 1041], "skiptest": 946, "skiptestwarn": 945, "skl2onnx": 402, "sklear": 377, "sklearn": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 390, 393, 394, 395, 399, 402, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "sklearn2pmml": 1024, "sklearn_api": 0, "sklearn_assume_finit": 363, "sklearn_cache_": 319, "sklearn_enable_debug_cython_direct": 377, "sklearn_fail_no_openmp": 374, "sklearn_graph_cache_": 292, "sklearn_is_fit": [133, 1026], "sklearn_run_float32_test": 376, "sklearn_site_joblib": 1043, "sklearn_warning_as_error": 364, "sklearnex": 394, "skop": [1024, 1031], "skorch": 1024, "sktime": [53, 1024], "sl": 212, "slack": 1019, "slama": [1045, 1047], "slep": [376, 390], "slep000": 391, "slep007": 378, "slep009": [1046, 1048, 1049], "slep010": [378, 1046], "slep018": [253, 378, 1050], "slep020": 391, "slice": [2, 44, 53, 56, 143, 150, 221, 234, 244, 298, 301, 322, 323, 336, 371, 377, 385, 409, 465, 468, 495, 496, 510, 548, 643, 778, 782, 785, 925, 930, 955, 956, 975, 1047, 1049, 1053], "slice_": [495, 496, 1050], "sliceabl": 959, "slide": [271, 648, 1001, 1023], "slight": [144, 217, 321, 402, 415, 450, 1045], "slightli": [44, 63, 65, 98, 114, 138, 141, 144, 147, 151, 155, 169, 171, 172, 173, 188, 189, 194, 212, 230, 235, 237, 246, 249, 278, 284, 290, 319, 337, 353, 375, 376, 406, 408, 415, 416, 418, 420, 447, 591, 592, 594, 642, 662, 807, 808, 908, 910, 913, 951, 952, 994, 1001, 1015, 1019, 1020, 1021, 1044, 1048, 1049, 1051, 1053], "slishak": 1049, "sloan": 0, "slogdet": 950, "slope": [188, 210, 214, 229, 408, 492, 727, 752, 1003, 1005], "sloppili": 416, "sloth": [51, 303, 371, 500], "slow": [292, 310, 351, 363, 370, 374, 376, 413, 416, 448, 703, 882, 883, 887, 910, 913, 952, 1002, 1008, 1042], "slower": [105, 124, 141, 144, 182, 245, 279, 353, 390, 415, 416, 417, 447, 452, 454, 540, 542, 549, 557, 558, 559, 560, 565, 566, 567, 568, 591, 592, 594, 635, 636, 637, 647, 663, 676, 678, 691, 696, 708, 836, 840, 841, 998, 1002, 1003, 1004, 1006, 1008, 1021, 1039, 1046], "slowest": [144, 951, 952], "slowli": [388, 390, 546, 952], "smacof": [2, 694, 1050], "small": [38, 39, 42, 45, 51, 53, 60, 65, 75, 83, 87, 89, 110, 114, 117, 126, 136, 138, 144, 146, 147, 176, 178, 187, 188, 195, 199, 203, 204, 213, 216, 218, 227, 229, 230, 257, 264, 270, 277, 282, 284, 292, 303, 306, 308, 310, 312, 314, 321, 329, 334, 340, 345, 347, 352, 365, 369, 371, 373, 376, 379, 385, 388, 390, 402, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 421, 442, 444, 446, 447, 448, 450, 459, 460, 464, 476, 498, 500, 540, 542, 543, 549, 557, 558, 559, 563, 564, 565, 566, 585, 592, 593, 605, 610, 611, 654, 658, 659, 660, 662, 663, 683, 686, 687, 807, 808, 822, 833, 836, 865, 866, 873, 901, 910, 913, 952, 994, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1018, 1021, 1024, 1025, 1029, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "smaller": [2, 38, 48, 62, 76, 81, 89, 114, 135, 150, 169, 176, 177, 182, 201, 202, 204, 216, 243, 287, 296, 297, 305, 310, 327, 340, 347, 352, 376, 405, 408, 410, 412, 413, 415, 417, 440, 441, 447, 451, 455, 457, 516, 536, 537, 559, 560, 561, 562, 563, 564, 566, 567, 596, 614, 623, 637, 650, 651, 653, 654, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 676, 678, 686, 687, 696, 713, 801, 807, 808, 854, 857, 881, 882, 900, 901, 908, 916, 917, 918, 919, 952, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1015, 1017, 1019, 1020, 1021, 1025, 1043, 1048, 1052], "smallest": [112, 113, 212, 290, 327, 355, 371, 408, 410, 417, 529, 543, 634, 658, 659, 660, 686, 687, 694, 698, 699, 804, 807, 808, 818, 823, 878, 931, 1021, 1048], "smallest_ab": 327, "smallest_coef": [114, 529], "smari": [1044, 1045, 1046], "smart": [246, 444, 460, 461, 593], "smartphon": 1029, "smedbergm": 1041, "smedemark": 1045, "smile": [108, 371, 1049], "sminchisescu": [646, 997], "smirnov": 1047, "smith": [1041, 1042, 1043, 1044, 1045, 1047], "sml": [864, 1010], "smo": [908, 909], "smola": [413, 416, 537, 874, 1015, 1020], "smolskii": 1050, "smooth": [44, 81, 82, 88, 176, 206, 213, 228, 316, 340, 373, 391, 408, 414, 415, 418, 449, 450, 539, 540, 541, 548, 559, 560, 561, 562, 566, 567, 568, 593, 594, 623, 626, 680, 843, 844, 845, 847, 885, 889, 897, 916, 917, 918, 919, 1001, 1007, 1015, 1019, 1020, 1021], "smooth_idf": [416, 593, 594], "smoothened_coin": [81, 82], "smoother": [44, 45, 147, 188, 307, 414], "smoothli": 370, "smt": 1051, "smtp": [371, 494], "smujjiga": 1045, "sn": [73, 127, 136, 150, 186, 187, 194, 198, 260, 270], "snake": [323, 325, 585, 889, 1015], "snapshot": [402, 561, 562, 1025], "sne": [52, 184, 231, 232, 233, 234, 236, 290, 516, 527, 696, 1026, 1030, 1031], "snippet": [133, 359, 376, 381, 384, 388, 404, 415, 416, 417, 995, 1015, 1028, 1048], "snowhit": 1046, "snr": 88, "snuderl": 1039, "sny": 52, "snyder": [696, 1002], "so": [31, 38, 44, 49, 52, 53, 56, 65, 78, 89, 90, 95, 99, 113, 141, 143, 144, 145, 146, 150, 154, 171, 176, 187, 188, 189, 192, 195, 212, 213, 239, 246, 249, 264, 270, 283, 287, 290, 296, 297, 300, 306, 307, 311, 316, 317, 320, 332, 340, 353, 358, 359, 363, 364, 365, 370, 371, 374, 375, 376, 378, 380, 381, 382, 384, 385, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 498, 510, 511, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 610, 611, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 699, 709, 712, 720, 730, 760, 782, 792, 801, 802, 803, 804, 807, 808, 810, 811, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 898, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 952, 970, 979, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1015, 1017, 1018, 1019, 1020, 1024, 1025, 1029, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052], "soar": 1050, "sobkevich": 1047, "sobolev": 1039, "soc": [58, 371], "socastro": [1045, 1051], "socg2006": 448, "social": [187, 380, 391, 408, 1029], "societi": [373, 408, 410, 470, 475, 543, 631, 884, 896, 1001, 1019], "sodhani": 1041, "soft": [2, 130, 156, 157, 376, 390, 571, 572, 904, 912, 1019, 1029, 1040], "softmax": [415, 563, 662, 663, 1001, 1008, 1009], "softw": 1001, "softwar": [0, 363, 373, 376, 384, 388, 390, 402, 416, 631, 639, 662, 995, 1029], "soil_typ": 249, "sokalmichen": [451, 458, 703, 782, 783, 784, 1008], "sokalmichenerdist": 703, "sokalsneath": [451, 458, 703, 782, 783, 784, 1008], "sokalsneathdist": 703, "sok\u00f3\u0142": [1052, 1053], "sole": [101, 376, 388, 408], "soledad": 1047, "soler": [0, 398], "solid": [51, 68, 70, 146, 174, 224, 225, 239, 249, 303, 312, 1029], "solosil": 1048, "solut": [81, 194, 198, 202, 204, 217, 226, 239, 245, 283, 322, 340, 374, 390, 402, 405, 407, 408, 410, 412, 413, 416, 417, 450, 452, 454, 533, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 614, 650, 652, 654, 656, 658, 659, 660, 662, 664, 666, 668, 669, 670, 671, 672, 673, 676, 678, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 801, 802, 818, 857, 865, 866, 998, 999, 1001, 1002, 1004, 1009, 1011, 1019, 1020, 1023, 1029, 1035, 1038, 1048, 1049, 1050], "solutu": 1043, "solutusimmensu": 1043, "solv": [2, 45, 46, 100, 171, 202, 244, 270, 289, 375, 376, 377, 378, 381, 388, 396, 408, 410, 412, 413, 418, 448, 454, 463, 479, 533, 539, 540, 541, 545, 547, 548, 549, 550, 639, 641, 650, 656, 658, 659, 668, 669, 674, 676, 678, 681, 689, 690, 691, 723, 838, 908, 909, 912, 952, 996, 999, 1001, 1002, 1005, 1006, 1019, 1020, 1021, 1023, 1024, 1029, 1041, 1045, 1048], "solvabl": 408, "solver": [55, 67, 70, 71, 81, 100, 184, 193, 202, 204, 206, 212, 220, 227, 228, 230, 305, 306, 307, 308, 317, 326, 327, 351, 382, 388, 390, 394, 404, 408, 420, 453, 463, 472, 473, 479, 504, 535, 537, 542, 543, 546, 549, 551, 650, 651, 652, 656, 657, 662, 663, 664, 665, 666, 667, 670, 672, 673, 674, 676, 678, 680, 684, 685, 688, 691, 692, 693, 695, 697, 699, 792, 818, 834, 839, 842, 865, 866, 910, 911, 912, 913, 914, 999, 1002, 1005, 1006, 1009, 1019, 1020, 1026, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "solver_": [676, 678], "solver_opt": 674, "somani": 1047, "some": [0, 43, 44, 45, 48, 49, 53, 58, 62, 63, 65, 73, 80, 84, 87, 89, 90, 92, 96, 101, 104, 107, 110, 112, 113, 117, 121, 136, 137, 141, 144, 147, 148, 150, 151, 152, 155, 156, 165, 171, 173, 176, 177, 178, 179, 180, 182, 183, 184, 187, 188, 189, 190, 192, 194, 196, 198, 200, 201, 202, 203, 205, 207, 208, 212, 213, 216, 220, 221, 226, 229, 230, 232, 234, 239, 243, 246, 249, 256, 257, 258, 263, 264, 265, 270, 271, 272, 273, 276, 278, 284, 287, 289, 293, 296, 301, 306, 307, 310, 315, 320, 321, 322, 323, 324, 325, 326, 327, 336, 337, 339, 340, 347, 349, 351, 352, 353, 358, 359, 363, 364, 365, 369, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 394, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 431, 438, 444, 445, 448, 450, 452, 454, 460, 464, 466, 469, 483, 484, 485, 498, 501, 510, 511, 517, 525, 526, 535, 536, 538, 543, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 591, 593, 609, 612, 614, 615, 636, 637, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 693, 694, 696, 697, 701, 702, 704, 705, 706, 711, 712, 719, 724, 730, 731, 742, 743, 744, 750, 758, 760, 761, 767, 786, 788, 791, 792, 793, 798, 801, 803, 805, 806, 811, 813, 822, 823, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 869, 871, 873, 874, 875, 880, 887, 888, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 934, 935, 961, 994, 995, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "some_funct": [376, 941], "some_integ": 412, "some_iter": 376, "some_param": 376, "somebodi": 391, "someestim": 375, "somehow": 188, "someon": [376, 380, 390, 1035], "someth": [187, 233, 287, 376, 379, 380, 384, 416, 924, 926, 1005, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "sometim": [105, 155, 186, 264, 270, 307, 352, 359, 364, 365, 376, 378, 382, 389, 390, 408, 410, 413, 415, 416, 450, 536, 537, 540, 542, 543, 873, 874, 875, 923, 1000, 1001, 1002, 1005, 1010, 1015, 1016, 1020, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "somewhat": [347, 359, 365, 376, 413, 415, 910, 913, 1001, 1020, 1021], "somewher": [382, 1005], "sommer": 1053, "somya": 1043, "son": [373, 995], "song": 1002, "soni": [52, 1045, 1047], "sonni": 1040, "sonniv": [1050, 1051], "sonoiya": 1045, "soon": [113, 390], "sooner": 1052, "sophist": [995, 1007], "sorbaro": 1040, "sorensen": 413, "soriano": 1044, "sornarajah": 1040, "sorri": 1043, "sorro": 1044, "sorski": [1049, 1050], "sort": [2, 44, 48, 50, 52, 59, 62, 94, 106, 133, 138, 144, 147, 154, 169, 176, 194, 198, 212, 213, 230, 248, 270, 271, 274, 285, 302, 346, 351, 357, 376, 380, 384, 385, 390, 412, 415, 416, 418, 536, 543, 557, 568, 584, 597, 614, 621, 701, 716, 722, 733, 734, 742, 758, 787, 788, 791, 793, 804, 831, 843, 844, 845, 846, 847, 848, 849, 856, 858, 859, 860, 863, 873, 879, 881, 882, 885, 887, 889, 897, 910, 913, 952, 958, 1001, 1008, 1011, 1015, 1029, 1035, 1039, 1045, 1046, 1047, 1049, 1050, 1053], "sort_graph_by_row_valu": [2, 385, 1050], "sort_index": 287, "sort_result": [848, 849, 856, 858, 859, 860, 1047], "sort_valu": [104, 189, 190, 253, 260, 270, 281, 316, 317], "sorted_idx": [148, 319], "sorted_importances_idx": 189, "sortofamudkip": [1050, 1051], "sought": 785, "soumirai": 1045, "sound": [169, 359], "sounder": 1041, "sourav": [1042, 1045], "sourc": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 370, 373, 375, 376, 377, 379, 380, 382, 384, 385, 388, 389, 394, 402, 405, 409, 413, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 1002, 1015, 1021, 1024, 1026, 1029, 1045, 1049, 1053], "south": [51, 150, 187, 303, 371, 414], "sp": [44, 187, 326, 995], "sp_version": 674, "space": [2, 38, 44, 48, 50, 58, 68, 81, 87, 91, 92, 94, 95, 97, 99, 103, 104, 107, 117, 121, 123, 127, 129, 131, 140, 143, 147, 153, 166, 171, 177, 192, 198, 213, 232, 233, 234, 236, 243, 244, 245, 249, 250, 256, 261, 278, 281, 282, 290, 299, 300, 312, 321, 344, 351, 352, 353, 358, 359, 363, 368, 371, 372, 373, 376, 383, 388, 389, 390, 405, 408, 411, 413, 414, 415, 416, 418, 444, 448, 449, 450, 453, 463, 465, 466, 467, 468, 483, 484, 485, 489, 500, 534, 536, 537, 540, 541, 542, 543, 545, 546, 551, 575, 585, 591, 592, 594, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 636, 637, 642, 644, 645, 646, 647, 692, 693, 694, 696, 697, 698, 700, 703, 804, 807, 808, 810, 818, 827, 838, 848, 849, 856, 857, 858, 859, 868, 873, 874, 880, 885, 900, 901, 902, 921, 956, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1030, 1031, 1035, 1036, 1038, 1043, 1044, 1045, 1049, 1050, 1051], "spacek": 1040, "spam": [584, 713, 745, 843, 1005, 1007, 1029], "span": [53, 89, 110, 147, 244, 264, 267, 371, 408, 416, 551, 640, 804, 807, 1005], "spanish": 1024, "spannbauer": 1047, "sparciti": 352, "spare": [370, 678, 679], "spark": [371, 1025], "sparrai": 1052, "spars": [2, 26, 46, 47, 48, 52, 54, 56, 58, 67, 75, 76, 89, 91, 103, 109, 110, 111, 120, 122, 140, 153, 184, 193, 194, 200, 201, 202, 205, 207, 208, 211, 228, 243, 245, 271, 277, 283, 290, 308, 320, 324, 327, 333, 350, 353, 358, 363, 368, 370, 371, 372, 376, 378, 379, 380, 381, 388, 389, 390, 402, 408, 409, 415, 416, 418, 419, 423, 430, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 458, 460, 461, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 488, 489, 490, 498, 499, 505, 510, 525, 526, 528, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 588, 589, 591, 592, 593, 594, 596, 597, 606, 607, 608, 609, 610, 611, 612, 633, 634, 635, 637, 642, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 716, 717, 718, 733, 734, 735, 738, 742, 743, 744, 758, 759, 764, 765, 767, 768, 770, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 796, 797, 800, 803, 804, 807, 808, 818, 825, 826, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 871, 872, 873, 875, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 930, 932, 933, 934, 935, 940, 949, 952, 953, 956, 958, 959, 967, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 993, 995, 998, 1001, 1002, 1003, 1005, 1006, 1008, 1018, 1020, 1021, 1026, 1027, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "sparse_cg": [351, 676, 678, 691, 1001, 1036, 1042, 1044, 1045, 1049, 1051], "sparse_coef_": [650, 656, 664, 666, 1035], "sparse_encod": [2, 544, 654, 655, 656, 657, 658, 659, 660, 667, 668, 669, 686, 687, 688, 689, 690, 1035, 1042, 1043, 1045, 1049], "sparse_encode_parallel": 1035, "sparse_format": [529, 1052], "sparse_func": [1041, 1047], "sparse_input_": 875, "sparse_lasso": 199, "sparse_output": [44, 144, 253, 316, 323, 326, 568, 875, 879, 881, 887, 892, 1015, 1050, 1051], "sparse_output_": [465, 553], "sparse_symmetric_arrai": 990, "sparse_threshold": [188, 465, 468, 1043], "sparsearrai": 1046, "sparsecod": [2, 130, 413, 533, 539, 542, 550, 1042, 1043, 1045, 1047, 1049], "sparsecodingmixin": 1035, "sparsefunc": [2, 385, 979, 980, 981, 982, 983, 984, 985, 1048], "sparsefuncs_fast": [2, 385, 986, 987], "sparsepca": [2, 121, 533, 535, 536, 537, 539, 541, 542, 543, 544, 547, 548, 1035, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1053], "sparser": [89, 194, 204, 283, 413, 472, 479, 541, 545, 1001, 1008, 1019], "sparserandomproject": [2, 233, 243, 900, 1017, 1036, 1041, 1049, 1051, 1052], "sparsetool": 1042, "sparsifi": [47, 198, 363, 662, 663, 670, 671, 672, 680, 681, 682, 908, 988, 1037], "sparsiti": [2, 54, 67, 114, 184, 193, 198, 201, 206, 223, 227, 228, 245, 347, 352, 363, 390, 410, 413, 415, 417, 504, 529, 533, 539, 540, 541, 542, 545, 547, 548, 549, 650, 656, 662, 680, 682, 725, 727, 728, 877, 883, 888, 893, 998, 1001, 1008, 1015, 1026, 1037], "sparsity_en_lr": 204, "sparsity_l1_lr": 204, "sparsity_l2_lr": 204, "sparsity_ratio": 363, "spatial": [82, 83, 89, 190, 198, 229, 307, 371, 390, 408, 419, 445, 447, 451, 453, 458, 683, 696, 764, 767, 782, 783, 784, 785, 796, 797, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 1001, 1008, 1015, 1037, 1041, 1048, 1051], "spawn": [363, 388, 804, 818, 829, 830, 831, 1046], "spdx": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358], "speak": [352, 363, 376, 1019], "spearman": [190, 639, 640, 996], "spearmanr": 190, "spec": [1050, 1051], "speci": [2, 43, 127, 184, 249, 291, 369, 414, 500, 710, 793, 853, 912, 923, 1005, 1011, 1026, 1031, 1035], "special": [146, 187, 203, 230, 287, 300, 340, 370, 372, 378, 382, 388, 390, 408, 411, 413, 465, 468, 555, 557, 561, 829, 920, 994, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1021, 1042, 1045, 1047, 1049], "special_charact": [920, 1021], "species_nam": [51, 303], "specif": [2, 44, 51, 52, 59, 65, 71, 80, 89, 96, 99, 103, 105, 141, 150, 155, 176, 179, 184, 187, 188, 192, 216, 230, 264, 265, 270, 287, 310, 319, 320, 324, 327, 344, 351, 352, 353, 359, 363, 364, 371, 376, 378, 379, 381, 382, 384, 388, 390, 394, 402, 404, 408, 409, 412, 413, 415, 416, 417, 418, 432, 498, 505, 536, 553, 559, 566, 569, 570, 571, 572, 576, 591, 594, 596, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 629, 644, 647, 650, 651, 656, 662, 676, 691, 701, 703, 716, 717, 804, 805, 806, 811, 812, 813, 818, 831, 844, 925, 943, 945, 946, 947, 967, 980, 981, 982, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1019, 1021, 1022, 1023, 1025, 1028, 1035, 1039, 1043, 1044, 1045, 1046, 1049, 1050, 1052], "specifi": [2, 44, 59, 65, 89, 121, 144, 145, 150, 172, 178, 188, 202, 213, 220, 255, 264, 278, 363, 364, 370, 376, 384, 385, 389, 390, 399, 402, 406, 408, 409, 412, 413, 415, 417, 418, 420, 422, 438, 442, 446, 451, 453, 464, 465, 468, 470, 471, 473, 474, 475, 476, 477, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 505, 517, 529, 533, 535, 539, 540, 542, 543, 548, 549, 554, 559, 561, 562, 563, 564, 566, 569, 570, 586, 587, 596, 597, 600, 605, 614, 615, 624, 635, 636, 637, 642, 647, 650, 651, 652, 655, 656, 657, 659, 660, 662, 663, 664, 665, 666, 667, 669, 672, 673, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 691, 695, 702, 704, 706, 713, 715, 733, 734, 742, 746, 758, 775, 783, 784, 787, 788, 791, 804, 807, 808, 810, 811, 813, 817, 818, 821, 826, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 843, 844, 846, 847, 848, 849, 853, 858, 881, 882, 883, 886, 887, 889, 904, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 947, 954, 988, 995, 1001, 1002, 1004, 1005, 1008, 1012, 1013, 1015, 1018, 1019, 1020, 1035, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "spector": 412, "spectral": [2, 54, 57, 72, 80, 81, 83, 89, 103, 184, 233, 234, 331, 333, 351, 352, 353, 376, 416, 450, 452, 453, 454, 463, 470, 471, 472, 473, 474, 475, 476, 477, 489, 513, 515, 594, 692, 693, 694, 695, 696, 699, 723, 799, 1008, 1018, 1026, 1030, 1031, 1035, 1036], "spectral_clust": [2, 81, 100, 1043, 1045, 1047, 1048, 1049, 1050, 1052], "spectral_embed": [2, 390, 1002, 1036, 1039, 1041, 1043, 1045, 1048, 1049, 1050, 1052], "spectralbiclust": [2, 405, 454, 1037, 1041, 1042, 1046], "spectralclust": [2, 80, 323, 408, 441, 1008, 1035, 1036, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "spectralcoclust": [2, 58, 60, 405, 452, 1037, 1042, 1046], "spectralembed": [2, 86, 232, 233, 234, 692, 693, 694, 696, 1002, 1036, 1041, 1045, 1049, 1050, 1052], "spectrum": [106, 526, 546, 699, 952, 1029, 1043], "speech": [416, 1005], "speed": [81, 82, 91, 103, 124, 133, 141, 183, 188, 199, 202, 206, 249, 290, 321, 330, 351, 353, 365, 376, 379, 385, 388, 390, 404, 406, 408, 413, 415, 416, 419, 444, 445, 448, 449, 450, 451, 453, 458, 460, 461, 462, 463, 533, 534, 614, 631, 636, 637, 638, 643, 650, 651, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 685, 688, 696, 801, 802, 810, 832, 848, 849, 850, 851, 852, 854, 856, 858, 859, 860, 883, 952, 994, 997, 1002, 1004, 1006, 1019, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "speedi": 363, "speedup": [326, 363, 413, 415, 654, 658, 661, 1035, 1036, 1037, 1038, 1050], "speer": 1037, "spell": 416, "spend": 416, "spent": [290, 377, 382, 832, 1050], "sperret6": 1053, "sphere": [135, 184, 231, 232, 235, 236, 237, 290, 352, 414, 521, 592, 692, 693, 694, 695, 696, 768, 937, 999, 1003, 1008, 1026], "sphere_data": 234, "spheric": [71, 91, 116, 151, 234, 257, 259, 260, 303, 372, 768, 801, 802, 1001, 1004, 1008], "sphinx": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 364, 380, 390, 394, 401, 1035, 1042], "sphinxcontrib": [376, 394, 401], "sphinxext": [376, 394, 401], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1035, "spidlen": [696, 1002], "spie": 373, "spielman": 1045, "spike": 188, "spikebh": 1049, "spikhalskii": 1040, "spiki": 44, "spin": 384, "spine": [47, 55, 71, 223, 310, 704, 706], "spirit": 413, "spite": 1007, "spline": [2, 184, 193, 194, 285, 295, 518, 519, 520, 676, 869, 883, 887, 1024, 1026, 1048], "spline_": 44, "splines_df": 44, "splinetransform": [2, 44, 213, 249, 322, 883, 1015, 1048, 1050, 1051], "split": [2, 44, 45, 46, 51, 53, 55, 56, 62, 64, 65, 68, 69, 103, 126, 135, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 160, 165, 186, 187, 190, 198, 208, 209, 212, 215, 220, 230, 240, 249, 256, 257, 263, 264, 265, 268, 270, 275, 277, 280, 284, 287, 293, 299, 305, 307, 311, 312, 317, 323, 325, 332, 340, 351, 353, 358, 371, 383, 389, 390, 394, 399, 406, 407, 408, 413, 415, 416, 417, 438, 443, 444, 473, 474, 480, 481, 499, 533, 539, 541, 544, 548, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 591, 592, 594, 597, 605, 651, 655, 657, 659, 665, 667, 669, 677, 679, 699, 708, 709, 721, 735, 741, 761, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 842, 848, 849, 865, 866, 889, 893, 894, 896, 897, 898, 899, 916, 917, 918, 919, 975, 994, 997, 1001, 1002, 1008, 1011, 1012, 1013, 1015, 1019, 1021, 1025, 1031, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "split0_test_precis": [804, 818], "split0_test_scor": [804, 818, 1041], "split0_train_scor": [804, 818, 1041], "split1_test_scor": [804, 818], "split1_train_scor": [804, 818], "split2_test_scor": 804, "split_cod": 413, "split_sign": [533, 539, 544], "splitter": [44, 246, 325, 326, 390, 399, 412, 438, 473, 566, 567, 569, 570, 597, 605, 651, 655, 657, 659, 663, 665, 667, 669, 677, 679, 804, 806, 807, 808, 809, 810, 818, 819, 820, 823, 824, 827, 828, 829, 830, 831, 832, 833, 835, 839, 842, 916, 917, 918, 919, 1021, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "splot": [256, 261], "splt": 213, "sply88": 1049, "spmatrix": 1052, "spolski": 416, "sport": [58, 371], "spot": [87, 241, 408], "spottabl": 382, "spread": [44, 76, 234, 271, 310, 329, 330, 331, 334, 347, 363, 376, 408, 453, 463, 517, 885, 897, 905, 1005], "spring": [53, 188], "springboard": 1024, "springer": [138, 139, 149, 176, 269, 406, 408, 412, 413, 415, 522, 537, 561, 562, 694, 698, 700, 709, 724, 730, 744, 745, 760, 801, 855, 916, 917, 1002, 1005, 1006, 1012, 1021], "sprint": [375, 376, 1035], "spuriou": [340, 384, 1015, 1048, 1049, 1050], "spy": 207, "sq": 773, "sqeuclidean": [74, 451, 458, 782, 783, 784], "sqft": 249, "sql": 370, "sqr": 76, "sqrt": [52, 112, 113, 114, 124, 130, 139, 160, 190, 194, 196, 235, 237, 251, 255, 256, 257, 260, 261, 270, 345, 347, 408, 415, 416, 418, 464, 470, 471, 472, 473, 474, 475, 476, 477, 540, 542, 549, 559, 560, 561, 562, 566, 567, 623, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 703, 735, 767, 768, 773, 888, 901, 916, 917, 918, 919, 997, 1001, 1002, 1005, 1007, 1017, 1049], "squar": [2, 44, 45, 53, 95, 104, 111, 112, 113, 115, 116, 122, 123, 131, 138, 148, 150, 151, 158, 171, 176, 184, 186, 187, 193, 194, 196, 197, 198, 202, 203, 212, 214, 217, 222, 229, 230, 242, 243, 245, 258, 266, 285, 314, 321, 322, 324, 337, 351, 368, 373, 376, 382, 385, 390, 408, 410, 411, 413, 414, 415, 419, 420, 431, 441, 443, 444, 445, 447, 448, 450, 451, 455, 458, 460, 461, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 503, 533, 539, 541, 543, 545, 547, 548, 549, 551, 554, 556, 558, 560, 561, 562, 564, 567, 570, 572, 593, 594, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 615, 619, 626, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 687, 689, 690, 691, 692, 694, 696, 698, 700, 713, 725, 726, 727, 728, 754, 755, 762, 763, 767, 773, 774, 789, 794, 795, 834, 841, 842, 850, 851, 854, 855, 856, 858, 859, 866, 869, 888, 908, 909, 911, 913, 914, 915, 917, 919, 950, 977, 990, 996, 998, 999, 1008, 1009, 1013, 1019, 1021, 1026, 1027, 1031, 1035, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "square_dist": 1047, "squared_epsilon_insensit": [671, 680, 682, 909, 1001, 1041], "squared_error": [47, 53, 130, 147, 148, 322, 415, 560, 561, 562, 564, 567, 675, 680, 682, 697, 917, 919, 1019, 1021, 1048, 1051, 1052], "squared_hing": [219, 347, 670, 680, 908, 915, 1001, 1020], "squared_loss": [388, 1048], "squareform": 190, "squash": [249, 380, 418, 533, 539, 544, 550], "squeez": [108, 177, 178, 249, 290, 310], "sr": 1029, "sr_color": 236, "sr_err": 236, "sr_lle": 236, "sr_point": 236, "sr_tsne": 236, "srajan": 1043, "sre": 1050, "srebro": 1019, "srep30750": 408, "sri": [675, 1001, 1042, 1043], "sridharan": 1040, "sriharsha": [1043, 1044], "srikantan": 1001, "srimukh": 1047, "srinath": [1049, 1050], "srinivasan": [1043, 1046], "sripada": 1047, "srivastava": [1038, 1050, 1053], "srivatsan": [1041, 1042, 1045], "srvanrel": 1041, "sr\u0161e\u0148": 1053, "ss": 412, "sse": 444, "sseg": 1040, "ssrn": [212, 230], "sss": 824, "ssvm": 388, "st": [82, 101, 270, 1038, 1041, 1043], "st30": 334, "st50": 334, "st_pipelin": 333, "sta4273": 648, "stabil": [73, 139, 145, 187, 233, 275, 310, 347, 352, 390, 405, 447, 654, 658, 674, 846, 865, 866, 884, 896, 951, 995, 1001, 1004, 1015, 1025, 1035, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "stabilis": 194, "stabl": [44, 65, 187, 207, 210, 214, 290, 320, 347, 352, 374, 376, 378, 380, 385, 390, 394, 412, 416, 420, 472, 473, 479, 535, 543, 659, 676, 678, 691, 696, 728, 756, 951, 952, 1001, 1007, 1008, 1015, 1025, 1035, 1036, 1041, 1046, 1048, 1052], "stack": [2, 14, 108, 134, 136, 144, 158, 182, 184, 241, 295, 358, 375, 384, 388, 390, 414, 465, 467, 468, 498, 517, 564, 567, 569, 570, 616, 631, 632, 634, 657, 677, 705, 829, 831, 869, 873, 881, 882, 888, 978, 995, 1026, 1027, 1028, 1031, 1035, 1038, 1042, 1043, 1044, 1045, 1046], "stack_method": [415, 569], "stack_method_": [415, 569, 570], "stacking_regressor": 155, "stackingclassifi": [2, 319, 359, 390, 399, 415, 570, 995, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "stackingregressor": [2, 155, 319, 390, 399, 415, 569, 995, 1045, 1046, 1047, 1048, 1049, 1052], "stackoverflow": [381, 384, 388], "stade": 1039, "stage": [0, 47, 64, 105, 135, 140, 145, 148, 264, 380, 390, 404, 408, 415, 449, 555, 556, 561, 562, 563, 564, 591, 592, 594, 605, 1002, 1015, 1023, 1043, 1047], "staged_decision_funct": [555, 561, 563], "staged_predict": [135, 145, 148, 415, 555, 556, 561, 562, 563, 564, 1035, 1047], "staged_predict_proba": [146, 149, 555, 561, 563, 1035], "staged_scor": [555, 556], "stagewis": 135, "stagg": 1048, "stai": [44, 53, 64, 73, 130, 187, 352, 375, 376, 380, 390, 391, 1010, 1028, 1041], "stairstep": 277, "stalei": [1044, 1045], "stall": [375, 379], "stallei": 1047, "stan": [846, 1052], "stand": [273, 353, 380, 388, 413, 533, 539, 547, 548, 599, 612, 682, 709, 721, 740, 741, 761, 790, 792, 799, 1004, 1005, 1011], "standalon": [382, 662, 908], "standard": [2, 51, 52, 53, 59, 64, 69, 71, 89, 95, 103, 104, 106, 112, 113, 117, 122, 135, 138, 140, 141, 142, 143, 151, 155, 169, 171, 176, 178, 180, 187, 194, 201, 202, 210, 212, 221, 232, 233, 234, 244, 249, 260, 264, 265, 268, 269, 270, 271, 273, 310, 315, 338, 351, 363, 364, 368, 369, 370, 372, 373, 374, 376, 378, 379, 381, 382, 385, 388, 390, 394, 402, 404, 408, 410, 411, 412, 416, 418, 447, 465, 469, 473, 489, 498, 503, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 526, 527, 532, 534, 537, 543, 554, 593, 597, 615, 638, 648, 649, 676, 677, 678, 679, 680, 682, 691, 693, 697, 792, 810, 825, 827, 845, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 872, 877, 878, 881, 884, 885, 886, 888, 896, 897, 898, 899, 906, 908, 909, 934, 994, 997, 1001, 1002, 1005, 1007, 1008, 1009, 1011, 1019, 1020, 1025, 1029, 1031, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1053], "standard_coef_": 1046, "standard_intercept_": 1046, "standard_norm": [359, 691], "standard_scal": 251, "standard_t": 123, "standardscal": [2, 46, 50, 68, 80, 83, 89, 92, 96, 104, 106, 117, 131, 155, 169, 187, 194, 200, 202, 204, 212, 228, 230, 240, 241, 249, 250, 251, 253, 264, 267, 277, 284, 293, 298, 299, 305, 312, 315, 319, 320, 322, 323, 324, 326, 327, 340, 343, 359, 365, 376, 378, 381, 385, 389, 409, 412, 429, 467, 468, 569, 680, 682, 868, 869, 872, 885, 899, 908, 909, 910, 911, 913, 914, 995, 1002, 1009, 1015, 1019, 1020, 1022, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "standpoint": 84, "stanford": [373, 653, 686, 687, 843, 846, 847, 901, 1003], "stanislav": [1050, 1051], "stanlei": [1049, 1050, 1051], "stap": 1043, "stapl": 1039, "star": [71, 119, 158, 376], "stareh": 1046, "start": [0, 44, 47, 50, 52, 53, 59, 64, 87, 92, 98, 101, 117, 124, 140, 145, 147, 166, 169, 176, 178, 188, 192, 195, 196, 202, 212, 213, 214, 220, 230, 232, 236, 244, 246, 258, 264, 270, 278, 290, 323, 325, 330, 351, 358, 359, 363, 364, 365, 376, 377, 378, 380, 381, 382, 388, 390, 394, 405, 408, 412, 413, 417, 418, 441, 443, 451, 455, 457, 540, 614, 621, 636, 649, 657, 663, 670, 671, 672, 680, 681, 682, 694, 698, 785, 786, 793, 801, 802, 804, 807, 808, 818, 850, 851, 852, 854, 856, 864, 958, 988, 994, 1001, 1004, 1009, 1010, 1019, 1029, 1038, 1040, 1043, 1045, 1047, 1048, 1049, 1050, 1051], "start_": 48, "start_bodi": 48, "start_d": 48, "start_idx": [52, 235], "start_reut": 48, "start_tim": [47, 50, 58, 142, 145, 155, 171, 202, 233], "start_titl": 48, "start_top": 48, "startstart": 396, "startswith": [53, 103, 233, 303], "startup": 1029, "stat": [2, 46, 48, 50, 103, 112, 171, 190, 267, 270, 278, 282, 295, 321, 329, 330, 373, 385, 389, 410, 475, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 686, 687, 808, 816, 818, 916, 917, 954, 994, 1001, 1015, 1042, 1044, 1048], "stat_learn_tut_index": [160, 161, 162], "state": [38, 87, 91, 103, 105, 112, 150, 214, 243, 251, 256, 264, 276, 321, 359, 364, 365, 376, 378, 382, 384, 388, 390, 391, 407, 415, 416, 421, 441, 444, 448, 450, 455, 460, 476, 546, 592, 683, 807, 808, 816, 818, 820, 848, 849, 855, 903, 904, 937, 994, 995, 1001, 1007, 1010, 1017, 1029, 1037, 1039, 1041, 1043, 1045, 1048, 1051], "state_to_print": 377, "stateless": [103, 352, 365, 390, 416, 585, 586, 592, 642, 871, 872, 880, 927, 988, 1015, 1051], "statement": [187, 378, 381, 384, 388, 390, 413], "static": [376, 378, 382, 384, 650, 651, 656, 657, 664, 665, 666, 667], "stationari": [175, 418, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "statist": [2, 48, 53, 113, 135, 138, 139, 149, 164, 168, 184, 186, 187, 188, 189, 198, 200, 216, 262, 264, 267, 269, 272, 279, 287, 289, 310, 316, 321, 359, 369, 371, 373, 382, 390, 406, 407, 408, 409, 410, 412, 413, 415, 417, 433, 470, 475, 495, 496, 518, 519, 520, 522, 524, 543, 555, 561, 562, 564, 607, 608, 609, 612, 631, 634, 638, 639, 648, 653, 660, 694, 698, 700, 714, 720, 725, 727, 728, 735, 747, 792, 804, 820, 838, 855, 865, 866, 884, 885, 886, 888, 893, 896, 897, 899, 913, 916, 917, 979, 994, 995, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1012, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1026, 1040, 1043, 1046, 1047, 1049, 1050, 1053], "statistician": [390, 888], "statistics_": 634, "statlearnspars": [725, 727, 728], "statlib": 371, "statnikov": 1005, "statsmodel": [1001, 1024], "statu": [53, 133, 370, 394, 498, 577, 848, 849, 945, 1053], "statweb": [653, 686, 687], "staub": 1041, "staubda": 1038, "std": [44, 51, 52, 53, 73, 81, 84, 88, 95, 100, 111, 113, 114, 122, 123, 124, 142, 143, 144, 150, 155, 177, 180, 182, 183, 187, 195, 201, 221, 243, 268, 269, 270, 272, 273, 275, 278, 280, 284, 285, 316, 332, 343, 352, 359, 390, 408, 412, 415, 517, 609, 612, 833, 888, 899, 1015, 1043, 1047], "std_": [274, 1040], "std_auc": 280, "std_display_styl": [245, 272, 810, 827], "std_error": 160, "std_fit_tim": [141, 292, 804, 818], "std_i": 187, "std_precis": 268, "std_predict": 178, "std_predictions_gpr": 171, "std_recal": 268, "std_scaler": 327, "std_score": [352, 1048], "std_score_tim": [141, 271, 804, 818], "std_test_precis": 268, "std_test_recal": 268, "std_test_scor": [104, 106, 141, 160, 168, 269, 270, 271, 278, 292, 473, 597, 804, 818, 1041, 1048], "std_time": 1041, "std_tpr": 280, "std_train_scor": [804, 818, 1041], "std_y_pr": 176, "stderr": [52, 837], "stdin": 384, "stdout": [48, 121, 220, 837, 857, 865, 866], "stds_california": 183, "stds_diabet": 183, "steadi": [903, 904], "steelblu": [122, 123, 157], "steep": [2, 172, 188, 279, 280, 408, 412, 418, 451, 457], "stef": [631, 995], "stefan": [1038, 1039, 1043, 1045], "stefani": [0, 1048, 1050, 1051, 1052, 1053], "stefanini": 1049, "stefano": 1037, "steffen": 1053, "stehl": [1049, 1050], "stein": 1041, "steinbach": [408, 1050, 1052], "steinfurt": [1045, 1047], "steingold": [1042, 1043], "steinlei": [408, 709], "steinley2004": 709, "stella": [408, 453, 463], "stellalin7": 1050, "stem": [138, 145, 189, 205, 211, 261, 283, 412, 416, 997, 1007], "step": [53, 59, 64, 70, 78, 88, 89, 92, 101, 104, 106, 113, 117, 124, 128, 135, 143, 144, 145, 155, 166, 167, 168, 173, 176, 187, 189, 212, 220, 230, 244, 253, 261, 268, 277, 279, 290, 292, 293, 298, 305, 308, 312, 315, 323, 334, 336, 340, 352, 353, 355, 359, 363, 371, 374, 375, 376, 378, 379, 381, 384, 388, 390, 402, 405, 406, 408, 410, 411, 413, 415, 416, 417, 443, 448, 450, 538, 539, 540, 541, 548, 565, 591, 592, 594, 596, 597, 600, 609, 613, 631, 648, 652, 670, 671, 673, 680, 682, 683, 684, 698, 704, 801, 802, 804, 807, 808, 818, 839, 840, 841, 842, 864, 865, 866, 868, 869, 871, 908, 909, 910, 911, 913, 914, 951, 952, 975, 979, 995, 1001, 1004, 1009, 1010, 1015, 1019, 1021, 1022, 1024, 1028, 1035, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1053], "stephan": [712, 1038, 1044, 1045, 1047], "stephani": 1046, "stephen": [1029, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "stepwis": [150, 639, 658, 659, 660, 686, 687, 1001], "stern": [792, 1005], "steve": [1037, 1039, 1043, 1048, 1050], "steven": [1037, 1038, 1040, 1042, 1043, 1048, 1050, 1051, 1053], "steward": 1042, "stewart": [1040, 1045, 1048, 1050, 1053], "stick": [49, 801, 1004], "stijn": 1042, "stikhin": 1045, "still": [44, 53, 65, 69, 80, 87, 89, 91, 96, 114, 125, 127, 147, 150, 155, 171, 177, 186, 187, 189, 190, 194, 198, 201, 212, 214, 230, 244, 273, 279, 283, 310, 321, 322, 325, 352, 359, 365, 370, 375, 376, 380, 381, 382, 384, 390, 408, 412, 415, 416, 419, 441, 445, 455, 475, 498, 631, 636, 639, 641, 662, 663, 721, 760, 782, 785, 796, 797, 806, 807, 808, 821, 824, 886, 888, 908, 932, 957, 994, 995, 999, 1001, 1004, 1005, 1008, 1011, 1013, 1020, 1021, 1023, 1025, 1028, 1029, 1035, 1037, 1040, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "stine": [1043, 1044], "stochast": [2, 47, 92, 145, 146, 149, 161, 184, 192, 193, 200, 234, 236, 239, 244, 296, 298, 299, 304, 307, 322, 339, 408, 413, 415, 463, 489, 498, 504, 505, 506, 516, 524, 538, 546, 561, 562, 607, 631, 635, 643, 662, 663, 672, 676, 678, 680, 681, 682, 683, 691, 692, 693, 694, 696, 834, 857, 864, 865, 866, 869, 878, 912, 951, 952, 978, 994, 1008, 1009, 1011, 1026, 1027, 1030, 1031, 1035, 1036, 1039, 1040, 1042, 1044, 1046], "stochastic_gradi": [1037, 1038, 1044], "stock": [43, 81, 86, 184, 232, 233, 408, 410, 455, 472, 473, 693, 1002, 1026], "stogbauer": [610, 611], "stojanov": [1049, 1050], "stolbunov": 1040, "stone": [376, 916, 917, 1021], "stop": [44, 47, 52, 56, 80, 96, 134, 135, 141, 176, 178, 184, 188, 193, 200, 214, 314, 320, 376, 378, 384, 385, 390, 408, 413, 415, 417, 441, 442, 444, 446, 448, 450, 453, 455, 463, 464, 472, 473, 479, 483, 484, 485, 491, 498, 510, 511, 534, 538, 539, 540, 541, 542, 545, 547, 548, 549, 555, 556, 559, 560, 561, 562, 563, 564, 566, 567, 591, 592, 594, 605, 621, 631, 648, 649, 650, 652, 653, 656, 660, 662, 663, 670, 671, 672, 673, 675, 680, 681, 682, 684, 695, 696, 699, 718, 754, 801, 802, 834, 865, 866, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 958, 978, 994, 1001, 1009, 1010, 1020, 1021, 1025, 1026, 1027, 1029, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "stop_n_inli": [675, 1001], "stop_prob": 675, "stop_scor": [675, 1001], "stop_word": [55, 58, 351, 352, 416, 591, 592, 594], "stop_words_": 1053, "stopiter": 1047, "stopword": 490, "storag": [0, 353, 390, 662, 663, 670, 671, 672, 680, 681, 682, 908, 1008, 1020, 1038, 1043], "storch": 1044, "store": [2, 69, 87, 103, 105, 113, 166, 179, 192, 199, 202, 216, 233, 240, 250, 260, 264, 275, 279, 329, 353, 358, 363, 370, 371, 376, 378, 383, 384, 385, 388, 390, 402, 404, 409, 411, 413, 415, 416, 418, 419, 439, 441, 445, 447, 451, 458, 465, 468, 470, 471, 474, 475, 476, 477, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 505, 510, 536, 537, 543, 551, 552, 557, 558, 559, 560, 565, 566, 567, 568, 571, 572, 588, 592, 614, 615, 631, 635, 636, 639, 653, 654, 658, 664, 665, 666, 667, 670, 671, 677, 679, 680, 681, 682, 692, 693, 694, 696, 701, 702, 704, 705, 706, 785, 801, 802, 804, 810, 818, 826, 827, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 863, 879, 886, 888, 889, 903, 904, 905, 934, 935, 961, 962, 975, 978, 990, 995, 997, 1001, 1006, 1008, 1017, 1020, 1021, 1024, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "store_cent": [447, 1052], "store_covari": [71, 551, 552, 1040, 1042], "store_cv_result": [264, 677, 679, 826, 1053], "store_cv_valu": [677, 679, 1043, 1046, 1053], "store_precis": [70, 111, 470, 471, 474, 475, 476, 477], "stori": [186, 270, 287, 371, 1004], "stork": 999, "stott": 1043, "stoyanov": [1043, 1044], "str": [48, 50, 53, 92, 94, 129, 131, 143, 167, 230, 249, 270, 282, 290, 300, 338, 351, 370, 371, 385, 416, 419, 420, 424, 429, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 458, 465, 466, 467, 468, 469, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 579, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 621, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 696, 700, 701, 702, 703, 704, 706, 711, 713, 715, 717, 731, 733, 734, 736, 737, 742, 746, 775, 778, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 803, 804, 805, 806, 807, 808, 810, 811, 813, 815, 816, 818, 822, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 927, 929, 930, 933, 934, 935, 938, 941, 943, 945, 946, 948, 960, 961, 962, 964, 967, 988, 989, 992, 1050], "str_": [495, 502, 506, 512, 876], "strai": 1010, "straight": [126, 203, 210, 267, 344, 363], "straightforward": [311, 375, 407, 413, 1029], "straka": 1047, "strateg": 391, "strategi": [2, 31, 44, 53, 86, 88, 92, 95, 104, 144, 149, 150, 155, 161, 166, 168, 182, 183, 184, 189, 198, 202, 205, 212, 220, 230, 241, 249, 251, 262, 264, 269, 271, 273, 274, 275, 277, 278, 279, 280, 282, 284, 289, 304, 307, 309, 311, 312, 316, 317, 319, 320, 323, 348, 353, 362, 378, 382, 389, 390, 402, 407, 412, 415, 416, 417, 420, 438, 439, 440, 446, 448, 453, 463, 473, 504, 506, 514, 516, 524, 535, 540, 553, 554, 563, 564, 566, 567, 569, 570, 591, 592, 594, 595, 597, 605, 631, 632, 634, 638, 649, 651, 655, 657, 659, 665, 667, 669, 677, 679, 695, 699, 708, 715, 717, 736, 759, 761, 799, 804, 806, 807, 808, 810, 818, 821, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 865, 866, 873, 878, 889, 903, 908, 910, 913, 916, 917, 918, 919, 975, 994, 995, 1004, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1026, 1031, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "stratif": [805, 806, 812, 813, 820, 822, 823, 824, 975, 1044], "stratifi": [2, 45, 126, 142, 151, 165, 189, 227, 240, 249, 253, 264, 265, 270, 273, 279, 293, 298, 299, 319, 390, 407, 553, 561, 569, 570, 605, 663, 670, 672, 680, 803, 804, 807, 808, 810, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 842, 857, 865, 975, 1005, 1008, 1040, 1041, 1042, 1044, 1045, 1048], "stratifiedgroupkfold": [2, 265, 1048], "stratifiedkfold": [2, 168, 257, 265, 276, 280, 332, 412, 438, 569, 570, 597, 605, 663, 677, 804, 805, 807, 808, 809, 810, 812, 814, 818, 822, 824, 827, 828, 829, 830, 831, 832, 833, 835, 889, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1048], "stratifiedshufflesplit": [2, 265, 340, 412, 1035, 1036, 1041, 1042, 1048], "stream": [48, 408, 413, 416, 463, 592, 877, 878, 888, 997, 1043, 1046], "stream_reuters_docu": 48, "streamhandl": 1046, "streamlin": 1001, "street": [155, 373], "strehl": 408, "strength": [52, 155, 178, 201, 212, 216, 271, 283, 319, 363, 411, 415, 447, 569, 570, 647, 652, 653, 656, 662, 663, 673, 676, 677, 678, 679, 680, 682, 684, 691, 787, 865, 866, 908, 909, 913, 914, 994, 1001, 1008, 1011, 1019, 1020], "stress": [694, 698, 1002, 1050], "stress_": 694, "stretch": [236, 259], "stretched_gaussian": 259, "strickland": 1041, "strict": [359, 374, 390, 404, 413, 505, 537, 591, 592, 594, 1001, 1035, 1044, 1047, 1053], "stricter": 182, "strictli": [65, 212, 230, 246, 310, 325, 352, 381, 390, 406, 411, 413, 415, 416, 510, 511, 537, 543, 546, 563, 564, 591, 594, 605, 646, 674, 675, 677, 679, 699, 704, 743, 770, 804, 807, 808, 814, 818, 831, 857, 884, 896, 900, 901, 903, 904, 908, 909, 913, 914, 950, 994, 996, 1001, 1005, 1015, 1019, 1036, 1046, 1051], "striebel": [1041, 1042], "strife": 1002, "strike": [145, 188, 216], "string": [2, 48, 104, 143, 179, 230, 241, 264, 274, 322, 327, 353, 363, 370, 371, 376, 377, 378, 382, 390, 409, 412, 415, 416, 417, 419, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 490, 491, 498, 507, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 621, 624, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 703, 713, 715, 723, 736, 766, 769, 775, 778, 782, 783, 784, 785, 796, 797, 801, 802, 804, 807, 808, 810, 818, 826, 827, 831, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 925, 932, 934, 935, 942, 943, 944, 968, 988, 989, 994, 995, 1005, 1018, 1020, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "strip": [55, 230, 352, 363, 370, 371, 498], "strip_acc": [591, 592, 594], "strip_accents_unicod": 1045, "stripe": 313, "stripplot": 187, "strive": [375, 391, 1029], "strong": [33, 44, 53, 88, 171, 184, 186, 187, 193, 206, 210, 216, 217, 218, 245, 289, 317, 347, 406, 413, 415, 526, 653, 676, 998, 999, 1001, 1002, 1004, 1012, 1020, 1026], "stronger": [271, 647, 656, 662, 663, 676, 677, 678, 679, 680, 682, 691], "strongest": [56, 206], "strongli": [63, 65, 114, 117, 124, 144, 148, 187, 197, 227, 246, 276, 351, 376, 393, 394, 406, 415, 662, 740, 799, 1001, 1002, 1031, 1044, 1051], "stroudsburg": [905, 1018], "strubel": 1048, "struct": [374, 390, 1038], "structur": [0, 2, 43, 49, 53, 54, 55, 56, 59, 60, 72, 76, 77, 79, 80, 81, 86, 87, 88, 89, 90, 96, 114, 131, 151, 170, 184, 232, 233, 236, 241, 246, 261, 265, 276, 295, 315, 320, 323, 328, 340, 344, 354, 355, 356, 363, 371, 373, 376, 378, 381, 388, 390, 391, 394, 405, 408, 410, 411, 412, 413, 415, 416, 417, 418, 442, 443, 446, 447, 451, 452, 453, 454, 455, 458, 463, 464, 472, 473, 498, 505, 506, 510, 513, 515, 516, 523, 532, 537, 543, 546, 565, 614, 615, 616, 620, 621, 622, 693, 700, 713, 717, 834, 856, 861, 888, 900, 901, 904, 916, 917, 918, 919, 922, 951, 952, 975, 978, 1002, 1004, 1005, 1008, 1010, 1011, 1015, 1018, 1021, 1024, 1025, 1026, 1035, 1036, 1038, 1039, 1041, 1045], "struggl": [375, 391, 408], "stuck": [95, 696, 1002], "student": [0, 123, 270, 1002, 1025, 1029], "studi": [44, 65, 94, 147, 212, 230, 273, 276, 277, 284, 351, 371, 373, 412, 417, 700, 712, 762, 763, 833, 1003, 1005, 1019], "studio": [374, 1029], "study_135": 370, "study_14": 370, "study_34": 370, "study_98": 370, "study_99": 370, "stuff": 1029, "stump": [137, 415, 561, 1046], "stupp": [1041, 1042], "stupperich": 1047, "sturla": 1037, "style": [113, 147, 202, 220, 230, 274, 376, 383, 408, 416, 444, 448, 460, 704, 810, 827, 934, 935, 948, 1035, 1038, 1049], "st\u00e9fan": 377, "st\u00e9phan": 1045, "st\u00e9phane": [1044, 1045, 1049, 1050], "su": [725, 727, 728], "sub": [48, 73, 87, 89, 91, 94, 103, 130, 246, 248, 255, 321, 329, 330, 337, 340, 348, 371, 376, 378, 382, 390, 407, 409, 415, 416, 438, 444, 445, 448, 450, 466, 483, 484, 485, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 593, 600, 614, 615, 631, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 867, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 925, 962, 1001, 1005, 1019, 1045, 1049, 1051, 1052], "sub_sampl": 538, "subclass": [133, 378, 418, 576, 970, 1040, 1043, 1048, 1052], "subclust": [408, 443], "subcluster_centers_": [78, 443], "subcluster_labels_": 443, "subcompon": [121, 413], "subdirectori": 376, "subdivid": [371, 418], "subestim": 378, "subestimator__c": 378, "subestimator__class_weight": 378, "subestimator__du": 378, "subestimator__fit_intercept": 378, "subestimator__intercept_sc": 378, "subestimator__l1_ratio": 378, "subestimator__max_it": 378, "subestimator__multi_class": 378, "subestimator__n_job": 378, "subestimator__penalti": 378, "subestimator__random_st": 378, "subestimator__solv": 378, "subestimator__tol": 378, "subestimator__verbos": 378, "subestimator__warm_start": 378, "subexpress": 53, "subfold": [2, 374, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 505, 1048], "subgraph": 405, "subhash": 1049, "subhodeep": [1035, 1036, 1037], "subi": [1044, 1045, 1050], "subject": [16, 103, 152, 261, 273, 371, 376, 378, 380, 388, 390, 391, 406, 410, 412, 413, 497, 662, 663, 689, 826, 871, 974, 996, 1001, 1020, 1023, 1044, 1045, 1048, 1050], "subject_body_extractor": 103, "subject_body_transform": 103, "subjectbodi": 103, "subjectbodyextractor": 103, "sublinear": [413, 593, 594], "sublinear_tf": [351, 413, 416, 593, 594], "submatric": 405, "submatrix": [405, 423, 452, 454], "submiss": 376, "submit": [373, 374, 375, 378, 379, 380, 381, 384, 390, 391, 394], "submitt": 375, "submodel": 412, "submodul": [380, 997, 1003, 1035], "subobject": [422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 807, 808, 818, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919], "suboptim": [412, 704, 706, 786, 793, 1008, 1043, 1051], "subpackag": [376, 380, 1039, 1044], "subplot": [44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 67, 68, 69, 71, 75, 79, 80, 84, 85, 87, 88, 89, 90, 91, 94, 96, 99, 100, 106, 108, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 126, 130, 131, 135, 137, 138, 140, 141, 142, 143, 144, 145, 148, 150, 152, 153, 155, 156, 157, 164, 173, 175, 180, 182, 183, 187, 188, 190, 192, 195, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 220, 225, 226, 228, 230, 232, 233, 236, 237, 239, 240, 242, 244, 245, 247, 248, 249, 250, 255, 256, 257, 258, 260, 261, 264, 265, 266, 267, 270, 272, 273, 275, 276, 277, 279, 280, 281, 283, 284, 285, 289, 290, 292, 293, 294, 295, 298, 299, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 323, 324, 332, 334, 337, 338, 339, 340, 344, 346, 347, 348, 349, 351, 352, 353, 355, 356, 372, 383], "subplot_kw": [232, 294], "subplot_spec": 383, "subplot_titl": 141, "subplots_adjust": [46, 47, 54, 55, 75, 78, 80, 84, 85, 88, 96, 98, 112, 114, 119, 123, 124, 130, 137, 138, 155, 187, 211, 212, 227, 230, 239, 247, 255, 257, 258, 261, 265, 281, 295, 303, 305, 308, 312, 321, 330, 337, 340], "subpopul": [229, 683, 1001], "subproblem": 1040, "subrahmanyam": [1035, 1038], "subramaniam": [1050, 1051, 1052], "subramaniyan": 1047, "subramanyam": 1042, "subrat": 1047, "subrat93": 1047, "subsampl": [130, 146, 149, 188, 229, 266, 317, 321, 459, 561, 562, 563, 564, 565, 636, 683, 705, 807, 808, 834, 873, 885, 897, 930, 940, 997, 1001, 1025, 1035, 1045, 1049, 1051, 1052, 1053], "subscrib": 1033, "subscript": [364, 1048], "subsect": [26, 364, 376], "subsequ": [47, 69, 92, 108, 124, 135, 166, 200, 214, 272, 275, 290, 292, 340, 359, 376, 378, 380, 382, 390, 404, 408, 409, 415, 418, 438, 498, 510, 555, 556, 561, 563, 564, 670, 672, 680, 807, 808, 836, 837, 840, 843, 844, 845, 846, 847, 865, 883, 887, 995, 1004, 1006, 1044, 1045, 1049, 1051, 1053], "subset": [2, 47, 58, 59, 64, 65, 69, 103, 104, 112, 113, 142, 143, 144, 145, 160, 166, 169, 188, 190, 202, 213, 227, 228, 229, 230, 242, 244, 248, 249, 264, 268, 271, 273, 279, 280, 282, 287, 315, 316, 321, 329, 333, 351, 352, 353, 359, 371, 376, 384, 388, 390, 405, 406, 408, 409, 412, 415, 416, 418, 425, 438, 450, 465, 467, 468, 470, 489, 490, 494, 495, 499, 510, 551, 552, 553, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 605, 614, 633, 643, 644, 645, 646, 655, 659, 662, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 701, 707, 708, 715, 717, 720, 722, 735, 738, 759, 761, 797, 800, 803, 806, 826, 832, 834, 836, 837, 838, 839, 843, 844, 845, 846, 847, 850, 855, 858, 865, 874, 903, 904, 908, 910, 913, 916, 918, 930, 973, 994, 1001, 1005, 1006, 1016, 1018, 1020, 1021, 1038, 1043, 1044, 1046, 1048, 1053], "subset_featur": 104, "subset_label": 230, "subsidi": 187, "subspac": [128, 411, 415, 453, 517, 557, 558, 695, 699, 952, 999, 1008, 1011, 1017, 1029], "substanti": [160, 292, 296, 297, 311, 376, 854, 1011, 1039, 1042], "substitut": [399, 988, 1041], "subtl": [349, 359, 1004, 1025], "subtleti": 1031, "subtract": [176, 187, 249, 411, 413, 444, 448, 460, 536, 648, 649, 1042, 1052], "subtre": [559, 560, 561, 562, 566, 567, 916, 917, 918, 919, 1021], "subwindow": 1021, "succe": [128, 150, 198, 284], "succeed": 376, "success": [2, 84, 164, 184, 262, 274, 277, 278, 346, 359, 403, 408, 412, 413, 415, 517, 566, 582, 804, 807, 808, 825, 913, 1008, 1026, 1029, 1031, 1047], "successfulli": [44, 54, 314, 375, 380, 402, 408, 416, 1019], "successor": [451, 457, 1021, 1024], "suchak": 1048, "sudo": [374, 394], "suen": 1009, "suffer": [117, 189, 290, 310, 352, 363, 408, 415, 546, 767, 1000, 1001, 1005, 1008, 1044], "suffic": [91, 92, 378], "suffici": [2, 65, 89, 155, 220, 285, 340, 363, 390, 408, 417, 534, 661, 686, 687, 820, 823, 824, 1006, 1008, 1025, 1044, 1050, 1051], "suffix": [394, 831, 1005, 1045], "suganthan": 373, "sugar": 373, "suggest": [112, 124, 138, 142, 187, 190, 270, 340, 363, 375, 376, 383, 390, 412, 413, 415, 470, 475, 567, 649, 833, 999, 1001, 1002, 1010, 1013, 1020, 1039, 1046, 1049, 1052], "suh": 1043, "suha": 1053, "suit": [59, 121, 153, 187, 212, 213, 239, 260, 322, 323, 325, 351, 364, 376, 378, 381, 382, 384, 394, 396, 402, 411, 413, 415, 451, 453, 505, 681, 845, 889, 945, 994, 997, 1002, 1005, 1007, 1008, 1019, 1024, 1025, 1029, 1042, 1049], "suitabl": [139, 147, 198, 199, 205, 216, 306, 353, 370, 371, 382, 385, 402, 408, 413, 416, 453, 463, 469, 488, 507, 510, 631, 639, 843, 844, 847, 882, 883, 906, 969, 973, 999, 1001, 1004, 1015, 1017, 1019, 1024, 1049, 1050], "sullivan": [1038, 1039, 1040], "sultan": 1049, "sum": [2, 31, 48, 56, 58, 64, 95, 113, 119, 124, 130, 146, 147, 165, 179, 187, 196, 212, 216, 227, 230, 233, 235, 249, 264, 279, 290, 297, 300, 323, 327, 333, 344, 345, 347, 351, 352, 353, 358, 373, 382, 390, 405, 406, 408, 410, 411, 413, 414, 415, 416, 418, 431, 443, 444, 448, 450, 460, 465, 466, 483, 484, 485, 517, 522, 525, 533, 536, 538, 539, 543, 546, 547, 548, 551, 552, 554, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 572, 593, 594, 615, 617, 627, 629, 639, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 680, 681, 682, 683, 685, 688, 694, 698, 700, 703, 713, 714, 723, 730, 745, 760, 762, 763, 767, 792, 836, 837, 841, 842, 851, 855, 859, 866, 867, 887, 888, 908, 909, 911, 914, 916, 917, 918, 919, 954, 979, 985, 990, 1001, 1005, 1006, 1007, 1008, 1020, 1021, 1038, 1039, 1041, 1043, 1044, 1046, 1051, 1052], "sum_": [270, 279, 347, 405, 406, 408, 413, 414, 415, 540, 542, 549, 700, 759, 999, 1001, 1002, 1005, 1007, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1021], "sum_gradi": 415, "sum_h": 1010, "sum_hessian": 415, "sum_i": [322, 415, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 996, 997, 1001, 1003, 1005, 1010], "sum_j": [650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 1001, 1005, 1010], "sum_k": [415, 551, 1021], "sum_m": 415, "sum_n": [277, 711, 1005], "sum_n_compon": [465, 867], "sum_over_featur": [1035, 1050], "sum_weight": 985, "sumit": 1049, "summar": [212, 261, 277, 279, 353, 376, 378, 393, 415, 523, 662, 698, 710, 711, 1001, 1002, 1005, 1011, 1031], "summari": [53, 323, 358, 359, 373, 388, 563, 564, 696, 717, 792, 921, 1003, 1006, 1024], "summaris": [241, 320], "summat": [1007, 1009], "summer": [0, 53, 176, 1035], "sun": [44, 150, 188, 1043, 1048, 1049], "sundai": 44, "sundaramahalingam": 1052, "sung": 1046, "sunglok": 1001, "sunita": 787, "sunitha": 1047, "sunmi": 1046, "super": [58, 63, 65, 378, 416, 1043], "superflu": 413, "superimpos": 413, "superior": 415, "superposit": 198, "supersed": [375, 1040], "superset": [412, 825, 1005], "supervis": [2, 28, 33, 35, 39, 58, 63, 65, 68, 73, 83, 88, 92, 117, 129, 140, 143, 150, 162, 173, 233, 244, 247, 257, 270, 299, 312, 321, 332, 336, 337, 340, 344, 352, 363, 371, 378, 389, 390, 406, 408, 411, 412, 413, 415, 416, 418, 438, 440, 465, 489, 505, 506, 555, 591, 593, 596, 597, 638, 680, 733, 805, 806, 809, 811, 812, 813, 814, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 833, 834, 857, 867, 868, 872, 882, 889, 903, 904, 905, 913, 999, 1002, 1005, 1007, 1008, 1011, 1015, 1016, 1020, 1021, 1022, 1024, 1026, 1028, 1031, 1035, 1041, 1047], "supervised_learning_tut": [161, 162], "supp": 384, "suppli": [150, 388, 408, 650, 934, 935, 1008, 1029, 1039, 1041, 1043, 1048], "support": [2, 40, 44, 47, 48, 49, 50, 62, 67, 69, 81, 104, 105, 134, 139, 154, 155, 165, 176, 188, 213, 222, 223, 224, 230, 244, 245, 246, 252, 263, 275, 277, 287, 290, 310, 314, 323, 327, 333, 334, 336, 337, 340, 341, 342, 343, 344, 345, 347, 363, 364, 365, 370, 374, 376, 378, 380, 381, 382, 383, 385, 386, 389, 390, 391, 402, 408, 412, 413, 416, 417, 418, 438, 441, 451, 453, 454, 465, 467, 468, 470, 475, 488, 498, 514, 540, 542, 543, 546, 549, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 617, 618, 619, 621, 623, 624, 626, 627, 629, 631, 635, 636, 637, 647, 649, 661, 662, 663, 674, 675, 676, 678, 679, 680, 681, 682, 691, 694, 698, 703, 711, 717, 733, 734, 742, 747, 782, 783, 784, 787, 788, 791, 792, 804, 807, 808, 810, 818, 826, 831, 832, 840, 841, 846, 848, 849, 852, 854, 860, 868, 869, 873, 879, 881, 882, 884, 888, 896, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 930, 940, 947, 992, 994, 995, 997, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1019, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "support_": [245, 346, 470, 475, 596, 597, 605, 910, 911, 912, 913, 914, 1020], "support_fract": [49, 470, 475], "support_reweight": [470, 475], "support_vector": [338, 344], "support_vector_indic": 338, "support_vectors_": [47, 50, 341, 344, 345, 910, 911, 912, 913, 914, 1020], "suppos": [246, 273, 329, 363, 364, 376, 380, 382, 410, 415, 416, 417, 559, 563, 566, 662, 663, 670, 672, 678, 679, 680, 854, 908, 910, 913, 916, 918, 940, 1009, 1044, 1046, 1052], "suppress": [187, 363, 384, 696, 1008, 1042], "suptitl": [44, 45, 53, 55, 69, 70, 71, 75, 76, 84, 87, 91, 94, 101, 108, 121, 124, 131, 135, 143, 144, 152, 155, 180, 187, 188, 190, 207, 209, 211, 227, 228, 232, 233, 234, 248, 258, 264, 266, 283, 284, 308, 310, 312, 319, 321, 329, 330, 334, 346, 347, 356], "surac": 1045, "sure": [2, 64, 90, 206, 218, 246, 247, 264, 357, 359, 363, 364, 370, 374, 375, 376, 377, 378, 380, 381, 384, 388, 394, 406, 409, 416, 495, 525, 653, 934, 935, 945, 957, 990, 995, 1002, 1019, 1024, 1025, 1042, 1043, 1045, 1050], "suresh": 1049, "surf": 188, "surfac": [125, 127, 129, 134, 135, 136, 137, 139, 156, 184, 221, 276, 336, 337, 354, 355, 357, 358, 415, 506, 555, 559, 566, 635, 768, 916, 922, 999, 1004, 1019, 1020, 1021, 1026], "surface_": 635, "surgan12": 1044, "surpass": [135, 344, 865, 866], "surplu": 412, "surpris": [87, 188, 374, 1001, 1024, 1037], "surprisingli": [230, 371, 416], "surrog": 1029, "surround": [247, 376, 854, 1011], "survei": [187, 411], "surviv": [104, 189, 994, 1024], "surya": [1048, 1049], "suscept": 402, "susik": 1039, "suspect": 44, "suspici": 371, "sustain": 0, "sutherland": [1037, 1039, 1040, 1042, 1043, 1044, 1045], "sutiono": 1046, "suzuki": [1046, 1047], "sv": 1020, "sv_ind": 245, "sv_ratio": 245, "svc": [2, 46, 63, 65, 67, 68, 69, 103, 107, 145, 156, 162, 172, 184, 192, 204, 244, 247, 251, 263, 268, 270, 272, 275, 276, 277, 280, 281, 312, 314, 315, 319, 321, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 348, 349, 351, 363, 382, 390, 406, 409, 412, 415, 434, 435, 437, 438, 469, 517, 557, 701, 702, 704, 706, 804, 821, 835, 837, 868, 905, 906, 908, 910, 911, 914, 992, 994, 1000, 1003, 1005, 1006, 1015, 1026, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "svc__c": [312, 868], "svc_disp": [252, 319, 1032], "svc_isoton": 63, "svc_sigmoid": 63, "svd": [2, 71, 128, 153, 233, 352, 385, 404, 411, 420, 452, 454, 483, 484, 486, 523, 534, 535, 536, 537, 541, 542, 543, 546, 548, 551, 552, 668, 676, 677, 678, 689, 690, 691, 867, 952, 999, 1037, 1041, 1042, 1048, 1050, 1053], "svd__n_compon": 867, "svd_lapack_driv": 952, "svd_method": [58, 452, 454, 534, 1038], "svd_solver": [46, 103, 121, 128, 326, 327, 404, 413, 537, 543, 1041, 1053], "sven": [1049, 1050], "svg": [0, 396], "svm": [2, 43, 47, 49, 50, 51, 55, 63, 65, 67, 68, 69, 103, 105, 107, 121, 133, 143, 153, 156, 159, 163, 168, 169, 173, 175, 179, 184, 193, 196, 206, 221, 222, 223, 224, 225, 239, 245, 247, 248, 251, 252, 263, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 280, 281, 285, 296, 301, 302, 305, 307, 312, 313, 319, 321, 328, 332, 333, 335, 338, 346, 347, 351, 363, 371, 382, 390, 409, 412, 413, 415, 417, 434, 435, 437, 438, 496, 506, 514, 517, 543, 557, 558, 565, 569, 570, 580, 596, 597, 602, 603, 608, 635, 643, 647, 672, 680, 681, 682, 693, 701, 702, 704, 706, 717, 739, 746, 765, 804, 818, 824, 830, 831, 834, 836, 837, 854, 868, 869, 881, 883, 888, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 992, 994, 997, 1000, 1002, 1003, 1005, 1006, 1010, 1018, 1020, 1022, 1026, 1027, 1031, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042], "svm1": 409, "svm2": 409, "svm__c": 107, "svm_weight": 165, "svm_weights_select": 165, "svmlight": [2, 369, 488, 510, 511, 1031, 1035, 1036, 1042, 1044], "svmlight_file_test": 511, "svmlight_file_train": 511, "svmsgd": 1019, "svr": [2, 47, 50, 184, 238, 319, 335, 363, 396, 434, 435, 437, 558, 569, 570, 596, 597, 647, 682, 804, 810, 909, 911, 913, 998, 1026, 1035, 1037, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "svr_fit": 245, "svr_lin": 346, "svr_poli": 346, "svr_predict": 245, "svr_rbf": 346, "sw": 290, "sw_test": [62, 320], "sw_train": [62, 320], "swap": [2, 408, 413, 720, 740, 983, 984, 1035], "swapnil": 1049, "swart": 56, "sweep": 864, "swier": [1046, 1047], "swiss": [2, 101, 184, 231, 232, 237, 408, 532, 696, 697, 1026, 1049], "switch": [362, 682, 708, 721, 741, 759, 761, 799, 848, 849, 951, 952, 1005, 1008, 1031, 1035], "swpeas": 1048, "swu": 1039, "sy": [48, 52, 58, 220, 243, 290, 333, 353, 371, 388, 621], "syd": 1050, "sydnei": 0, "syhw": [1036, 1037], "sylvain": [0, 366, 1039, 1044, 1045, 1046, 1047, 1048, 1049], "sylvainlan": [1043, 1044, 1045, 1046, 1047], "symbol": [52, 353, 364, 378, 382, 410, 416, 501, 585, 591, 592, 594, 920, 922, 1024], "symbol_dict": 52, "symlink": 380, "symlognorm": [194, 198], "symmetr": [2, 80, 147, 190, 214, 390, 406, 408, 453, 463, 464, 475, 521, 529, 531, 694, 698, 699, 708, 709, 719, 720, 721, 726, 728, 732, 740, 741, 759, 761, 767, 789, 799, 801, 802, 990, 994, 1001, 1005, 1008, 1051], "symmetri": [373, 703, 881, 884, 896, 1003], "symmetric_arrai": 990, "symposium": [373, 408, 461], "symptomat": 264, "sync": 378, "synchron": [376, 416], "syndrom": 370, "synonym": [390, 850, 851, 852, 858, 859, 860], "synonymi": 413, "syntax": [364, 376, 381, 384, 409, 469, 867, 868, 906, 994, 1046, 1048], "synthet": [44, 54, 63, 65, 68, 71, 73, 78, 83, 142, 147, 153, 171, 176, 178, 188, 203, 205, 214, 229, 305, 312, 347, 359, 363, 369, 379, 391, 408, 410, 417, 662, 663, 908, 909, 915, 999, 1041], "synthetic_feature_weight": [662, 663], "syonekura": 1043, "system": [45, 126, 198, 270, 277, 327, 359, 363, 364, 365, 371, 373, 376, 377, 378, 379, 384, 388, 394, 402, 408, 413, 415, 419, 445, 472, 473, 479, 537, 541, 545, 552, 643, 649, 654, 655, 658, 659, 660, 686, 687, 730, 760, 773, 801, 857, 903, 904, 1001, 1005, 1008, 1017, 1024, 1025, 1029, 1035, 1043, 1044], "systemat": [44, 150, 270, 716, 732, 924, 926, 1005, 1050], "sysuresh": 1049, "szabo": [1037, 1038], "szepieniec": 1041, "szlam": [413, 951, 952], "szpak": [1042, 1045], "szyma\u0144ski": [1043, 1044], "s\u00e1nchez": 1047, "s\u00e3o": 1053, "s\u00e4ger": [1038, 1041], "s\u00e9bastien": [1029, 1041, 1043], "s\u00f6nke": 1045, "s\u00f8ren": 1052, "s\u0142apek": 1046, "t": [2, 16, 48, 51, 52, 56, 64, 65, 71, 75, 76, 78, 79, 80, 86, 88, 92, 105, 110, 111, 112, 114, 116, 119, 122, 123, 128, 130, 131, 135, 138, 139, 146, 147, 148, 149, 150, 154, 155, 169, 172, 174, 175, 176, 179, 180, 184, 187, 188, 189, 190, 194, 196, 198, 207, 210, 211, 212, 213, 230, 231, 233, 234, 235, 236, 246, 247, 256, 259, 261, 264, 269, 270, 283, 284, 289, 290, 303, 307, 319, 322, 323, 325, 329, 330, 332, 336, 337, 340, 341, 345, 352, 353, 357, 358, 359, 363, 364, 370, 371, 373, 376, 378, 380, 382, 384, 389, 390, 394, 399, 402, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 421, 425, 428, 431, 433, 438, 448, 449, 451, 457, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 497, 498, 515, 516, 517, 521, 522, 527, 532, 534, 536, 543, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 593, 594, 597, 610, 611, 614, 615, 631, 632, 634, 635, 636, 637, 639, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 699, 700, 708, 714, 720, 721, 730, 740, 741, 759, 760, 761, 771, 792, 793, 798, 799, 803, 804, 807, 808, 818, 826, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 855, 858, 859, 864, 865, 866, 874, 877, 878, 879, 881, 882, 888, 889, 901, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 927, 952, 953, 968, 994, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1019, 1020, 1021, 1026, 1030, 1031, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "t0": [46, 48, 51, 55, 56, 75, 78, 80, 81, 84, 86, 92, 96, 98, 124, 198, 199, 227, 228, 229, 234, 237, 239, 243, 245, 271, 326, 351, 352, 353, 680, 681, 682], "t1": [80, 81, 96, 227, 234, 237, 239], "t15h": 1042, "t_": [670, 671, 672, 680, 681, 682, 865, 866, 1019], "t_0": 1019, "t_batch": 98, "t_i": 1007, "t_k": [415, 1005, 1021], "t_m": 1021, "t_mini_batch": [78, 98], "t_p": 277, "t_post": 270, "t_sne": [232, 1043], "t_stat": 270, "t_stat_uncorrect": 270, "t_t": 1021, "taa": 179, "taac": 179, "tab": [47, 49, 71, 87, 112, 135, 150, 152, 155, 171, 176, 178, 200, 202, 209, 264, 320, 326, 409, 1042], "tab10": [244, 260], "tab20b": 44, "tabea": [1050, 1051], "tabibian": 1041, "tabl": [92, 230, 270, 376, 377, 385, 408, 416, 585, 662, 684, 804, 818, 845, 969, 1001, 1005, 1006, 1011, 1024, 1036], "tabular": [44, 53, 188, 378, 415, 1013, 1024], "tacit": 390, "tacitli": 1037, "tackl": [148, 270, 364, 376, 408, 845, 1007, 1029], "tadej": [1036, 1037], "tae": 1047, "taehoon": [1042, 1043], "taemin": 1001, "tag": [2, 48, 83, 104, 239, 331, 370, 375, 379, 380, 384, 388, 390, 404, 416, 425, 426, 427, 430, 431, 498, 836, 924, 925, 926, 928, 929, 957, 988, 993, 1025, 1028, 1040, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "tags_orig": 378, "tahar": 1042, "tahiri": 1047, "taifi": 1041, "tail": [53, 147, 183, 187, 212, 214, 270, 310, 523, 526, 1001], "tail_strength": [327, 523, 526], "takanori": 1043, "take": [2, 45, 48, 53, 59, 67, 81, 87, 89, 91, 100, 108, 112, 119, 121, 135, 143, 171, 173, 176, 180, 187, 192, 216, 220, 221, 236, 246, 257, 258, 264, 265, 271, 275, 279, 280, 289, 290, 293, 296, 297, 298, 300, 301, 310, 323, 327, 332, 336, 337, 340, 349, 352, 353, 356, 363, 364, 365, 370, 371, 374, 376, 378, 381, 382, 383, 384, 388, 390, 391, 399, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 420, 438, 444, 447, 448, 450, 451, 453, 458, 459, 460, 462, 464, 470, 521, 535, 540, 541, 542, 548, 549, 584, 595, 598, 599, 601, 602, 603, 613, 614, 615, 620, 624, 625, 628, 636, 647, 653, 675, 677, 678, 679, 680, 683, 695, 696, 703, 709, 711, 713, 723, 733, 734, 742, 747, 760, 775, 778, 782, 783, 784, 785, 787, 788, 791, 792, 804, 805, 809, 810, 818, 822, 832, 850, 851, 852, 854, 856, 857, 858, 859, 860, 872, 882, 903, 904, 908, 909, 910, 911, 912, 913, 914, 938, 947, 974, 994, 997, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1015, 1020, 1021, 1029, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "takeawai": 289, "taken": [38, 44, 47, 68, 78, 87, 89, 149, 169, 176, 187, 243, 244, 258, 276, 287, 312, 371, 373, 375, 376, 380, 390, 408, 412, 416, 420, 441, 535, 563, 564, 586, 587, 650, 651, 654, 656, 657, 658, 662, 663, 664, 665, 666, 667, 681, 683, 685, 688, 699, 881, 882, 902, 905, 911, 912, 963, 1005, 1007, 1015, 1017, 1041, 1044, 1047, 1048], "takeshi": [1043, 1048, 1049, 1050], "takeuchi": 371, "takingitcasu": [1043, 1044], "talbot": 275, "talgatomarov": 1046, "talk": [58, 271, 351, 352, 353, 371, 390, 402, 1029, 1031], "talli": 414, "tallott": 1043, "talwalkar": 994, "tamara": [371, 1052], "tamer": 1050, "tami": 92, "tamir": [1046, 1049], "tamirlan1": 1046, "tamper": 48, "tampermonkei": 384, "tan": [865, 866, 1009, 1042], "tandfonlin": 408, "tang": [373, 1045, 1046, 1047], "tangent": [232, 344, 693, 697, 1003, 1030, 1031], "tanh": [344, 781, 865, 866, 1003, 1020], "tanjina": 1052, "tann": [1043, 1048], "tao": [1051, 1052], "tar": [48, 380], "taranjeet": 1041, "tarashanski": 1052, "tarbal": [380, 1050], "tarcusx": 1043, "tarfil": 48, "target": [2, 44, 46, 53, 56, 58, 64, 67, 69, 70, 86, 102, 104, 106, 107, 117, 125, 127, 129, 136, 143, 144, 145, 147, 148, 150, 152, 154, 155, 156, 158, 162, 164, 167, 169, 171, 173, 176, 177, 183, 184, 186, 187, 188, 189, 194, 198, 206, 209, 212, 214, 216, 217, 220, 221, 233, 240, 242, 243, 244, 245, 248, 249, 250, 257, 263, 264, 266, 268, 271, 273, 275, 276, 279, 280, 284, 287, 289, 290, 293, 298, 301, 302, 306, 309, 310, 320, 321, 323, 325, 329, 330, 333, 334, 336, 337, 340, 344, 346, 351, 352, 356, 358, 359, 363, 365, 368, 369, 370, 371, 372, 373, 376, 378, 380, 381, 384, 385, 389, 393, 402, 408, 411, 412, 415, 418, 432, 438, 439, 440, 443, 446, 465, 466, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 510, 512, 522, 526, 533, 534, 536, 538, 539, 541, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 575, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 701, 702, 704, 705, 706, 711, 712, 713, 716, 717, 722, 724, 725, 727, 728, 730, 731, 732, 733, 734, 739, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 857, 858, 859, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 889, 892, 897, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 927, 928, 934, 966, 967, 968, 993, 996, 997, 998, 1001, 1002, 1005, 1009, 1012, 1013, 1019, 1020, 1021, 1025, 1026, 1028, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "target_class": 315, "target_column": [490, 491, 498], "target_encod": 317, "target_filenam": [503, 507], "target_gener": 177, "target_idx": 636, "target_mean_": [889, 1015], "target_nam": [46, 58, 67, 86, 125, 127, 129, 186, 221, 233, 257, 263, 271, 279, 280, 293, 316, 333, 351, 356, 369, 371, 489, 490, 492, 494, 495, 496, 498, 499, 502, 504, 505, 506, 507, 512, 717, 1005, 1021, 1045], "target_opset": 402, "target_tag": [378, 927], "target_test": [264, 511], "target_train": [264, 511], "target_typ": [316, 889, 938, 967, 1052], "target_type_": 889, "targetencod": [2, 316, 317, 390, 881, 882, 995, 1015, 1024, 1051, 1052], "targets_test": 244, "targets_train": 244, "targettag": [2, 927], "tari": 92, "tashai": [1043, 1044], "task": [2, 39, 44, 47, 124, 142, 148, 150, 168, 179, 184, 193, 198, 199, 202, 211, 212, 228, 232, 249, 264, 267, 284, 289, 344, 353, 363, 365, 371, 373, 375, 376, 381, 382, 385, 388, 389, 390, 413, 415, 416, 417, 418, 449, 462, 495, 507, 517, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 636, 637, 650, 651, 656, 657, 664, 665, 666, 667, 678, 685, 688, 731, 733, 734, 758, 786, 788, 791, 793, 805, 809, 822, 828, 970, 971, 1002, 1005, 1006, 1007, 1008, 1016, 1018, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1035, 1040, 1044, 1050], "tast": 1035, "tata": 1052, "tau": 1015, "tau_0": 538, "tavenard": 1047, "tax": 0, "taxonom": 373, "taylor": [415, 1043, 1045, 1046, 1049], "tb": 384, "tc": [373, 391], "tcg": 179, "tch": 373, "tcompl": 92, "tcpdump": 371, "tda": 1024, "teach": 376, "teal": [213, 222, 277], "team": [371, 379, 388, 390, 391, 1024, 1029, 1035], "teas": 187, "tech": [52, 373, 846], "technic": [179, 187, 213, 233, 323, 371, 373, 376, 378, 390, 415, 656, 668, 689, 690, 903, 994, 1001, 1002, 1008], "technion": [668, 689, 690, 1001], "techniqu": [11, 27, 52, 57, 103, 105, 123, 127, 131, 136, 145, 161, 168, 183, 184, 186, 209, 220, 234, 236, 275, 287, 294, 322, 330, 344, 355, 365, 373, 388, 390, 402, 406, 408, 412, 413, 414, 415, 416, 417, 448, 449, 450, 451, 536, 556, 681, 693, 694, 697, 698, 730, 760, 997, 1001, 1002, 1004, 1005, 1008, 1011, 1013, 1017, 1019, 1021, 1025, 1029, 1048], "technolog": 373, "technologi": [373, 408, 1024, 1029], "technometr": [373, 410, 470, 475, 1011], "tediou": [155, 264], "teen": 1015, "teevan": [845, 1007], "teh": [864, 1010], "tejesh95": 1039, "telecom": 1029, "telenczuk": [169, 1044, 1047, 1048, 1050], "tell": [171, 187, 188, 246, 270, 340, 345, 364, 371, 408, 416, 565, 582, 994, 999, 1012], "temp": 188, "temp_fold": 970, "temperatur": [188, 416, 1012], "tempfil": [88, 292, 319, 409, 1008], "templat": [376, 380, 381, 390, 391, 559, 560, 565, 566, 567, 568, 1024], "templateclassifi": 378, "tempor": [53, 150, 198, 1024, 1025], "temporari": [88, 103, 105, 363, 469, 691, 785, 906, 1008, 1038, 1039, 1042, 1048, 1049], "temporarili": [408, 1040], "temporarydirectori": [292, 319], "tempt": 187, "temptat": [359, 376], "ten": [55, 58, 135, 141, 150, 233, 261, 371, 373, 415, 522, 913, 1044], "tenavi": 1049, "tend": [44, 52, 65, 73, 75, 79, 86, 89, 91, 167, 169, 187, 188, 202, 212, 217, 230, 249, 255, 258, 267, 271, 283, 289, 308, 344, 353, 363, 365, 376, 378, 390, 406, 408, 410, 413, 415, 417, 438, 449, 657, 854, 885, 897, 952, 1001, 1002, 1008, 1021], "tendenc": [150, 237, 357, 1001, 1002, 1004, 1007, 1010], "tenenbaum": [692, 1002], "tenenhau": 373, "tensor": [2, 192, 368, 404, 413, 540, 542, 549, 643, 644, 645, 1031, 1047, 1053], "tensorflow": [46, 388], "tensorsketch": 997, "tent": 382, "tenur": 1029, "teon": 1047, "terenc": [1047, 1048], "term": [2, 44, 54, 55, 63, 69, 92, 126, 138, 141, 144, 147, 176, 186, 198, 200, 201, 202, 212, 214, 216, 226, 229, 230, 249, 264, 268, 272, 290, 305, 322, 344, 347, 351, 353, 365, 376, 378, 388, 406, 408, 410, 412, 413, 415, 444, 448, 450, 453, 460, 463, 526, 537, 540, 542, 546, 549, 551, 591, 592, 593, 594, 607, 610, 611, 636, 637, 644, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 678, 679, 680, 682, 684, 691, 699, 734, 742, 787, 788, 791, 865, 866, 883, 887, 890, 908, 909, 910, 911, 912, 913, 914, 994, 996, 997, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1015, 1019, 1020, 1043, 1049, 1050, 1051], "term1": 416, "term2": 416, "term3": 416, "termin": [364, 381, 382, 384, 394, 408, 422, 449, 462, 555, 556, 560, 561, 562, 565, 567, 670, 671, 672, 680, 682, 865, 866, 917, 919, 1011, 1021], "terminalipythonapp": 382, "terminalpdb": 384, "termination_condition_": 905, "terminologi": [390, 1043], "terraza": 1047, "terri": 1039, "terrycojon": 1039, "tesson": 408, "test": [2, 44, 46, 48, 50, 51, 53, 62, 63, 64, 65, 68, 69, 70, 103, 104, 116, 126, 135, 138, 140, 141, 142, 146, 147, 148, 149, 150, 160, 162, 163, 165, 168, 171, 172, 184, 186, 187, 188, 189, 190, 192, 198, 202, 206, 208, 209, 212, 213, 214, 216, 217, 219, 220, 227, 228, 230, 236, 240, 245, 246, 248, 257, 262, 263, 264, 265, 268, 269, 270, 271, 272, 274, 275, 277, 278, 280, 281, 282, 284, 289, 293, 298, 299, 305, 307, 312, 315, 316, 317, 326, 333, 340, 347, 353, 357, 359, 363, 364, 370, 371, 373, 379, 380, 381, 382, 388, 389, 390, 393, 394, 401, 403, 404, 406, 407, 409, 410, 413, 415, 416, 417, 418, 425, 427, 428, 431, 434, 435, 436, 437, 438, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 490, 495, 499, 500, 504, 506, 526, 533, 539, 541, 545, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 577, 595, 597, 598, 599, 601, 602, 603, 605, 607, 608, 609, 611, 612, 614, 615, 631, 632, 634, 639, 640, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 716, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 855, 858, 859, 865, 866, 868, 893, 894, 896, 897, 898, 899, 903, 904, 906, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 924, 925, 926, 927, 933, 943, 945, 946, 947, 1000, 1001, 1004, 1005, 1008, 1009, 1013, 1015, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "test_": [53, 155, 412], "test_0": 44, "test_4": 44, "test_accuraci": [257, 271, 284], "test_auc": 831, "test_ax": 126, "test_balanced_accuraci": 284, "test_best_it": 146, "test_check_estim": 947, "test_color": 146, "test_common": [376, 384], "test_dataset": 370, "test_devi": 149, "test_enable_hist_gradient_boost": 380, "test_fn": 1005, "test_fold": [412, 817], "test_fract": 1035, "test_idx": [53, 390], "test_import": 189, "test_index": [257, 332, 412, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825], "test_indx": 412, "test_lin": 146, "test_logist": [376, 384], "test_ms": 326, "test_neg_mean_absolute_error": [44, 214], "test_neg_mean_squared_error": [214, 831], "test_neg_root_mean_squared_error": 44, "test_negative_likelihood_ratio": 273, "test_positive_likelihood_ratio": 273, "test_prec_macro": 412, "test_precision_macro": 412, "test_r2": 831, "test_rec_macro": 412, "test_recall_macro": 412, "test_requiring_mpl_fixtur": 376, "test_result": [189, 945], "test_scor": [144, 146, 148, 150, 220, 269, 272, 283, 287, 316, 347, 355, 389, 412, 810, 827, 831, 832, 835], "test_scores_mean": 283, "test_scores_nb": 272, "test_scores_svm": 272, "test_set": 406, "test_siz": [44, 45, 46, 50, 53, 62, 63, 65, 68, 69, 104, 140, 145, 146, 148, 149, 150, 154, 186, 192, 198, 208, 209, 212, 219, 220, 227, 228, 264, 267, 268, 272, 277, 279, 283, 289, 298, 299, 305, 307, 308, 312, 314, 315, 321, 340, 347, 359, 381, 412, 702, 806, 821, 824, 825, 834, 836, 857, 995, 1007, 1008, 1035, 1036, 1041, 1042, 1047], "test_sklearn_compatible_estim": [319, 947], "test_sparsifi": 384, "test_stat": 48, "test_tim": [245, 351], "test_tp": 1005, "test_val": 377, "test_your_test_nam": 364, "tested_neg": 284, "tested_posit": 284, "testpypi": 380, "teunp": 1049, "texa": 52, "text": [2, 43, 46, 47, 50, 51, 52, 55, 58, 68, 69, 73, 76, 80, 87, 91, 92, 94, 95, 96, 98, 103, 112, 113, 141, 145, 167, 190, 195, 207, 239, 243, 251, 255, 257, 262, 269, 270, 276, 277, 281, 295, 298, 300, 305, 312, 322, 328, 330, 346, 363, 365, 368, 369, 370, 376, 381, 388, 390, 396, 406, 408, 409, 411, 412, 413, 415, 418, 448, 450, 465, 469, 488, 489, 490, 501, 505, 510, 523, 538, 546, 566, 591, 592, 593, 594, 619, 629, 656, 662, 670, 672, 678, 680, 701, 707, 709, 711, 717, 721, 733, 734, 741, 797, 799, 804, 818, 834, 843, 845, 847, 850, 855, 868, 869, 871, 872, 880, 904, 905, 906, 908, 920, 921, 922, 949, 994, 997, 1001, 1003, 1005, 1006, 1007, 1009, 1012, 1015, 1017, 1019, 1020, 1023, 1025, 1026, 1029, 1031, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "text1": 416, "text2": 416, "text2d": 236, "text3": 416, "text_": 701, "text_kw": [701, 1050], "text_preprocess": 465, "text_stat": 103, "text_stats_transform": 103, "textbook": [416, 593], "textcoord": [49, 192], "textrm": 1020, "texttt": 1005, "textual": [413, 422, 1021, 1044], "textur": [373, 762, 763, 1003], "tf": [2, 55, 58, 243, 351, 352, 353, 371, 413, 523, 546, 591, 592, 593, 594, 847, 855, 880, 994, 1003, 1007, 1015, 1024], "tf_feature_nam": 55, "tf_vector": 55, "tfid": 593, "tfidf": [55, 103, 333, 416, 594], "tfidf_feature_nam": 55, "tfidf_vector": 55, "tfidftransform": [2, 333, 352, 353, 416, 490, 594, 1042, 1043, 1049, 1051, 1052, 1053], "tfidfvector": [2, 55, 58, 103, 271, 351, 371, 413, 416, 490, 591, 592, 593, 1035, 1037, 1043, 1044, 1045, 1048, 1049, 1053], "tfifi": 1048, "tfrac": 418, "tgct": 179, "tgz": 46, "th": [135, 322, 358, 389, 408, 412, 415, 423, 442, 446, 447, 452, 454, 460, 464, 473, 552, 559, 560, 561, 562, 563, 564, 566, 567, 568, 596, 597, 636, 652, 653, 673, 675, 684, 700, 722, 784, 825, 889, 939, 995, 1001, 1005, 1009, 1012, 1019, 1020, 1050], "th0rwa": [1045, 1046], "thakur": [1038, 1039], "thaler": 1041, "than": [2, 26, 44, 45, 47, 51, 52, 54, 58, 65, 67, 68, 76, 80, 82, 87, 89, 105, 108, 112, 114, 117, 119, 121, 124, 126, 128, 135, 137, 138, 140, 141, 142, 143, 144, 147, 150, 167, 169, 171, 177, 182, 187, 188, 189, 192, 194, 198, 199, 202, 205, 212, 214, 218, 228, 229, 230, 236, 239, 245, 246, 247, 249, 256, 264, 267, 268, 270, 271, 272, 273, 276, 279, 284, 287, 289, 290, 296, 297, 308, 310, 314, 315, 316, 317, 321, 323, 325, 327, 330, 344, 351, 352, 353, 359, 363, 364, 365, 370, 371, 372, 374, 375, 376, 378, 381, 382, 384, 390, 391, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 455, 458, 461, 464, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 495, 496, 498, 511, 516, 517, 525, 533, 536, 537, 538, 539, 540, 542, 543, 544, 546, 549, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 631, 632, 634, 638, 644, 646, 647, 648, 650, 651, 656, 657, 659, 662, 663, 664, 665, 666, 667, 670, 671, 672, 675, 676, 678, 680, 681, 682, 683, 686, 691, 696, 698, 700, 708, 709, 716, 724, 725, 726, 727, 728, 739, 740, 743, 768, 783, 784, 785, 787, 789, 799, 801, 802, 804, 807, 808, 814, 818, 823, 825, 826, 829, 830, 831, 832, 833, 836, 838, 839, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 862, 865, 866, 868, 869, 871, 881, 882, 883, 885, 886, 888, 891, 897, 898, 902, 905, 908, 909, 910, 913, 914, 916, 917, 918, 919, 920, 925, 940, 952, 954, 955, 961, 967, 973, 975, 978, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1025, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thanh": 1053, "thank": [0, 44, 56, 63, 89, 117, 189, 192, 212, 279, 375, 384, 1024, 1029, 1035, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "tharak": 1052, "thebabush": [1052, 1053], "thedevpanda": 1050, "thei": [0, 8, 26, 31, 32, 44, 53, 64, 73, 84, 91, 114, 123, 133, 136, 142, 144, 146, 148, 150, 151, 165, 168, 171, 172, 176, 187, 188, 198, 199, 202, 208, 212, 213, 230, 233, 236, 239, 245, 246, 249, 263, 267, 270, 271, 273, 279, 284, 287, 290, 292, 306, 310, 315, 321, 323, 344, 351, 352, 357, 359, 363, 364, 365, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 384, 385, 388, 389, 390, 391, 399, 402, 405, 407, 408, 409, 410, 411, 413, 415, 417, 418, 420, 441, 443, 447, 454, 455, 468, 498, 510, 511, 535, 537, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 600, 614, 623, 633, 647, 650, 651, 656, 662, 663, 664, 665, 666, 674, 676, 680, 682, 685, 691, 766, 767, 769, 772, 778, 793, 804, 818, 837, 843, 844, 845, 846, 847, 855, 865, 868, 870, 876, 887, 888, 910, 913, 916, 917, 918, 919, 923, 994, 995, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1029, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "theil": [2, 151, 184, 193, 215, 218, 310, 653, 661, 675, 682, 683, 1026], "theilsen": 218, "theilsenregressor": [2, 218, 229, 653, 675, 682, 1001, 1039, 1047, 1049], "theirs": 376, "them": [16, 44, 45, 48, 69, 75, 76, 83, 87, 89, 90, 94, 99, 100, 103, 104, 117, 121, 123, 126, 136, 151, 164, 169, 171, 182, 183, 187, 188, 189, 192, 194, 198, 201, 208, 213, 214, 216, 230, 243, 246, 249, 250, 264, 268, 270, 271, 273, 279, 283, 287, 292, 310, 315, 317, 322, 333, 340, 353, 358, 363, 365, 371, 376, 377, 378, 379, 380, 384, 388, 390, 391, 393, 399, 402, 406, 407, 408, 409, 412, 413, 415, 416, 418, 445, 448, 450, 451, 458, 465, 468, 495, 496, 510, 569, 570, 571, 572, 610, 611, 620, 624, 625, 628, 636, 643, 668, 696, 772, 775, 778, 782, 783, 784, 785, 793, 804, 818, 825, 833, 868, 869, 872, 877, 878, 882, 886, 888, 889, 898, 899, 905, 916, 917, 945, 946, 947, 961, 970, 994, 995, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1015, 1020, 1021, 1023, 1024, 1028, 1029, 1035, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "themat": 390, "theme": [371, 376, 394, 401, 1035], "themrmax": [1041, 1042], "themselv": [65, 187, 310, 372, 378, 384, 390, 399, 405, 408, 415, 416, 418, 447, 619, 796, 1021, 1045], "theodor": 1040, "theofilo": 1042, "theoptip": [1045, 1046], "theorem": [33, 171, 347, 1007], "theoret": [38, 73, 91, 171, 264, 408, 415, 555, 556, 643, 708, 730, 760, 908, 994, 1001, 1002, 1004, 1005, 1007, 1017, 1019, 1020, 1029], "theori": [8, 144, 245, 260, 347, 373, 408, 412, 415, 694, 698, 730, 760, 900, 901, 952, 994, 1001, 1002, 1004, 1005, 1006, 1020, 1021], "theotheo": 1045, "thereaft": [187, 194], "therebi": [44, 187, 412, 415, 997, 1045], "therefor": [44, 49, 54, 59, 62, 65, 71, 73, 86, 87, 104, 105, 108, 112, 117, 126, 130, 135, 138, 140, 147, 150, 153, 155, 168, 186, 189, 205, 209, 212, 216, 228, 229, 255, 260, 261, 264, 271, 273, 283, 284, 287, 289, 293, 307, 310, 315, 329, 340, 347, 348, 351, 352, 358, 363, 370, 374, 378, 381, 388, 399, 402, 404, 408, 409, 410, 412, 413, 415, 416, 438, 537, 543, 551, 553, 555, 556, 561, 562, 566, 567, 607, 609, 662, 663, 669, 672, 675, 680, 682, 683, 705, 716, 739, 761, 801, 868, 869, 881, 885, 889, 897, 924, 995, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1013, 1015, 1020, 1021, 1025, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "therein": 672, "thereof": 390, "theriley106": 1043, "thesi": [0, 373, 408, 415], "theta": [172, 173, 175, 177, 179, 180, 247, 413, 418, 525, 538, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 696, 1007, 1021], "theta0": 172, "theta1": 172, "theta_": [846, 1007], "theta_c": [247, 525], "theta_d": 413, "theta_i": 1007, "theta_l": 418, "theta_opt": [614, 615], "thi": [0, 2, 7, 11, 31, 32, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 483, 484, 485, 486, 488, 490, 491, 495, 496, 498, 499, 500, 501, 503, 504, 505, 507, 510, 511, 517, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 580, 582, 583, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 708, 710, 711, 713, 715, 716, 717, 718, 720, 721, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 740, 741, 742, 743, 744, 745, 747, 752, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 772, 773, 778, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 924, 925, 927, 928, 929, 930, 934, 935, 940, 941, 943, 945, 946, 947, 952, 954, 957, 960, 961, 962, 963, 964, 965, 967, 970, 971, 974, 975, 978, 979, 988, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thibault": 1044, "thibaut": 1049, "thibsej": 1044, "thick": [94, 300, 1008], "thierno": 1045, "thierri": [0, 1029, 1041, 1042, 1049], "thij": [1047, 1050, 1051], "thin": [234, 624], "thing": [49, 71, 233, 265, 364, 365, 371, 375, 376, 378, 388, 391, 408, 410, 416, 561, 562, 1001, 1015, 1029, 1041], "think": [45, 73, 187, 188, 376, 378, 384, 414, 1004, 1025, 1029], "thinner": 101, "third": [71, 143, 148, 164, 169, 179, 230, 239, 261, 287, 295, 312, 325, 364, 371, 375, 378, 388, 391, 402, 416, 536, 591, 592, 593, 594, 806, 807, 808, 813, 850, 851, 852, 854, 856, 886, 898, 994, 1016, 1035, 1046, 1051, 1052], "thirion": [0, 398, 1035, 1041, 1042, 1048], "thirteen": 373, "thirti": 1023, "thiruvenkadam": 1049, "this_centroid": 78, "this_cov": 114, "this_cv": 265, "this_di": 52, "this_dx": 52, "this_i": [62, 218], "this_max_it": 227, "this_p": 64, "this_prec": 114, "this_scor": 343, "this_sw": 62, "this_x": [62, 210, 218], "thoma": [0, 128, 364, 366, 391, 397, 904, 1001, 1015, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thomas9292": 1047, "thomaz": 1046, "thomo": 92, "thompson": [1038, 1050, 1051], "thorben": 1047, "thorough": 1029, "thoroughli": 1010, "thorsten": 1029, "those": [44, 47, 52, 56, 58, 89, 94, 104, 136, 147, 150, 167, 169, 186, 187, 188, 189, 190, 209, 212, 214, 216, 230, 237, 243, 246, 248, 249, 261, 263, 264, 270, 273, 276, 287, 306, 310, 315, 327, 337, 340, 351, 352, 353, 363, 364, 370, 376, 378, 380, 381, 382, 383, 388, 390, 391, 394, 405, 406, 407, 408, 412, 413, 415, 416, 418, 449, 451, 462, 465, 469, 496, 497, 498, 505, 559, 560, 566, 567, 571, 572, 584, 696, 701, 716, 722, 740, 804, 807, 808, 816, 818, 825, 850, 851, 852, 854, 856, 857, 858, 859, 860, 908, 909, 910, 913, 916, 917, 918, 919, 964, 994, 997, 1001, 1004, 1005, 1007, 1008, 1009, 1012, 1015, 1021, 1023, 1024, 1029, 1035, 1038, 1041, 1042, 1043, 1048, 1049, 1050, 1051, 1052, 1053], "though": [89, 141, 169, 192, 194, 249, 276, 295, 312, 314, 352, 353, 359, 363, 370, 373, 376, 380, 389, 390, 408, 413, 414, 415, 416, 417, 703, 811, 813, 908, 994, 995, 997, 1002, 1005, 1008, 1013, 1015, 1019, 1043], "thought": [232, 295, 390, 408, 447, 1002, 1006], "thoui": [0, 398, 1035], "thousand": [78, 141, 150, 243, 245, 314, 352, 371, 408, 415, 865, 866, 913, 1002, 1044, 1046], "thread": [290, 320, 323, 374, 376, 388, 390, 408, 415, 565, 840, 841, 970, 971, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052], "threadpoolctl": [42, 364, 374, 394, 401], "threadsaf": 1048, "three": [44, 47, 64, 71, 76, 77, 81, 89, 92, 110, 127, 135, 140, 142, 144, 145, 146, 156, 157, 158, 166, 179, 187, 198, 205, 212, 214, 221, 223, 245, 246, 255, 258, 289, 316, 317, 320, 364, 369, 372, 373, 380, 394, 402, 405, 408, 412, 413, 414, 416, 452, 463, 500, 713, 954, 998, 1000, 1001, 1002, 1005, 1008, 1015, 1019, 1020, 1023, 1035], "three_d_arrai": 925, "thresh": 1039, "threshold": [2, 51, 63, 78, 99, 119, 124, 130, 169, 184, 188, 190, 208, 240, 242, 262, 267, 268, 269, 274, 277, 289, 325, 326, 328, 356, 358, 390, 403, 408, 413, 415, 417, 442, 443, 446, 447, 470, 498, 502, 510, 511, 533, 539, 544, 550, 551, 552, 553, 563, 565, 591, 594, 596, 600, 605, 606, 613, 648, 662, 671, 675, 680, 682, 696, 702, 704, 706, 707, 710, 711, 722, 724, 730, 731, 743, 744, 746, 760, 786, 788, 791, 792, 793, 798, 801, 802, 803, 804, 823, 826, 834, 843, 854, 855, 869, 871, 873, 875, 888, 891, 903, 904, 905, 906, 913, 920, 922, 978, 1001, 1005, 1008, 1009, 1011, 1015, 1018, 1020, 1021, 1026, 1031, 1035, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053], "threshold_": [600, 1042], "threshold_lambda": 648, "threshold_sign": 358, "thriller": [416, 879], "thrive": [0, 376], "throat": [51, 303, 371, 500], "through": [0, 2, 47, 53, 71, 140, 179, 187, 216, 232, 244, 265, 270, 273, 295, 314, 315, 338, 345, 353, 358, 373, 376, 378, 383, 385, 388, 390, 391, 394, 399, 407, 408, 411, 413, 415, 417, 418, 425, 426, 427, 430, 431, 447, 465, 468, 473, 537, 543, 559, 560, 563, 566, 567, 568, 584, 596, 597, 600, 651, 655, 657, 659, 662, 663, 665, 667, 669, 672, 680, 681, 692, 695, 724, 810, 827, 868, 869, 884, 896, 900, 901, 916, 917, 918, 919, 959, 962, 994, 995, 1002, 1005, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1029, 1035, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "throughout": [325, 359, 390, 631, 805, 865, 866, 1038, 1043], "throughput": [362, 1024, 1031, 1038], "throw": [2, 307, 385, 933, 1039, 1042, 1043, 1044, 1045, 1049], "thrown": [715, 1044, 1045], "thu": [44, 45, 62, 63, 64, 65, 76, 87, 89, 94, 110, 114, 124, 126, 138, 140, 141, 144, 150, 165, 171, 176, 177, 188, 198, 200, 202, 205, 212, 214, 230, 239, 245, 250, 257, 264, 268, 270, 275, 276, 277, 283, 284, 293, 317, 319, 322, 355, 359, 363, 364, 371, 378, 382, 388, 390, 399, 406, 407, 408, 412, 413, 415, 416, 418, 419, 438, 440, 464, 517, 529, 555, 556, 557, 558, 559, 560, 565, 566, 567, 568, 606, 609, 614, 626, 631, 636, 637, 647, 649, 662, 681, 709, 722, 729, 750, 792, 799, 804, 806, 811, 813, 818, 825, 839, 842, 877, 908, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1025, 1029, 1035, 1037, 1041, 1043, 1044, 1045, 1047, 1051], "thuan": 1046, "thukarama": 1050, "thumb": [13, 141, 192, 363, 376, 377, 388, 408, 662, 663, 670, 671, 672, 680, 681, 682, 908, 1005], "thumbnail": 1035, "th\u00e9ophil": 1051, "ti": [212, 257, 260, 268, 348, 363, 384, 406, 408, 602, 603, 639, 724, 730, 760, 801, 802, 910, 913, 916, 1004, 1005, 1020, 1036, 1038, 1039, 1043, 1045, 1049, 1050, 1051], "tiago": [1036, 1040], "tialo": [1052, 1053], "tian": [408, 443, 1040, 1041, 1042], "tianqi": 415, "tiao": [1040, 1041], "tib": [686, 687], "tibshirani": [138, 139, 149, 200, 269, 373, 412, 415, 522, 561, 562, 632, 660, 725, 727, 728, 838, 855, 916, 917, 995, 999, 1001, 1006, 1012, 1021], "tic": [169, 188, 249, 281, 1007], "tic_bwd": 169, "tic_fwd": 169, "ticconi": 1041, "tick": [48, 79, 94, 174, 250, 281, 376, 636, 832], "tick_bottom": 310, "tick_label": [148, 190, 319], "tick_labels_dict": [148, 190, 319], "tick_labels_parameter_nam": [148, 190, 319], "tick_left": 310, "tick_param": [47, 55, 158, 255, 270, 314, 332], "tick_right": 47, "ticker": [232, 234, 237, 290], "ticket": 376, "tidelift": 0, "tie": [184, 335, 388, 415, 514, 836, 910, 913, 1006, 1020, 1021, 1026, 1036, 1051], "tieleman": [864, 1010], "tien": 1040, "tiernei": [1043, 1044, 1045], "tight": [76, 130, 137, 143, 162, 165, 201, 206, 207, 217, 221, 224, 229, 234, 237, 259, 290, 296, 297, 301, 302, 336, 340, 343, 345, 356, 585, 696, 1047], "tight_layout": [46, 48, 63, 65, 68, 76, 86, 89, 99, 106, 108, 117, 121, 122, 123, 131, 135, 137, 142, 143, 145, 148, 153, 155, 157, 173, 175, 180, 182, 186, 187, 189, 190, 194, 195, 198, 203, 210, 212, 220, 223, 227, 230, 232, 244, 249, 265, 266, 282, 289, 290, 292, 302, 311, 312, 313, 314, 315, 319, 323, 338, 352, 355, 356, 372], "tijanajovanov": 1047, "tikhonov": [178, 418, 676], "tild": [874, 1013, 1015], "tilen": 1045, "till": [408, 443, 792, 1005], "tim": [0, 397, 1035, 1040, 1041, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "time": [0, 2, 38, 43, 46, 47, 48, 50, 51, 52, 55, 56, 58, 59, 64, 75, 76, 78, 80, 81, 82, 84, 86, 87, 90, 91, 92, 95, 96, 98, 101, 103, 105, 114, 121, 122, 124, 125, 135, 142, 144, 145, 147, 150, 155, 156, 157, 169, 171, 176, 177, 178, 182, 184, 187, 188, 192, 196, 198, 199, 202, 204, 212, 213, 214, 220, 226, 227, 228, 229, 230, 233, 234, 237, 239, 243, 246, 247, 249, 253, 258, 261, 264, 268, 270, 271, 272, 273, 278, 281, 283, 289, 290, 292, 306, 307, 308, 316, 321, 322, 326, 330, 340, 344, 352, 353, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 399, 402, 404, 405, 406, 408, 410, 411, 413, 415, 416, 419, 438, 442, 444, 445, 446, 447, 448, 451, 453, 456, 458, 459, 460, 462, 463, 464, 465, 466, 468, 469, 473, 493, 498, 501, 503, 521, 525, 536, 538, 540, 542, 543, 549, 564, 569, 570, 571, 572, 593, 614, 623, 631, 632, 633, 634, 638, 643, 644, 647, 650, 654, 656, 658, 664, 666, 668, 670, 671, 676, 677, 678, 680, 681, 682, 689, 690, 694, 696, 698, 705, 746, 749, 750, 752, 794, 798, 801, 802, 804, 806, 807, 808, 809, 811, 813, 818, 819, 820, 823, 825, 829, 830, 831, 832, 833, 834, 836, 838, 843, 844, 845, 846, 847, 848, 849, 856, 858, 859, 860, 864, 865, 866, 867, 868, 869, 870, 872, 873, 875, 878, 881, 883, 887, 892, 900, 901, 905, 906, 910, 913, 914, 922, 945, 946, 947, 954, 970, 994, 995, 997, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1029, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "time_dens": 326, "time_spars": 326, "time_step": [198, 866], "timeit": [227, 258, 382], "timeout": [498, 970, 1049], "timer": [258, 382], "times_init": 258, "timescal": 244, "timeseri": 44, "timeseriessplit": [2, 44, 53, 150, 198, 265, 412, 1041, 1042, 1047], "timo": 1047, "timofei": 1050, "timotheemathieu": 1048, "timothi": [1040, 1048], "timsaur": 1045, "tinertia": 92, "ting": [565, 1011, 1043, 1044], "tingshan": 1048, "tini": [1037, 1050, 1053], "tinoco": 1052, "tip": [359, 362, 376, 379, 382, 403, 416, 536, 543, 649, 696, 1001, 1027, 1028, 1030, 1031, 1038], "tiphain": 1046, "tirth": [1045, 1046], "titan": [104, 189, 253, 319, 323, 324, 1013], "titl": [0, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 69, 73, 74, 75, 77, 80, 81, 83, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 110, 111, 113, 114, 116, 117, 121, 122, 123, 124, 125, 127, 128, 129, 130, 136, 137, 138, 141, 143, 144, 147, 148, 150, 151, 154, 157, 158, 162, 164, 165, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 187, 194, 195, 197, 198, 200, 201, 202, 205, 206, 209, 211, 212, 214, 216, 217, 218, 220, 221, 226, 229, 230, 232, 233, 234, 239, 243, 244, 245, 247, 248, 249, 255, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 273, 274, 275, 279, 280, 283, 285, 292, 293, 296, 297, 298, 299, 301, 302, 303, 310, 314, 315, 316, 317, 331, 334, 336, 337, 338, 339, 340, 343, 344, 348, 349, 351, 356, 357, 372, 375, 376, 380, 384, 409, 1005, 1028], "title_bow": 409, "titles_opt": 263, "titov": [1043, 1045, 1048, 1049], "titu": 1046, "tiwari": 1047, "tiziano": 1035, "tjoa": 1039, "tkammi": 1041, "tkdd": 565, "tliu68": 1048, "tm": [52, 1008], "tmp": 380, "tmpdir": [292, 319], "tn": [264, 327, 716, 722, 1005], "tn_c": 279, "tnr": 264, "tnwei": 1047, "to_british": 416, "to_fram": 108, "to_list": 190, "to_numpi": [176, 264], "to_onnx": 402, "to_replac": [44, 188], "toarrai": [47, 326, 333, 358, 409, 416, 568, 585, 591, 593, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 881, 898, 899, 953, 975, 976, 978, 986, 987, 995, 1008, 1015, 1052], "toastedcornflak": [1041, 1042], "toastedyeast": [1049, 1050], "tobia": [1043, 1048, 1050], "tobychees": [1042, 1043], "toc": [169, 249], "toc_bwd": 169, "toc_fwd": 169, "toccac": 1045, "tocsc": 199, "tocsr": 56, "toctre": [376, 394, 401], "tod": [408, 419, 445], "todai": 176, "todens": [979, 980, 981, 982, 983, 984, 985], "todo": [81, 243, 380, 384, 408, 1054, 1055], "toeplitz": 111, "togeth": [44, 52, 85, 94, 104, 143, 155, 171, 177, 187, 196, 233, 236, 249, 266, 316, 323, 343, 356, 359, 378, 388, 389, 390, 408, 415, 416, 417, 423, 452, 454, 569, 570, 597, 693, 719, 804, 818, 868, 869, 882, 945, 1001, 1002, 1005, 1006, 1012, 1015, 1021, 1022, 1029, 1041, 1052], "toi": [49, 59, 72, 75, 76, 77, 78, 82, 83, 86, 87, 89, 90, 91, 101, 112, 117, 125, 138, 151, 156, 157, 184, 197, 203, 216, 226, 238, 249, 255, 296, 297, 306, 337, 346, 369, 382, 388, 408, 415, 416, 419, 441, 442, 443, 445, 447, 449, 450, 451, 453, 459, 470, 514, 516, 524, 565, 643, 681, 730, 760, 802, 854, 861, 869, 888, 912, 1002, 1004, 1005, 1011, 1015, 1026, 1031], "tok": [353, 416], "token": [2, 58, 353, 363, 371, 380, 416, 538, 591, 592, 593, 594, 1035, 1043, 1047, 1053], "token_featur": 416, "token_freq": 353, "token_pattern": [353, 416, 591, 592, 594], "tokoroten": 1040, "tokyo": [876, 1016], "tol": [47, 50, 56, 106, 121, 145, 150, 169, 182, 195, 204, 206, 219, 220, 226, 228, 239, 250, 258, 308, 322, 347, 351, 378, 382, 415, 420, 444, 448, 450, 453, 460, 463, 472, 473, 479, 483, 484, 485, 533, 534, 535, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 551, 552, 561, 562, 563, 564, 605, 631, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 676, 678, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 695, 697, 699, 801, 802, 818, 857, 865, 866, 903, 904, 908, 909, 910, 911, 912, 913, 914, 990, 1001, 1019, 1020, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "tola": 1045, "told": 416, "toledano": 1043, "toler": [81, 106, 150, 182, 204, 206, 228, 229, 344, 353, 371, 378, 385, 408, 420, 444, 448, 453, 460, 463, 472, 473, 479, 483, 484, 485, 533, 534, 535, 537, 538, 542, 543, 544, 545, 546, 547, 549, 550, 561, 562, 563, 564, 631, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 680, 682, 683, 685, 686, 687, 688, 692, 693, 694, 695, 697, 698, 699, 848, 849, 853, 857, 865, 866, 903, 904, 908, 909, 910, 911, 912, 913, 914, 990, 1001, 1005, 1019, 1020, 1047, 1048, 1049, 1050], "toleranbc": 1044, "tolist": [44, 127, 146, 182, 269, 321, 371], "tom": [0, 398, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tom1092": 1048, "toma": 1039, "tomasz": 1048, "tomato": 213, "tomatti": 1050, "tomdlt": 1041, "tomiock": [1050, 1051], "tommaso": 1048, "tommi": [1042, 1043, 1044], "tomographi": [43, 56, 100, 184, 417, 656, 676, 1001, 1026], "tomohiro": 1048, "tomorrow": 407, "tom\u00e1": [1048, 1049], "tongyu": 1052, "toni": [371, 565, 888, 1011, 1048, 1049], "tonk": 1042, "too": [44, 47, 52, 53, 56, 65, 80, 84, 89, 91, 96, 107, 114, 125, 147, 150, 182, 187, 189, 198, 213, 216, 233, 243, 249, 256, 263, 264, 268, 277, 283, 307, 316, 340, 351, 357, 363, 373, 376, 382, 384, 388, 390, 406, 408, 410, 412, 415, 416, 417, 420, 438, 450, 540, 683, 696, 711, 843, 844, 845, 846, 847, 873, 886, 888, 1000, 1002, 1004, 1005, 1007, 1008, 1012, 1036, 1039, 1042, 1043, 1044, 1045, 1047, 1053], "took": [0, 44, 78, 278], "tool": [22, 30, 42, 49, 51, 53, 145, 187, 246, 264, 268, 273, 359, 369, 370, 371, 374, 376, 378, 379, 381, 382, 383, 384, 389, 390, 391, 393, 394, 399, 402, 408, 409, 410, 488, 696, 705, 994, 1000, 1001, 1005, 1011, 1015, 1020, 1022, 1024, 1025, 1029, 1042, 1045, 1048, 1049, 1050], "toolbox": [388, 1024, 1029], "toolchain": 374, "toolkit": [363, 1024, 1029], "toolset": 1029, "tooth": 122, "tootoonian": 1048, "top": [2, 46, 52, 54, 55, 56, 71, 73, 75, 77, 78, 79, 80, 85, 96, 98, 104, 123, 133, 140, 141, 143, 150, 155, 158, 187, 212, 214, 223, 227, 239, 249, 250, 255, 257, 258, 261, 267, 271, 279, 280, 295, 310, 312, 320, 326, 329, 330, 340, 344, 351, 359, 376, 378, 382, 388, 405, 406, 408, 413, 414, 415, 488, 590, 591, 594, 602, 704, 706, 730, 760, 798, 920, 922, 994, 997, 1001, 1003, 1013, 1024, 1029, 1049], "top10": 371, "top5": 351, "top_featur": 55, "top_features_ind": 55, "top_indic": 351, "top_k_accuraci": 1005, "top_k_accuracy_scor": [2, 1005, 1047, 1049], "tophat": [295, 414, 848, 849, 853], "topic": [43, 46, 47, 48, 103, 184, 351, 352, 353, 371, 372, 412, 413, 416, 489, 499, 538, 540, 542, 549, 591, 594, 1001, 1006, 1024, 1025, 1026, 1040, 1042], "topic_d": 48, "topic_idx": 55, "topic_word_prior": [413, 538], "topic_word_prior_": 538, "topisan": 1045, "toplak": 1051, "topolog": [464, 1024], "topologi": [236, 237], "torch": [404, 1053], "torgo": 370, "toronto": [536, 648, 864], "torr": [1044, 1053], "torrella": [1044, 1045, 1051], "tortois": 1001, "tosequ": 1053, "toshihiro": [1041, 1042, 1048], "toshniw": 1047, "tot": 52, "total": [2, 46, 52, 59, 69, 73, 87, 119, 134, 138, 140, 144, 165, 184, 198, 212, 214, 230, 243, 264, 270, 329, 330, 352, 358, 364, 370, 371, 373, 382, 390, 405, 408, 414, 416, 419, 431, 445, 466, 483, 484, 485, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 507, 512, 514, 516, 517, 521, 524, 525, 538, 546, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 572, 586, 587, 593, 597, 599, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 680, 681, 682, 683, 701, 708, 709, 717, 733, 734, 735, 738, 742, 743, 761, 773, 787, 788, 791, 798, 799, 800, 804, 818, 829, 830, 831, 841, 842, 843, 844, 851, 853, 859, 866, 883, 887, 909, 911, 914, 916, 917, 918, 919, 952, 994, 1001, 1002, 1005, 1006, 1007, 1008, 1015, 1019, 1020, 1021, 1026, 1036, 1041, 1043, 1051, 1052], "total_cel": 150, "total_fit_tim": 48, "total_sampl": [332, 538], "total_sz_mb": 48, "total_vect_tim": 48, "totalbsmtsf": 155, "totrmsabvgrd": 144, "tottim": 382, "tour": [0, 398, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tournament": 994, "toward": [0, 64, 65, 97, 114, 142, 147, 154, 171, 189, 194, 216, 217, 237, 249, 283, 347, 376, 390, 408, 449, 453, 463, 680, 682, 699, 882, 1004, 1019, 1021, 1023, 1025], "towncrier": [394, 401], "toyota": 52, "tp": [327, 408, 716, 722, 733, 734, 735, 786, 787, 788, 791, 920, 1005], "tp_c": 279, "tpng": 920, "tpot": 1024, "tpr": [51, 240, 249, 264, 267, 279, 280, 383, 706, 710, 793, 1005, 1032, 1035, 1051], "tpr_a": 279, "tpr_b": 279, "tpr_score": 264, "tprs_lower": 280, "tprs_upper": 280, "tr": [265, 373, 380, 408, 410, 470, 471, 472, 473, 474, 475, 476, 477], "trace": [384, 408, 421, 474, 476, 477, 480, 481, 482, 693, 697, 1002, 1046], "traceback": [376, 381, 384, 388, 469, 715, 1028, 1052], "traceord": 141, "tracer0tong": 1041, "trach": 1035, "track": [133, 139, 146, 330, 376, 379, 380, 404, 536, 973, 1006, 1024, 1025, 1042, 1045], "tracker": [375, 379, 384, 388, 391, 394, 402, 1025], "tracking_select": 973, "tractabl": [44, 412, 543, 638, 1024, 1048], "trade": [38, 95, 110, 141, 150, 189, 205, 216, 269, 271, 272, 283, 340, 351, 390, 407, 408, 410, 555, 556, 561, 562, 638, 660, 696, 804, 807, 808, 818, 831, 1002, 1009, 1017, 1019, 1020, 1025], "tradeoff": [89, 138, 184, 244, 252, 262, 277, 278, 279, 280, 351, 363, 376, 384, 414, 517, 566, 702, 706, 731, 793, 834, 869, 888, 908, 1002, 1026, 1044, 1047], "tradit": [56, 89, 212, 227, 352, 365, 406, 415, 416, 636, 698, 1001, 1004, 1015, 1024, 1029], "tradition": 1021, "traffic": 1029, "trail": [378, 988], "train": [2, 44, 45, 46, 47, 48, 50, 51, 53, 62, 64, 65, 67, 68, 69, 70, 90, 92, 98, 99, 103, 104, 108, 116, 117, 119, 121, 124, 125, 126, 127, 129, 133, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 152, 155, 156, 157, 160, 166, 171, 172, 173, 176, 177, 178, 179, 180, 184, 186, 187, 188, 189, 190, 192, 198, 199, 200, 202, 204, 206, 208, 209, 212, 213, 214, 217, 219, 220, 221, 224, 226, 227, 230, 239, 242, 244, 248, 257, 259, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 293, 296, 297, 298, 299, 301, 302, 303, 305, 306, 307, 310, 312, 314, 315, 319, 322, 326, 328, 329, 330, 333, 334, 336, 339, 346, 347, 353, 354, 357, 359, 363, 364, 365, 368, 371, 373, 378, 381, 388, 389, 390, 404, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 420, 438, 441, 442, 444, 445, 448, 450, 452, 453, 454, 455, 460, 466, 470, 471, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 495, 498, 499, 500, 502, 506, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 631, 632, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 692, 693, 695, 696, 700, 707, 745, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 873, 874, 877, 878, 881, 882, 886, 887, 888, 889, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 978, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "train_0": 44, "train_4": 44, "train_accuraci": [257, 284], "train_auc": 831, "train_ax": 126, "train_balanced_accuraci": 284, "train_cover_std": 51, "train_dataset": [187, 370], "train_errors_with": 145, "train_errors_without": 145, "train_fract": 1035, "train_idx": [53, 187, 390], "train_import": 189, "train_index": [257, 332, 412, 805, 806, 809, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825], "train_indx": 412, "train_pr": 145, "train_prec_macro": 412, "train_r2": 831, "train_rec_macro": 412, "train_result": 189, "train_sampl": [65, 227, 228], "train_scor": [220, 316, 347, 355, 810, 827, 831, 832, 835, 1000], "train_score_": [148, 415, 561, 562, 563, 564], "train_set": 406, "train_siz": [45, 47, 50, 135, 154, 172, 192, 228, 245, 249, 272, 283, 321, 324, 347, 806, 810, 821, 824, 832, 834, 1000, 1035, 1036, 1041, 1042], "train_size_ab": 832, "train_size_idx": 347, "train_sizes_ab": 832, "train_test_s": 245, "train_test_split": [2, 45, 46, 47, 50, 53, 62, 63, 65, 68, 69, 104, 108, 117, 126, 135, 140, 142, 145, 146, 147, 148, 149, 150, 151, 154, 165, 166, 186, 187, 189, 190, 192, 198, 208, 209, 212, 219, 220, 227, 228, 230, 240, 249, 252, 253, 263, 264, 267, 268, 273, 277, 279, 283, 289, 293, 298, 299, 305, 307, 308, 312, 314, 315, 317, 319, 320, 321, 326, 327, 333, 355, 358, 359, 381, 389, 404, 409, 412, 415, 438, 439, 560, 562, 569, 570, 701, 702, 704, 706, 803, 804, 826, 836, 839, 857, 865, 866, 868, 918, 919, 994, 995, 1005, 1007, 1008, 1013, 1015, 1020, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1048, 1052, 1053], "train_tim": [227, 245, 351, 352], "trainabl": 378, "traine": 1029, "training_data": 171, "training_data_": 1045, "training_idx": 179, "training_indic": 178, "training_noisy_target": 171, "training_sample_indic": 171, "training_tim": [145, 351], "training_time_early_stop": 145, "training_time_ful": 145, "trajectori": 139, "tran": 111, "trans_data": 234, "transact": [97, 264, 327, 373, 408, 410, 419, 421, 445, 449, 476, 536, 540, 542, 549, 565, 648, 668, 689, 690, 729, 730, 760, 773, 1001, 1005], "transax": [80, 96, 236, 239, 257, 298, 312], "transcript": 376, "transcriptom": 696, "transduc": 330, "transduct": [390, 408, 903, 904, 1025], "transduction_": [329, 330, 331, 903, 904, 905], "transfer": [150, 399, 404, 1001, 1025], "transform": [2, 7, 21, 24, 36, 38, 44, 45, 46, 48, 50, 54, 63, 80, 81, 82, 85, 88, 91, 96, 102, 106, 107, 117, 123, 124, 126, 127, 129, 130, 134, 139, 141, 144, 154, 166, 177, 183, 184, 187, 188, 192, 205, 212, 213, 220, 226, 228, 230, 233, 236, 239, 241, 242, 244, 246, 247, 249, 253, 257, 266, 267, 268, 271, 279, 289, 290, 292, 298, 299, 300, 310, 311, 312, 313, 314, 315, 316, 317, 319, 324, 326, 327, 340, 343, 344, 351, 353, 357, 359, 370, 371, 372, 373, 376, 378, 381, 385, 390, 399, 402, 404, 406, 408, 410, 411, 412, 413, 415, 416, 417, 418, 424, 429, 432, 438, 442, 443, 444, 446, 448, 450, 453, 465, 466, 467, 468, 469, 483, 484, 485, 486, 489, 490, 498, 505, 510, 511, 516, 517, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 559, 561, 563, 566, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 640, 642, 643, 644, 645, 646, 657, 662, 667, 677, 680, 688, 692, 693, 694, 695, 696, 698, 705, 706, 717, 757, 758, 789, 804, 807, 808, 818, 834, 837, 843, 852, 857, 860, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 906, 908, 910, 913, 914, 927, 929, 943, 945, 994, 995, 997, 999, 1001, 1002, 1005, 1006, 1009, 1019, 1020, 1022, 1024, 1026, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "transform_algorithm": [124, 130, 533, 539, 544, 1051], "transform_alpha": [124, 130, 533, 539, 544, 1048], "transform_dur": 290, "transform_func": 271, "transform_input": [868, 869], "transform_list": 867, "transform_max_it": [533, 539, 540, 544, 1045], "transform_method": 413, "transform_n_nonzero_coef": [124, 130, 533, 539, 544], "transform_n_nozero_coef": 130, "transform_output": [253, 264, 317, 469, 906, 1050, 1051], "transformed_grid": 153, "transformedtargetregressor": [2, 108, 187, 212, 388, 399, 409, 596, 597, 600, 1006, 1043, 1045, 1048, 1053], "transformer_": [246, 466], "transformer_list": [409, 867, 870, 995, 1046, 1047], "transformer_nam": [290, 465], "transformer_tag": 927, "transformer_weight": [103, 465, 468, 867, 1040, 1047], "transformermixin": [2, 246, 290, 378, 390, 466, 1043, 1050, 1051, 1052], "transformers_": [465, 468, 1052, 1053], "transformertag": [2, 927], "transfus": 240, "transit": [56, 347, 380, 402, 1046], "transitive_target": 56, "translat": [108, 418, 529, 618, 877, 878, 894, 1002, 1005, 1029], "transluc": 160, "transpar": [68, 312, 989, 1029], "transpos": [63, 270, 420, 540, 542, 549, 664, 665, 666, 667, 792, 952, 990, 997, 1005, 1017, 1035, 1049], "transposit": 952, "trapezoid": [2, 277, 710, 711, 1005], "travel": 0, "travers": [358, 1008, 1012, 1053], "travi": [1035, 1043], "treat": [44, 46, 104, 144, 155, 182, 187, 212, 279, 316, 321, 326, 332, 359, 376, 388, 390, 405, 415, 416, 443, 563, 564, 591, 592, 594, 610, 611, 636, 642, 649, 675, 678, 733, 734, 742, 758, 787, 788, 791, 792, 877, 878, 884, 885, 888, 889, 893, 896, 897, 899, 908, 909, 961, 995, 997, 1001, 1005, 1006, 1012, 1015, 1019, 1021, 1039, 1047, 1051, 1052], "treatment": [113, 186, 370, 407, 413, 470, 475, 1021], "tree": [2, 44, 47, 53, 64, 65, 68, 77, 80, 89, 96, 125, 127, 129, 134, 137, 138, 139, 141, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 158, 179, 182, 188, 190, 220, 221, 233, 246, 248, 249, 250, 267, 274, 276, 287, 289, 290, 295, 303, 310, 311, 315, 320, 321, 323, 359, 363, 371, 373, 378, 382, 389, 390, 393, 406, 407, 408, 414, 419, 438, 442, 443, 444, 445, 446, 447, 449, 451, 458, 464, 498, 502, 506, 516, 517, 521, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 635, 636, 637, 638, 662, 692, 696, 706, 707, 715, 746, 752, 792, 794, 810, 825, 831, 832, 834, 843, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 869, 872, 881, 916, 917, 918, 919, 920, 921, 922, 947, 995, 1002, 1005, 1006, 1011, 1012, 1024, 1025, 1026, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "tree_": [319, 355, 358, 853, 916, 917, 918, 919, 1052], "tree_copi": [848, 849], "tree_disp": 250, "tree_importance_sorted_idx": 190, "tree_optim": 287, "tree_preprocessor": [155, 212], "tree_stat": [848, 849], "treelit": 1024, "trein": 1038, "tremend": 415, "trend": [152, 176, 188, 242, 306, 1029, 1042], "trent": [1029, 1041], "trevor": [200, 373, 632, 660, 725, 727, 728, 995, 1001, 1017, 1039, 1040, 1043, 1044, 1045, 1047], "trevorstephen": [1039, 1041], "tri": [100, 129, 232, 283, 299, 344, 364, 378, 381, 388, 391, 406, 450, 452, 454, 635, 636, 637, 674, 696, 702, 704, 706, 818, 1010, 1037, 1043, 1047, 1053], "triag": [0, 376, 379, 391], "trial": [44, 275, 448, 450, 461, 675, 801, 802, 1001, 1041], "triangl": [390, 413, 444, 448, 460, 703, 1003, 1008], "triangular": [408, 464, 615, 1002], "tribe": 371, "trick": [2, 171, 245, 300, 344, 353, 362, 365, 379, 388, 409, 585, 592, 647, 676, 997, 998, 1009, 1019, 1020, 1031, 1036, 1044, 1052], "tricki": [406, 1002], "trickiest": 376, "trigg": 568, "trigger": [104, 105, 376, 380, 390, 402, 409, 865, 866, 868, 869, 934, 935, 952, 1001, 1043, 1049, 1050], "triglycerid": 373, "trim": [227, 408, 848, 849], "trimeta": 1046, "trinh": 1050, "tripl": 381, "triplet": 511, "tripramudya": 1051, "trishnendu": 1043, "tristan": 1001, "triu": 52, "trivial": [49, 214, 264, 355, 376, 408, 822, 910, 913, 1002, 1035], "troillard": [1051, 1052], "tropp": [537, 543], "troubl": [67, 416], "troubleshoot": 416, "troyanskaya": [632, 995], "true": [2, 44, 45, 46, 47, 48, 50, 51, 53, 55, 56, 64, 65, 67, 69, 71, 73, 80, 83, 84, 87, 88, 89, 91, 92, 94, 97, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 119, 121, 122, 123, 124, 126, 127, 131, 133, 135, 139, 141, 144, 146, 147, 149, 150, 151, 155, 156, 158, 160, 161, 165, 168, 171, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 198, 200, 201, 202, 204, 205, 206, 208, 209, 212, 214, 215, 216, 219, 220, 226, 227, 228, 230, 232, 235, 236, 239, 240, 243, 245, 246, 247, 248, 249, 252, 253, 255, 258, 260, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 295, 296, 299, 303, 305, 306, 307, 308, 311, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 330, 332, 333, 334, 343, 344, 346, 347, 348, 351, 352, 353, 355, 356, 358, 359, 363, 364, 369, 371, 372, 374, 376, 377, 378, 381, 382, 383, 385, 389, 390, 393, 399, 402, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 521, 524, 525, 526, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 715, 716, 717, 718, 719, 722, 723, 724, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 742, 743, 744, 745, 746, 747, 756, 758, 760, 765, 771, 773, 782, 786, 787, 788, 789, 790, 791, 792, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 822, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 927, 928, 932, 933, 934, 935, 945, 946, 947, 952, 953, 965, 966, 967, 969, 970, 974, 975, 976, 977, 985, 990, 992, 993, 994, 995, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "true_": [539, 640], "true_coef": [186, 198, 208, 283, 650, 651, 656, 664, 665, 666, 685, 686, 687], "true_cov": [470, 472, 473, 479], "true_den": 295, "true_fac": 248, "true_fun": 285, "true_h": 323, "true_k": 352, "true_label": [325, 329, 330], "true_nam": 46, "true_relev": [730, 760], "true_w": 323, "true_weight": 194, "trujillo": [1049, 1050], "truli": [273, 365, 716, 1005], "truncat": [2, 106, 153, 233, 385, 536, 537, 541, 542, 543, 546, 680, 682, 730, 760, 801, 857, 921, 952, 994, 1004, 1005, 1019, 1030, 1031, 1041, 1043], "truncate_mod": 77, "truncatedsvd": [2, 153, 233, 352, 413, 536, 537, 541, 542, 543, 696, 867, 870, 1037, 1042, 1046, 1047, 1049, 1053], "truong": 1041, "trust": [0, 113, 135, 190, 391, 402, 406, 1049], "trustworthi": [2, 323, 1043, 1044, 1049, 1050, 1051, 1052], "truth": [2, 28, 59, 69, 76, 83, 91, 92, 95, 110, 114, 117, 124, 128, 151, 179, 198, 207, 212, 213, 249, 261, 273, 352, 390, 408, 707, 708, 709, 712, 716, 717, 718, 719, 721, 722, 725, 727, 728, 730, 732, 733, 734, 738, 740, 741, 742, 743, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 787, 788, 789, 790, 791, 794, 795, 799, 800, 1005, 1043, 1049], "truthi": [2, 965], "try": [44, 46, 51, 53, 55, 63, 75, 87, 124, 135, 141, 143, 150, 171, 177, 183, 186, 188, 192, 194, 202, 209, 246, 256, 257, 264, 270, 287, 290, 303, 342, 347, 351, 352, 371, 374, 375, 376, 381, 382, 384, 388, 390, 394, 396, 399, 402, 408, 411, 412, 415, 416, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 505, 569, 580, 592, 662, 677, 679, 693, 697, 803, 804, 807, 808, 816, 818, 826, 829, 830, 831, 833, 886, 888, 891, 893, 894, 895, 896, 897, 898, 899, 908, 933, 988, 994, 1001, 1002, 1011, 1020, 1021, 1025, 1028, 1029, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "tr\u00e9segni": [0, 1037], "ts_cv": [44, 53, 150], "tscv": [412, 825], "tseng": 408, "tsetogl": 1050, "tsilhouett": 92, "tslearn": 1024, "tsne": [2, 184, 232, 233, 234, 236, 237, 291, 292, 323, 390, 422, 432, 498, 692, 693, 694, 852, 856, 869, 978, 1002, 1008, 1026, 1038, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "tsne_param": 290, "tsoumaka": [724, 738, 744, 1005], "tspeng": [1050, 1051], "tsuga": 1048, "tsujii": 1019, "tsukada": 1047, "tsuruoka": 1019, "tsutomu": 1046, "tt": [156, 265, 466], "ttang131": 1045, "ttime": 92, "tttthomasssss": 1039, "tube": [914, 1020], "tue": [44, 53, 150, 188, 1041], "tuft": 450, "tuhin": 1053, "tuk": 1053, "tulio": [1043, 1044], "tulken": 1045, "tulloch": [1038, 1039], "tumor": [373, 407], "tune": [2, 44, 65, 80, 89, 104, 126, 135, 141, 150, 168, 169, 171, 182, 184, 188, 202, 216, 217, 229, 236, 240, 249, 262, 263, 273, 274, 275, 277, 287, 292, 311, 332, 340, 344, 347, 351, 359, 363, 364, 365, 389, 390, 403, 406, 408, 412, 415, 417, 418, 453, 463, 498, 553, 561, 562, 563, 597, 613, 617, 618, 619, 621, 623, 624, 626, 627, 629, 647, 662, 663, 694, 698, 704, 706, 722, 746, 788, 791, 803, 804, 820, 826, 831, 834, 864, 869, 888, 906, 913, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1011, 1019, 1020, 1024, 1026, 1031, 1035, 1049, 1051, 1053], "tuned_classifi": 327, "tuned_model": [264, 284], "tuned_model_coef": 284, "tuned_param": 47, "tuned_paramet": [110, 160, 268], "tunedthresholdclassifiercv": [2, 264, 284, 407, 803, 1053], "tupl": [48, 83, 89, 130, 188, 230, 369, 370, 371, 390, 412, 420, 433, 452, 454, 465, 468, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 507, 510, 512, 513, 514, 515, 516, 524, 535, 563, 564, 569, 570, 571, 572, 585, 586, 587, 590, 591, 592, 594, 613, 631, 636, 637, 638, 715, 716, 723, 746, 785, 787, 801, 804, 818, 831, 848, 849, 867, 868, 878, 879, 883, 886, 894, 898, 910, 911, 912, 913, 914, 923, 935, 936, 938, 942, 943, 944, 945, 946, 970, 971, 988, 993, 1012, 1041, 1042, 1046, 1047, 1048, 1053], "tur": 1053, "turn": [2, 31, 44, 69, 110, 182, 183, 187, 198, 227, 228, 244, 270, 294, 327, 353, 363, 364, 365, 371, 388, 390, 391, 408, 409, 411, 413, 416, 417, 418, 584, 585, 592, 610, 611, 837, 841, 910, 913, 937, 995, 999, 1007, 1010, 1015, 1029, 1040, 1042, 1043, 1048], "turquois": [125, 129, 130, 149, 218, 229, 235, 257, 258, 277], "tushar": 1053, "tutori": [113, 160, 161, 162, 202, 214, 230, 270, 376, 377, 382, 384, 402, 408, 453, 463, 695, 1020, 1031, 1038], "tuveri": 1050, "tuzova": 1043, "tv": 92, "tw": [192, 370, 488, 510, 511, 662, 1020], "tweak": [2, 114, 246, 412, 970, 1004, 1046], "tweedi": [2, 184, 193, 212, 465, 498, 554, 652, 673, 684, 710, 728, 749, 751, 753, 754, 756, 834, 869, 872, 873, 881, 888, 1001, 1026, 1045, 1046, 1048], "tweedie_pow": 230, "tweedieregressor": [2, 44, 320, 323, 652, 673, 1001, 1046, 1049, 1050], "tweet": 1029, "twelfth": 700, "twenti": [58, 243, 373, 405, 408], "twice": [65, 264, 282, 284, 351, 353, 378, 418, 623, 734, 736, 954, 1044, 1052], "twine": 380, "twinx": 332, "twister": 1046, "twitter": 380, "two": [2, 38, 44, 47, 49, 51, 55, 59, 62, 64, 67, 71, 73, 75, 76, 79, 89, 94, 98, 103, 104, 108, 112, 116, 117, 119, 121, 123, 124, 126, 127, 129, 134, 135, 136, 143, 144, 145, 147, 150, 151, 152, 153, 156, 166, 169, 171, 172, 173, 174, 177, 178, 182, 183, 184, 187, 188, 189, 194, 198, 200, 202, 203, 204, 205, 212, 213, 214, 220, 221, 224, 229, 230, 234, 236, 237, 239, 244, 246, 247, 249, 255, 256, 257, 259, 260, 261, 264, 265, 267, 271, 277, 287, 293, 295, 298, 299, 301, 303, 310, 312, 315, 319, 320, 322, 323, 327, 331, 336, 337, 340, 341, 342, 344, 348, 351, 352, 353, 356, 357, 359, 369, 370, 371, 372, 373, 374, 376, 378, 380, 382, 383, 384, 388, 390, 391, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 442, 443, 444, 445, 446, 448, 451, 452, 453, 454, 458, 460, 465, 470, 471, 472, 473, 474, 475, 476, 477, 489, 491, 492, 494, 495, 496, 498, 500, 502, 503, 504, 505, 506, 507, 509, 512, 516, 521, 524, 538, 540, 542, 546, 549, 551, 552, 555, 562, 572, 584, 587, 593, 594, 595, 598, 599, 601, 602, 603, 604, 605, 606, 609, 610, 611, 614, 615, 624, 625, 628, 632, 635, 636, 643, 647, 649, 674, 675, 677, 696, 703, 707, 708, 709, 716, 719, 720, 723, 725, 726, 727, 728, 735, 736, 739, 740, 742, 745, 747, 758, 759, 761, 767, 768, 775, 778, 781, 782, 783, 784, 785, 789, 790, 798, 799, 800, 801, 837, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 866, 872, 873, 880, 881, 882, 883, 902, 903, 904, 908, 909, 916, 918, 919, 967, 983, 984, 990, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "two_d_arrai": 925, "two_d_label": 928, "two_mean": 80, "two_point_correl": [848, 849], "twoclass_output": 137, "twosigmajab": 1043, "twx": 52, "tx": 411, "tx_k": [411, 999], "txn": 52, "txt": [351, 370, 376, 495, 505], "ty": 411, "ty_k": 411, "tyagi": 1049, "tygert": [537, 543, 952], "tyler": [1042, 1048, 1049, 1050], "type": [2, 47, 53, 87, 99, 102, 103, 113, 119, 127, 130, 143, 144, 146, 176, 183, 184, 186, 187, 188, 192, 198, 212, 214, 241, 246, 251, 253, 254, 256, 257, 260, 261, 264, 265, 271, 276, 277, 279, 280, 281, 283, 284, 287, 300, 316, 326, 344, 351, 353, 358, 359, 364, 369, 370, 371, 373, 376, 379, 380, 381, 382, 389, 394, 396, 402, 405, 409, 416, 425, 426, 427, 430, 431, 432, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 498, 510, 511, 517, 569, 574, 584, 585, 591, 592, 594, 603, 607, 621, 631, 633, 634, 642, 660, 662, 676, 678, 683, 691, 693, 696, 697, 703, 705, 711, 718, 720, 733, 734, 737, 742, 787, 788, 791, 792, 801, 802, 804, 810, 818, 827, 832, 834, 835, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 868, 869, 870, 873, 875, 881, 882, 888, 889, 906, 910, 911, 912, 913, 914, 927, 929, 930, 932, 934, 935, 938, 942, 943, 967, 968, 991, 995, 997, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1015, 1017, 1021, 1026, 1028, 1029, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "type_check": 380, "type_filt": 943, "type_of_target": [2, 390, 875, 889, 1006, 1049, 1050, 1052, 1053], "type_of_target_": 889, "typed_ndarrai": 376, "typeerror": [246, 322, 381, 715, 938, 961, 988, 1042, 1043, 1046, 1048, 1052], "typic": [26, 63, 65, 125, 133, 145, 192, 198, 212, 216, 230, 245, 272, 273, 277, 279, 280, 296, 297, 321, 340, 352, 363, 369, 370, 371, 374, 378, 379, 385, 389, 390, 402, 404, 406, 408, 409, 412, 413, 415, 416, 418, 444, 448, 450, 498, 543, 553, 557, 558, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 633, 642, 644, 647, 658, 659, 660, 675, 686, 687, 716, 850, 858, 875, 882, 886, 889, 951, 952, 957, 961, 964, 989, 994, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1011, 1013, 1029, 1044, 1048, 1051, 1052], "typo": [376, 391, 399, 1035], "tzu": 1039, "t\u00e9l\u00e9com": 0, "u": [44, 50, 51, 52, 53, 56, 71, 84, 86, 90, 121, 127, 128, 144, 145, 150, 171, 180, 186, 187, 188, 213, 216, 220, 230, 233, 236, 243, 246, 252, 253, 256, 257, 261, 264, 265, 270, 273, 277, 283, 284, 344, 351, 358, 364, 371, 374, 376, 380, 382, 384, 388, 394, 399, 405, 408, 411, 413, 415, 416, 431, 464, 466, 483, 484, 485, 533, 539, 547, 548, 552, 554, 556, 558, 560, 562, 564, 567, 570, 572, 591, 592, 594, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 685, 688, 693, 697, 708, 724, 744, 759, 841, 842, 851, 859, 866, 888, 902, 909, 911, 914, 917, 919, 952, 997, 999, 1004, 1005, 1012, 1015, 1029, 1032, 1045], "u2uwz2": 373, "u_": [405, 483, 484, 485], "u_1": [405, 997], "u_2": [405, 997], "u_i": [408, 483, 484, 485, 759], "u_init": 545, "u_k": [411, 413], "uai": 1017, "ubuntu": [363, 374, 382, 384], "uchida": 1045, "uci": [48, 264, 315, 370, 373, 502, 504, 506, 512], "ucl": 1018, "ucla": 1001, "udi": 1035, "udit": 1049, "ufmay": 1047, "ufunc": 1052, "ugli": [221, 298, 301, 336], "ugo": 1049, "ugurcaliskan": 1039, "ugurthemast": [1038, 1039], "uhmann": 1048, "uieda": 1048, "uint": 1046, "uint32": [371, 499], "uint8": [124, 370, 499, 508, 509, 1047], "uk": [675, 1018], "ulloa": 1041, "ulrik": [408, 453, 463, 695], "ulterior": 53, "ultim": [89, 236, 377], "umar": [1043, 1044], "umass": [46, 371], "umberto": 1047, "umbrella": 407, "umpi": 416, "un": [52, 376, 406, 416, 420, 535, 592, 799, 871, 880, 891, 895, 1044], "unabl": [186, 187, 198, 212, 264, 365, 888, 1015, 1044], "unadjust": [408, 1005, 1047], "unaffect": 1008, "unalt": 1005, "unambigu": [279, 1006, 1041], "unanim": 391, "unavail": [390, 662, 663, 965, 1042, 1048], "unbalanc": [2, 184, 273, 335, 338, 341, 412, 514, 635, 913, 939, 940, 994, 1019, 1026], "unbias": [110, 406, 410, 413, 438, 552, 660, 676, 678, 691, 1001], "unbound": [73, 1004, 1049, 1053], "uncalibr": [62, 63, 64, 438], "uncent": 196, "uncertain": [270, 330, 375], "uncertainti": [63, 150, 171, 178, 194, 272, 406, 408, 569, 570, 647, 868, 995, 1017], "uncertainty_index": [329, 330], "unchang": [177, 187, 230, 277, 415, 432, 438, 443, 444, 445, 446, 447, 448, 450, 465, 466, 469, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 696, 767, 803, 805, 806, 811, 813, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 855, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 993, 1008, 1043, 1049, 1051], "unclaim": 379, "unclear": [375, 376, 503], "unclust": 447, "uncommon": [410, 662, 908, 1020], "uncompress": [48, 510, 511], "unconstrain": [150, 152, 188, 320, 326, 371, 1019], "uncorrect": [270, 598, 601], "uncorrel": [2, 276, 372, 530, 536, 543, 1005], "uncorrupt": 45, "uncov": [131, 699], "undefin": [53, 273, 390, 716, 733, 742, 787, 973, 1005, 1043, 1047, 1051], "undefinedmetricwarn": [2, 733, 734, 787, 788, 791, 1044], "under": [2, 44, 47, 51, 62, 63, 65, 77, 101, 110, 111, 128, 144, 147, 188, 201, 212, 239, 249, 270, 277, 279, 280, 311, 325, 370, 376, 378, 380, 382, 384, 390, 394, 402, 406, 408, 410, 412, 413, 416, 417, 447, 452, 454, 471, 472, 473, 474, 475, 476, 477, 493, 534, 541, 543, 545, 658, 659, 660, 706, 710, 711, 712, 719, 758, 792, 793, 801, 802, 853, 960, 1001, 1002, 1003, 1005, 1008, 1015, 1019, 1020, 1021, 1024, 1025, 1035, 1037, 1038, 1040, 1043, 1047], "underdetermin": 198, "underestim": [53, 147, 188, 212, 230, 270, 376], "underfit": [44, 71, 147, 171, 184, 189, 213, 216, 262, 283, 305, 316, 347, 415, 661, 804, 807, 808, 818, 830, 831, 868, 883, 1000, 1001, 1026], "underflow": [1043, 1048], "undergo": 276, "undergrad": 1029, "underli": [65, 90, 112, 154, 169, 187, 190, 213, 215, 216, 246, 264, 275, 294, 295, 344, 357, 364, 376, 388, 390, 393, 399, 404, 406, 408, 410, 412, 413, 414, 415, 417, 418, 438, 452, 453, 454, 463, 465, 466, 472, 473, 479, 526, 557, 558, 566, 567, 569, 570, 571, 572, 596, 597, 600, 605, 662, 663, 669, 672, 677, 679, 684, 695, 699, 803, 804, 807, 808, 818, 826, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 851, 853, 905, 908, 916, 917, 918, 919, 969, 993, 1001, 1002, 1006, 1011, 1018, 1020, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1052, 1053], "underrepres": 376, "underscor": [353, 378, 390, 988, 1035, 1045, 1048], "underscur": 378, "underset": [413, 1001, 1008, 1021], "understand": [44, 49, 53, 77, 135, 176, 184, 188, 246, 264, 265, 268, 284, 321, 322, 337, 344, 351, 354, 355, 359, 375, 376, 377, 382, 388, 393, 408, 415, 416, 506, 834, 865, 866, 916, 917, 918, 919, 922, 994, 995, 1002, 1004, 1021, 1023, 1024, 1026, 1029, 1035, 1049], "understood": [271, 376, 408, 961], "undertak": 388, "undesir": [91, 172, 418, 826], "undistinguish": 412, "undistort": 124, "undo": [271, 878, 1039], "undocu": 1042, "unequ": [91, 1043], "uneth": 186, "uneven": [86, 265, 408, 412], "unevenli": [91, 212, 265], "unexpect": [91, 359, 376, 381, 384, 394, 402, 537, 700, 1005, 1020, 1037, 1043, 1044, 1047, 1049, 1051, 1053], "unexpectedli": [390, 1043], "unfair": 359, "unfinish": [375, 376], "unfit": [2, 90, 378, 409, 433, 465, 571, 572, 605, 615, 1043, 1045, 1052], "unfold": [126, 379, 1002], "unfortun": [147, 186, 187, 230, 384, 388, 415, 510, 511], "unhandl": 1044, "unhelp": 376, "unicod": [353, 416, 488, 505, 585, 591, 592, 594, 969, 1035, 1043, 1047], "unicodedata": [591, 592, 594], "unicodedecodeerror": [416, 591, 592, 594], "unifi": [287, 377, 385, 388, 389, 415, 641, 1024, 1025, 1035], "unifom": 293, "uniform": [2, 59, 68, 73, 87, 146, 147, 151, 165, 172, 177, 180, 194, 195, 226, 237, 239, 242, 278, 293, 296, 297, 302, 305, 311, 313, 314, 317, 323, 325, 339, 381, 402, 408, 439, 440, 553, 571, 572, 614, 615, 632, 643, 653, 654, 658, 672, 680, 681, 682, 703, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 808, 816, 818, 843, 844, 847, 850, 851, 855, 858, 859, 873, 885, 887, 897, 939, 954, 994, 995, 1004, 1005, 1008, 1041, 1043, 1045, 1049, 1051], "uniform_averag": [431, 466, 483, 484, 485, 556, 558, 560, 562, 564, 567, 570, 572, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 725, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1005, 1044], "uniform_labelings_scor": 73, "uniformli": [73, 141, 147, 164, 239, 255, 319, 378, 518, 519, 520, 553, 646, 808, 816, 818, 887, 994, 995, 1005, 1008, 1015, 1039, 1044], "unigram": [271, 371, 416, 591, 592, 594, 1042], "unilev": 52, "unimod": [239, 475], "unimport": [417, 1013], "uninform": [63, 65, 317, 372, 381, 416, 994, 1001, 1043], "uniniti": 384, "uninstal": 374, "unintention": 1015, "unintuit": 91, "union": [103, 187, 409, 742, 758, 867, 1042], "uniqu": [2, 44, 62, 67, 78, 82, 91, 92, 97, 101, 106, 142, 148, 149, 150, 189, 198, 227, 230, 257, 279, 299, 316, 317, 325, 332, 351, 352, 353, 370, 378, 385, 390, 408, 409, 412, 415, 416, 441, 451, 455, 457, 465, 468, 498, 551, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 566, 567, 568, 614, 637, 638, 639, 670, 672, 680, 701, 713, 715, 758, 786, 804, 806, 818, 831, 836, 837, 840, 846, 855, 858, 860, 865, 867, 879, 881, 882, 889, 892, 908, 910, 916, 917, 918, 919, 939, 952, 967, 968, 1001, 1006, 1015, 1029, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "unique_label": [2, 83, 89, 352, 378, 385], "unit": [2, 64, 112, 187, 192, 212, 230, 295, 307, 310, 327, 352, 371, 376, 378, 382, 384, 385, 413, 416, 420, 465, 490, 491, 521, 526, 534, 535, 536, 543, 544, 592, 593, 594, 610, 611, 615, 662, 663, 680, 689, 703, 774, 855, 864, 865, 866, 872, 878, 880, 884, 886, 888, 894, 895, 896, 898, 899, 908, 909, 1001, 1003, 1004, 1005, 1010, 1015, 1021, 1039, 1043, 1049, 1050], "unit_eig_vec": 255, "unit_vari": [886, 898, 1047], "unitari": 952, "uniti": 31, "univ": [693, 697, 1002], "univ_select": 107, "univari": [2, 18, 49, 50, 72, 85, 105, 107, 163, 164, 166, 184, 197, 211, 227, 335, 368, 408, 409, 416, 446, 506, 527, 532, 595, 598, 599, 601, 602, 603, 605, 608, 609, 610, 611, 612, 631, 632, 633, 634, 649, 804, 809, 830, 834, 868, 869, 878, 883, 887, 888, 908, 913, 1001, 1020, 1022, 1026, 1027, 1031, 1035, 1041], "univers": [0, 179, 187, 371, 373, 379, 408, 413, 416, 593, 792, 843, 847, 903, 1001, 1003, 1005, 1007], "unix": 416, "unknown": [53, 90, 187, 246, 270, 329, 331, 365, 371, 390, 402, 405, 416, 875, 881, 882, 967, 1004, 1015, 1039, 1043, 1047, 1048], "unknown_typ": 402, "unknown_valu": [144, 155, 189, 249, 316, 882, 1015, 1047, 1049, 1050], "unlabel": [39, 46, 247, 321, 329, 330, 331, 333, 334, 390, 408, 903, 904, 905, 1004, 1047], "unlabeled_indic": 330, "unlabeled_set": 329, "unless": [186, 246, 256, 261, 376, 379, 388, 390, 402, 406, 408, 411, 419, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 473, 490, 498, 510, 511, 533, 537, 538, 539, 541, 544, 545, 547, 548, 549, 550, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 597, 605, 610, 611, 614, 615, 636, 638, 643, 650, 651, 655, 656, 657, 659, 661, 662, 663, 665, 667, 669, 670, 672, 680, 683, 692, 693, 694, 695, 696, 697, 698, 713, 718, 778, 782, 785, 804, 807, 808, 810, 818, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 850, 851, 854, 856, 858, 859, 861, 862, 865, 866, 867, 870, 889, 893, 894, 896, 897, 898, 899, 903, 904, 916, 917, 918, 919, 927, 930, 934, 935, 952, 1001, 1004, 1006, 1035, 1037, 1041, 1043, 1046, 1047, 1052, 1053], "unlik": [89, 90, 141, 187, 188, 232, 234, 260, 310, 338, 376, 378, 382, 388, 390, 399, 402, 410, 412, 413, 416, 447, 451, 537, 654, 655, 658, 659, 660, 686, 687, 789, 825, 848, 849, 888, 899, 911, 1001, 1004, 1005, 1012, 1020, 1035, 1041], "unlimit": [559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919], "unlucki": 359, "unmaintain": 1035, "unmeaning": 1042, "unmix": [122, 420, 535], "unmixing_matrix": 535, "unmodifi": [378, 390], "unnecessari": [141, 255, 381, 428, 444, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 709, 1008, 1015, 1029, 1038, 1040, 1045, 1046, 1048, 1051], "unnecessarili": [236, 1042, 1045], "unnorm": [390, 538, 1002, 1041, 1042], "unobserv": [150, 186, 187, 413], "unord": [408, 415, 1015], "unpack": 378, "unpen": [406, 652, 673, 684, 1001], "unpickl": [2, 390, 579, 848, 849, 1041, 1047, 1051], "unpleas": 1037, "unpract": 1004, "unprefix": 1041, "unprocess": [451, 591, 592, 594], "unprotect": 970, "unprun": [559, 560, 566, 567, 916, 917, 918, 919], "unquot": 230, "unrealist": 371, "unreason": [230, 412], "unreg": 345, "unregular": [881, 904, 1044], "unrel": [316, 364, 376, 381, 384, 416, 517], "unreli": [264, 409], "unrepresent": 923, "unrestrict": 495, "unrol": 236, "unrot": 131, "unsaf": 536, "unsampl": 997, "unscal": [310, 315, 1001, 1005, 1043, 1049], "unscaled_clf": 315, "unseen": [110, 145, 166, 202, 216, 220, 296, 344, 365, 368, 378, 389, 390, 408, 412, 854, 885, 897, 996, 1005, 1011, 1013, 1015, 1021, 1038, 1043, 1047], "unseen_featur": [416, 584], "unset": [364, 390, 1043], "unsetmetadatapassederror": 399, "unshad": 413, "unshifft": 681, "unshift": 912, "unsign": [87, 125, 371, 585, 969], "unsmooth": 414, "unsort": [1008, 1036, 1039, 1043], "unspecifi": [602, 603, 1002], "unstabl": [75, 100, 187, 404, 408, 410, 411, 693, 697, 951, 952, 1021, 1039, 1040, 1042, 1047, 1049, 1051], "unstack": [230, 273], "unstructur": [54, 72, 75, 76, 77, 82, 184, 236, 307, 408, 442, 446, 464, 505, 532, 861, 1017, 1026, 1029, 1039], "unsuccess": 51, "unsupervis": [2, 6, 28, 35, 46, 52, 73, 83, 105, 106, 117, 121, 140, 153, 239, 247, 296, 297, 339, 351, 352, 359, 368, 371, 378, 389, 390, 408, 411, 413, 414, 415, 416, 417, 432, 443, 446, 534, 536, 538, 539, 541, 544, 545, 551, 565, 568, 569, 571, 572, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 632, 634, 638, 639, 642, 643, 644, 645, 646, 681, 804, 807, 808, 810, 818, 827, 832, 835, 850, 851, 854, 856, 857, 858, 859, 864, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 889, 900, 901, 905, 912, 1002, 1005, 1011, 1018, 1027, 1031, 1035, 1038, 1048, 1052], "unsupport": [399, 402, 495, 1043, 1048], "unsur": 909, "untangl": 126, "untar": 48, "unterthin": [1038, 1039, 1040], "until": [89, 169, 220, 282, 321, 323, 381, 390, 391, 405, 408, 412, 417, 510, 511, 559, 560, 561, 562, 566, 567, 568, 596, 650, 651, 656, 657, 662, 663, 664, 665, 666, 667, 670, 671, 672, 675, 680, 681, 682, 698, 801, 802, 807, 808, 865, 866, 905, 908, 916, 917, 918, 919, 979, 994, 1001, 1002, 1010, 1018, 1021, 1038, 1042, 1043, 1049], "untransform": [344, 465, 468, 1016], "untru": 1005, "untrust": 402, "untun": [147, 327], "unus": [127, 188, 232, 234, 464, 582, 767, 775, 994, 1002, 1035, 1043, 1045, 1046, 1048, 1050], "unusu": [65, 405, 1011, 1015, 1043], "unveil": 1041, "unvendor": 1043, "unwant": [213, 351], "unweight": [183, 225, 464, 651, 657, 682, 711, 717, 733, 734, 742, 787, 788, 791, 792, 843, 844, 845, 846, 847, 995], "unwieldi": 879, "uoa": 901, "up": [2, 48, 51, 73, 80, 81, 82, 86, 89, 91, 96, 103, 112, 113, 119, 133, 140, 150, 183, 187, 188, 194, 198, 206, 213, 228, 229, 257, 264, 272, 275, 290, 303, 308, 311, 316, 323, 327, 330, 337, 344, 347, 353, 365, 370, 371, 376, 380, 382, 383, 384, 385, 388, 390, 391, 406, 408, 413, 415, 416, 444, 448, 449, 450, 451, 453, 457, 460, 461, 462, 510, 511, 538, 551, 552, 559, 560, 561, 562, 563, 564, 566, 567, 568, 614, 631, 636, 637, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 685, 686, 687, 688, 696, 709, 773, 801, 802, 806, 807, 808, 810, 832, 868, 869, 882, 883, 886, 898, 916, 917, 918, 919, 922, 952, 955, 956, 994, 997, 1001, 1002, 1005, 1008, 1015, 1019, 1020, 1025, 1028, 1029, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "upadhyai": [1041, 1042, 1043, 1044], "upcast": [1045, 1049], "upcom": [176, 374], "upcoming_chang": [376, 384], "updat": [48, 80, 96, 135, 141, 149, 244, 319, 353, 375, 376, 379, 384, 390, 402, 408, 413, 415, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 801, 802, 803, 804, 805, 806, 807, 808, 811, 813, 818, 822, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 979, 1001, 1008, 1009, 1010, 1019, 1028, 1029, 1036, 1042, 1043, 1044, 1046, 1048, 1050, 1051, 1053, 1054, 1055], "update_environments_and_lock_fil": 376, "update_from": 297, "update_func": 297, "update_h": 549, "update_layout": [141, 271], "update_legend_marker_s": 297, "update_terminal_region": 1044, "upgrad": [319, 320, 321, 322, 323, 324, 325, 326, 327, 374, 394, 1025, 1035, 1040, 1043], "upload": [370, 374, 380, 388, 675], "upload_d": 370, "upon": [230, 237, 246, 303, 371, 376, 388, 390, 402, 563, 564, 631, 634, 675, 793, 801, 802, 848, 849, 994, 1001, 1021, 1049], "upper": [44, 47, 49, 62, 105, 108, 111, 112, 113, 123, 127, 137, 138, 139, 146, 147, 148, 149, 155, 157, 165, 180, 187, 207, 212, 218, 219, 222, 226, 229, 230, 243, 247, 248, 269, 270, 271, 284, 295, 296, 306, 315, 332, 339, 342, 344, 346, 408, 414, 464, 591, 592, 594, 598, 617, 618, 619, 621, 623, 624, 626, 627, 629, 636, 637, 639, 641, 654, 658, 681, 739, 792, 881, 882, 910, 911, 912, 938, 1004, 1005, 1008, 1015, 1019, 1020, 1021, 1043], "upperbound": 738, "uppercas": [390, 1048], "uppercase_initi": 416, "upperlimit": 708, "upright": 371, "upstream": [363, 376, 380, 384, 388, 1015, 1044], "upward": [451, 457], "ur": 1046, "urbanowicz": 1005, "urbanowicz2015": 1005, "urcrnrlat": [51, 303], "urcrnrlon": [51, 303], "uri": 56, "url": [52, 53, 56, 370, 373, 378, 380, 493], "urllib": [48, 56], "urlopen": 56, "urlretriev": 48, "urlu": 1053, "urvang": [1043, 1045], "us": [0, 2, 15, 16, 20, 26, 28, 31, 38, 43, 44, 47, 48, 49, 51, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 67, 69, 71, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 117, 119, 120, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 216, 217, 218, 220, 221, 224, 227, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 333, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 347, 350, 353, 355, 357, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 383, 385, 389, 390, 391, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 418, 419, 420, 421, 422, 424, 426, 427, 428, 429, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 495, 496, 498, 501, 505, 510, 511, 513, 516, 517, 518, 521, 522, 524, 525, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 578, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 741, 742, 743, 745, 746, 747, 749, 750, 752, 754, 755, 757, 759, 760, 761, 762, 763, 767, 768, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 925, 927, 930, 933, 934, 935, 937, 940, 941, 945, 947, 949, 951, 952, 956, 957, 960, 961, 962, 964, 967, 971, 973, 975, 976, 978, 980, 981, 982, 988, 993, 994, 995, 997, 998, 1000, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "usa": [269, 371, 905, 995, 1002, 1017, 1018], "usabl": [150, 370, 376, 390, 402, 416, 804, 1035, 1042, 1049, 1050], "usag": [42, 78, 87, 107, 116, 125, 133, 166, 240, 244, 246, 263, 299, 301, 307, 336, 353, 363, 371, 375, 376, 379, 383, 384, 386, 390, 391, 394, 402, 408, 412, 413, 418, 419, 441, 445, 447, 451, 455, 462, 465, 472, 490, 496, 498, 525, 536, 537, 543, 551, 563, 564, 594, 612, 644, 652, 662, 663, 664, 670, 671, 672, 673, 680, 681, 682, 683, 684, 694, 782, 785, 796, 797, 864, 865, 867, 908, 910, 913, 916, 917, 918, 919, 952, 994, 995, 997, 1004, 1005, 1006, 1008, 1020, 1027, 1028, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "usd": 249, "use_encoded_valu": [144, 155, 189, 249, 316, 882, 1015, 1047], "use_group": 265, "use_idf": [413, 416, 593, 594], "usecas": [320, 323, 325, 408, 564], "useless": [55, 143, 273, 382, 417, 517, 530, 662, 716, 1001, 1015, 1044], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 63, 65, 89, 102, 121, 141, 148, 180, 184, 187, 188, 190, 200, 232, 246, 260, 267, 277, 279, 287, 290, 296, 297, 300, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 359, 363, 364, 370, 374, 375, 376, 378, 380, 382, 383, 384, 388, 389, 390, 394, 396, 399, 402, 406, 408, 409, 410, 412, 413, 415, 416, 417, 419, 420, 421, 422, 425, 431, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 922, 948, 952, 994, 995, 1001, 1002, 1004, 1005, 1006, 1008, 1015, 1019, 1024, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "user_guid": 44, "user_r": 409, "userguid": 1042, "usernam": 394, "userscript": 384, "userwarn": [80, 96, 381, 716, 1015, 1041, 1043, 1048, 1053], "ushtanit": [1047, 1048], "using_kernels_tut": 162, "usp": 45, "usr": 374, "usual": [44, 53, 76, 110, 111, 113, 146, 147, 149, 155, 186, 188, 199, 212, 213, 263, 264, 267, 270, 279, 280, 284, 311, 322, 340, 359, 363, 364, 374, 376, 378, 380, 384, 388, 389, 390, 394, 399, 405, 408, 409, 412, 413, 415, 416, 417, 451, 457, 540, 542, 544, 549, 561, 562, 610, 611, 634, 644, 662, 663, 670, 671, 672, 680, 681, 682, 696, 730, 762, 810, 832, 836, 908, 925, 952, 994, 995, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1015, 1019, 1020, 1021, 1050], "utc": 1005, "utf": [351, 353, 416, 488, 505, 585, 591, 592, 594], "util": [2, 4, 10, 17, 36, 39, 48, 50, 51, 89, 90, 95, 133, 135, 148, 155, 190, 205, 212, 220, 228, 234, 242, 246, 248, 258, 276, 278, 290, 312, 319, 332, 340, 344, 351, 364, 370, 371, 376, 377, 378, 379, 388, 389, 390, 404, 407, 408, 409, 412, 413, 416, 438, 444, 445, 448, 450, 454, 466, 469, 483, 484, 485, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 580, 593, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 694, 803, 804, 805, 806, 811, 813, 822, 826, 828, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 855, 858, 859, 865, 866, 868, 871, 873, 874, 875, 880, 887, 888, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 1000, 1003, 1005, 1006, 1015, 1016, 1024, 1029, 1031, 1035, 1036, 1038, 1039, 1041, 1042], "utilis": 1041, "utkarsh": [1041, 1042, 1043, 1044], "utl": 417, "utstat": 648, "uttam": 1048, "uv": [121, 413], "uw": [373, 1047], "uwha": [1048, 1049], "v": [0, 2, 31, 44, 49, 53, 54, 56, 58, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 85, 89, 92, 108, 109, 112, 114, 115, 116, 121, 123, 124, 128, 139, 141, 142, 147, 148, 149, 165, 171, 184, 185, 190, 193, 202, 203, 210, 211, 212, 213, 216, 217, 227, 236, 243, 256, 257, 260, 261, 262, 266, 287, 301, 317, 319, 337, 352, 359, 364, 368, 373, 376, 382, 384, 390, 404, 405, 406, 410, 411, 413, 416, 417, 421, 431, 442, 446, 453, 463, 464, 465, 466, 471, 474, 475, 476, 477, 478, 483, 484, 485, 498, 514, 526, 532, 533, 539, 543, 547, 548, 552, 554, 556, 558, 560, 562, 564, 566, 567, 570, 572, 584, 592, 596, 597, 603, 609, 615, 634, 635, 638, 639, 643, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 680, 682, 683, 692, 699, 703, 705, 708, 721, 740, 741, 743, 758, 759, 761, 792, 799, 804, 809, 816, 818, 830, 834, 836, 837, 838, 841, 842, 843, 851, 859, 861, 864, 866, 868, 869, 872, 875, 881, 882, 883, 888, 889, 892, 902, 908, 909, 910, 911, 913, 914, 917, 919, 923, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1013, 1015, 1019, 1020, 1022, 1026, 1031, 1035, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050, 1053], "v0": [472, 473, 479, 514, 591, 592, 594, 804, 818, 867, 870, 1036, 1043, 1044, 1045], "v1": [324, 370, 394, 801, 802, 1047, 1050, 1051, 1052, 1053], "v2": [371, 499, 668, 689, 690, 1001], "v5": 1043, "v_": [405, 416], "v_1": 405, "v_2": 405, "v_i": 1010, "v_ih_j": 1010, "v_init": 545, "v_j": [408, 759, 1010], "v_k": [411, 413, 533, 539, 547, 548], "v_measur": [740, 799], "v_measure_scor": [2, 58, 73, 74, 83, 92, 325, 352, 408, 721, 740, 741, 761, 1005, 1044], "v_new": 864, "va": [48, 145, 167, 281, 298, 300, 346], "vacaliuc": [1043, 1044], "vacat": 371, "vachan": 1046, "vadim": [1043, 1047, 1048], "vaerenbergh": [1050, 1051], "vaggi": [1037, 1038], "vaillant": 1047, "val": [106, 224, 270, 954], "val_errors_with": 145, "val_errors_without": 145, "val_pr": 145, "val_scor": 146, "vale": 1045, "valencia": [1049, 1051], "valentin": [1038, 1040, 1050, 1051], "valero": 52, "valgrind": 379, "valid": [2, 48, 53, 54, 64, 65, 88, 89, 90, 91, 104, 105, 107, 108, 110, 114, 128, 133, 139, 141, 143, 144, 145, 146, 147, 150, 159, 163, 166, 167, 169, 179, 184, 187, 189, 193, 198, 199, 200, 201, 207, 209, 212, 214, 220, 230, 246, 248, 252, 257, 260, 262, 267, 270, 271, 272, 274, 276, 277, 278, 279, 282, 283, 284, 285, 287, 294, 308, 311, 316, 319, 321, 326, 332, 340, 347, 355, 357, 364, 371, 376, 379, 388, 389, 390, 402, 403, 406, 408, 409, 410, 413, 414, 415, 416, 417, 422, 424, 438, 442, 443, 444, 446, 447, 448, 450, 451, 458, 464, 465, 469, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 495, 503, 504, 506, 517, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 574, 578, 580, 585, 586, 592, 596, 597, 600, 605, 613, 636, 638, 642, 643, 644, 645, 646, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 696, 703, 705, 706, 710, 717, 732, 766, 769, 778, 782, 783, 784, 789, 796, 797, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 842, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 874, 880, 888, 900, 901, 903, 904, 906, 908, 910, 913, 915, 916, 917, 918, 919, 925, 927, 934, 935, 936, 937, 938, 945, 959, 961, 964, 988, 989, 990, 991, 992, 993, 995, 1004, 1005, 1006, 1008, 1009, 1013, 1015, 1017, 1019, 1020, 1021, 1025, 1026, 1029, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "valid_metr": [848, 849, 1008, 1051], "valid_scor": 1000, "validate_data": [2, 378], "validate_metadata": [246, 961], "validate_separ": 993, "validation_curv": [2, 325, 347, 399, 827, 1000, 1042, 1043, 1044, 1047, 1051], "validation_fract": [145, 150, 220, 322, 415, 561, 562, 563, 564, 670, 671, 672, 680, 682, 865, 866, 1019, 1043, 1049], "validation_score_": [150, 563, 564], "validation_scores_": [865, 866, 1050], "validationcurvedisplai": [2, 283, 1000, 1051], "validationerror": 1049, "vall\u00e9": 1042, "valu": [2, 21, 28, 44, 45, 47, 51, 52, 53, 54, 56, 59, 60, 64, 65, 69, 73, 76, 78, 80, 81, 87, 89, 94, 95, 96, 100, 104, 106, 108, 110, 112, 114, 121, 124, 127, 131, 133, 135, 137, 139, 140, 141, 142, 144, 147, 148, 151, 152, 154, 155, 164, 165, 167, 168, 171, 174, 177, 179, 186, 187, 188, 189, 190, 192, 194, 195, 197, 198, 199, 200, 202, 203, 204, 206, 209, 210, 212, 213, 214, 216, 218, 227, 230, 231, 234, 235, 239, 240, 241, 242, 243, 244, 245, 249, 252, 253, 255, 261, 263, 264, 266, 268, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 284, 290, 293, 302, 303, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 321, 327, 332, 340, 344, 345, 347, 351, 352, 353, 355, 357, 359, 363, 364, 365, 368, 369, 370, 371, 373, 377, 378, 379, 381, 382, 383, 385, 388, 389, 390, 393, 394, 399, 405, 406, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 431, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 491, 492, 495, 498, 499, 500, 503, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 773, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 816, 818, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 929, 931, 932, 933, 934, 935, 938, 939, 940, 941, 943, 952, 954, 961, 964, 965, 966, 967, 968, 980, 981, 982, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1019, 1020, 1026, 1027, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "valuabl": [145, 264, 376, 995, 1029], "valuat": 415, "value_count": [44, 53, 188, 264, 284, 287], "value_kei": [388, 923], "value_typ": [418, 621], "valueerror": [2, 246, 247, 378, 382, 399, 469, 580, 606, 621, 639, 675, 718, 840, 858, 867, 873, 887, 933, 935, 937, 938, 989, 990, 991, 1015, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "values_format": [701, 1045], "vamsi": 1050, "van": [0, 370, 398, 410, 470, 475, 536, 631, 696, 700, 995, 1002, 1005, 1011, 1029, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "vandana": 1046, "vander": 195, "vandermond": [213, 1015], "vanderpla": [0, 398, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "vang": 1048, "vanilla": [212, 404, 407, 408, 448, 450, 461, 633], "vanilla_model": 264, "vanilla_model_coef": 284, "vanrel": 1041, "vanschoren": [370, 1047], "vapnik": [596, 597], "var": [116, 117, 138, 195, 270, 373, 377, 417, 645, 649, 910, 911, 912, 913, 914, 1005, 1043], "var_": [536, 846, 888, 1048], "var_smooth": [846, 1043], "varanasi": [1035, 1038], "vardhan": 1039, "varepsilon": [408, 1019, 1020], "vari": [47, 53, 65, 68, 71, 80, 81, 89, 96, 99, 108, 119, 141, 142, 143, 153, 162, 168, 173, 175, 184, 187, 188, 190, 201, 202, 204, 205, 207, 210, 219, 237, 244, 249, 260, 266, 270, 273, 284, 304, 310, 312, 313, 315, 325, 328, 334, 340, 343, 345, 359, 363, 365, 371, 390, 402, 442, 446, 447, 502, 510, 516, 517, 524, 561, 562, 566, 567, 650, 651, 654, 655, 656, 657, 658, 659, 664, 665, 666, 667, 685, 688, 707, 767, 823, 827, 832, 834, 835, 865, 869, 873, 888, 905, 913, 916, 917, 978, 997, 1000, 1001, 1005, 1008, 1009, 1018, 1021, 1026, 1029, 1042, 1043, 1051], "variabl": [2, 44, 49, 51, 52, 53, 73, 103, 138, 142, 144, 147, 148, 150, 164, 178, 179, 182, 183, 188, 189, 192, 198, 202, 212, 216, 217, 230, 234, 246, 249, 261, 264, 270, 273, 280, 287, 289, 315, 316, 317, 359, 363, 365, 371, 373, 374, 376, 378, 380, 381, 384, 390, 399, 404, 408, 409, 410, 411, 413, 415, 416, 417, 451, 483, 484, 485, 488, 501, 503, 510, 517, 534, 536, 538, 543, 546, 555, 561, 562, 607, 609, 610, 611, 644, 654, 655, 658, 659, 665, 686, 687, 699, 713, 751, 805, 806, 809, 811, 812, 813, 814, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 833, 836, 840, 841, 871, 882, 885, 889, 897, 909, 994, 995, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1019, 1021, 1024, 1025, 1035, 1040, 1043, 1045, 1048, 1050], "varianc": [2, 38, 44, 45, 53, 65, 80, 89, 91, 96, 106, 110, 112, 116, 117, 121, 122, 123, 126, 127, 128, 129, 131, 134, 149, 150, 178, 184, 187, 193, 195, 197, 198, 202, 212, 214, 217, 230, 260, 264, 267, 270, 273, 279, 280, 284, 299, 305, 310, 315, 327, 352, 359, 368, 372, 385, 405, 406, 408, 410, 411, 412, 413, 414, 415, 420, 442, 446, 450, 464, 523, 526, 534, 535, 536, 543, 546, 551, 552, 557, 558, 560, 561, 562, 567, 606, 610, 611, 615, 629, 647, 648, 649, 656, 660, 661, 664, 666, 676, 677, 678, 679, 680, 691, 714, 732, 789, 801, 802, 846, 857, 872, 878, 884, 886, 888, 894, 896, 898, 899, 917, 919, 979, 980, 981, 985, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1013, 1017, 1019, 1020, 1021, 1022, 1026, 1027, 1031, 1035, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "variance_weight": [732, 789, 1005], "variances_": 606, "variancethreshold": [2, 417, 873, 995, 1038, 1045, 1048, 1051], "variant": [2, 65, 79, 121, 181, 183, 184, 270, 322, 323, 352, 353, 382, 408, 411, 413, 416, 418, 450, 461, 491, 495, 496, 514, 517, 545, 561, 562, 567, 619, 623, 626, 627, 631, 634, 642, 643, 645, 649, 676, 708, 805, 809, 811, 812, 813, 822, 830, 851, 869, 905, 995, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1019, 1026, 1035, 1043], "variat": [2, 44, 47, 52, 73, 99, 119, 152, 176, 177, 183, 184, 187, 217, 254, 256, 261, 267, 281, 289, 300, 320, 340, 373, 402, 412, 413, 444, 448, 460, 538, 647, 676, 678, 679, 801, 802, 822, 823, 825, 994, 1005, 1015, 1018, 1021, 1024, 1026, 1030, 1031, 1038, 1040, 1041], "variegatu": [51, 303, 371, 500], "varieti": [26, 63, 182, 257, 316, 340, 384, 408, 410, 416, 647, 1008, 1021, 1024, 1029, 1037, 1050, 1051], "varimax": [131, 413, 534, 1047], "variou": [4, 42, 44, 52, 72, 73, 75, 89, 90, 92, 94, 95, 96, 113, 116, 124, 184, 187, 193, 220, 222, 231, 232, 233, 234, 243, 287, 290, 306, 314, 320, 329, 330, 351, 353, 358, 359, 363, 370, 371, 372, 373, 376, 378, 381, 389, 391, 406, 408, 410, 438, 442, 473, 504, 516, 517, 527, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 597, 605, 651, 655, 657, 659, 662, 665, 667, 669, 670, 672, 677, 679, 680, 695, 696, 703, 804, 807, 808, 810, 818, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 868, 908, 909, 994, 995, 1002, 1005, 1008, 1012, 1015, 1019, 1021, 1024, 1026, 1028, 1029, 1035, 1038, 1039, 1052], "varma": 1044, "varoquaux": [0, 391, 397, 398, 1023, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "varun": [1041, 1042, 1043, 1049, 1050], "varunchaduvula": 1053, "vasani": 1046, "vasilei": [1029, 1042], "vasileva": 1049, "vasiloudi": 1040, "vassard": 1049, "vassilvitskii": [408, 448, 461], "vast": [264, 376], "vastli": 315, "vathsala": [1042, 1043, 1044, 1045], "vatsan": 1041, "vavrova": 1042, "vazelh": [1043, 1044, 1045], "vazirgianni": 408, "vb": 538, "vbgmm": [1035, 1039, 1041], "vc": 374, "vcvarsal": 374, "vd": 1053, "ve": [376, 416, 1029, 1042], "veb2009": 408, "veb2010": 408, "vec": [121, 416, 540, 542, 549], "veclib": [363, 388], "vect": [48, 103, 271, 333, 416], "vect__": 271, "vect__max_df": 271, "vect__min_df": 271, "vect__ngram_rang": 271, "vect__norm": 271, "vector": [2, 17, 40, 47, 48, 49, 50, 52, 55, 58, 59, 64, 67, 69, 72, 76, 105, 121, 123, 124, 165, 171, 179, 196, 216, 217, 224, 228, 244, 245, 252, 268, 270, 271, 275, 296, 308, 310, 327, 334, 336, 337, 340, 341, 342, 343, 344, 345, 347, 349, 352, 363, 365, 371, 381, 382, 385, 388, 390, 405, 406, 408, 410, 411, 412, 413, 415, 418, 419, 420, 438, 444, 445, 446, 448, 450, 451, 452, 454, 465, 466, 468, 469, 483, 484, 485, 486, 488, 490, 499, 511, 514, 523, 526, 533, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552, 553, 554, 569, 570, 571, 572, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 617, 618, 619, 621, 622, 623, 624, 626, 627, 629, 635, 642, 644, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 676, 677, 678, 679, 680, 681, 682, 690, 691, 692, 693, 695, 696, 697, 699, 703, 723, 739, 767, 772, 773, 774, 775, 777, 778, 779, 781, 782, 803, 804, 807, 808, 818, 826, 832, 835, 836, 837, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 858, 859, 860, 865, 866, 873, 875, 880, 888, 892, 895, 906, 908, 909, 910, 911, 912, 913, 914, 915, 934, 949, 951, 952, 967, 973, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1015, 1019, 1021, 1026, 1027, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1046, 1048, 1053], "vectori": [390, 1045], "vectorizer2": 591, "vectorizer_param": 333, "vectorizermixin": 1045, "vectorizing_tim": 48, "vectors_test": 371, "ved": 1052, "vedaldi": [642, 997], "veenhui": [1050, 1051, 1052, 1053], "veerkhar": 1050, "veerlosar": 1045, "veghit": 1051, "vehag": [212, 230], "vehbrand": [212, 230], "vehga": [212, 230], "vehicl": [212, 230], "vehpow": [212, 230], "vel": 373, "velkov": 1037, "veloc": 376, "vembu": 406, "vempati": 997, "vendor": [246, 1040, 1043, 1044], "venezuela": [51, 303, 371, 500], "venkat": [0, 398], "venkatachalam": [1045, 1046, 1047, 1048, 1049, 1052, 1053], "venkatesh": 1045, "venna": 700, "venthur": 1043, "venu": [0, 390], "venv": [374, 394], "vera": [1049, 1050], "verbos": [50, 78, 84, 88, 98, 103, 105, 107, 155, 271, 307, 308, 310, 322, 333, 351, 374, 380, 390, 441, 444, 448, 450, 453, 455, 460, 463, 465, 468, 472, 473, 479, 533, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 596, 597, 631, 636, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 694, 696, 698, 769, 782, 801, 802, 804, 807, 808, 810, 818, 827, 829, 830, 831, 832, 833, 835, 837, 839, 842, 857, 864, 865, 866, 867, 868, 869, 870, 905, 908, 909, 910, 911, 912, 913, 914, 970, 1025, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1053], "verbose_feature_names_out": [144, 187, 188, 189, 253, 316, 322, 323, 324, 326, 409, 465, 468, 867, 1048, 1052, 1053], "verbose_interv": [801, 802], "veri": [44, 53, 63, 65, 75, 76, 78, 80, 84, 86, 94, 96, 112, 113, 114, 116, 119, 124, 147, 153, 160, 176, 182, 187, 188, 189, 202, 212, 213, 214, 217, 220, 230, 236, 239, 245, 246, 249, 255, 264, 272, 273, 276, 277, 279, 280, 290, 307, 310, 322, 329, 332, 340, 344, 349, 353, 359, 363, 371, 375, 376, 378, 381, 382, 384, 388, 389, 390, 402, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 443, 448, 453, 463, 472, 473, 479, 502, 506, 512, 543, 559, 560, 563, 564, 566, 567, 569, 570, 592, 593, 626, 654, 655, 658, 659, 660, 668, 686, 687, 689, 695, 696, 699, 709, 747, 750, 796, 801, 804, 806, 812, 814, 818, 821, 824, 848, 849, 873, 877, 878, 879, 888, 900, 901, 910, 913, 916, 917, 918, 919, 927, 952, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1035, 1040, 1041, 1043, 1046, 1048, 1050, 1051, 1052], "verif": [371, 1005, 1029], "verifi": [87, 94, 133, 150, 187, 212, 376, 381, 402, 404, 493, 988, 1008], "verlag": 700, "vermeil": 1043, "veronda": 1036, "verrier": 1050, "versa": [187, 267, 351, 408, 418, 443, 610, 611, 837, 1039], "versatil": [418, 1020, 1029], "versicolor": [127, 279, 280, 506], "versicolour": [129, 373], "version": [2, 7, 44, 67, 81, 87, 89, 104, 121, 126, 135, 150, 173, 183, 188, 189, 192, 198, 210, 213, 220, 226, 228, 246, 249, 253, 289, 307, 315, 319, 320, 321, 322, 324, 325, 326, 327, 340, 351, 363, 371, 375, 377, 378, 379, 380, 382, 384, 385, 388, 390, 391, 394, 395, 399, 401, 402, 408, 409, 411, 413, 415, 416, 418, 419, 420, 426, 428, 430, 431, 432, 433, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 506, 507, 510, 511, 512, 514, 516, 524, 525, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 708, 711, 712, 713, 715, 717, 718, 722, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 738, 742, 743, 744, 745, 746, 747, 750, 757, 758, 761, 762, 763, 765, 770, 771, 773, 782, 786, 787, 788, 789, 791, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 817, 818, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 896, 897, 898, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 932, 934, 935, 945, 946, 947, 951, 952, 957, 960, 961, 962, 963, 964, 967, 970, 971, 974, 979, 985, 990, 991, 993, 994, 997, 999, 1002, 1005, 1007, 1009, 1011, 1013, 1018, 1019, 1021, 1024, 1025, 1028, 1033], "versionchang": 376, "versionwarn": 380, "versu": [68, 123, 134, 143, 155, 162, 173, 184, 187, 193, 221, 227, 239, 244, 245, 247, 258, 262, 265, 287, 296, 298, 312, 328, 333, 336, 337, 339, 340, 344, 408, 412, 415, 418, 506, 536, 558, 614, 635, 643, 662, 663, 670, 672, 678, 679, 680, 681, 787, 804, 809, 830, 840, 869, 904, 905, 912, 913, 917, 994, 1001, 1005, 1006, 1011, 1018, 1019, 1020, 1026, 1043], "vert": [148, 189, 190, 319, 1019], "vertex": [56, 64, 408, 454, 1048], "vertic": [46, 56, 94, 146, 190, 202, 243, 244, 274, 289, 310, 313, 345, 346, 390, 405, 408, 413, 517, 701, 785], "verticalalign": [52, 64, 75, 76], "vese": 1047, "vesteghem": 1045, "veto": 391, "vettigli": 1044, "vh": 952, "vi": [46, 48, 371, 703, 1043, 1046], "via": [0, 2, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 368, 373, 374, 377, 378, 380, 384, 388, 389, 390, 391, 394, 399, 405, 406, 408, 409, 411, 412, 413, 417, 418, 438, 503, 537, 541, 543, 545, 548, 561, 562, 569, 570, 600, 615, 620, 625, 628, 631, 642, 643, 644, 645, 660, 670, 672, 675, 677, 680, 691, 693, 696, 697, 713, 804, 818, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 846, 854, 865, 867, 868, 869, 888, 889, 946, 994, 999, 1001, 1002, 1004, 1005, 1006, 1012, 1013, 1019, 1020, 1025, 1026, 1029, 1031, 1035, 1039, 1040, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "viacheslav": 1041, "viard": 1046, "vibrantabhi19": 1042, "vicdemand": 150, "vice": [187, 267, 351, 408, 418, 443, 610, 611, 837, 1039], "vicent": [1048, 1049, 1050], "vicpric": 150, "victoireloui": 1049, "victor": [408, 453, 463, 1042, 1045], "victoria": 150, "video": [324, 370, 379, 505, 1006, 1029, 1031], "vie": 1041, "viega": 1005, "view": [44, 78, 81, 110, 123, 150, 188, 251, 363, 365, 376, 408, 416, 538, 649, 661, 848, 849, 923, 1001, 1002], "view_init": [188, 232, 234, 236], "viewabl": 376, "vighnesh": [1040, 1041, 1043], "vignesh": 1051, "vigni": 1052, "vijai": [1029, 1038], "vijalapuram": 1043, "vijeth": [1051, 1052], "vijitbenjaronk": [1042, 1043], "vika": [1047, 1049], "vikram": [1041, 1050, 1051], "vikrant": 1049, "vila": [1045, 1047], "vilhelm": [1042, 1043], "villalba": [1040, 1043, 1047], "villanova": [1047, 1048], "villaz\u00f3n": 1047, "villu": 1041, "vil\u00e9m": 1048, "vinayak": [1039, 1040, 1041, 1043, 1044, 1050, 1051], "vincent": [0, 398, 1029, 1035, 1037, 1039, 1040, 1042, 1045, 1050, 1051, 1052], "vineet": 1053, "vinh": [408, 708], "vinh10a": 408, "viniciu": [1047, 1048], "vinit": 1043, "vink": [1046, 1048], "vinod": 1043, "vin\u00edciu": 1043, "viola": [371, 1043], "violat": [63, 340, 388, 390, 639, 938, 1012, 1019, 1021], "violet": [128, 1051], "violeta": 1047, "vipin": 408, "viraj": 1043, "virchan": 1053, "virgil": [0, 398, 1035, 1036, 1038], "virgilefritsch": 1035, "virginica": [127, 129, 279, 280, 373, 506, 1005], "viridi": [67, 74, 290, 701], "viridis_r": 271, "virshup": 1052, "virtanen": 1040, "virtual": [377, 394, 412, 1029], "virtualenv": [374, 376], "visag": 1029, "visconti": 1039, "vishaal": [1043, 1044], "vishal": 1050, "vishwakarma": 1049, "visibl": [53, 187, 188, 214, 349, 370, 376, 408, 864, 1010, 1040, 1050], "vision": [536, 762, 763, 997, 1001, 1003, 1021, 1024, 1029, 1036], "visit": [358, 376, 1012, 1028], "visual": [2, 28, 43, 44, 49, 53, 59, 63, 67, 69, 79, 81, 83, 86, 91, 94, 95, 112, 116, 120, 123, 125, 128, 130, 140, 141, 148, 150, 151, 153, 157, 158, 167, 179, 183, 184, 188, 190, 198, 204, 209, 212, 214, 230, 232, 233, 237, 238, 241, 244, 250, 251, 260, 262, 263, 266, 267, 271, 272, 275, 277, 279, 280, 295, 299, 300, 302, 304, 306, 310, 314, 315, 319, 321, 330, 344, 368, 372, 374, 382, 383, 405, 410, 412, 413, 414, 415, 439, 442, 446, 447, 455, 472, 473, 498, 504, 506, 509, 512, 516, 524, 534, 536, 543, 566, 568, 635, 637, 649, 662, 693, 696, 701, 702, 704, 705, 706, 722, 731, 786, 793, 805, 806, 809, 810, 821, 822, 823, 824, 825, 827, 834, 865, 869, 873, 877, 878, 880, 884, 885, 886, 888, 908, 910, 911, 913, 914, 922, 948, 1000, 1002, 1003, 1008, 1009, 1011, 1012, 1015, 1021, 1024, 1026, 1031, 1038, 1045, 1046, 1047, 1049], "visualis": [121, 124, 131, 247, 546, 680, 682, 805, 806, 809, 821, 822, 823, 824, 825, 1008, 1025], "visualize_group": 265, "vitor": 1050, "vivek": [1042, 1043, 1044, 1052], "viz": [280, 383], "vjacheslav": 1039, "vlad": [0, 121, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "vladimir": [537, 952, 1001, 1045, 1049, 1052], "vlahava": [724, 744, 1005], "vlajic": [1046, 1047, 1053], "vlasio": [1029, 1042], "vlasovet": 1048, "vliet": 1047, "vline": [110, 123, 200, 202, 213, 270, 283, 311], "vlines_": 636, "vlo": 52, "vmax": [67, 85, 114, 121, 124, 131, 174, 177, 194, 198, 204, 228, 244, 259, 265, 307, 340], "vmin": [67, 76, 114, 121, 124, 131, 174, 177, 194, 198, 204, 228, 244, 259, 265, 307, 340], "vnherdeiro": 1045, "vo": [1041, 1049], "voc": 1005, "vocabulari": [119, 227, 351, 352, 378, 388, 416, 591, 592, 593, 594, 1007, 1035, 1037, 1040, 1043, 1046, 1048], "vocabulary_": [353, 416, 584, 591, 594, 1035], "void": 377, "vol": [65, 179, 198, 264, 276, 373, 408, 475, 561, 562, 632, 639, 649, 668, 689, 690, 801, 833, 845, 995, 1007, 1008], "volgen": [405, 723], "volum": [0, 100, 111, 176, 371, 373, 408, 410, 474, 536, 773, 1001, 1020, 1029], "volume11": 408, "volume2": 680, "volume7": [670, 671], "volunt": 384, "von": [408, 453, 463, 695, 1042, 1043], "voronoi": [81, 100, 408], "voss": 1043, "vote": [2, 14, 134, 136, 141, 154, 155, 156, 157, 184, 209, 289, 344, 390, 391, 503, 557, 558, 559, 562, 566, 567, 571, 572, 661, 836, 850, 851, 856, 858, 1006, 1008, 1026, 1027, 1031, 1035, 1038, 1040, 1045], "votingclassifi": [2, 64, 65, 134, 184, 221, 337, 356, 399, 415, 506, 566, 572, 635, 662, 846, 850, 913, 916, 994, 995, 1026, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053], "votingregressor": [2, 158, 399, 415, 571, 995, 1044, 1045, 1046, 1049, 1052, 1053], "voxel": [81, 100, 588], "vp": 1029, "vq": 92, "vqean3": [1043, 1044], "vredevoogd": [1037, 1038], "vrigazov": 1050, "vrishank": [1042, 1043], "vs_buildtool": 374, "vstack": [52, 64, 91, 99, 174, 175, 197, 255, 259, 290, 303, 345, 635, 1006, 1043], "vstolbunov": 1040, "vt": 552, "vufg": 1043, "vukolov": [1043, 1044], "vulner": 402, "vuw": 532, "vvz2010": 997, "vx": 73, "vya": [1043, 1044, 1045], "vyom": [1050, 1051], "vz2010": 997, "v\u00e1zquez": 1038, "v\u0103n": 1050, "w": [2, 46, 52, 54, 67, 71, 76, 78, 92, 98, 130, 182, 205, 211, 216, 229, 246, 247, 255, 256, 257, 260, 261, 281, 308, 322, 323, 344, 345, 347, 353, 359, 364, 371, 373, 382, 402, 408, 409, 413, 415, 416, 420, 425, 431, 438, 466, 470, 473, 475, 483, 484, 485, 525, 540, 542, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 591, 592, 594, 597, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 697, 703, 729, 730, 760, 803, 804, 818, 826, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 855, 858, 859, 865, 866, 901, 903, 904, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 949, 954, 1001, 1005, 1009, 1010, 1015, 1017, 1019, 1020, 1045, 1049, 1050, 1051, 1052], "w0": 119, "w1": [119, 415, 661], "w1992": 415, "w2": 415, "w3": 415, "w_": [413, 650, 651, 656, 657, 664, 665, 666, 667, 685, 688, 1001, 1005, 1007, 1010], "w_0": 1001, "w_1": [415, 1001, 1009], "w_1x_1": 1009, "w_2": [415, 1001, 1009], "w_2x_2": 1009, "w_3": 1001, "w_4": 1001, "w_5": 1001, "w_i": [415, 996, 1005], "w_ij": 664, "w_init": [420, 535], "w_intercept": [908, 909], "w_j": [650, 656, 1005, 1019], "w_k": [408, 415, 1001], "w_l": 1001, "w_mx_m": 1009, "w_n": 415, "w_new": 413, "w_p": 1001, "w_pad": [121, 143, 356], "w_x_1": [908, 909], "w_x_n": [908, 909], "wa": [0, 44, 48, 54, 65, 76, 104, 112, 117, 119, 152, 155, 180, 187, 192, 216, 236, 246, 249, 261, 263, 264, 266, 268, 270, 276, 277, 284, 287, 307, 315, 319, 320, 324, 331, 332, 353, 358, 359, 363, 371, 373, 374, 376, 380, 381, 390, 394, 399, 402, 404, 405, 407, 408, 411, 412, 416, 420, 432, 441, 442, 443, 444, 446, 447, 448, 450, 451, 455, 458, 461, 465, 469, 470, 475, 483, 484, 485, 486, 517, 525, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 555, 556, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 577, 584, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 662, 663, 668, 676, 678, 683, 689, 690, 692, 693, 696, 717, 733, 734, 782, 787, 788, 791, 801, 802, 804, 807, 808, 818, 831, 833, 845, 852, 855, 857, 860, 864, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 897, 900, 901, 905, 906, 932, 934, 935, 947, 971, 992, 993, 994, 995, 1004, 1005, 1008, 1011, 1015, 1018, 1021, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wadawson": 1039, "wadsworth": [916, 917, 1021], "waelbenamara": 1046, "wagner": 1049, "wai": [0, 2, 38, 44, 56, 65, 84, 94, 104, 107, 140, 146, 151, 153, 169, 178, 187, 189, 190, 213, 216, 217, 227, 230, 241, 242, 245, 246, 249, 250, 265, 270, 277, 279, 310, 311, 322, 324, 325, 359, 363, 364, 365, 370, 372, 374, 375, 378, 379, 380, 384, 385, 390, 391, 394, 399, 402, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 423, 444, 445, 452, 453, 454, 460, 461, 463, 464, 470, 498, 557, 558, 565, 574, 592, 602, 603, 615, 636, 670, 671, 680, 681, 682, 703, 708, 710, 721, 740, 741, 758, 759, 761, 767, 778, 782, 792, 799, 829, 837, 854, 875, 881, 886, 892, 918, 919, 975, 978, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1024, 1025, 1028, 1029, 1035, 1037, 1043, 1048, 1049, 1053], "waijean": 1048, "wainwright": [725, 727, 728], "waist": 373, "wait": [56, 374, 376, 380, 390, 670, 671, 672, 680, 682, 1047], "waithera": 1045, "wal": 52, "wale": 150, "walk": [408, 414, 1038], "walker": 1039, "wall": 408, "wallach": [1039, 1040], "walli": 1043, "wallygauz": 1043, "walsh": [1047, 1049], "walt": [1038, 1039, 1043], "walter": 1041, "wan": 1043, "wang": [413, 538, 683, 693, 697, 730, 760, 1001, 1002, 1005, 1038, 1040, 1041, 1042, 1043, 1047, 1050, 1051, 1053], "wangz10": 1040, "want": [0, 31, 44, 52, 59, 62, 63, 64, 89, 98, 104, 169, 183, 187, 188, 212, 213, 214, 246, 249, 261, 264, 270, 285, 287, 293, 307, 334, 337, 351, 359, 363, 364, 365, 374, 375, 376, 377, 378, 380, 381, 382, 388, 389, 390, 391, 394, 399, 402, 406, 407, 408, 409, 410, 415, 416, 417, 502, 505, 506, 512, 537, 551, 658, 659, 660, 662, 663, 670, 672, 678, 679, 680, 768, 803, 826, 854, 857, 873, 880, 901, 908, 994, 1001, 1004, 1005, 1006, 1009, 1011, 1015, 1016, 1020, 1024, 1035, 1049, 1053], "ward": [0, 2, 54, 60, 72, 75, 76, 77, 80, 81, 86, 87, 88, 90, 96, 184, 190, 236, 398, 416, 442, 446, 464, 532, 861, 1026, 1035, 1038, 1040], "ward__n_clust": 88, "ward_tre": [2, 442, 446, 1035, 1039], "wardagglom": 1040, "wardagglomer": 1038, "wardclust": 1038, "wareh": 738, "warm": [379, 390, 533, 539, 545, 547, 548, 614, 657, 663, 670, 671, 672, 680, 681, 682, 1001, 1045, 1047, 1049], "warm_start": [139, 175, 206, 322, 378, 382, 390, 415, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 614, 650, 652, 653, 656, 662, 664, 666, 670, 671, 672, 673, 680, 681, 682, 684, 801, 802, 857, 865, 866, 1011, 1027, 1031, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1049, 1051], "warn": [2, 15, 80, 96, 105, 177, 212, 227, 246, 273, 290, 306, 307, 314, 363, 364, 376, 379, 380, 381, 390, 402, 416, 498, 552, 555, 556, 559, 560, 561, 562, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 581, 605, 640, 697, 716, 717, 733, 734, 742, 787, 788, 791, 858, 872, 873, 881, 911, 912, 913, 914, 916, 917, 918, 919, 934, 935, 941, 945, 952, 961, 974, 990, 991, 1005, 1015, 1035, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "warn_for": 787, "warn_on_dtyp": 1044, "warn_when_not_sort": 863, "warner": [52, 1050, 1051], "warshal": [692, 1002], "warshaw": 1041, "warut": [1042, 1043], "wase": [1052, 1053], "wasn": [246, 1044], "waspa": 540, "wast": [141, 382, 412, 413, 994], "watanab": [1052, 1053], "watch": [53, 364], "watchtheblur": 1047, "water": 51, "waterburi": [1043, 1044], "waterland": 1038, "waterponei": [1041, 1042], "watson": 409, "wattai": 1050, "wav": 370, "wave": [207, 376, 1004], "waveform": 76, "wavelet": [54, 130, 413], "wavfil": 370, "waweru": 1052, "wa\u00ebl": 1053, "wb": [56, 402], "wchathura": 1050, "wclf": 342, "wconnel": 1046, "wdbc": 373, "wderos": 1046, "wdevazelh": 1043, "wdisp": 342, "we": [0, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 65, 67, 69, 71, 73, 76, 77, 78, 80, 82, 83, 84, 87, 89, 90, 91, 92, 96, 98, 99, 100, 103, 104, 105, 106, 108, 110, 112, 113, 114, 117, 119, 121, 122, 123, 124, 126, 127, 128, 129, 131, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 155, 157, 158, 160, 164, 165, 166, 168, 169, 171, 173, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 198, 199, 200, 202, 204, 205, 206, 208, 209, 212, 213, 214, 215, 216, 218, 220, 221, 224, 225, 226, 227, 228, 230, 232, 233, 236, 237, 239, 240, 242, 243, 244, 246, 247, 249, 250, 252, 253, 255, 256, 257, 258, 260, 261, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 388, 389, 390, 391, 399, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 451, 470, 471, 472, 473, 474, 475, 476, 477, 503, 525, 533, 534, 536, 539, 547, 548, 551, 563, 564, 565, 571, 572, 585, 586, 592, 615, 621, 631, 636, 637, 642, 644, 655, 659, 662, 663, 670, 672, 677, 678, 679, 680, 681, 696, 722, 724, 730, 750, 760, 768, 785, 803, 810, 826, 827, 829, 850, 851, 852, 854, 856, 857, 858, 859, 860, 871, 880, 881, 882, 888, 893, 894, 896, 897, 898, 899, 901, 904, 908, 912, 945, 946, 947, 957, 968, 970, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053], "wea": 406, "weak": [116, 145, 148, 216, 230, 276, 412, 556, 561, 562, 634, 1008, 1029, 1051], "weak_learn": 135, "weak_learners_info": 135, "weak_learners_misclassification_error": 135, "weaker": [108, 563, 564], "weakest": [355, 1021], "weaklearn": 555, "weakli": 100, "weather": [44, 53, 176, 188, 407, 1001, 1005], "web": [2, 370, 371, 373, 376, 384, 402, 408, 416, 493, 523, 901, 952, 1005, 1015, 1035], "weber": 1042, "weblog": 408, "webpag": [56, 192, 376], "websit": [370, 371, 373, 376, 379, 391, 394, 1009, 1019, 1028, 1029, 1036, 1037, 1038], "wed": [44, 150, 188], "weed": 607, "week": [44, 53, 150, 375, 376, 391, 498, 1029, 1049], "weekdai": [44, 188], "weekday_co": 44, "weekday_sin": 44, "weekend": [44, 150], "weezel": [1050, 1051], "wegelin": 411, "wehenkel": [415, 559, 560, 567, 568, 918, 919], "wei": [0, 398, 1019, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1048, 1051], "weibul": 314, "weidemann": 1049, "weigh": [412, 1042], "weight": [2, 51, 54, 55, 58, 62, 88, 103, 131, 147, 156, 157, 165, 175, 183, 184, 187, 193, 198, 202, 204, 212, 216, 217, 219, 222, 223, 224, 226, 227, 228, 230, 246, 251, 255, 259, 264, 273, 277, 279, 293, 302, 303, 304, 305, 306, 308, 315, 317, 319, 322, 326, 327, 335, 340, 342, 344, 345, 347, 348, 351, 352, 353, 358, 359, 372, 373, 385, 388, 390, 407, 408, 410, 411, 413, 414, 417, 419, 425, 431, 438, 441, 444, 445, 447, 448, 450, 454, 460, 461, 464, 465, 466, 468, 470, 475, 483, 484, 485, 498, 517, 526, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 589, 592, 593, 594, 596, 600, 605, 606, 614, 615, 632, 636, 637, 638, 639, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 693, 697, 701, 702, 704, 706, 707, 711, 712, 713, 716, 717, 720, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 773, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 826, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 865, 866, 867, 870, 873, 887, 888, 889, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 939, 940, 954, 979, 985, 995, 996, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1015, 1018, 1019, 1020, 1021, 1026, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "weight_concentration_": 801, "weight_concentration_prior": [255, 261, 801, 1004], "weight_concentration_prior_": 801, "weight_concentration_prior_typ": [255, 261, 801, 1004, 1041], "weight_vector": [1035, 1045], "weighted_acc": 399, "weighted_mod": [2, 385], "weighted_n_node_sampl": 358, "weightedmetaregressor": 246, "weights_": [255, 801, 802, 1049], "weights_handl": 225, "weights_init": 802, "weijiadu": 1049, "weinberg": 416, "weinsberg": 1035, "weinstein": 1036, "weisberg": 1001, "weiss": [0, 398, 408, 695, 1035], "weitzenfeld": 1029, "weka": 845, "welch": 1041, "welcom": [375, 376, 384, 391, 1025], "welind": 1035, "well": [0, 8, 44, 49, 52, 59, 62, 63, 65, 71, 75, 87, 91, 92, 96, 103, 110, 117, 127, 135, 136, 138, 141, 145, 147, 153, 155, 176, 178, 186, 187, 188, 189, 192, 198, 200, 205, 210, 212, 213, 214, 216, 220, 232, 233, 234, 237, 239, 243, 246, 249, 257, 264, 270, 277, 279, 281, 287, 290, 293, 295, 296, 297, 317, 320, 321, 322, 323, 324, 325, 326, 327, 344, 347, 352, 353, 357, 359, 371, 373, 375, 376, 382, 384, 385, 388, 389, 390, 391, 402, 406, 408, 410, 412, 413, 415, 417, 419, 422, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 460, 461, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 704, 725, 726, 727, 728, 789, 792, 796, 799, 801, 802, 803, 804, 807, 808, 818, 826, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 950, 951, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1018, 1019, 1021, 1022, 1024, 1025, 1029, 1035, 1036, 1039, 1041, 1042, 1043, 1046, 1053], "wellcom": 0, "wen": 1050, "wenbo": [1045, 1047], "wendi": 1045, "wendling": 1042, "weng": 1020, "wenhao": [1043, 1044], "wenhua": 1041, "wenjian": 1041, "wenliwyan": 1046, "went": [380, 1005], "were": [0, 44, 69, 104, 107, 112, 113, 141, 144, 147, 150, 166, 169, 176, 183, 188, 212, 213, 216, 240, 249, 277, 279, 281, 307, 308, 315, 320, 321, 323, 324, 325, 326, 327, 332, 344, 351, 353, 358, 359, 370, 371, 373, 376, 377, 378, 380, 384, 388, 390, 399, 405, 409, 415, 416, 465, 468, 469, 498, 563, 564, 605, 807, 808, 823, 832, 855, 905, 906, 994, 997, 1005, 1006, 1021, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "weren": [882, 1044], "werman": 1047, "werneck": 1043, "werner": [1042, 1047], "werror": 384, "wersd\u00f6rfer": 1037, "weslei": [593, 734], "westermann": [0, 366, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "western": 416, "weston": [45, 413, 537, 596, 597, 904], "westov": 1043, "wetter": 188, "weyb": 1053, "wfc": 52, "wget": 384, "wh": [413, 540, 542, 549], "wh_i": 413, "what": [0, 2, 44, 49, 52, 53, 76, 86, 87, 117, 122, 126, 143, 186, 187, 202, 218, 220, 228, 241, 246, 253, 307, 353, 355, 359, 364, 371, 374, 376, 377, 378, 380, 382, 384, 389, 390, 391, 393, 407, 408, 414, 415, 416, 505, 538, 591, 592, 594, 650, 656, 700, 893, 894, 896, 897, 898, 899, 916, 917, 918, 919, 945, 1004, 1005, 1006, 1008, 1021, 1025, 1035, 1042, 1053], "whats_new": [376, 380, 384], "wheel": [374, 376, 380, 394, 396, 1045, 1047, 1049], "wheeler": [1046, 1047], "wheelhouse_upload": 380, "when": [0, 2, 44, 49, 50, 51, 53, 59, 62, 63, 64, 65, 71, 75, 76, 79, 90, 94, 101, 103, 104, 105, 110, 112, 113, 117, 121, 124, 125, 126, 128, 138, 141, 143, 144, 145, 147, 150, 151, 155, 156, 157, 166, 171, 182, 186, 187, 188, 189, 190, 194, 195, 198, 202, 204, 205, 206, 212, 214, 216, 217, 228, 239, 240, 241, 245, 246, 253, 256, 258, 266, 269, 270, 271, 272, 273, 277, 279, 280, 283, 284, 287, 290, 292, 293, 296, 297, 298, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 326, 327, 331, 332, 334, 340, 343, 344, 347, 351, 352, 353, 355, 358, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 424, 431, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 510, 511, 512, 514, 517, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 581, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 705, 706, 708, 709, 711, 712, 716, 717, 720, 731, 732, 733, 734, 736, 738, 739, 742, 750, 752, 755, 758, 759, 761, 765, 767, 771, 772, 773, 775, 778, 782, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 799, 801, 802, 803, 804, 805, 807, 808, 809, 810, 818, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 895, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 929, 930, 933, 934, 935, 941, 945, 950, 951, 952, 953, 955, 956, 957, 962, 965, 967, 973, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1025, 1028, 1029, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whenev": [178, 186, 264, 359, 370, 384, 390, 394, 406, 483, 484, 485, 498, 632, 634, 996, 1004, 1045], "where": [48, 51, 52, 54, 56, 58, 59, 62, 63, 64, 69, 87, 89, 91, 112, 117, 119, 121, 124, 130, 131, 135, 137, 139, 141, 144, 145, 147, 150, 152, 166, 167, 169, 171, 177, 180, 183, 187, 188, 194, 198, 205, 213, 216, 221, 222, 223, 225, 229, 230, 232, 234, 235, 239, 240, 243, 246, 247, 249, 251, 261, 264, 266, 267, 270, 272, 276, 277, 279, 281, 282, 284, 287, 289, 308, 310, 312, 313, 314, 315, 316, 317, 319, 321, 322, 327, 330, 331, 338, 344, 347, 348, 349, 355, 356, 359, 363, 364, 365, 370, 372, 373, 375, 376, 378, 380, 382, 383, 384, 388, 389, 390, 391, 394, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 431, 438, 445, 448, 449, 453, 462, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 498, 528, 533, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 587, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 612, 614, 615, 617, 619, 623, 626, 627, 629, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 692, 695, 696, 697, 700, 711, 715, 716, 720, 729, 733, 734, 735, 743, 745, 759, 767, 772, 773, 774, 777, 785, 786, 787, 788, 791, 792, 796, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 851, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 871, 878, 881, 883, 884, 887, 888, 894, 896, 902, 903, 904, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 942, 943, 944, 945, 947, 952, 957, 961, 964, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1025, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wherea": [53, 71, 87, 101, 112, 151, 226, 249, 271, 272, 273, 279, 293, 315, 344, 347, 348, 365, 391, 412, 415, 445, 447, 567, 662, 663, 806, 822, 836, 997, 1004, 1006, 1008, 1015, 1021, 1048, 1053], "wherein": 390, "whether": [2, 48, 50, 53, 104, 133, 151, 174, 179, 187, 188, 212, 216, 230, 233, 240, 246, 264, 268, 310, 358, 359, 364, 371, 374, 375, 376, 378, 380, 381, 382, 390, 399, 407, 408, 409, 410, 412, 413, 415, 417, 420, 441, 443, 452, 454, 455, 460, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 492, 494, 498, 499, 505, 510, 511, 516, 524, 529, 533, 534, 538, 539, 540, 541, 542, 544, 547, 548, 550, 554, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 577, 584, 591, 592, 593, 594, 600, 605, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 635, 636, 637, 639, 640, 641, 642, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 694, 698, 699, 701, 702, 704, 706, 708, 715, 716, 746, 765, 771, 778, 782, 786, 793, 804, 805, 807, 808, 809, 810, 818, 822, 823, 826, 827, 828, 831, 832, 834, 837, 839, 842, 843, 844, 845, 847, 850, 851, 852, 854, 856, 858, 859, 860, 861, 862, 865, 866, 872, 889, 895, 908, 909, 910, 911, 912, 913, 914, 920, 922, 924, 925, 926, 927, 928, 932, 934, 935, 936, 938, 945, 946, 947, 951, 952, 960, 961, 977, 988, 992, 993, 994, 995, 1000, 1001, 1005, 1010, 1011, 1017, 1019, 1020, 1029, 1042, 1043, 1044, 1052], "whi": [187, 189], "which": [0, 2, 44, 47, 50, 52, 53, 54, 55, 56, 58, 59, 60, 63, 64, 65, 71, 73, 75, 76, 79, 80, 81, 83, 87, 89, 90, 91, 92, 99, 101, 103, 104, 105, 108, 110, 112, 113, 117, 119, 123, 125, 126, 127, 131, 135, 138, 139, 140, 141, 144, 146, 147, 150, 151, 153, 154, 155, 156, 157, 158, 160, 164, 166, 168, 169, 171, 172, 176, 177, 178, 182, 183, 186, 187, 188, 190, 192, 194, 195, 198, 202, 205, 206, 212, 213, 214, 216, 218, 220, 226, 228, 229, 230, 232, 233, 234, 236, 239, 240, 243, 244, 245, 246, 247, 249, 250, 255, 256, 260, 261, 263, 264, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 287, 289, 290, 295, 296, 297, 306, 310, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 333, 340, 344, 347, 349, 351, 352, 353, 355, 357, 358, 359, 363, 364, 365, 368, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 394, 396, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 431, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 488, 525, 533, 534, 535, 536, 539, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 582, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 623, 626, 631, 632, 633, 634, 636, 637, 638, 644, 646, 647, 648, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 663, 665, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 711, 713, 720, 721, 723, 724, 727, 729, 730, 738, 739, 740, 741, 746, 747, 760, 762, 782, 783, 784, 785, 786, 787, 793, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 814, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 865, 868, 869, 872, 875, 879, 881, 882, 883, 886, 887, 888, 889, 890, 892, 900, 901, 903, 904, 905, 908, 910, 913, 914, 916, 917, 918, 919, 920, 924, 926, 929, 930, 934, 935, 943, 945, 946, 947, 951, 952, 954, 957, 960, 961, 962, 964, 973, 976, 979, 985, 988, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whichev": [408, 415, 447, 546, 563, 564, 637, 654, 658, 660, 668, 686, 687, 701], "whidou": 1048, "while": [0, 2, 26, 44, 47, 48, 50, 52, 56, 59, 62, 65, 71, 73, 75, 79, 80, 89, 96, 100, 106, 108, 119, 125, 126, 135, 138, 141, 142, 145, 150, 152, 155, 169, 172, 177, 179, 180, 182, 186, 187, 188, 189, 192, 194, 196, 198, 201, 202, 205, 207, 212, 214, 216, 228, 239, 242, 243, 246, 247, 256, 257, 261, 263, 264, 265, 269, 270, 271, 273, 277, 278, 279, 280, 281, 283, 292, 310, 311, 312, 315, 316, 317, 319, 322, 325, 326, 337, 340, 351, 353, 358, 359, 364, 368, 369, 370, 371, 372, 375, 376, 378, 380, 381, 382, 384, 385, 388, 390, 391, 402, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 420, 445, 465, 468, 469, 484, 486, 498, 523, 534, 554, 559, 560, 561, 562, 566, 567, 568, 569, 570, 571, 572, 578, 585, 591, 592, 593, 594, 597, 600, 605, 609, 638, 647, 650, 651, 653, 660, 661, 662, 663, 680, 681, 682, 683, 712, 734, 758, 778, 782, 792, 798, 801, 804, 805, 806, 809, 810, 811, 812, 813, 814, 818, 819, 820, 822, 827, 829, 830, 831, 832, 833, 835, 843, 854, 856, 858, 859, 860, 867, 868, 869, 870, 871, 884, 896, 901, 906, 908, 909, 916, 917, 918, 919, 930, 956, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1017, 1020, 1021, 1024, 1025, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "whilst": [139, 234], "whisker": 50, "white": [2, 92, 94, 121, 176, 226, 232, 296, 308, 312, 334, 339, 413, 416, 629, 1021, 1035, 1038, 1041, 1045, 1049], "whitekernel": [2, 171, 176, 177, 418, 615, 616, 618, 1046], "whiten": [46, 121, 122, 123, 294, 413, 420, 535, 536, 543, 886, 888, 1015, 1039, 1041, 1049, 1050, 1053], "whiten_solv": [420, 535, 1050, 1053], "whitening_": 535, "whitespac": 416, "whl": 380, "who": [0, 187, 364, 371, 376, 383, 391, 394, 850, 851, 852, 854, 856, 858, 859, 860, 1024, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "whole": [50, 84, 107, 150, 158, 183, 213, 249, 267, 274, 302, 340, 344, 355, 363, 376, 388, 389, 409, 411, 415, 418, 450, 484, 540, 557, 558, 559, 560, 565, 566, 567, 568, 572, 689, 690, 804, 807, 808, 818, 832, 843, 844, 845, 846, 847, 994, 1005, 1015, 1043, 1045], "whose": [2, 89, 111, 112, 113, 169, 176, 212, 338, 371, 385, 390, 406, 408, 410, 415, 417, 418, 421, 438, 439, 440, 449, 462, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 517, 536, 540, 542, 543, 546, 549, 551, 574, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 644, 675, 699, 722, 804, 811, 818, 833, 854, 873, 900, 901, 951, 983, 984, 999, 1006, 1010, 1011, 1012, 1020, 1038, 1043, 1044, 1046, 1049], "why": [65, 73, 86, 121, 135, 141, 150, 187, 189, 192, 202, 264, 267, 270, 287, 352, 376, 378, 384, 390, 408, 410, 413, 419, 445, 448, 452, 945, 947, 1005, 1007, 1020, 1038], "wick": 1047, "wide": [65, 94, 95, 127, 138, 243, 311, 388, 408, 413, 416, 994, 1001, 1024, 1029, 1035, 1037, 1051], "widehat": 174, "wider": [53, 214, 416, 921, 1001], "widetild": 1021, "width": [48, 50, 53, 87, 112, 123, 124, 127, 129, 130, 131, 138, 143, 144, 147, 157, 165, 173, 179, 255, 269, 293, 310, 312, 313, 316, 324, 337, 373, 409, 439, 440, 453, 465, 495, 496, 508, 523, 589, 873, 921, 1015, 1019, 1021, 1043], "wiesel": [410, 421, 476], "wignal": [1038, 1039, 1045, 1046], "wijewardena": [0, 1038, 1039, 1040], "wiki": [56, 62, 382, 384, 598, 640, 672, 675, 699, 709, 850, 851, 856, 857, 858, 859, 886, 902, 916, 917, 1001, 1005, 1021], "wikic": 997, "wikipedia": [38, 43, 62, 184, 384, 408, 598, 610, 611, 640, 660, 672, 675, 686, 687, 699, 708, 709, 711, 713, 716, 720, 722, 730, 733, 734, 735, 738, 739, 742, 747, 760, 787, 789, 790, 792, 793, 796, 797, 850, 851, 856, 857, 858, 859, 886, 902, 916, 917, 952, 997, 1001, 1005, 1008, 1017, 1021, 1026, 1035, 1042], "wikipedia_principal_eigenvector": [56, 1026], "wikipediadet2017": 1005, "wikipediamcc2021": 1005, "wil": 1047, "wild": [2, 46, 369, 495, 496, 510, 511, 1031, 1035], "wilderness_area": 249, "wildli": [295, 1004], "wilei": [373, 995], "wilhelm": [1039, 1041, 1045], "wilk": 406, "wilksch": 1050, "willard": 1047, "willdarnel": 1045, "willduan": 1042, "william": [371, 373, 418, 614, 615, 618, 623, 626, 643, 997, 1005, 1009, 1042, 1043, 1044, 1045, 1050, 1051], "williamson": 1045, "willing": [186, 267, 407], "willocx": 1045, "willpeppo": 1047, "wilson": [112, 373, 1035, 1038], "wiman": 1035, "wimld": 1049, "win": [53, 264], "winata": [1045, 1047], "wind": [188, 1006], "windber": 1046, "windiana42": 1051, "window": [58, 333, 371, 376, 378, 379, 384, 416, 1035, 1038, 1042, 1046, 1048, 1049, 1053], "windowsapp": 394, "windowserror": 1051, "windspe": 188, "wine": [2, 49, 252, 315, 316, 369, 512, 1031], "wine_review": 316, "wineri": 316, "winn": 1005, "winter": 53, "winterman": 1036, "wip": [384, 394], "wipf": [649, 1001], "wire": [382, 536, 543], "wiryadi": [1047, 1053], "wisc": [373, 903], "wisconsin": [2, 190, 369, 502, 1013, 1031, 1040], "wise": [2, 47, 64, 179, 213, 239, 280, 310, 352, 363, 390, 406, 408, 412, 413, 417, 459, 533, 536, 539, 543, 547, 548, 551, 552, 555, 557, 558, 561, 562, 595, 598, 599, 601, 602, 603, 609, 644, 656, 704, 758, 836, 855, 885, 898, 899, 902, 977, 979, 980, 981, 982, 985, 997, 999, 1001, 1005, 1006, 1019, 1035, 1040, 1043, 1044, 1045], "wish": [370, 376, 378, 383, 385, 394, 408, 952, 1042], "wishart": 801, "wissen": 451, "with_cent": [886, 898], "with_error": 705, "with_mean": [381, 888, 899, 1015, 1043, 1048], "with_scal": [886, 898], "with_std": [888, 899, 1015, 1043], "withheld": 412, "within": [2, 42, 44, 59, 94, 140, 142, 145, 150, 154, 166, 168, 169, 213, 214, 224, 230, 250, 268, 269, 273, 310, 311, 321, 338, 341, 344, 347, 353, 359, 363, 371, 376, 385, 388, 390, 391, 399, 404, 405, 406, 408, 409, 412, 414, 415, 419, 445, 449, 462, 464, 465, 467, 470, 475, 517, 551, 569, 570, 571, 572, 596, 597, 636, 696, 700, 703, 714, 729, 785, 801, 802, 805, 809, 810, 822, 823, 832, 833, 848, 849, 850, 851, 855, 856, 858, 859, 860, 867, 868, 869, 881, 889, 893, 894, 896, 897, 898, 899, 910, 911, 912, 913, 914, 916, 917, 918, 919, 994, 999, 1001, 1002, 1008, 1011, 1015, 1018, 1020, 1021, 1025, 1029, 1037, 1038, 1042, 1043, 1048, 1049, 1051, 1052, 1053], "within_class_std_dev_": 855, "without": [2, 44, 45, 53, 54, 62, 72, 78, 80, 82, 86, 89, 90, 96, 101, 108, 126, 141, 145, 146, 149, 150, 152, 155, 161, 165, 169, 178, 184, 186, 187, 188, 198, 202, 220, 239, 243, 246, 247, 249, 250, 252, 263, 264, 271, 275, 277, 287, 290, 291, 292, 293, 299, 300, 301, 302, 310, 311, 315, 317, 319, 344, 347, 352, 365, 371, 372, 374, 376, 377, 378, 380, 381, 382, 385, 388, 389, 390, 399, 402, 408, 409, 413, 415, 416, 417, 418, 433, 440, 442, 447, 459, 470, 475, 493, 498, 506, 517, 534, 536, 557, 558, 565, 582, 583, 615, 631, 635, 638, 643, 663, 696, 704, 785, 807, 808, 809, 816, 818, 833, 834, 850, 857, 861, 867, 868, 871, 874, 877, 878, 880, 884, 885, 886, 888, 893, 908, 930, 973, 994, 995, 997, 999, 1001, 1002, 1005, 1008, 1011, 1015, 1019, 1020, 1021, 1024, 1025, 1026, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "withstrok": 76, "witten": 412, "wittenau": 1040, "wk": 709, "wl": 374, "wminkowski": [1047, 1049], "wmt": 52, "wnl": 416, "wo": 416, "wojdyla": [1050, 1051], "wolberg": 373, "wolf": [2, 50, 66, 71, 109, 110, 113, 114, 184, 299, 421, 474, 476, 480, 481, 514, 551, 999, 1026, 1042], "wolframalpha": 1045, "wolodzko": 1048, "wolosonovich": 1043, "wolpert": [415, 569, 570], "wolsza": 1053, "wompner": 1043, "won": [155, 307, 352, 380, 384, 408, 469, 498, 631, 632, 634, 691, 708, 721, 740, 741, 759, 761, 799, 1004, 1015, 1040, 1041, 1046], "wonder": 374, "wonpil": 1001, "wood": 1044, "woolam": 1035, "word": [48, 55, 58, 103, 171, 201, 243, 247, 340, 352, 353, 363, 371, 372, 376, 378, 381, 390, 405, 407, 408, 410, 411, 412, 413, 454, 513, 525, 536, 538, 543, 591, 592, 594, 700, 837, 847, 905, 999, 1003, 1007, 1010, 1015, 1018, 1019, 1029, 1035, 1043], "word_col": 58, "word_scor": 58, "word_token": 416, "wordnetlemmat": 416, "work": [0, 3, 44, 49, 53, 56, 69, 80, 86, 101, 110, 138, 144, 158, 169, 177, 178, 186, 187, 188, 202, 216, 229, 246, 268, 287, 296, 297, 316, 320, 322, 323, 325, 342, 344, 352, 353, 359, 364, 365, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 384, 389, 390, 391, 402, 404, 405, 406, 408, 409, 410, 413, 415, 416, 417, 420, 421, 422, 423, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 461, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 506, 510, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 699, 712, 778, 782, 783, 784, 785, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 952, 956, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1011, 1012, 1015, 1018, 1019, 1024, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "workabl": 381, "workaround": [316, 376, 804, 818], "workclass": 498, "worker": [364, 390, 416, 970, 971, 1050], "workflow": [376, 379, 380, 389, 412, 1028, 1031], "working_memori": [363, 364, 469, 785, 906, 1043], "workingdai": 44, "workload": 1024, "workshop": [0, 408, 416, 843, 1007, 1023], "workstat": 384, "world": [0, 89, 107, 187, 216, 236, 249, 264, 363, 369, 373, 408, 413, 416, 969, 995, 1005, 1007, 1023, 1025, 1029, 1031, 1035], "worldwid": 1029, "wornbb": 1046, "worri": [88, 1002], "wors": [44, 117, 135, 172, 188, 218, 270, 278, 289, 315, 359, 406, 408, 418, 431, 466, 483, 484, 485, 554, 556, 558, 560, 562, 564, 567, 570, 572, 614, 615, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 674, 676, 677, 682, 683, 684, 709, 725, 726, 727, 728, 732, 789, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1005, 1015, 1044], "worse_prob": 270, "worsen": 145, "worst": [212, 316, 373, 408, 445, 448, 712, 733, 734, 787, 788, 791, 796, 797, 833, 1005, 1029, 1035, 1048], "worth": [89, 143, 188, 212, 376, 1029], "worthwhil": [105, 390], "would": [0, 26, 44, 46, 49, 53, 64, 65, 69, 87, 89, 92, 103, 110, 112, 113, 117, 119, 126, 135, 147, 169, 171, 176, 177, 187, 188, 189, 190, 192, 198, 203, 205, 212, 213, 214, 227, 230, 239, 246, 249, 257, 264, 266, 270, 271, 276, 278, 280, 284, 287, 290, 296, 302, 307, 310, 311, 315, 316, 322, 325, 332, 340, 344, 347, 348, 351, 353, 358, 359, 363, 371, 372, 376, 377, 378, 382, 384, 385, 388, 389, 390, 391, 399, 402, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 431, 447, 466, 469, 483, 484, 485, 490, 529, 534, 536, 538, 543, 546, 554, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 572, 586, 587, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 704, 706, 712, 716, 717, 724, 760, 782, 786, 789, 793, 804, 806, 818, 833, 841, 842, 851, 859, 866, 893, 894, 896, 897, 898, 899, 900, 901, 906, 908, 909, 911, 914, 916, 917, 918, 919, 961, 964, 994, 995, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1020, 1024, 1025, 1029, 1032, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wp": [416, 661, 675], "wprd": 416, "wrap": [2, 121, 140, 147, 264, 290, 327, 370, 378, 390, 402, 407, 432, 438, 510, 613, 661, 662, 663, 680, 834, 892, 946, 995, 1005, 1008, 1020, 1024, 1035, 1040, 1043, 1045, 1046, 1048, 1050], "wraparound": 377, "wrapper": [2, 65, 290, 382, 385, 412, 418, 546, 624, 672, 675, 746, 908, 1001, 1021, 1024, 1039, 1047], "wrath": 409, "write": [48, 56, 148, 183, 190, 246, 319, 363, 364, 370, 374, 375, 376, 380, 381, 382, 384, 385, 388, 390, 402, 404, 409, 413, 416, 1016, 1025, 1036, 1048, 1052], "writeabl": [934, 935, 1053], "writer": 351, "written": [42, 45, 47, 66, 85, 87, 124, 167, 184, 219, 263, 294, 322, 329, 330, 364, 373, 376, 377, 378, 382, 384, 388, 390, 409, 414, 488, 504, 510, 701, 717, 834, 913, 920, 999, 1001, 1005, 1009, 1010, 1019, 1026, 1044], "wrong": [94, 212, 264, 296, 359, 373, 376, 378, 416, 506, 730, 760, 797, 1005, 1011, 1020, 1038, 1040, 1042, 1043, 1044, 1045, 1048, 1052, 1053], "wrongli": [212, 340, 1053], "wrote": [155, 371], "ws2001": 997, "wspace": [54, 55, 75, 80, 96, 112, 121, 137, 212, 230, 239, 255, 257, 258, 261, 295, 303, 330, 337], "wstate": 1048, "wtv": 382, "wtw": 382, "wu": [1020, 1039, 1047], "wurp": [1049, 1050], "wuthrich": [212, 230], "ww": 413, "www": [46, 104, 192, 212, 228, 230, 284, 289, 307, 370, 371, 376, 408, 412, 443, 450, 488, 510, 511, 533, 536, 539, 543, 648, 662, 668, 675, 689, 690, 857, 864, 916, 917, 1001, 1018], "www4": 373, "wyseguy7": 1041, "w\u00fcthrich": 406, "x": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 107, 108, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 125, 126, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 233, 234, 237, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 369, 370, 371, 372, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 399, 402, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 495, 496, 497, 500, 502, 503, 504, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 714, 715, 729, 736, 739, 746, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 792, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 927, 929, 930, 931, 932, 933, 934, 935, 938, 949, 951, 952, 953, 954, 964, 965, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1025, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "x0": [52, 221, 235, 310, 337, 390, 429, 465, 569, 570, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889], "x00": 416, "x006": 1036, "x00a": 416, "x00b": 416, "x00c": 416, "x00d": 416, "x00e": 416, "x00f": 416, "x00g": 416, "x00h": 416, "x00i": 416, "x00l": 416, "x00n": 416, "x00o": 416, "x00r": 416, "x00t": 416, "x00u": 416, "x00z": 416, "x0_cat": 1015, "x0_infrequent_sklearn": 1015, "x0_label": 310, "x0_rabbit": 1015, "x0_str_femal": 881, "x0_str_male": 881, "x0l": 1039, "x1": [52, 116, 137, 146, 174, 224, 235, 310, 337, 378, 390, 429, 465, 511, 569, 570, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 633, 634, 703, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889], "x110": 1050, "x1_int_1": 881, "x1_int_2": 881, "x1_int_3": 881, "x1_label": 310, "x2": [116, 137, 146, 174, 224, 378, 409, 591, 633, 703], "x2_tr": 633, "x3": [146, 409], "x64": 374, "x8": 87, "x86": 374, "x86_64": [379, 394], "x9ft": 416, "x_": [164, 172, 261, 270, 319, 378, 408, 411, 413, 631, 639, 768, 863, 903, 904, 1001, 1007, 1012, 1041], "x_0": [213, 661], "x_1": [121, 164, 174, 213, 411, 413, 415, 418, 617, 629, 661, 881, 908, 909, 1001, 1007, 1009, 1015, 1019], "x_1d": 323, "x_1x_2": 1015, "x_1x_2x_3": 1015, "x_1x_3": 1015, "x_2": [164, 174, 413, 415, 416, 418, 617, 629, 1001, 1009, 1015], "x_20": 333, "x_2d": 340, "x_2x_3": 1015, "x_3": [164, 1015], "x_6": 881, "x_7": 881, "x_a": 314, "x_adult": 326, "x_aniso": [80, 91, 96], "x_axi": [123, 220, 274], "x_b": 314, "x_bimod": 314, "x_bin": 311, "x_bound": [418, 621], "x_c": [483, 484, 486, 1012], "x_calib": 438, "x_california": 183, "x_cardiotocographi": 249, "x_center": 196, "x_check": 935, "x_chisq": 314, "x_cluster": 860, "x_convert": 934, "x_copi": 1046, "x_cu": 404, "x_d": [418, 618], "x_dens": [326, 546], "x_df": 152, "x_diabet": 183, "x_different_covari": 71, "x_digit": [106, 161, 306, 409], "x_dist_graph": 852, "x_embed": [299, 300, 696, 700, 857, 1008], "x_error": 218, "x_errors_larg": 218, "x_featur": [107, 644, 645, 646, 997], "x_filter": 91, "x_fit": 692, "x_fit_": [537, 647], "x_forestcov": 249, "x_full": [182, 183, 310], "x_full_train": 140, "x_gaussian": 314, "x_hashed_lsa": 352, "x_hat": [533, 539, 547, 548], "x_hetero": 128, "x_homo": 128, "x_i": [53, 112, 139, 164, 187, 213, 322, 347, 408, 413, 414, 415, 418, 618, 619, 623, 626, 627, 629, 843, 844, 847, 996, 997, 1001, 1007, 1008, 1009, 1015, 1019, 1020, 1021], "x_idx_sort": 1047, "x_imput": 634, "x_indic": 165, "x_inform": 317, "x_inlier": 297, "x_inv": [591, 594], "x_ipca": 125, "x_iri": 275, "x_isotropic_covari": 71, "x_j": [408, 418, 618, 619, 623, 626, 627, 629, 996, 997, 1001, 1008, 1020, 1021], "x_k": [411, 413, 999, 1008], "x_label": 183, "x_leav": [559, 560, 561, 562, 566, 567, 568, 916, 917, 918, 919], "x_left_lower_corn": [51, 303, 371, 500], "x_legend": 48, "x_list": 313, "x_loadings_": [483, 484, 485], "x_lognorm": [314, 1015], "x_lsa": 352, "x_m": 1009, "x_max": [68, 86, 92, 137, 143, 153, 162, 173, 244, 305, 312, 334, 344, 345], "x_max_": 639, "x_mean": 420, "x_mean_": 1047, "x_min": [68, 86, 92, 137, 143, 147, 153, 162, 173, 202, 244, 305, 312, 334, 344, 345], "x_min_": 639, "x_miss": [150, 182, 183], "x_miss_california": 183, "x_miss_diabet": 183, "x_n": [121, 413, 908, 909, 1007, 1009, 1019], "x_near_unique_categori": 317, "x_new": [90, 409, 413, 417, 432, 443, 444, 446, 448, 450, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 551, 569, 571, 572, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 632, 634, 639, 642, 643, 644, 645, 646, 692, 693, 694, 695, 696, 857, 864, 871, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 900, 901, 1017], "x_new_again": 1017, "x_new_invers": 1017, "x_norm_squar": [767, 1040, 1052], "x_normal": 1015, "x_np": 404, "x_offset": 196, "x_offset_": [648, 649, 1047], "x_origin": [536, 541, 543, 545, 546, 634, 900, 901], "x_out": [324, 872, 881, 882], "x_outlier": [197, 226, 296, 297, 339], "x_p": [408, 447, 1001], "x_pca": 125, "x_plot": [194, 213, 218, 245, 273, 295, 315], "x_plot_ext": 213, "x_plot_scal": 315, "x_po": 289, "x_q": 408, "x_r": [129, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "x_r2": 129, "x_rand": 276, "x_random": 202, "x_reconstruct": [323, 483, 484, 485, 586], "x_reconstructed_kernel_pca": [45, 126], "x_reconstructed_pca": [45, 126], "x_red": 86, "x_reduc": [85, 127, 153, 446], "x_restor": 85, "x_right": 71, "x_rope": 270, "x_rotations_": [411, 483, 484, 485], "x_scale": [196, 878, 894, 1015], "x_scale_": [648, 649, 1047], "x_scaler": 50, "x_score": [297, 483, 484, 485, 486], "x_scores_": [485, 1047], "x_select": 359, "x_shared_covari": 71, "x_shuffl": 317, "x_size": 113, "x_sp": 199, "x_spars": [326, 536, 975, 978], "x_sparse_embed": 568, "x_squared_norm": [258, 461], "x_src": 295, "x_std": [878, 894, 1015], "x_std_": 1047, "x_t": [465, 631, 867], "x_test": [45, 46, 47, 48, 50, 53, 62, 63, 64, 65, 68, 69, 103, 104, 108, 110, 116, 117, 126, 135, 138, 140, 142, 146, 147, 148, 149, 150, 151, 154, 161, 162, 165, 166, 176, 179, 186, 187, 188, 189, 190, 192, 195, 198, 203, 208, 209, 210, 218, 219, 220, 226, 227, 228, 230, 240, 242, 248, 252, 253, 257, 263, 264, 267, 268, 273, 277, 279, 283, 285, 289, 293, 296, 298, 299, 302, 305, 307, 308, 312, 314, 315, 317, 319, 320, 321, 326, 327, 332, 333, 339, 351, 355, 357, 358, 359, 363, 370, 378, 381, 389, 402, 409, 412, 415, 439, 471, 472, 473, 474, 475, 476, 477, 511, 560, 561, 562, 569, 570, 701, 702, 704, 706, 803, 826, 834, 836, 839, 857, 865, 866, 868, 882, 918, 919, 995, 1005, 1007, 1008, 1009, 1011, 1015, 1019, 1020, 1021, 1032, 1035], "x_test_df": 253, "x_test_kernel_pca": 126, "x_test_maxab": 1015, "x_test_minmax": 1015, "x_test_miss": 150, "x_test_no_cf_encod": 317, "x_test_noisi": 45, "x_test_np": 253, "x_test_pca": [46, 126], "x_test_r": 116, "x_test_scal": 253, "x_test_sel": 190, "x_test_select": 359, "x_test_text": 48, "x_test_tran": 1015, "x_test_transform": [359, 412], "x_text": 48, "x_tfidf": 352, "x_thresholds_": [242, 639, 1047], "x_torch": 404, "x_tr": [871, 877, 880, 881, 882, 886, 888, 891, 893, 894, 898, 899], "x_train": [45, 46, 47, 48, 50, 53, 62, 63, 64, 65, 68, 69, 103, 104, 108, 110, 116, 117, 126, 135, 138, 142, 145, 146, 147, 148, 149, 150, 151, 154, 161, 162, 165, 166, 177, 178, 179, 180, 186, 187, 188, 189, 190, 192, 195, 198, 208, 209, 210, 213, 219, 220, 226, 227, 228, 230, 240, 248, 252, 253, 257, 259, 263, 264, 267, 268, 273, 277, 279, 283, 289, 293, 296, 298, 299, 302, 305, 307, 308, 312, 314, 315, 317, 319, 320, 321, 326, 327, 332, 333, 339, 351, 355, 358, 359, 363, 370, 378, 381, 389, 409, 412, 415, 438, 439, 511, 560, 561, 562, 569, 570, 701, 702, 704, 706, 803, 826, 834, 836, 839, 857, 865, 866, 868, 882, 918, 919, 995, 1005, 1007, 1008, 1009, 1011, 1013, 1015, 1019, 1020, 1032], "x_train_": 615, "x_train_ensembl": 140, "x_train_linear": 140, "x_train_maxab": 1015, "x_train_minmax": 1015, "x_train_miss": 150, "x_train_no_cf_encod": 317, "x_train_noisi": 45, "x_train_pca": 46, "x_train_preprocess": 187, "x_train_r": 116, "x_train_sel": 190, "x_train_select": 359, "x_train_std_transform": 315, "x_train_text": 48, "x_train_tran": 1015, "x_train_transform": [315, 359, 412], "x_train_valid": 64, "x_tran": [314, 325, 404, 443, 465, 884, 889, 896, 929, 1015], "x_trans_bc": 314, "x_trans_qt": 314, "x_trans_yj": 314, "x_transform": [125, 153, 246, 486, 533, 534, 535, 536, 537, 539, 541, 545, 568, 642, 643, 692, 693, 694, 695], "x_transformed_fit_": 537, "x_true": 235, "x_uniform": 314, "x_val": [145, 1013], "x_valid": 64, "x_valu": 332, "x_vari": 91, "x_weibul": 314, "x_weights_": [411, 483, 484, 485, 486], "x_wrong": 71, "xa": 584, "xanchor": 271, "xarg": 1035, "xavier": [865, 866, 1043, 1044, 1045, 1047, 1048, 1053], "xaxi": [127, 141, 232, 234, 237, 290, 295, 351], "xaxis2": 141, "xb": [116, 887], "xbar_": 551, "xbc": 416, "xc3": 416, "xcjason": 1045, "xcode": 374, "xd": 528, "xdang": 683, "xerox": 52, "xerr": [182, 183, 352], "xethan": 1047, "xfail": [384, 945, 946, 947], "xfc": 416, "xfcche": 416, "xfea": 416, "xff": 416, "xgamma": 689, "xgboost": [150, 152, 415, 1024], "xgrid": [51, 303], "xhan": 1044, "xhy": 1042, "xi": [2, 80, 99, 373, 408, 411, 416, 451, 457, 511, 1019, 1046], "xi_i": 1019, "xi_k": 411, "xiang": 1053, "xiangyin": 1048, "xiao": [0, 387, 397, 1043, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "xiaojin": 903, "xiaoyu": 1047, "xiaoyuchai": 1048, "xin": [683, 1001, 1043], "xinfan": [1035, 1036, 1039], "xing": [1043, 1044], "xinv": 873, "xinyu": 408, "xinyuliu12": 1044, "xiong": [1043, 1044, 1049], "xj": 406, "xk": [99, 552], "xlabel": [44, 48, 49, 53, 62, 63, 64, 65, 70, 73, 77, 95, 110, 111, 113, 114, 116, 117, 123, 127, 128, 136, 137, 139, 144, 146, 147, 148, 149, 150, 154, 158, 160, 164, 165, 168, 171, 172, 173, 174, 176, 177, 178, 187, 194, 197, 198, 200, 201, 202, 203, 205, 206, 207, 209, 212, 214, 215, 217, 219, 221, 222, 226, 230, 243, 245, 247, 249, 265, 269, 270, 274, 275, 279, 280, 283, 285, 292, 293, 296, 297, 316, 317, 337, 339, 340, 343, 351, 356, 357, 635], "xlim": [52, 64, 80, 92, 96, 106, 110, 111, 112, 123, 137, 138, 139, 154, 160, 172, 173, 187, 194, 203, 205, 211, 218, 221, 226, 239, 247, 256, 261, 265, 279, 285, 296, 297, 339, 344, 345, 348, 357], "xm": [52, 235], "xmax": [51, 110, 203, 205, 221, 222, 303], "xmin": [51, 110, 203, 205, 221, 222, 303], "xn": 511, "xom": 52, "xor": [170, 172, 173, 174, 184, 222, 223, 225, 259, 313, 345, 349, 614, 618, 626, 1001, 1021, 1026, 1042], "xp": [411, 883], "xpreprocessor": 374, "xrang": 1041, "xred": [446, 1051], "xrot": 54, "xrx": 52, "xs_sp": 199, "xsat": 1045, "xscale": [172, 177, 245], "xt": [158, 290, 390, 446, 540, 542, 631, 633, 804, 807, 808, 818, 852, 860, 868, 873, 878, 885, 897, 932, 1051, 1053], "xtick": [44, 46, 48, 51, 67, 71, 76, 80, 81, 84, 85, 86, 92, 93, 96, 114, 116, 124, 144, 146, 150, 173, 174, 175, 179, 203, 225, 239, 247, 256, 257, 258, 261, 269, 270, 285, 294, 303, 308, 316, 329, 340, 343, 345, 701], "xtick_period": 188, "xtick_start": 188, "xticklabel": [44, 50, 144, 150, 188, 316], "xticks_label": 146, "xticks_po": 146, "xticks_rot": [46, 701], "xtrain": 303, "xu": [408, 411, 419, 445, 1019, 1048, 1049, 1052, 1053], "xue": [0, 1039, 1040, 1041, 1043, 1044, 1047], "xuefeng": [1052, 1053], "xueqin": [683, 1001], "xun": [1045, 1047], "xuniu": 1050, "xval": 183, "xw": [211, 322, 650, 651, 653, 656, 657, 658, 659, 660, 664, 665, 666, 667, 676, 685, 686, 687, 688, 1001], "xx": [78, 92, 112, 143, 147, 153, 162, 173, 174, 175, 188, 205, 219, 222, 223, 224, 225, 226, 237, 239, 247, 259, 296, 305, 312, 313, 334, 339, 340, 344, 345, 348, 349], "xx0": [137, 635], "xx1": [137, 635], "xx_coarser": 143, "xxx": 390, "xy": [49, 64, 83, 277, 303, 345, 394, 650, 651, 654, 655, 656, 657, 658, 659, 664, 665, 666, 667, 668, 685, 686, 687, 688, 690], "xycoord": [49, 64], "xyguo": [1041, 1043], "xytext": [49, 64, 192], "xyz": 375, "y": [2, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 62, 63, 64, 65, 67, 68, 70, 71, 75, 76, 78, 79, 80, 86, 88, 90, 91, 94, 95, 96, 99, 100, 104, 105, 107, 108, 113, 116, 117, 119, 123, 125, 126, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 186, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 230, 232, 233, 234, 237, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 289, 290, 292, 293, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 368, 369, 370, 371, 372, 374, 376, 378, 380, 381, 383, 384, 385, 389, 390, 399, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 500, 502, 504, 507, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 701, 702, 703, 704, 705, 706, 710, 715, 730, 736, 739, 745, 746, 760, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 792, 793, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 927, 928, 934, 939, 940, 964, 966, 967, 968, 975, 978, 991, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1019, 1020, 1021, 1025, 1031, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "y0": [52, 235], "y1": [52, 137, 235, 511, 720, 1006, 1007], "y1_label": 47, "y2": [137, 720, 1006], "y2_label": 47, "y3": 1006, "y_": [242, 256, 260, 261, 302, 378, 411, 413, 641, 652, 673, 684, 733, 734, 742, 768, 787, 788, 791, 1001, 1005, 1041], "y_1": [136, 357, 411, 1005, 1009, 1019], "y_2": [136, 357, 1009], "y_20": 333, "y_2d": 340, "y_3": 357, "y_30": 334, "y_50": 334, "y_adult": 326, "y_all": [670, 672, 680, 836, 837, 865], "y_ard": 194, "y_ard_std": 194, "y_axi": [123, 220], "y_bia": 138, "y_brr": 194, "y_brr_std": 194, "y_c": [483, 484, 486], "y_calib": 438, "y_california": 183, "y_coclust": 58, "y_convert": 934, "y_cov": 615, "y_cu": 404, "y_decis": [326, 839], "y_dens": 1006, "y_diabet": 183, "y_different_covari": 71, "y_digit": [106, 161, 306, 409], "y_error": [138, 218], "y_errors_larg": 218, "y_filter": 91, "y_full": [182, 183, 310], "y_full_train": 140, "y_grid_pr": 153, "y_hat": 466, "y_high": 147, "y_i": [139, 322, 347, 406, 415, 996, 997, 1001, 1005, 1009, 1019, 1020, 1021], "y_indic": 879, "y_iri": 275, "y_isotropic_covari": 71, "y_j": [997, 1005, 1007, 1015, 1020], "y_k": [411, 1015], "y_kmean": 58, "y_kr": 245, "y_l": 1005, "y_label": 230, "y_left_lower_corn": [51, 303, 371, 500], "y_limit": 144, "y_loadings_": [483, 484, 485], "y_loc": 351, "y_log_prob": 839, "y_log_proba": [855, 868], "y_low": 147, "y_lower": [94, 147], "y_mask": 333, "y_max": [68, 92, 137, 143, 153, 162, 173, 230, 244, 305, 312, 334, 344, 345, 639, 641], "y_mean": [176, 177, 180, 615, 648, 649], "y_mean_": 1047, "y_med": 147, "y_min": [68, 92, 137, 143, 153, 162, 173, 244, 305, 312, 334, 344, 345, 639, 641], "y_miss": [182, 183], "y_miss_california": 183, "y_miss_diabet": 183, "y_multirf": 154, "y_n": [1005, 1009, 1019], "y_new": 90, "y_nois": 138, "y_noisi": 211, "y_norm_squar": 767, "y_normal": 214, "y_np": 404, "y_numer": [934, 993], "y_observ": 327, "y_onehot_test": 279, "y_org": 939, "y_outlier": 197, "y_pareto": 214, "y_plot": [194, 213, 218, 273], "y_plot_ext": 213, "y_po": 353, "y_pred": [44, 46, 47, 53, 63, 67, 69, 71, 80, 91, 96, 103, 108, 135, 147, 148, 150, 155, 166, 187, 209, 212, 214, 219, 222, 227, 229, 230, 239, 240, 249, 264, 266, 268, 273, 297, 301, 308, 315, 327, 332, 333, 359, 376, 383, 390, 415, 431, 440, 466, 483, 484, 485, 551, 554, 556, 558, 559, 560, 562, 564, 566, 567, 569, 570, 572, 615, 635, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 701, 702, 704, 705, 706, 707, 712, 716, 717, 722, 725, 726, 727, 728, 732, 733, 734, 738, 740, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 787, 788, 789, 791, 792, 794, 795, 800, 804, 807, 808, 818, 829, 839, 841, 842, 851, 855, 859, 866, 868, 908, 909, 910, 911, 912, 913, 914, 917, 919, 1005, 1007, 1041, 1042, 1044, 1046, 1050, 1051, 1052], "y_pred_ard": 198, "y_pred_bin": 212, "y_pred_chain": 289, "y_pred_empti": [733, 734], "y_pred_enet": 198, "y_pred_ensembl": 289, "y_pred_lasso": 198, "y_pred_lr": 214, "y_pred_nnl": 208, "y_pred_ol": 208, "y_pred_outli": [226, 296, 339], "y_pred_outliers_sgd": 226, "y_pred_ovr": 289, "y_pred_product": 230, "y_pred_qr": 214, "y_pred_ridg": 108, "y_pred_ridge_with_trans_target": 108, "y_pred_scal": 315, "y_pred_seg": 212, "y_pred_test": [226, 296, 339], "y_pred_test_sgd": 226, "y_pred_tot": 230, "y_pred_train": [226, 339], "y_pred_train_sgd": 226, "y_pred_with_": 186, "y_pred_without_": 186, "y_predict": [138, 378, 1035], "y_prob": [63, 65, 174, 439, 440, 713, 839, 865, 1005, 1049, 1053], "y_proba": [146, 149, 315, 390, 713, 855, 868, 1053], "y_proba_sc": 315, "y_rand": 334, "y_reconstruct": [483, 484, 485], "y_rf": 154, "y_right": 71, "y_rotations_": [411, 483, 484, 485], "y_sampl": [180, 615], "y_scaler": 50, "y_score": [240, 277, 279, 390, 483, 484, 485, 551, 711, 724, 730, 731, 743, 744, 760, 786, 792, 793, 798, 804, 807, 808, 818, 855, 868, 1005, 1041, 1049, 1051, 1053], "y_scores_": [485, 1047], "y_shared_covari": 71, "y_spars": 1006, "y_std": [177, 180, 554, 615, 648, 649, 1048], "y_std_": 1047, "y_svr": 245, "y_test": [45, 46, 47, 48, 50, 53, 62, 63, 64, 65, 68, 69, 103, 104, 108, 116, 117, 126, 135, 138, 140, 142, 146, 147, 148, 149, 150, 151, 154, 161, 162, 165, 166, 179, 186, 187, 188, 189, 190, 192, 198, 208, 209, 212, 218, 219, 220, 227, 228, 230, 240, 248, 252, 253, 257, 263, 264, 267, 268, 273, 277, 279, 283, 289, 293, 298, 299, 305, 307, 308, 312, 315, 317, 319, 320, 321, 326, 327, 332, 333, 351, 355, 358, 359, 370, 381, 389, 409, 412, 415, 439, 511, 560, 561, 562, 569, 570, 701, 702, 704, 706, 803, 826, 834, 836, 839, 857, 865, 866, 868, 918, 919, 1005, 1007, 1008, 1015, 1020, 1032, 1035], "y_test_pr": 257, "y_test_predict": 248, "y_test_r": 116, "y_test_tru": 332, "y_thresholds_": [242, 639, 1047], "y_torch": 404, "y_train": [45, 46, 47, 48, 50, 53, 62, 63, 64, 65, 68, 69, 103, 104, 108, 116, 117, 126, 135, 138, 142, 145, 146, 147, 148, 149, 150, 151, 154, 161, 162, 165, 166, 177, 178, 179, 180, 186, 187, 188, 189, 190, 192, 195, 198, 208, 209, 210, 213, 219, 220, 227, 228, 240, 248, 252, 253, 257, 263, 264, 267, 268, 273, 277, 279, 283, 289, 293, 298, 299, 305, 307, 308, 312, 315, 317, 319, 320, 321, 326, 327, 329, 330, 332, 333, 334, 351, 355, 358, 359, 363, 370, 378, 381, 389, 409, 412, 415, 438, 439, 511, 560, 561, 562, 569, 570, 701, 702, 704, 706, 803, 826, 834, 836, 839, 857, 865, 866, 868, 918, 919, 995, 1005, 1007, 1008, 1013, 1015, 1020, 1032], "y_train_": 615, "y_train_ensembl": 140, "y_train_linear": 140, "y_train_noisi": 178, "y_train_pr": 257, "y_train_r": 116, "y_train_valid": 64, "y_tran": 108, "y_transform": 486, "y_true": [44, 53, 58, 69, 93, 108, 135, 155, 174, 212, 222, 230, 249, 258, 264, 332, 376, 431, 439, 440, 466, 483, 484, 485, 554, 556, 558, 559, 560, 562, 564, 566, 567, 570, 572, 615, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 682, 683, 701, 702, 704, 705, 706, 707, 711, 712, 713, 716, 717, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 800, 803, 841, 842, 851, 859, 866, 909, 911, 914, 917, 919, 1005, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1052], "y_true_bin": 212, "y_true_categor": [713, 1005], "y_true_empti": 733, "y_true_mean": 214, "y_true_seg": 212, "y_type_": 875, "y_uniqu": 62, "y_upper": [94, 147], "y_val": [145, 1013], "y_valid": 64, "y_var": 138, "y_vari": 91, "y_weights_": [411, 483, 484, 485, 486], "y_wrong": 71, "yacin": 1043, "yadav": 1049, "yagi": 1047, "yahoo": 52, "yair": [408, 695], "yakov": 1047, "yalburgi": [1042, 1043], "yaman": 1050, "yamanishi": 371, "yamin": 1035, "yaml": [380, 384], "yan": [1039, 1047], "yanchor": 271, "yang": [371, 408, 413, 536, 643, 1041, 1042, 1045, 1047, 1048, 1049, 1051, 1052], "yangarbit": 1042, "yanhong": 1050, "yanlend": 1041, "yann": [1035, 1037], "yanni": 408, "yannick": [1035, 1037], "yao": [0, 373, 387, 397, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "yap": 1042, "yar": 1049, "yareyaredesuyo": 1053, "yaroslav": [0, 398, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "yarowski": [321, 905, 1018], "yashika": 1047, "yasmeen": 1048, "yat2016": 408, "yate": [593, 734], "yates2011": 593, "yau": [1038, 1039, 1040, 1041, 1042], "yaxi": [47, 50, 94, 127, 141, 232, 234, 237, 255, 290, 295, 351], "ye": [384, 390, 402, 662, 663, 875, 892, 1001], "year": [0, 44, 158, 176, 186, 187, 188, 212, 213, 230, 327, 373, 375, 380, 388, 412, 416, 806, 811, 813, 887, 1001, 1005, 1025, 1029], "yearli": [44, 391], "yearremodadd": 155, "yeast": [289, 839], "yee": [1042, 1043], "yegelwel": 1047, "yeh": 1048, "yelit": 1041, "yellow": [71, 119, 340, 357, 1006], "yellowbrick": 1024, "yellowgreen": [213, 215, 222, 357], "yen": [1041, 1042], "yenchen": [0, 1041], "yenchenlin": 1041, "yenugula": 1053, "yeo": [310, 314, 884, 896, 1015, 1043, 1049, 1051], "yep": 379, "yerr": [106, 111, 113, 142, 144, 168, 292, 316, 332], "yesy": 396, "yesyesclassificationclassificationnumb": 396, "yesyesdo": 396, "yesyesfew": 396, "yesyesllel": 396, "yesyespredict": 396, "yesyessgdclassifiersgd": 396, "yesyessgdregressorsgd": 396, "yesyestextdatatext": 396, "yet": [49, 91, 198, 230, 260, 271, 353, 365, 371, 375, 378, 380, 388, 393, 394, 399, 412, 413, 415, 416, 418, 449, 453, 462, 463, 555, 556, 580, 782, 988, 994, 1001, 1005, 1011, 1019, 1025, 1044, 1052], "yeung": 1041, "ygrid": [51, 303], "yhoo": 52, "yi": [511, 1007, 1039, 1043, 1044, 1047], "yichuan": [1041, 1042], "yield": [2, 48, 49, 63, 89, 110, 111, 112, 113, 147, 198, 208, 212, 227, 230, 275, 289, 305, 310, 337, 342, 351, 352, 359, 363, 365, 370, 381, 390, 405, 408, 410, 412, 413, 415, 416, 417, 438, 450, 469, 473, 510, 511, 539, 540, 541, 543, 548, 555, 556, 561, 562, 563, 564, 569, 570, 597, 605, 651, 655, 656, 657, 659, 665, 667, 669, 677, 679, 690, 730, 785, 792, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 832, 833, 835, 839, 842, 900, 901, 945, 946, 953, 955, 956, 962, 997, 999, 1001, 1002, 1005, 1020, 1021, 1040, 1041, 1043, 1046, 1048], "yifan": 1009, "yime": 1043, "ying": [408, 453, 463, 1049], "yinglr": 1045, "yisheng": 1052, "yiyangq": 1049, "yj": [116, 314], "ylabel": [44, 48, 49, 53, 62, 63, 64, 65, 70, 73, 95, 110, 111, 113, 114, 116, 117, 123, 127, 128, 136, 137, 139, 146, 147, 148, 149, 150, 154, 158, 160, 164, 165, 168, 171, 172, 173, 174, 176, 177, 178, 187, 194, 197, 198, 200, 201, 202, 203, 205, 206, 207, 209, 212, 214, 215, 217, 219, 221, 222, 230, 243, 245, 247, 265, 269, 270, 273, 274, 275, 279, 280, 283, 285, 293, 317, 337, 340, 343, 351, 356, 357, 635], "ylim": [52, 62, 64, 70, 73, 80, 92, 96, 110, 111, 112, 123, 137, 138, 144, 147, 154, 157, 172, 173, 187, 202, 203, 205, 206, 207, 218, 221, 222, 226, 239, 247, 256, 261, 265, 269, 273, 279, 285, 296, 297, 339, 344, 345, 348, 351, 357], "ylorbr_r": 112, "ym": [52, 235], "ymax": [48, 50, 51, 110, 202, 205, 206, 213, 221, 270, 303], "ymazari": 1043, "ymean": 195, "ymin": [51, 110, 202, 205, 206, 213, 221, 270, 303], "yml": [376, 384], "yn": [511, 1006, 1007], "yoav": 1041, "yoch": 1048, "yogendrasingh": 1050, "yojana": 1050, "yokasr": 1045, "yoni": 1038, "yoon": 1046, "yoram": [287, 739], "york": [269, 792, 801, 855, 995, 1005, 1017], "yoshihiro": 1045, "yoshiki": [1038, 1041], "yoshizawa": 1043, "yoshua": [865, 866, 1018], "yosshi999": 1049, "yosuk": [1047, 1048], "yotam": 1051, "you": [0, 31, 55, 59, 62, 104, 127, 143, 146, 148, 166, 169, 183, 188, 190, 200, 213, 216, 241, 246, 253, 258, 265, 270, 271, 277, 296, 319, 320, 323, 325, 326, 330, 333, 344, 357, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 389, 390, 394, 395, 396, 399, 402, 404, 406, 407, 408, 409, 410, 412, 415, 416, 417, 419, 420, 425, 438, 444, 445, 447, 448, 450, 455, 465, 466, 468, 470, 483, 484, 485, 502, 505, 506, 511, 512, 534, 535, 538, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 583, 591, 592, 593, 594, 610, 611, 613, 614, 615, 631, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 694, 703, 704, 789, 802, 803, 805, 806, 807, 808, 809, 811, 813, 819, 820, 822, 823, 824, 826, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 858, 859, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 880, 881, 882, 887, 888, 893, 894, 896, 897, 898, 899, 901, 903, 904, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 927, 945, 952, 970, 994, 995, 1000, 1001, 1005, 1006, 1009, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1028, 1029, 1035, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "youden": 1005, "younger": 230, "your": [16, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 374, 375, 376, 377, 379, 380, 382, 384, 385, 388, 389, 390, 394, 395, 396, 402, 404, 407, 408, 409, 410, 415, 416, 419, 420, 445, 447, 505, 535, 563, 564, 605, 638, 650, 691, 715, 804, 807, 808, 810, 818, 827, 831, 833, 945, 1002, 1009, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "yourlogin": 376, "yourself": [104, 375, 376, 377, 378, 381, 384, 1009], "ypred": 1042, "yrsold": 155, "yscale": [172, 177, 212, 245, 351], "ystd": 195, "yt": 879, "ython": 0, "ytick": [46, 51, 67, 71, 76, 80, 81, 84, 85, 86, 92, 93, 96, 114, 116, 124, 148, 165, 173, 174, 175, 179, 203, 225, 239, 247, 256, 257, 258, 261, 265, 285, 294, 303, 308, 329, 340, 345, 351], "yticklabel": [265, 351], "ytrain": 303, "ytrue": 1042, "yu": [198, 408, 453, 463, 662, 1001, 1009, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "yuan": [1049, 1050, 1051, 1052, 1053], "yuchen": [1051, 1052], "yucheng": 1040, "yue": [1047, 1053], "yufeng": 1043, "yuichi": 1042, "yuki": 1049, "yule": [451, 458, 782, 783, 784], "yulia": 1045, "yum": 374, "yun": [1050, 1051], "yung": [1038, 1041], "yunqian": 1001, "yurchak": [0, 398, 416, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "yuri": [1038, 1040], "yusuf": [1050, 1051], "yusuk": 1048, "yusukenagasaka": 1048, "yutaro": 1047, "yuusuk": 1052, "yuval": [405, 452], "yv": 411, "yve": 1048, "yy": [78, 92, 112, 143, 153, 162, 173, 175, 188, 205, 219, 223, 224, 225, 226, 237, 239, 247, 296, 305, 312, 313, 334, 339, 340, 344, 345, 348, 349], "yy_": 219, "yy_coars": 143, "yy_down": 345, "yy_up": 345, "yzhenman": 1048, "z": [51, 92, 143, 162, 173, 175, 188, 222, 224, 225, 232, 234, 239, 244, 259, 296, 303, 305, 312, 315, 334, 340, 345, 349, 373, 380, 405, 413, 415, 555, 556, 588, 643, 668, 675, 689, 690, 693, 697, 703, 728, 789, 888, 1001, 1002, 1009, 1010, 1050], "z_": 413, "z_1": 1001, "z_2": 1001, "z_3": 1001, "z_4": 1001, "z_5": 1001, "z_i": [139, 1009], "z_l": 1009, "z_points_coars": 143, "zablit": 1050, "zac": 1040, "zacchari": 1047, "zach": [1043, 1044, 1049], "zachariah": 1043, "zadrozni": [65, 406, 438, 680], "zaffalon": 270, "zahlii": 1048, "zain": [0, 397, 1049, 1050, 1051, 1052], "zalkow": 1040, "zambelli": 1038, "zamrii": 1045, "zanouda": 1042, "zaxi": [127, 232], "zayd": 1044, "zaytsev": 1038, "zdzieblo": 1052, "zebra": 716, "zedan": 1051, "zeel": 1049, "zeeshan": [1050, 1051], "zempleni": 1049, "zen": 939, "zenin": 1041, "zentrum": 1005, "zero": [2, 26, 50, 51, 54, 65, 71, 73, 76, 77, 86, 88, 111, 113, 114, 121, 124, 126, 137, 138, 146, 148, 149, 154, 166, 169, 183, 194, 198, 199, 201, 204, 206, 207, 211, 212, 213, 216, 217, 218, 222, 227, 230, 243, 246, 247, 249, 255, 259, 261, 267, 270, 275, 279, 280, 283, 295, 310, 320, 321, 344, 347, 352, 353, 355, 358, 363, 364, 371, 378, 382, 390, 406, 408, 410, 413, 415, 416, 417, 418, 421, 447, 453, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 488, 499, 510, 511, 525, 528, 529, 533, 534, 537, 539, 540, 541, 542, 544, 545, 549, 550, 554, 559, 560, 561, 562, 563, 564, 566, 567, 568, 584, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 615, 640, 643, 647, 648, 649, 654, 662, 663, 668, 669, 670, 671, 672, 675, 680, 681, 682, 689, 690, 707, 713, 716, 717, 719, 720, 729, 733, 734, 738, 742, 744, 750, 787, 788, 789, 791, 800, 801, 819, 820, 823, 824, 837, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 871, 878, 880, 881, 883, 884, 885, 887, 888, 894, 895, 896, 897, 901, 908, 916, 917, 918, 919, 950, 979, 990, 995, 1001, 1003, 1004, 1007, 1008, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1035, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "zero_bas": [488, 510, 511], "zero_class": 247, "zero_divis": [717, 733, 734, 742, 787, 788, 791, 1005, 1045, 1047, 1051], "zero_impute_scor": 183, "zero_on": [376, 1036], "zero_one_loss": [2, 376, 404, 707, 738, 1005, 1036, 1037, 1038, 1052, 1053], "zero_one_scor": 1036, "zerodivisionerror": [1042, 1045, 1051], "zeros_lik": [83, 214, 279], "zeta": 1020, "zeta_i": 1020, "zev": [1041, 1042, 1043, 1044], "zeyusun": 1048, "zha": [693, 697, 1002], "zhai_pro": 1040, "zhan": 1050, "zhang": [408, 443, 668, 683, 689, 690, 693, 697, 762, 763, 1001, 1002, 1003, 1007, 1019, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1051, 1052, 1053], "zhang02c": 680, "zhang96": [408, 443], "zhao": [1045, 1047, 1048, 1049, 1050], "zhaowei": 1047, "zhaoweiwang": 1048, "zhauniarovich": 1040, "zhdanovich": 1043, "zhechev": 1050, "zhehao": [1048, 1049, 1050, 1051, 1053], "zhenfish": 1049, "zheng": [1041, 1042, 1047], "zhenq": 1043, "zhi": [565, 1011], "zhiqe": 1043, "zhou": [565, 643, 904, 1011, 1043, 1051, 1052], "zht2007": 200, "zhu": [135, 415, 521, 555, 662, 903], "zhuyi": [1043, 1044], "zhuzhunashvili": [408, 463], "ziad": 1053, "zibulevski": [668, 689, 690], "zichen": 1040, "zielinska": 1046, "zihna": 1048, "ziji": [1043, 1044], "zijlstra": 1038, "zike": 1041, "zimek": 447, "zimmer": [1039, 1049], "zinkov": [1035, 1036, 1037, 1039, 1040], "zip": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 374, 415, 832, 1015], "zisserman": [642, 997, 1005], "zito": [1035, 1048], "ziv": 1041, "zivori": 1041, "zj": [1043, 1044], "zlabel": 127, "zoj613": 1047, "zolisa": 1047, "zoom": [44, 140, 310, 396], "zoom_in_percentile_rang": 310, "zorder": [52, 92, 123, 152, 162, 172, 180, 203, 210, 233, 235, 242, 245, 255, 320, 326, 345], "zou": [135, 200, 415, 521, 555, 660, 1001, 1019], "zou_et_al_criterion_resc": 200, "zoubin": 903, "zoubir": 113, "zouhar": 1048, "zsh": 364, "zuckerberg": 0, "zwinck": 1037, "zxcvbniu": 1042, "zz": 112, "zzrh2009": 415, "z\u00e9": 1043, "\u00e4yr\u00e4m\u00f6": 1001, "\u00f3scar": [1039, 1040, 1041, 1042], "\u00f6zer": 1048, "\u0142ukasz": 1050, "\u015fahin": 1049, "\u0161t\u011bp\u00e1n": 1053, "\u675c\u4e16\u6a4b": [0, 398], "\u8d75\u4e30": 1049}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.frozen", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal Component Analysis (PCA) on Iris Dataset", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Decision Boundaries of Multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Ordinary Least Squares Example", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Effect of model regularization on training and test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_outlier_detector", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "EstimatorCheckFailedWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "FrozenEstimator", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "estimator_checks_generator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6", "Version 1.7"], "titleterms": {"": [189, 315, 317, 379, 388, 415, 1005], "0": [183, 319, 320, 321, 322, 1021, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "1": [188, 322, 323, 324, 325, 326, 327, 388, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "10": [101, 1035], "11": 1035, "12": 1035, "13": 1036, "14": 1037, "15": 1038, "16": 1039, "17": 1040, "18": 1041, "19": 1042, "1d": [295, 357], "2": [324, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "20": [103, 351, 371, 1043], "2018": 1025, "20newgroup": 227, "21": 1044, "22": [319, 1045], "23": [320, 1046], "24": [321, 1047], "2d": [52, 86, 123, 129, 188], "3": [64, 325, 1043, 1044, 1049, 1051], "3d": 188, "4": [326, 1035, 1043, 1052], "5": [327, 1021, 1035, 1053], "6": [1035, 1054], "7": [1035, 1055], "8": 1035, "9": 1035, "99": 371, "A": [53, 59, 60, 82, 92, 97, 212, 322, 375, 382, 412], "And": [236, 391], "In": 277, "NOT": 381, "One": [205, 226, 279, 322, 339, 412, 1011, 1019], "The": [0, 117, 186, 187, 212, 237, 243, 264, 268, 277, 284, 287, 371, 380, 384, 412, 416, 1004, 1005, 1017], "Will": 388, "With": 250, "__sklearn_is_fitted__": 133, "_safe_index": 930, "abil": 177, "ablat": 249, "about": [0, 187, 388], "absolut": 1005, "access": 409, "accuraci": [189, 244, 351, 355, 1005], "accuracy_scor": 707, "across": 359, "action": 376, "activ": [0, 330], "ad": 408, "adaboost": [135, 136, 137, 415], "adaboostclassifi": [135, 555], "adaboostregressor": 556, "add": [326, 388], "add_dummy_featur": 890, "addit": [415, 997], "additive_chi2_kernel": 762, "additivechi2sampl": 642, "address": 264, "adjac": 56, "adjust": 73, "adjusted_mutual_info_scor": 708, "adjusted_rand_scor": 709, "advanc": 250, "advantag": 408, "affin": [52, 74, 408, 1003], "affinity_propag": 455, "affinitypropag": 441, "agglom": [75, 76, 86], "agglomer": [85, 88, 1022], "agglomerativeclust": 442, "aggress": [994, 1001], "aic": [202, 1001], "algebra": [363, 385], "algorithm": [58, 59, 60, 74, 80, 83, 89, 97, 98, 99, 232, 239, 382, 388, 999, 1001, 1006, 1008, 1009, 1013, 1021], "alias": 384, "align": 1002, "all": [270, 279, 323, 394, 1050, 1051, 1052], "all_displai": 942, "all_estim": 943, "all_funct": 944, "alloc": [55, 413], "alpha": [160, 355], "alpin": 394, "alreadi": 56, "altern": 994, "am": [144, 249], "amount": 282, "an": [82, 93, 133, 183, 196, 202, 300, 319, 323, 384, 388, 416, 994, 1011], "anaconda": 394, "analysi": [44, 65, 70, 71, 94, 121, 127, 128, 131, 135, 147, 188, 198, 255, 272, 273, 280, 298, 299, 300, 351, 411, 413, 999, 1008, 1022], "analyz": [53, 994], "angl": [202, 1001], "ani": 388, "anomali": 239, "anova": [166, 343], "api": [2, 42, 133, 252, 253, 319, 322, 324, 364, 378, 383, 390, 399, 404, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1052, 1053], "appli": 160, "applic": 416, "approach": [110, 202, 270], "approxim": [184, 191, 192, 244, 290, 321, 410, 997], "ar": [101, 264, 322, 388], "arch": 394, "architectur": 1025, "ard": [198, 1001], "ardregress": 648, "arff": 370, "argument": [322, 1046, 1048], "arm64": 384, "arrai": [42, 324, 327, 358, 385, 404, 1052, 1053], "artifact": 402, "artwork": 0, "as_float_arrai": 932, "ask": 388, "assert": 378, "assert_all_finit": 933, "assign": 408, "assumpt": 91, "atom": [50, 363], "attent": 388, "attribut": [378, 390, 404, 994], "auc": [319, 710], "author": [380, 1035], "autom": 376, "automat": [198, 389, 1001], "auxiliari": 42, "avail": [323, 1032], "available_if": 965, "averag": [277, 279, 408, 415, 1005], "average_precision_scor": 711, "avoid": [359, 409], "aweb": 1029, "ax": 383, "b": 116, "backend": 384, "backward": 376, "bag": [138, 146, 351, 415, 416, 994], "baggingclassifi": 557, "baggingregressor": 558, "balanc": [269, 1005], "balanced_accuracy_scor": 712, "ball": 1008, "balltre": [848, 1008], "base": [4, 42, 43, 44, 116, 142, 169, 184, 198, 245, 319, 320, 322, 324, 325, 326, 376, 378, 408, 412, 415, 417, 1001, 1013, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "baseestim": [378, 422], "baselin": [192, 212], "basi": [45, 180, 418, 997, 1001], "basic": [178, 230, 389, 410, 418], "batch": [408, 413], "bay": [62, 63, 1007], "bayesian": [26, 194, 195, 255, 270, 1001, 1004], "bayesiangaussianmixtur": 801, "bayesianridg": 649, "befor": 183, "behavior": 265, "behind": 0, "being": 187, "benchmark": [47, 50, 92, 351], "bernoulli": [1007, 1010], "bernoullinb": 843, "bernoullirbm": 864, "best": [260, 377, 388], "bestofmedia": 1029, "beta": 413, "betawork": 1029, "between": [98, 281, 1001], "bia": 138, "bic": [202, 260, 1001], "biclust": [28, 57, 58, 59, 184, 372, 405], "biclustermixin": 423, "bigger": 365, "bike": [44, 53, 188], "bin": 1015, "binar": [871, 891, 1015, 1016], "binari": [277, 289, 327, 1001, 1005], "birch": [78, 408, 443], "birchbox": 1029, "bisect": [79, 408], "bisectingkmean": [323, 444], "blind": 122, "bnp": 1029, "boil": 381, "boltzmann": [308, 1010], "bonu": 160, "book": 1029, "boost": [44, 141, 144, 145, 146, 147, 148, 149, 150, 188, 212, 319, 320, 322, 324, 325, 415], "bouldin": 408, "bound": 243, "boundari": [151, 156, 205, 293, 334, 344], "branch": 384, "break": 348, "breast": [190, 373], "brier": 1005, "brier_score_loss": 713, "brute": [994, 1008], "bug": [375, 376, 1028, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "build": [176, 183, 374, 376, 384, 409, 1053], "bulk": [50, 363], "bunch": [388, 923], "busi": 264, "c": 382, "c4": 1021, "c5": 1021, "cach": [105, 292, 409], "calcul": [145, 157], "calibr": [5, 61, 62, 63, 64, 65, 147, 184, 212, 406, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "calibratedclassifiercv": 438, "calibration_curv": 440, "calibrationdisplai": 439, "california": 371, "calinski": 408, "calinski_harabasz_scor": 714, "call": [359, 375], "callgrind": 382, "can": [160, 388], "cancer": [190, 373], "candid": [282, 994], "canon": [116, 411], "card": 264, "cardif": 1029, "cardiotocographi": 249, "cart": 1021, "case": [347, 1001, 1005], "categor": [144, 316, 321, 326, 388, 415, 1007, 1015], "categori": [44, 323, 325, 1015], "categoricalnb": 844, "caus": 394, "causal": [186, 187], "cautiou": 187, "cca": [116, 483], "center": [121, 1015], "central": 56, "centroid": [301, 1008], "chain": [106, 251, 289, 389, 409], "chanc": 73, "chang": [246, 376, 391, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "changelog": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "characterist": [279, 280, 1005], "check": [187, 272, 319, 384, 404, 1043, 1044, 1045], "check_arrai": 935, "check_consistent_length": 936, "check_cv": 828, "check_estim": 945, "check_increas": 640, "check_is_fit": [378, 988], "check_memori": 989, "check_random_st": 937, "check_scalar": 938, "check_scor": 715, "check_symmetr": 990, "check_x_i": 934, "checker": 42, "checklist": 376, "chi": [997, 1003], "chi2": 607, "chi2_kernel": 763, "choic": 413, "choos": [47, 396], "ci": [376, 384], "circl": 100, "cite": 0, "claim": [212, 230], "class": [42, 64, 73, 135, 137, 157, 221, 226, 273, 277, 279, 322, 339, 342, 390, 407, 412, 415, 416, 1005, 1008, 1011, 1019, 1020, 1035, 1036], "class_likelihood_ratio": 716, "classic": 26, "classif": [28, 48, 64, 66, 67, 69, 70, 103, 161, 172, 173, 174, 175, 179, 184, 228, 247, 273, 276, 277, 280, 289, 293, 301, 308, 319, 328, 333, 344, 351, 372, 418, 1001, 1005, 1006, 1008, 1009, 1019, 1020, 1021], "classifi": [26, 42, 62, 63, 65, 68, 133, 158, 205, 251, 267, 284, 289, 293, 319, 327, 334, 337, 340, 351, 358, 406, 415, 999, 1008], "classification_report": 717, "classifierchain": [839, 1006], "classifiermixin": 425, "classifiertag": 924, "classnameprefixfeaturesoutmixin": 424, "clear": 1045, "clear_data_hom": 487, "clone": [378, 433], "close": [375, 384], "cloud": 123, "cloudpickl": 402, "cluster": [6, 28, 52, 58, 60, 72, 73, 74, 75, 76, 77, 80, 82, 83, 86, 89, 90, 92, 94, 97, 98, 99, 100, 101, 121, 184, 323, 325, 352, 372, 405, 408, 413, 1005, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "cluster_optics_dbscan": 456, "cluster_optics_xi": 457, "clustermixin": 426, "co": [58, 60, 405], "co2": 176, "code": [0, 47, 121, 130, 376, 378, 381, 382, 384, 413, 1039, 1040, 1041, 1042, 1043], "coeffici": [169, 187, 194, 216, 217, 283, 408, 1005], "cohen": 1005, "cohen_kappa_scor": 720, "coin": [81, 82], "column": [103, 104, 251], "column_or_1d": 991, "columntransform": [327, 409, 465], "com": 1029, "combin": [155, 240], "comment": 381, "commit": 376, "committe": 391, "common": [187, 359, 390, 404, 416, 1005], "commun": [0, 376], "compact": 241, "compar": [64, 78, 80, 96, 110, 116, 141, 154, 165, 192, 194, 199, 214, 219, 239, 245, 270, 278, 298, 306, 310, 316, 388], "comparison": [65, 68, 71, 79, 98, 112, 129, 144, 145, 164, 171, 232, 233, 245, 270, 281, 283, 287, 353, 1001], "compat": [42, 319, 376, 404], "compil": [374, 382], "complement": 1007, "complementnb": 845, "complet": [248, 408], "completeness_scor": 721, "complex": [47, 241, 251, 269, 272, 331, 355, 363, 1001, 1008, 1009, 1019, 1020, 1021], "compon": [117, 121, 127, 298, 299, 300, 413, 1008, 1022], "compos": [7, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "composit": [102, 184, 409, 994], "compoundkernel": 616, "compress": [54, 87, 363], "comput": [42, 56, 74, 82, 83, 97, 98, 101, 110, 141, 206, 217, 362, 363, 409, 412, 1012, 1026], "computation": 365, "compute_class_weight": 939, "compute_optics_graph": 458, "compute_sample_weight": 940, "concaten": 107, "concentr": 255, "concept": [390, 1001], "conclud": [44, 236], "conclus": [47, 53, 171, 198, 202, 209, 287, 293, 317, 344], "conda": 374, "condit": [188, 321, 1012], "confid": 147, "config_context": 469, "configur": [363, 364], "conflict": 376, "confus": [263, 408, 1005], "confusion_matrix": 722, "confusionmatrixdisplai": [240, 701], "connect": [408, 416], "consensu": 1001, "consensus_scor": 723, "consider": 264, "constant": [212, 264, 995], "constantkernel": 617, "constraint": [150, 152, 324, 326, 408, 415], "construct": 245, "consum": 246, "content": 388, "conting": 408, "contingency_matrix": 718, "continu": [311, 376], "contribut": [376, 388], "contributor": [0, 375, 376, 391, 1039, 1040, 1041, 1042, 1043], "control": [359, 415, 1009], "convent": 377, "converg": 135, "convergencewarn": 573, "convex": 222, "cookbook": 180, "coordin": 202, "core": [0, 48, 365, 375, 382, 388, 391, 1007], "corpu": 416, "correl": [187, 190, 411, 1005, 1013], "cosin": 1003, "cosine_dist": 764, "cosine_similar": 765, "cost": [264, 355, 1021], "countvector": 591, "covari": [8, 71, 109, 110, 112, 113, 114, 184, 257, 410, 999, 1043, 1047, 1048, 1049, 1051, 1052], "coverag": [376, 384, 1005], "coverage_error": 724, "covertyp": [249, 371], "craft": 381, "crash": 388, "creat": [103, 128, 135, 216, 240, 277, 317, 343, 344, 357, 388], "credit": 264, "criteria": [200, 388, 1001, 1021], "criterion": [202, 321, 994, 1019], "cross": [44, 115, 116, 160, 168, 184, 202, 264, 265, 266, 268, 269, 273, 275, 280, 317, 343, 359, 407, 411, 412, 994, 1001], "cross_decomposit": [9, 1045, 1047, 1049, 1051, 1053], "cross_val_predict": 829, "cross_val_scor": [274, 830], "cross_valid": [412, 831], "cubic": 195, "cumul": 1005, "curat": 375, "curv": [63, 65, 195, 245, 252, 261, 267, 272, 277, 279, 406, 1000], "custom": [133, 188, 268, 327, 336, 416, 1015, 1020], "cut": [264, 284], "cv": [265, 359], "cv_results_": 994, "cython": [377, 382, 384], "d": [412, 1008], "d2_absolute_error_scor": 725, "d2_log_loss_scor": 726, "d2_pinball_scor": 727, "d2_tweedie_scor": 728, "data": [44, 47, 49, 52, 56, 59, 62, 64, 71, 74, 82, 83, 84, 89, 91, 92, 97, 98, 100, 101, 103, 108, 110, 112, 114, 116, 117, 122, 123, 126, 128, 136, 142, 145, 148, 150, 151, 155, 165, 168, 169, 177, 179, 183, 186, 189, 190, 192, 195, 199, 206, 207, 209, 216, 240, 245, 252, 260, 265, 267, 271, 276, 277, 279, 280, 283, 293, 297, 302, 308, 310, 314, 315, 316, 326, 329, 340, 343, 346, 347, 352, 353, 359, 363, 365, 381, 388, 390, 408, 409, 412, 417, 1015, 1019, 1029], "dataconversionwarn": 574, "datadimensionalitywarn": 575, "datafram": [319, 326, 388, 1052], "dataiku": 1029, "datarobot": 1029, "dataset": [10, 43, 44, 45, 48, 53, 62, 63, 69, 80, 92, 96, 103, 116, 118, 119, 121, 127, 129, 135, 141, 143, 144, 155, 160, 171, 173, 175, 176, 178, 180, 184, 186, 187, 188, 194, 197, 198, 202, 205, 212, 214, 221, 230, 232, 233, 239, 244, 249, 250, 264, 268, 276, 277, 284, 287, 289, 317, 333, 334, 337, 344, 351, 356, 357, 368, 369, 370, 371, 372, 373, 381, 388, 418, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "davi": 408, "davies_bouldin_scor": 729, "dbscan": [83, 408, 419, 445], "dbscan_clust": 89, "dcg_score": 730, "deal": [42, 388], "debian": 394, "debug": 384, "debugg": 382, "decis": [135, 136, 143, 151, 156, 184, 205, 244, 264, 284, 293, 325, 327, 334, 344, 354, 355, 356, 357, 358, 388, 391, 407, 1021], "decisionboundarydisplai": 635, "decisiontre": 136, "decisiontreeclassifi": 916, "decisiontreeregressor": [321, 917], "decod": 416, "decompos": 413, "decomposit": [11, 115, 116, 120, 121, 138, 184, 372, 411, 413, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decreas": [142, 189], "deep": 388, "default": [246, 297, 376], "defin": [73, 82, 92, 101, 232, 265, 267, 268, 353, 1005], "definit": [230, 283, 308, 1012, 1045], "deflat": 116, "delai": 971, "demand": [44, 53], "demo": [59, 60, 74, 82, 83, 89, 92, 97, 99], "demonstr": [91, 274, 313, 329], "dendrogram": 77, "denois": [45, 124], "dens": 199, "densiti": [259, 294, 295, 303, 325, 414, 949, 1020], "densitymixin": 427, "depend": [188, 246, 250, 374, 1012, 1035, 1048, 1049], "deploi": 388, "deploy": 394, "deprec": [1, 246, 376, 941, 1045], "descent": [202, 220, 226, 1001, 1019], "descript": 186, "design": 176, "det": [267, 1005], "det_curv": 731, "detail": [997, 1019, 1020], "detcurvedisplai": 702, "detect": [49, 239, 249, 267, 296, 297, 1005, 1011, 1020], "determin": [113, 198, 410, 1001, 1005], "develop": [132, 133, 184, 246, 374, 377, 378, 379, 383, 384, 385, 994, 1031, 1051], "devianc": [148, 1005], "devic": 404, "diabet": [160, 250, 284, 373], "diagnost": 373, "dict": 416, "dict_learn": 547, "dict_learning_onlin": 548, "dictionari": [84, 121, 124, 130, 413], "dictionarylearn": 533, "dictvector": [353, 584], "did": 388, "diff": 384, "differ": [76, 80, 96, 110, 180, 188, 310, 313, 316, 337, 344, 378, 388, 399, 408, 1001], "digit": [69, 86, 92, 161, 233, 308, 329, 330, 373], "dimension": [105, 232, 235, 251, 299, 315, 352, 999, 1002, 1008, 1022], "direct": 229, "dirichlet": [55, 413, 1004], "discount": 1005, "discov": 42, "discret": [151, 179, 311, 312, 1015], "discrimin": [70, 71, 999], "discriminant_analysi": [12, 1043, 1044, 1047, 1049, 1050, 1051], "discuss": 375, "disk": 56, "dispatch": 386, "displai": [124, 217, 240, 241, 251, 324, 325, 326, 384, 1032, 1051], "distanc": [28, 112, 327], "distance_metr": 766, "distancemetr": 703, "distort": 124, "distribut": [51, 230, 232, 303, 314, 371, 394, 1002, 1015], "diverg": 413, "divid": 323, "do": [381, 388], "document": [0, 48, 58, 184, 321, 322, 350, 351, 352, 376, 1024, 1025, 1028, 1035, 1038, 1039, 1042, 1043], "doe": 388, "domain": 1024, "donat": 0, "dot": [180, 418], "dotproduct": 618, "down": 381, "download": [56, 155, 183, 370], "drawback": 408, "drop": 144, "dtype": 326, "dummi": [13, 1005, 1043, 1044, 1045, 1048, 1049, 1053], "dummyclassifi": 553, "dummyregressor": 554, "dump_svmlight_fil": 488, "dure": 359, "d\u00b2": 1005, "each": [277, 282, 351], "earli": [145, 150, 220], "earlier": 1035, "eas": 377, "effect": [108, 150, 186, 237, 283, 310, 315, 332, 355], "effici": [324, 326, 385], "efficiencywarn": 576, "eigenfac": [46, 121], "eigenmap": 1002, "eigenvector": 56, "elast": [196, 201, 1001], "elasticnet": [198, 320, 650], "elasticnetcv": 651, "element": 390, "elimin": [167, 168, 417, 994], "ellipsoid": [71, 256], "ellipt": 1011, "ellipticenvelop": 470, "embed": [52, 86, 232, 233, 243, 300, 415, 1002], "emeritu": 0, "empir": [95, 113, 243, 410], "empirical_covari": 478, "empiricalcovari": 471, "enable_halving_search_cv": 582, "enable_iterative_imput": 583, "encod": [87, 144, 316, 317, 325, 1015, 1016], "enet_path": 685, "enforc": [1046, 1048], "engin": [44, 53, 189, 1024, 1029], "enhanc": [324, 391, 1024, 1038, 1039, 1040, 1041, 1042], "enrich": 326, "ensembl": [14, 134, 140, 143, 184, 415, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "enthought": 394, "entir": 388, "entri": 1018, "envelop": 1011, "environ": [364, 384, 402], "equival": 270, "error": [135, 139, 145, 147, 160, 194, 216, 267, 283, 384, 394, 1001, 1005], "establish": [98, 192], "estim": [42, 102, 109, 110, 111, 112, 113, 114, 132, 133, 138, 144, 146, 154, 177, 183, 184, 194, 215, 218, 241, 246, 248, 249, 259, 278, 287, 294, 295, 303, 319, 320, 321, 324, 326, 359, 378, 388, 389, 390, 396, 404, 409, 410, 412, 414, 415, 994, 995, 999, 1001, 1005, 1020, 1024, 1036, 1043, 1044, 1045], "estimate_bandwidth": 459, "estimator_checks_gener": 946, "estimator_html_repr": 948, "estimatorcheckfailedwarn": 577, "euclidean_dist": 767, "evalu": [53, 73, 92, 95, 113, 209, 212, 249, 264, 271, 274, 283, 308, 316, 352, 389, 403, 405, 408, 412, 415, 994, 1000, 1005], "evernot": 1029, "exact": 413, "exampl": [43, 46, 49, 87, 93, 108, 118, 133, 151, 178, 184, 209, 216, 345, 348, 365, 381, 399, 404, 407, 416, 418, 419, 420, 421, 422, 425, 428, 431, 432, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 483, 484, 485, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 506, 512, 513, 514, 515, 516, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 587, 590, 591, 592, 593, 594, 596, 597, 600, 602, 603, 605, 607, 608, 609, 610, 611, 613, 614, 615, 617, 618, 619, 621, 622, 623, 626, 627, 629, 631, 632, 634, 635, 636, 637, 638, 639, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 656, 657, 659, 660, 661, 662, 663, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 692, 693, 694, 695, 696, 697, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 716, 717, 721, 722, 723, 731, 733, 736, 738, 739, 741, 742, 745, 746, 749, 750, 752, 753, 754, 756, 757, 759, 761, 765, 782, 783, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 861, 864, 865, 866, 867, 868, 869, 872, 873, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 894, 897, 901, 902, 904, 905, 906, 908, 911, 912, 913, 914, 915, 916, 917, 922, 923, 937, 947, 949, 956, 961, 962, 963, 964, 965, 978, 988, 1035], "except": [15, 385, 1047, 1051], "execut": [359, 388], "exercis": [159, 160, 161, 162, 184], "exhaust": 994, "exist": 376, "exp": [180, 418], "expans": 194, "expect": [188, 321, 1012], "experi": [0, 73, 375], "experiment": [16, 324, 380, 404, 1051], "explain": 1005, "explained_variance_scor": 732, "explicit": 244, "explor": 44, "exponenti": 620, "export": [41, 388], "export_graphviz": 920, "export_text": 921, "expsinesquar": 619, "extend": 1001, "extens": [382, 394], "extern": [370, 1023, 1035, 1044], "extract": [55, 107, 124, 230, 271, 352, 363, 365, 416], "extract_patches_2d": 587, "extrapol": 176, "extratreeclassifi": 918, "extratreeregressor": 919, "extratreesclassifi": 559, "extratreesregressor": 560, "extrem": [381, 415], "f": [164, 1005], "f1": 277, "f1_score": 733, "f_classif": 608, "f_regress": 609, "fa": [121, 128], "face": [46, 84, 121, 248, 371, 1029], "factor": [55, 121, 128, 131, 296, 297, 413, 1011], "factoranalysi": 534, "fail": 381, "failur": [186, 994], "fast_logdet": 950, "faster": [324, 415], "fastica": [121, 122, 123, 420, 535], "fbeta_scor": 734, "featur": [44, 53, 85, 88, 107, 126, 127, 140, 142, 144, 148, 150, 152, 153, 163, 165, 167, 168, 169, 184, 189, 190, 192, 194, 207, 230, 244, 250, 271, 308, 311, 312, 315, 316, 319, 321, 322, 343, 351, 352, 363, 365, 376, 380, 399, 409, 415, 416, 417, 995, 1013, 1015, 1022, 1038, 1039, 1040, 1041, 1042], "feature_extract": [17, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "feature_select": [18, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "featureagglomer": [408, 446], "featurehash": [353, 585], "featureunion": [409, 867], "fedora": 394, "fetch_20newsgroup": 489, "fetch_20newsgroups_vector": 490, "fetch_california_h": 491, "fetch_covtyp": 492, "fetch_fil": 493, "fetch_kddcup99": 494, "fetch_lfw_pair": 495, "fetch_lfw_peopl": 496, "fetch_olivetti_fac": 497, "fetch_openml": [324, 498], "fetch_rcv1": 499, "fetch_species_distribut": 500, "file": [56, 376, 384, 394, 416], "final": [91, 171], "find": 1008, "first": [49, 73], "fit": [30, 59, 64, 91, 122, 128, 142, 147, 148, 176, 194, 195, 196, 207, 214, 218, 277, 289, 297, 302, 317, 346, 357, 359, 378, 389, 399, 404, 415, 1007, 1011], "fitfailedwarn": 578, "fix": [73, 1035, 1038, 1039, 1040, 1041, 1042, 1048], "fixedthresholdclassifi": [327, 803], "flag": 384, "flexibl": [322, 995], "float64": 404, "fold": [384, 412], "footprint": 87, "forc": [994, 1008], "forecast": [53, 176], "forest": [139, 141, 142, 154, 189, 190, 249, 252, 326, 371, 415, 1011], "forg": 374, "format": [370, 381, 388, 1006], "formul": [405, 415, 999, 1008, 1019, 1020, 1021], "four": 100, "fowlk": 408, "fowlkes_mallows_scor": 735, "framework": 1024, "free": 178, "freebsd": 374, "freez": 388, "french": 212, "frequenc": 230, "frequent": 388, "frequentist": 270, "frobeniu": 413, "from": [17, 52, 124, 169, 189, 316, 319, 364, 370, 374, 388, 416, 1005, 1045], "frozen": 19, "frozenestim": 613, "fruit": 375, "fulli": 186, "function": [42, 50, 71, 180, 203, 216, 217, 222, 233, 265, 284, 321, 343, 353, 385, 412, 415, 418, 997, 1001, 1005, 1020, 1052], "functiontransform": 872, "fund": 0, "futur": 388, "futurewarn": 1045, "gain": [264, 1005], "galleri": [419, 420, 421, 422, 425, 428, 431, 432, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 483, 484, 485, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 506, 512, 513, 514, 515, 516, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 587, 590, 591, 592, 593, 594, 596, 597, 600, 602, 603, 605, 607, 608, 609, 610, 611, 613, 614, 615, 617, 618, 619, 621, 622, 623, 626, 627, 629, 631, 632, 634, 635, 636, 637, 638, 639, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 656, 657, 659, 660, 661, 662, 663, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 692, 693, 694, 695, 696, 697, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 716, 717, 721, 722, 723, 731, 733, 736, 738, 739, 741, 742, 745, 746, 749, 750, 752, 753, 754, 756, 757, 759, 761, 765, 782, 783, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 861, 864, 865, 866, 867, 868, 869, 872, 873, 875, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 894, 897, 901, 902, 904, 905, 906, 908, 911, 912, 913, 914, 915, 916, 917, 922, 923, 937, 947, 949, 956, 961, 962, 963, 964, 965, 978, 988], "gamma": [230, 325, 1005], "gammaregressor": 652, "gaussian": [62, 63, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 254, 255, 256, 259, 260, 261, 310, 418, 1004, 1007, 1015, 1017], "gaussian_process": [20, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "gaussianmixtur": 802, "gaussiannb": 846, "gaussianprocessclassifi": 614, "gaussianprocessregressor": 615, "gaussianrandomproject": 900, "gdb": 382, "gen_batch": 955, "gen_even_slic": 956, "gener": [10, 26, 53, 59, 62, 71, 74, 82, 83, 89, 91, 97, 98, 100, 101, 110, 112, 114, 119, 122, 123, 124, 142, 151, 165, 168, 171, 177, 178, 180, 184, 193, 194, 195, 198, 205, 207, 212, 214, 245, 260, 267, 283, 297, 302, 308, 320, 329, 346, 347, 359, 372, 376, 390, 413, 415, 1001, 1015, 1025], "genericunivariateselect": 595, "german": 264, "get": [359, 384, 388, 389], "get_config": 630, "get_data_hom": 501, "get_feature_names_out": 323, "get_param": 378, "get_routing_for_object": 963, "get_scor": 736, "get_scorer_nam": 737, "get_tag": 957, "git": 376, "github": 376, "gitter": 1028, "glm": 26, "glossari": 390, "gmm": [257, 258], "goal": 1025, "good": [376, 381], "govern": [0, 391], "gpc": [172, 173, 174, 175, 418], "gperftool": 382, "gpr": [176, 177, 418], "gprof": 382, "gpu": 388, "gradient": [44, 141, 144, 145, 146, 147, 148, 149, 150, 188, 212, 220, 226, 319, 320, 322, 324, 325, 415, 1001, 1019], "gradientboostingclassifi": [415, 561], "gradientboostingregressor": [415, 562], "gram": 196, "graph": [42, 52, 319, 385, 388, 408, 416], "graphic": [388, 1010], "graphical_lasso": 479, "graphicallasso": 472, "graphicallassocv": 473, "greek": 81, "grid": [251, 268, 270, 278, 281, 994], "grid_to_graph": 588, "gridsearchcv": [105, 160, 274, 804], "ground": [73, 194], "group": [323, 325, 412, 1029], "groupkfold": 805, "groupshufflesplit": 806, "grow": 73, "guid": [379, 1031], "guidelin": [376, 378], "halv": [281, 282, 321, 994], "halvinggridsearchcv": 807, "halvingrandomsearchcv": 808, "ham": 1005, "hamming_loss": 738, "hand": 69, "handl": [42, 190, 995], "handwritten": [92, 233, 373], "harabasz": 408, "hard": 415, "has_fit_paramet": 992, "hash": [153, 385, 416], "hashingvector": [352, 592], "haversine_dist": 768, "hdbscan": [89, 325, 408, 447], "help": [375, 388], "helper": [50, 180, 233, 385], "here": 358, "hessian": 1002, "heterogen": [103, 409], "hierarch": [77, 82, 96, 101, 325, 408], "hierarchi": 408, "higher": 364, "highlight": [184, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 1035, 1038, 1039, 1042, 1043], "hing": 1005, "hinge_loss": 739, "histgradientboost": [321, 326], "histgradientboostingclassifi": [415, 563], "histgradientboostingregressor": [323, 564], "histogram": [141, 150, 320, 322, 324, 414, 415], "histori": [0, 1033], "hmm": 388, "hoc": 284, "hole": 236, "home": 270, "homebrew": 374, "homogen": 408, "homogeneity_completeness_v_measur": 740, "homogeneity_scor": 741, "hot": 144, "hour": 53, "hourli": 186, "hous": [144, 249, 371], "how": [160, 359, 376, 382, 388], "howaboutw": 1029, "html": [241, 378], "huber": 1001, "huberregressor": [197, 653], "hug": 1029, "hyper": [30, 147, 268, 321, 994], "hyperparamet": [89, 176, 177, 271, 278, 287, 621], "hyperplan": [205, 224, 341, 342], "i": [327, 358, 381, 388, 412, 1029], "ic": [188, 1012], "ica": [122, 413], "id3": 1021, "idf": 416, "illustr": [105, 175, 180, 300, 418], "imag": [17, 45, 82, 84, 87, 100, 124, 370, 388, 416], "img_to_graph": 589, "impact": [44, 95, 283, 1050, 1051, 1052, 1053], "implement": [133, 199, 388, 1005, 1008, 1019, 1020], "import": [142, 148, 169, 189, 190, 244, 287, 315, 319, 407, 415, 1013], "improv": [320, 321, 322, 323, 324, 326, 327, 375, 376, 1038, 1039], "impur": [142, 189, 355, 1013], "imput": [21, 181, 182, 183, 184, 319, 327, 995, 1015, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "includ": 388, "inclus": 388, "incom": 186, "inconsist": 359, "inconsistentversionwarn": 579, "incr_mean_variance_axi": 979, "increment": [125, 365, 413], "incrementalpca": 536, "independ": [121, 413], "index": [408, 959], "indic": 265, "individu": [158, 188, 321, 1012], "induct": 90, "infer": 186, "influenc": [47, 50, 363], "infonea": 1029, "inform": [164, 183, 200, 202, 380, 408, 994, 1001], "infrastructur": 0, "infrequ": [323, 325, 1015], "initi": [93, 95, 258], "inplace_column_scal": 980, "inplace_csr_column_scal": 981, "inplace_csr_row_normalize_l1": 986, "inplace_csr_row_normalize_l2": 987, "inplace_row_scal": 982, "inplace_swap_column": 983, "inplace_swap_row": 984, "input": [42, 363, 378, 404, 408, 1015], "inputtag": 925, "inria": 1029, "inspect": [22, 184, 185, 188, 393, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instal": [374, 394], "instanc": [359, 365], "instanti": 378, "instead": 264, "instruct": 374, "insur": 230, "integr": 376, "intel": 394, "interact": [44, 188, 324, 415], "interfac": [28, 399], "intern": [317, 407], "internet": 52, "interoper": 1024, "interpol": 213, "interpret": [176, 187, 216, 249, 289, 413, 415], "interv": 147, "introduc": 253, "introduct": 1002, "introductori": 178, "invari": [89, 273], "invers": [114, 410, 1017], "io": 402, "iri": [127, 129, 143, 173, 221, 334, 337, 356, 373, 418], "is_classifi": 434, "is_cluster": 435, "is_multilabel": 966, "is_outlier_detector": 436, "is_regressor": 437, "iso": [174, 277], "isol": 1011, "isolationforest": [151, 565], "isomap": [232, 233, 692, 1002], "isoton": [23, 242, 406, 996, 1043, 1044, 1045, 1047, 1049, 1050], "isotonic_regress": 641, "isotonicregress": 639, "issu": [375, 376, 384], "iter": [183, 282, 412], "iterativeimput": [182, 631, 995], "j": 1029, "jaccard": 1005, "jaccard_scor": 742, "job": 388, "joblib": [364, 382, 402], "johnson": [243, 1017], "johnson_lindenstrauss_min_dim": 902, "joint": 207, "k": [79, 91, 92, 93, 95, 98, 101, 116, 293, 315, 352, 408, 412, 1005, 1008, 1015], "k_mean": 460, "kappa": 1005, "kbinsdiscret": [311, 313, 873], "kcachegrind": 382, "kddcup": 371, "kddcup99": 249, "kdtree": [849, 1008], "keep": 995, "kei": 402, "kernel": [20, 44, 45, 126, 171, 176, 177, 179, 180, 184, 191, 192, 244, 245, 294, 295, 303, 321, 336, 339, 344, 346, 413, 414, 418, 622, 997, 998, 1003, 1015, 1020], "kernel_approxim": [24, 1045, 1047, 1048, 1049, 1050, 1051], "kernel_metr": 769, "kernel_ridg": [25, 1052], "kernelcenter": 874, "kerneldens": 853, "kernelpca": [126, 537], "kernelridg": 647, "keyword": [322, 1046, 1048], "kfold": 809, "kmean": [94, 98, 320, 448], "kmeans_plusplu": 461, "kneighbors_graph": 861, "kneighborsclassifi": 850, "kneighborsregressor": 851, "kneighborstransform": 852, "knn": [183, 319], "knnimput": 632, "knowledg": 377, "known": [1043, 1044], "kpca": 413, "l": 195, "l1": [54, 198, 204, 206, 228, 347, 417], "l1_min_c": 915, "l2": [216, 347], "label": [42, 73, 277, 329, 330, 331, 371, 372, 408, 412, 415, 1005, 1016, 1018], "label_binar": 892, "label_ranking_average_precision_scor": 743, "label_ranking_loss": 744, "labelbinar": [875, 1016], "labelencod": 876, "labelpropag": 903, "labelspread": 904, "lag": 53, "laplacian": 1003, "laplacian_kernel": 770, "lar": [201, 654, 1001], "larg": 416, "lars_path": 686, "lars_path_gram": 687, "larscv": 655, "lasso": [54, 198, 199, 200, 201, 202, 207, 320, 656, 1001], "lasso_path": 688, "lassocv": 657, "lassolar": 658, "lassolars": 660, "lassolarscv": 659, "latenc": [50, 363], "latent": [55, 116, 413], "latentdirichletalloc": 538, "latest": 394, "layer": [188, 305, 1009], "lda": [71, 129, 413, 999], "leakag": 359, "learn": [0, 42, 45, 52, 84, 121, 124, 170, 184, 186, 187, 188, 192, 231, 232, 233, 234, 245, 246, 264, 265, 272, 300, 306, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 362, 363, 365, 372, 374, 376, 377, 378, 380, 381, 388, 391, 394, 413, 415, 1000, 1002, 1010, 1018, 1024, 1025, 1027, 1029, 1030], "learner": [135, 415], "learning_curv": 832, "learningcurvedisplai": 810, "least": [117, 147, 202, 208, 209, 210, 1001], "leav": [355, 412, 1001], "leaveonegroupout": 811, "leaveoneout": 812, "leavepgroupsout": 813, "leavepout": 814, "ledoit": [70, 111, 410], "ledoit_wolf": 480, "ledoit_wolf_shrinkag": 481, "ledoitwolf": [110, 474], "lemma": 1017, "length": [151, 394], "lesson": [186, 187], "level": [176, 177, 364, 408, 415], "liabil": 212, "librari": [363, 364], "libsvm": 370, "likelihood": [110, 194, 195, 273, 1005, 1010], "limit": [144, 171, 363, 394, 402, 416], "lindenstrauss": [243, 1017], "line": [160, 174], "linear": [26, 44, 63, 70, 71, 147, 171, 184, 187, 193, 194, 209, 212, 215, 218, 232, 233, 244, 320, 339, 344, 346, 363, 385, 388, 999, 1001, 1002, 1003, 1015], "linear_kernel": 771, "linear_model": [26, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lineardiscriminantanalysi": [324, 551], "linearregress": [214, 661], "linearsvc": [338, 908], "linearsvr": 909, "link": [363, 1005], "linkag": [96, 408], "linnerrud": 373, "linux": [374, 388, 394], "list": [73, 380, 1028], "loa": 176, "load": [45, 47, 56, 84, 92, 127, 141, 144, 148, 160, 169, 189, 206, 209, 230, 233, 240, 244, 252, 271, 279, 280, 289, 293, 315, 316, 340, 343, 351, 352, 353, 369, 370, 381, 388, 416], "load_breast_canc": 502, "load_diabet": 503, "load_digit": 504, "load_fil": 505, "load_iri": 506, "load_linnerud": 507, "load_sample_imag": [508, 509], "load_svmlight_fil": [510, 511], "load_win": 512, "loader": 10, "local": [232, 233, 296, 297, 1002, 1011], "locally_linear_embed": 697, "locallylinearembed": 693, "localoutlierfactor": 854, "lock": [376, 384], "lof": [296, 297], "log": [194, 195, 1005], "log_loss": 745, "logarithm": 1005, "logist": [106, 203, 204, 205, 206, 227, 228, 1001], "logisticregress": [289, 662], "logisticregressioncv": 663, "loo": 412, "look": [53, 245, 346], "loss": [150, 212, 222, 320, 323, 325, 415, 1005, 1052], "lot": 388, "love": 1029, "low": [408, 415, 417], "lower": 364, "lpo": 412, "lsa": 352, "mac": 394, "machin": [170, 184, 186, 187, 188, 308, 335, 384, 1010, 1020], "machinali": 1029, "maco": 374, "macport": 394, "macro": 279, "mahalanobi": 112, "mail": 1028, "main": [48, 212], "maintain": [0, 376, 380, 402], "major": [415, 1043, 1044], "make": [155, 158, 183, 376, 391], "make_biclust": 513, "make_blob": [381, 514], "make_checkerboard": 515, "make_circl": 516, "make_classif": [381, 517], "make_column_selector": 467, "make_column_transform": 468, "make_friedman1": 518, "make_friedman2": 519, "make_friedman3": 520, "make_gaussian_quantil": 521, "make_hastie_10_2": 522, "make_low_rank_matrix": 523, "make_moon": 524, "make_multilabel_classif": 525, "make_pipelin": 869, "make_regress": [381, 526], "make_s_curv": 527, "make_scor": 746, "make_sparse_coded_sign": 528, "make_sparse_spd_matrix": 529, "make_sparse_uncorrel": 530, "make_spd_matrix": 531, "make_swiss_rol": 532, "make_union": 870, "mallow": 408, "manag": [364, 394], "manhattan_dist": 772, "mani": [265, 324, 364, 388, 1052, 1053], "manifold": [27, 184, 231, 232, 233, 234, 372, 1002, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "manual": [264, 407], "map": [244, 314, 1015], "mar": 1029, "margin": [194, 195, 224, 341, 345], "mark": 995, "markdown": 381, "marker": 376, "market": 52, "match": [211, 1001], "matern": 623, "mathemat": [42, 405, 415, 997, 999, 1008, 1012, 1019, 1020, 1021], "matric": [42, 385, 1015], "matrix": [55, 56, 179, 196, 263, 408, 413, 1005], "matter": 187, "matthew": 1005, "matthews_corrcoef": 747, "mat\u00e9rn": [180, 418], "max": [110, 1005], "max_error": 748, "maxabs_scal": 893, "maxabsscal": [310, 877], "maximum": [224, 341, 1010], "md": [694, 1002], "mdi": 189, "mean": [79, 91, 92, 93, 95, 97, 98, 142, 183, 189, 216, 352, 408, 1005, 1015], "mean_absolute_error": 749, "mean_absolute_percentage_error": 750, "mean_gamma_devi": 751, "mean_pinball_loss": 752, "mean_poisson_devi": 753, "mean_shift": 462, "mean_squared_error": 754, "mean_squared_log_error": 755, "mean_tweedie_devi": 756, "mean_variance_axi": 985, "meanshift": [97, 449], "measur": [155, 273, 408, 1005], "media": 1028, "median": [1001, 1005], "median_absolute_error": 757, "member": 375, "memori": [87, 326, 363, 382, 384], "merg": 380, "meson": [384, 1053], "messag": [270, 376], "meta": [42, 154, 246, 287, 321, 404, 415], "metadata": [42, 246, 325, 326, 351, 390, 399, 1052, 1053], "metadatarequest": 960, "metadatarout": 961, "metaestimatormixin": 428, "method": [96, 107, 116, 134, 171, 184, 232, 234, 258, 286, 288, 390, 402, 408, 997, 1011, 1012], "methodmap": 962, "metric": [28, 73, 76, 147, 264, 274, 404, 408, 412, 994, 1003, 1005, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "micro": [277, 279], "min_cluster_s": 89, "min_po": 931, "min_sampl": 89, "mincovdet": 475, "mini": [408, 413], "minibatchdictionarylearn": 539, "minibatchkmean": [78, 98, 121, 450], "minibatchnmf": [323, 540], "minibatchsparsepca": [121, 413, 541], "minim": [381, 1021, 1048, 1049], "minimum": [113, 410], "minmax_scal": 894, "minmaxscal": [310, 878], "misc": 1035, "miscellan": [26, 184, 238, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "mislead": 1013, "miss": [150, 181, 182, 183, 184, 319, 325, 326, 415, 995, 1015, 1021], "missingind": 633, "mix": 104, "mixin": 378, "mixtur": [29, 184, 254, 255, 256, 259, 260, 261, 1004, 1043, 1044, 1048, 1049, 1051, 1053], "mlp": 307, "mlpclassifi": [306, 865], "mlpregressor": 866, "mnist": [228, 307], "mode": [116, 363], "model": [26, 28, 30, 44, 47, 51, 53, 91, 108, 116, 122, 128, 141, 142, 144, 145, 148, 151, 168, 169, 171, 176, 184, 187, 188, 189, 192, 193, 194, 198, 200, 202, 207, 209, 212, 215, 230, 240, 245, 249, 250, 254, 256, 260, 261, 262, 264, 269, 270, 272, 277, 283, 289, 297, 302, 308, 315, 320, 322, 326, 344, 346, 351, 357, 363, 388, 389, 391, 402, 403, 412, 994, 1000, 1001, 1004, 1005, 1007, 1009, 1010, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "model_select": [30, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "modifi": 1002, "modul": [1035, 1043, 1044, 1050, 1051, 1052, 1053], "mona": 176, "monitor": 376, "monoton": [150, 152, 326, 415], "more": [322, 388, 1009], "morgan": 1029, "most": 329, "motor": 212, "mp": 404, "much": 160, "multi": [26, 89, 135, 154, 188, 207, 221, 235, 248, 274, 277, 305, 357, 382, 1001, 1002, 1005, 1009, 1020, 1021], "multiclass": [31, 42, 184, 227, 279, 286, 287, 319, 385, 406, 1005, 1006, 1044, 1047, 1048, 1049], "multicollinear": 190, "multidimension": 232, "multilabel": [28, 119, 247, 289, 372, 385, 1005, 1006], "multilabel_confusion_matrix": 758, "multilabelbinar": [879, 1016], "multinomi": [205, 228, 1001, 1007], "multinomialnb": 847, "multioutput": [32, 184, 288, 1006, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "multioutputclassifi": [840, 1006], "multioutputregressor": [841, 1006], "multipl": [107, 251, 274, 359, 383, 412, 994, 995, 1005, 1043, 1044], "multitaskelasticnet": 664, "multitaskelasticnetcv": 665, "multitasklasso": 666, "multitasklassocv": 667, "multivari": [116, 995], "murmurhash3_32": 969, "mutual": [164, 408], "mutual_info_classif": 610, "mutual_info_regress": 611, "mutual_info_scor": 759, "my": 388, "n_featur": 50, "n_job": 388, "naiv": [44, 53, 62, 63, 1007], "naive_bay": [33, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "name": [152, 322, 388, 409], "nan": 995, "nan_euclidean_dist": 773, "nativ": [144, 316, 319, 321, 326, 388], "ndcg_score": 760, "nearest": [101, 184, 290, 291, 292, 293, 298, 301, 302, 319, 995, 1008], "nearestcentroid": 855, "nearestneighbor": 856, "necessari": 381, "need": 388, "neg": [55, 121, 169, 208, 413, 1001], "neighbor": [34, 101, 184, 232, 290, 291, 292, 293, 298, 302, 315, 319, 995, 1002, 1008, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "neighborhood": [298, 299, 300, 1008], "neighborhoodcomponentsanalysi": 857, "nest": [275, 409], "net": [196, 201, 1001], "netbsd": 394, "network": [184, 188, 304, 1009, 1010], "neural": [184, 188, 304, 1009, 1010], "neural_network": [35, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "new": [319, 321, 322, 324, 325, 376, 388, 1023, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "newsgroup": [103, 351, 371], "next": [53, 389], "nightli": 374, "nmf": [121, 323, 413, 542], "nnmf": 413, "nois": [177, 178, 195], "noisi": [124, 178, 216], "non": [44, 55, 121, 147, 208, 212, 216, 232, 275, 327, 339, 346, 413, 1001, 1015], "non_negative_factor": 549, "none": 359, "norm": 413, "normal": [70, 192, 212, 310, 314, 880, 895, 1005, 1015], "normalized_mutual_info_scor": 761, "note": [365, 404, 407, 412], "notfittederror": 580, "novelti": [296, 1011, 1020], "now": [319, 322, 1045], "number": [73, 94, 144, 150, 168, 282, 363, 378, 995], "numer": [187, 327, 364, 378], "numpi": [364, 381], "nusvc": 910, "nusvr": 911, "nystroem": [643, 997], "oa": [70, 110, 111, 421, 476], "object": [42, 240, 265, 378, 388, 994, 1005, 1032], "observ": 186, "obtain": [388, 412], "off": [264, 284, 1001], "okcupid": 1029, "older": 1035, "olivetti": 371, "omp": 1001, "one": [117, 144, 250, 1001, 1005], "oneclasssvm": 912, "onehotencod": [323, 881], "onetoonefeaturemixin": 429, "onevsoneclassifi": [836, 1006], "onevsrestclassifi": [289, 837, 1006], "onli": [229, 1046, 1048], "onlin": [84, 219, 322, 323, 1019], "onnx": 402, "oob": 139, "openml": [45, 316, 319, 370], "openmp": [364, 377], "oper": [42, 279, 280, 375, 385, 418, 1005], "optic": [99, 373, 408, 451], "optim": [30, 42, 382, 994], "optimis": 177, "option": 407, "oracl": 410, "ordin": 144, "ordinalencod": [325, 882], "ordinari": [209, 210, 1001], "org": [370, 380, 1029], "origin": [87, 126, 276, 300, 310], "orthogon": [211, 1001], "orthogonal_mp": 689, "orthogonal_mp_gram": 690, "orthogonalmatchingpursuit": 668, "orthogonalmatchingpursuitcv": 669, "osx": [388, 394], "other": [316, 370, 388, 415, 1024, 1035], "otto": 1029, "our": [92, 265, 268, 284, 376], "out": [48, 146, 365, 384, 412, 994, 1001, 1007], "outdat": 384, "outlier": [26, 49, 197, 229, 239, 249, 296, 297, 310, 1001, 1011, 1015], "outliermixin": 430, "outlin": 1013, "output": [154, 248, 310, 324, 326, 357, 1021], "outputcodeclassifi": [838, 1006], "over": 251, "overfit": 285, "overhead": 363, "oversubscript": 364, "overview": [287, 383, 402, 408, 1011], "ovo": 279, "ovr": 279, "own": [378, 388, 1005], "p": [412, 1029], "packag": [244, 1024, 1047], "pair": [127, 408], "pair_confusion_matrix": 719, "paired_cosine_dist": 774, "paired_dist": 775, "paired_euclidean_dist": 776, "paired_manhattan_dist": 777, "pairwis": [28, 44, 270, 327, 1003], "pairwise_dist": 782, "pairwise_distances_argmin": 783, "pairwise_distances_argmin_min": 784, "pairwise_distances_chunk": 785, "pairwise_kernel": 778, "pairwisekernel": 624, "panda": [324, 381], "parallel": [42, 364, 382, 408, 415, 970, 994], "parallel_backend": 972, "paramet": [30, 42, 47, 110, 147, 268, 283, 321, 340, 347, 376, 389, 390, 409, 415, 994, 1001, 1005, 1020], "parametergrid": 815, "parametersampl": 816, "parametr": 1010, "parametrize_with_check": 947, "pariba": 1029, "paristech": 1029, "pariti": 98, "parser": [324, 370], "part": [84, 417], "parti": [212, 246, 394], "partial": [117, 186, 188, 250, 1012], "partial_depend": 637, "partialdependencedisplai": 636, "partit": 192, "passiv": 1001, "passiveaggressiveclassifi": 670, "passiveaggressiveregressor": 671, "past": 0, "patch": [124, 416], "patchextractor": 586, "path": [151, 201, 206, 217, 358, 394], "pattern": 131, "pca": [45, 92, 106, 121, 122, 125, 126, 127, 128, 129, 315, 326, 327, 413, 543, 1022], "pdp": 188, "peerindex": 1029, "penalti": [204, 223, 347], "peopl": [0, 388, 1035, 1036, 1037, 1038], "per": 352, "percentag": 1005, "percentil": 343, "perceptron": [188, 305, 672, 1001, 1009], "perform": [73, 79, 273, 315, 321, 323, 327, 329, 352, 363, 376, 377, 408, 412], "period": [44, 213], "permiss": 388, "permut": [142, 189, 190, 276, 319, 412, 1013], "permutation_import": 638, "permutation_test_scor": 833, "perplex": 237, "persist": 402, "phimeca": 1029, "pickl": 402, "pictur": 81, "pinbal": 1005, "pipelin": [36, 102, 103, 105, 106, 155, 166, 184, 187, 241, 246, 251, 271, 316, 343, 388, 389, 409, 417, 868, 1022, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "pitfal": [187, 359], "pl": 116, "plai": 343, "plan": 388, "plant": 373, "platform": [374, 384, 394], "plot": [22, 28, 41, 47, 48, 50, 59, 62, 67, 71, 74, 77, 82, 83, 84, 91, 97, 98, 100, 101, 110, 114, 116, 119, 122, 123, 127, 136, 141, 143, 148, 151, 155, 156, 157, 158, 160, 168, 183, 188, 194, 195, 198, 206, 207, 209, 216, 217, 221, 233, 240, 244, 249, 250, 252, 260, 266, 267, 272, 274, 277, 279, 289, 297, 308, 316, 319, 321, 322, 329, 337, 338, 343, 344, 351, 356, 357, 383, 1000, 1012, 1032], "plot_tre": 922, "pls1": 116, "pls2": 116, "plscanon": [411, 484], "plsregress": [411, 485], "plssvd": [411, 486], "point": [123, 188, 264, 284, 300, 402], "poisson": [212, 230, 320, 321, 1005], "poissonregressor": 673, "polar": [53, 326], "polici": 376, "polynomi": [44, 192, 194, 195, 213, 344, 997, 1001, 1003, 1015], "polynomial_kernel": 779, "polynomialcountsketch": [321, 644], "polynomialfeatur": 883, "posit": [121, 322], "possibl": [91, 381], "post": [30, 264, 273, 284, 355, 407], "post1": 1045, "posterior": 180, "power": [117, 212], "power_transform": 896, "powertransform": [310, 884], "pr": 375, "practic": [270, 359, 377, 381, 1002, 1009, 1019, 1020, 1021], "pre": [273, 359, 389], "precis": [277, 1005], "precision_recall_curv": 786, "precision_recall_fscore_support": 787, "precision_scor": 788, "precisionrecalldisplai": [240, 704], "precomput": [130, 196, 319, 413], "predefin": [412, 1005], "predefinedsplit": 817, "predict": [44, 50, 53, 62, 117, 136, 147, 158, 172, 186, 195, 212, 245, 264, 266, 277, 329, 357, 363, 388, 389, 407, 412, 418, 1005, 1016], "predictionerrordisplai": 705, "predictor": 155, "premium": 230, "prepar": [121, 136, 145, 150, 192, 209, 232, 279, 280, 315, 340], "preprocess": [37, 148, 155, 184, 187, 188, 249, 251, 309, 353, 359, 388, 1015, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "preprocessor": 188, "preserv": 384, "preval": 273, "princip": [56, 117, 127, 413, 1022], "prior": [54, 180, 255], "privat": 1052, "probabilist": [128, 172, 413, 418], "probabl": [62, 63, 64, 67, 157, 174, 406, 415, 1020], "problem": [187, 264, 413, 1020, 1021], "process": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 187, 359, 391, 418, 1004], "process_rout": 964, "processor": 389, "product": [180, 230, 384, 388, 402, 418, 625], "profil": 382, "project": [0, 117, 126, 129, 243, 378, 388, 1017, 1022, 1024], "pronounc": 388, "propag": [52, 74, 329, 330, 331, 408, 1018], "proper": [53, 176], "properti": 390, "propos": 391, "provid": 381, "prune": [319, 355, 1021], "public": 1045, "publica": 1029, "pull": [376, 380, 384, 388], "pure": 230, "purpos": [216, 353, 1025], "pursuit": [211, 1001], "pypi": 388, "pytest": 384, "python": [244, 364, 382, 1023, 1024], "pytorch": 404, "qda": [71, 999], "quadrat": [71, 180, 418, 999], "quadraticdiscriminantanalysi": 552, "qualit": [44, 53], "qualiti": [352, 1005], "quantifi": [352, 1005], "quantil": [53, 147, 150, 214, 322, 323, 1001], "quantile_transform": 897, "quantileregressor": [214, 674], "quantiletransform": [310, 885], "quantiz": 87, "question": [388, 1028], "r2_score": 789, "r_regress": 612, "radial": [180, 418, 997], "radius_neighbors_graph": 862, "radiusneighborsclassifi": 858, "radiusneighborsregressor": 859, "radiusneighborstransform": 860, "rand": 408, "rand_scor": 790, "random": [42, 56, 121, 139, 141, 153, 154, 189, 190, 243, 252, 276, 278, 326, 357, 359, 378, 385, 412, 413, 415, 994, 1001, 1017, 1022], "random_project": [38, 1049], "random_st": 388, "randomforestclassifi": 566, "randomforestregressor": 567, "randomized_range_find": 951, "randomized_svd": 952, "randomizedsearchcv": 818, "randomli": 119, "randomst": 359, "randomtreesembed": 568, "rang": 1015, "rangespan": 1029, "rank": [28, 212, 1005], "ransac": [215, 1001], "ransacregressor": 675, "rate": 415, "ratio": [273, 1005], "ration": [180, 418], "rationalquadrat": 627, "rbf": [244, 339, 340, 344, 418, 626, 1003, 1020], "rbf_kernel": 780, "rbfsampler": 645, "rcv1": 371, "reachabl": 408, "read": 376, "real": [43, 49, 108, 184, 371], "recal": [277, 1005], "recall_scor": 791, "receiv": [279, 280, 1005], "recent": 1, "recogn": 69, "recognit": [46, 371, 373], "recommend": [359, 1024], "reconstruct": [45, 54, 124], "reconstruct_from_patches_2d": 590, "recov": 194, "recurs": [167, 168, 417], "redirect": 56, "reduc": [92, 363], "reduct": [105, 232, 236, 251, 299, 315, 352, 999, 1008, 1022], "refer": [2, 51, 63, 65, 113, 124, 138, 192, 198, 287, 303, 380, 418, 995], "refit": [264, 268], "regard": [264, 407], "region": [81, 270], "register_parallel_backend": 974, "regress": [26, 28, 44, 53, 106, 108, 116, 117, 136, 147, 148, 158, 171, 176, 177, 178, 179, 194, 195, 202, 204, 205, 206, 209, 210, 212, 214, 227, 229, 230, 242, 245, 302, 346, 357, 372, 409, 418, 996, 998, 1001, 1005, 1006, 1008, 1009, 1019, 1020, 1021], "regressor": [26, 50, 136, 147, 194, 216, 317, 319, 322, 415], "regressorchain": [842, 1006], "regressormixin": 431, "regressortag": 926, "regular": [79, 110, 149, 187, 206, 216, 217, 283, 305, 347, 1001, 1009], "reinforc": 388, "relat": [44, 48, 1013, 1024, 1042], "releas": [184, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 380, 394, 1033], "relev": [112, 198, 1001], "remark": [44, 91, 236, 243], "remot": 384, "remov": [388, 417, 1015, 1035], "repeat": [359, 409, 412], "repeatedkfold": 819, "repeatedstratifiedkfold": 820, "replac": 183, "repli": 384, "replic": 402, "report": [376, 381, 1005], "repositori": 370, "represent": [127, 188, 241, 320, 363, 378, 416], "reproduc": [359, 381], "request": [376, 380, 384, 388], "resampl": 975, "rescal": 315, "reshap": 363, "resolv": 376, "resourc": [282, 364, 376, 1023, 1028], "respect": 273, "respons": [116, 391], "rest": [205, 279], "restart": 382, "restrict": [308, 1010], "result": [47, 48, 59, 65, 74, 82, 83, 84, 91, 92, 97, 98, 101, 110, 112, 114, 122, 123, 136, 141, 155, 158, 183, 192, 198, 209, 217, 245, 249, 274, 289, 297, 316, 346, 352, 357, 359, 994], "retriev": [52, 319], "return": 404, "reuter": 48, "review": [375, 376, 384], "rfe": 596, "rfecv": 597, "rich": [241, 320], "ridg": [171, 195, 197, 210, 216, 217, 245, 317, 676, 998, 1001], "ridge_regress": 691, "ridgeclassifi": 678, "ridgeclassifiercv": 679, "ridgecv": 677, "right": 396, "roadmap": 1025, "robust": [26, 89, 112, 113, 194, 215, 218, 359, 410, 994, 1001], "robust_scal": 898, "robustscal": [310, 886], "roc": [252, 267, 279, 280, 319, 1005], "roc_auc_scor": 792, "roc_curv": 793, "roccurvedisplai": [240, 706], "role": 391, "roll": [236, 378], "root_mean_squared_error": 794, "root_mean_squared_log_error": 795, "rotat": 131, "rout": [42, 246, 325, 326, 390, 399, 1052, 1053], "routin": [48, 364, 385], "rule": 1005, "run": [47, 92, 274], "runtim": [326, 374], "r\u00b2": 1005, "sa": 249, "safe_mask": 976, "safe_sparse_dot": 953, "safe_sqr": 977, "sampl": [10, 42, 59, 74, 89, 97, 110, 122, 123, 165, 196, 225, 245, 271, 283, 302, 320, 346, 349, 370, 385, 390, 415, 1001], "sample_without_replac": 973, "saniti": 384, "save": 388, "scalabl": [192, 272, 320], "scale": [89, 187, 232, 235, 315, 347, 365, 899, 1002, 1011, 1015, 1022], "scaler": 310, "scatter": 116, "scenario": 1001, "scientif": 1023, "scikit": [0, 42, 246, 265, 319, 320, 321, 322, 323, 324, 325, 326, 327, 362, 363, 374, 377, 378, 380, 381, 388, 391, 394, 1024, 1025, 1029], "scipi": [364, 1052], "score": [56, 116, 141, 160, 168, 183, 194, 260, 269, 276, 277, 343, 399, 408, 412, 1000, 1005, 1020], "script": 381, "search": [251, 268, 270, 278, 281, 287, 389, 994], "second": [49, 73], "secur": [402, 1053], "segment": [81, 100], "select": [26, 28, 88, 94, 105, 128, 160, 163, 165, 168, 169, 184, 200, 202, 207, 260, 262, 343, 388, 399, 403, 412, 417, 994, 1001, 1041], "selectfdr": 598, "selectfpr": 599, "selectfrommodel": [417, 600], "selectfw": 601, "selectkbest": 602, "selectormixin": 604, "selectpercentil": 603, "self": [321, 332, 1018], "selftrainingclassifi": 905, "semant": 413, "semi": [184, 328, 329, 333, 334, 1018], "semi_supervis": [39, 1045, 1046, 1047, 1051], "sen": [229, 1001], "sens": 54, "sensit": 264, "separ": [122, 224, 341, 342], "sequenc": [179, 388], "sequenti": [169, 417], "sequentialfeatureselector": [321, 605], "seri": [53, 207, 412], "serv": 402, "set": [49, 108, 110, 155, 183, 216, 264, 277, 327, 340, 355, 388, 407, 412, 1001], "set_config": 906, "set_output": [253, 324, 326, 378], "set_param": 378, "sever": [230, 234], "sgd": [221, 222, 223, 224, 225, 1001, 1019], "sgdclassifi": 680, "sgdoneclasssvm": 681, "sgdregressor": 682, "shape": 237, "share": [44, 53, 188], "shift": [97, 408], "should": 388, "show": [160, 279], "show_vers": 907, "shrinkag": [110, 410, 415, 999], "shrunk": 410, "shrunk_covari": 482, "shrunkcovari": 477, "shrunken": 1008, "shuffl": [412, 978], "shufflesplit": 821, "sigmoid": [344, 406, 1003], "sigmoid_kernel": 781, "signal": [198, 413], "signific": 276, "silhouett": [94, 408], "silhouette_sampl": 796, "silhouette_scor": 797, "similar": [179, 1003, 1005], "simpl": [133, 171, 246, 295, 382], "simpleimput": [327, 634], "simul": 186, "sine": [180, 261, 418], "singl": [138, 155, 230, 240, 372, 408, 995], "single_source_shortest_path_length": 958, "singular": [56, 413], "sinusoid": 195, "size": 415, "sketch": 997, "skew": 997, "skewedchi2sampl": 646, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sklearn_assume_finit": 364, "sklearn_build_enable_debug_symbol": 364, "sklearn_enable_debug_cython_direct": 364, "sklearn_pairwise_dist_chunk_s": 364, "sklearn_run_float32_test": 364, "sklearn_se": 364, "sklearn_skip_network_test": 364, "sklearn_tests_global_random_se": 364, "sklearn_warnings_as_error": 364, "sklearn_working_memori": 364, "skop": 402, "slep": 391, "smacof": 698, "small": 381, "sne": [237, 1002], "so": 388, "social": 1028, "soft": 415, "solido": 1029, "solut": 91, "solver": [219, 413, 1001], "some": 343, "someth": 381, "sometim": 388, "sort_graph_by_row_valu": 863, "sourc": [103, 122, 374], "space": [52, 126, 409, 994, 1002], "spars": [42, 114, 121, 130, 187, 198, 199, 227, 319, 326, 351, 352, 385, 410, 413, 417, 1015, 1017, 1019, 1052], "sparse_encod": 550, "sparsecod": 544, "sparsefunc": 1044, "sparsepca": [413, 545], "sparserandomproject": 901, "sparsiti": [204, 416], "spawn": 364, "speci": [51, 303, 371], "special": 353, "specif": [279, 374, 994, 1024], "specifi": [152, 388, 994], "spectral": [58, 59, 60, 100, 232, 405, 408, 1002], "spectral_clust": 463, "spectral_embed": 699, "spectralbiclust": [59, 452], "spectralclust": 453, "spectralcoclust": 454, "spectralembed": 695, "speed": [50, 382], "sphere": 234, "sphinx": 376, "spline": [44, 213, 322, 1015], "splinetransform": 887, "split": [144, 321, 359, 412], "splitter": [30, 359], "sponsor": 0, "spotifi": 1029, "sprint": 0, "squar": [117, 147, 180, 208, 209, 210, 216, 418, 997, 1001, 1003, 1005], "stabil": 320, "stabl": 322, "stack": [155, 319, 415], "stackingclassifi": 569, "stackingregressor": 570, "stall": 376, "standard": [384, 1015], "standardscal": [310, 888], "start": 389, "statement": 1025, "statist": [270, 1024], "statlog": 264, "statu": 399, "std": [160, 194], "step": [44, 251, 380, 389, 409], "stochast": [220, 226, 232, 306, 1001, 1002, 1010, 1019], "stock": 52, "stop": [145, 150, 220, 416, 1019], "strategi": [87, 268, 287, 306, 313, 325, 327, 365, 408, 1005], "stratif": 412, "stratifi": 412, "stratifiedgroupkfold": [412, 822], "stratifiedkfold": 823, "stratifiedshufflesplit": 824, "stream": 365, "string": 388, "strip": 351, "strong": 197, "strongli": 1013, "structur": [52, 75, 82, 101, 179, 331, 358], "studi": 249, "submit": 376, "subsampl": 415, "subscript": 327, "subtleti": 359, "success": [281, 282, 321, 994], "sum": 628, "summar": 402, "summari": [63, 145, 202, 352, 353, 402, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "supervis": [184, 328, 329, 333, 334, 1009, 1018, 1027], "support": [0, 63, 144, 150, 184, 207, 316, 319, 320, 321, 322, 324, 325, 326, 335, 338, 346, 388, 394, 399, 404, 406, 415, 1020, 1021, 1028, 1052, 1053], "surfac": [143, 244, 356], "svc": [252, 344, 347, 913, 1020], "svd": [56, 121, 413], "svm": [40, 46, 162, 165, 166, 192, 226, 244, 322, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 348, 349, 1001, 1011, 1019, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "svmlight": 370, "svr": [245, 346, 914, 1020], "swiss": 236, "switch": 364, "symmetr": 116, "synthet": [62, 108, 194, 198, 267, 317, 381], "system": 374, "t": [232, 237, 1002], "tabl": 388, "tag": [374, 376, 378, 927], "take": 270, "takeawai": 212, "talk": 1023, "tangent": 1002, "target": [42, 108, 178, 230, 316, 317, 357, 388, 390, 409, 1006, 1015, 1016], "targetencod": [325, 889], "targettag": 928, "task": [26, 207, 357, 1001, 1024], "team": [0, 375], "technic": 391, "techniqu": 233, "templat": 378, "tensor": 997, "term": [352, 390, 416], "test": [45, 110, 164, 273, 276, 283, 351, 355, 374, 376, 378, 384, 385, 412], "text": [17, 48, 184, 241, 271, 333, 350, 351, 352, 353, 371, 416], "tf": 416, "tfidftransform": 593, "tfidfvector": [352, 353, 594], "than": 388, "theil": [229, 1001], "theilsenregressor": 683, "them": [124, 375], "theoret": 243, "thi": [216, 1025], "third": [212, 246, 394], "thread": 364, "threshold": [264, 284, 327, 332, 407], "throughput": [50, 363], "tie": 348, "time": [44, 53, 141, 207, 244, 245, 351, 412, 1026], "timeseriessplit": 825, "tip": [363, 377, 384, 994, 1002, 1009, 1019, 1020, 1021], "togeth": [250, 279], "toi": [80, 96, 239, 373], "toler": 169, "tomographi": 54, "too": 364, "tool": [385, 388, 404], "top": [352, 1005], "top_k_accuracy_scor": 798, "topic": 55, "total": [153, 355, 415], "tough": 375, "track": [384, 409], "tracker": [376, 1028], "trade": 1001, "tradeoff": [267, 1005], "train": [135, 136, 145, 148, 151, 158, 168, 205, 216, 240, 245, 249, 250, 252, 260, 283, 287, 308, 316, 317, 321, 332, 340, 344, 351, 355, 356, 358, 402, 412, 1008, 1018], "train_test_split": 834, "transform": [103, 104, 105, 108, 116, 140, 153, 251, 321, 322, 323, 368, 388, 389, 409, 1008, 1015, 1016, 1017], "transformedtargetregressor": 466, "transformermixin": 432, "transformertag": 929, "translat": 1024, "tree": [41, 135, 136, 140, 142, 143, 150, 153, 184, 189, 212, 319, 324, 325, 326, 354, 355, 356, 357, 358, 388, 415, 417, 1008, 1013, 1021, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "triag": 375, "trick": [363, 382, 384, 416], "trigonometr": 44, "troubleshoot": 394, "true": [194, 195], "truncat": 413, "truncatedsvd": 546, "trust": 160, "trustworthi": 700, "truth": [73, 194], "tsne": [290, 696], "tune": [30, 147, 264, 268, 271, 284, 321, 327, 407, 994], "tunedthresholdclassifiercv": [327, 826], "tutori": [159, 184, 1023], "tweedi": [230, 1005], "tweedieregressor": [230, 684], "two": [100, 137, 199, 250, 270], "type": [104, 255, 377, 378, 388, 390, 404, 408], "type_of_target": 967, "typic": 375, "t\u00e9l\u00e9com": 1029, "u": 0, "ubuntu": 394, "uci": 287, "unbalanc": [342, 1020], "uncertain": 329, "uncertainti": 53, "unclaim": 376, "undefinedmetricwarn": 581, "under": [179, 388, 1031, 1051], "underfit": 285, "understand": 358, "unfold": 384, "uniform": [310, 1015], "unique_label": 968, "univari": [88, 116, 165, 343, 417, 995], "univers": 378, "unlabel": 1018, "unless": 381, "unstructur": 101, "unsupervis": [1008, 1010, 1022, 1030], "unweight": 399, "up": 1011, "updat": [380, 1045], "us": [45, 46, 52, 56, 121, 122, 124, 152, 153, 155, 169, 176, 215, 226, 228, 270, 274, 279, 289, 311, 346, 351, 352, 358, 359, 365, 377, 381, 382, 384, 388, 412, 413, 416, 417, 999, 1001, 1002, 1005, 1009, 1019, 1020, 1021, 1029, 1045], "usabl": 388, "usag": [382, 388, 399, 404, 406, 409, 415, 416, 1001], "user": [1028, 1031], "util": [42, 369, 381, 385, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "v": [88, 101, 110, 111, 113, 117, 126, 168, 188, 189, 197, 205, 230, 273, 279, 285, 355, 408, 415, 995], "v_measure_scor": 799, "valgrind": [382, 384], "valid": [30, 42, 44, 160, 168, 202, 243, 264, 265, 266, 268, 269, 273, 275, 280, 343, 359, 363, 378, 385, 407, 412, 994, 1000, 1001], "validate_data": 993, "validation_curv": 835, "validationcurvedisplai": [325, 827], "valu": [150, 169, 181, 182, 183, 184, 237, 246, 319, 325, 326, 358, 376, 404, 413, 415, 995, 1005, 1013, 1015, 1021], "vanilla": [264, 284], "vari": [73, 305, 332, 408], "variabl": [26, 116, 186, 187, 364, 388], "varianc": [138, 210, 417, 1005, 1015], "variancethreshold": 606, "variant": 182, "variat": [255, 1004], "variou": [50, 86, 219, 237, 388], "vector": [56, 63, 87, 184, 335, 338, 346, 351, 353, 416, 1020], "version": [323, 370, 374, 376, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "versu": [138, 226, 275, 334, 363], "via": [45, 53, 87, 200, 202, 230, 415, 997], "video": [376, 1023], "visual": [5, 30, 52, 92, 131, 145, 205, 240, 245, 252, 265, 307, 320, 340, 408, 409, 1005, 1032], "vote": [158, 415], "votingclassifi": [156, 157, 571], "votingregressor": 572, "wage": [186, 187], "wai": [188, 376, 388], "ward": [82, 101, 408], "ward_tre": 464, "warm": 382, "warm_start": 1009, "warn": 385, "we": 101, "weak": [135, 415], "websit": [380, 1045], "weight": [42, 135, 194, 196, 225, 307, 320, 349, 399, 415, 416], "weighted_mod": 954, "what": [358, 388], "when": 264, "which": 1001, "whitekernel": 629, "who": 1029, "why": [388, 415], "wikipedia": 56, "wild": 371, "window": [374, 394], "wine": 373, "winpython": 394, "wisconsin": 373, "within": 105, "without": [75, 298, 351], "wolf": [70, 111, 410], "word": [351, 416], "work": [42, 184, 350, 363, 375, 388], "workflow": [375, 402], "world": [43, 108, 184, 371], "wrap": 289, "written": 69, "wrong": [187, 388], "x": 229, "x86_64": 384, "xor": [175, 344, 418], "y": [229, 388, 1016, 1018], "yeast": 287, "yep": 382, "yhat": 1029, "you": [160, 388], "your": [378, 381, 1005], "zero": 1005, "zero_one_loss": 800, "zopa": 1029}})